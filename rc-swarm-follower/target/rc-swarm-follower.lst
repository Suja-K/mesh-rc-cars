
/Users/bsatrom/Development/particle/rc-mesh/rc-swarm-follower/target/rc-swarm-follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e18  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016ed8  2**0
                  CONTENTS
  3 .data         0000007c  2003e340  000d6e30  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000434  2003e3bc  2003e3bc  0001e3bc  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6eac  000d6eac  00016eac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6ed4  000d6ed4  00016ed4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a44cb  00000000  00000000  00016ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f09a  00000000  00000000  000bb3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000148f8  00000000  00000000  000ca43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002088  00000000  00000000  000ded35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003548  00000000  00000000  000e0dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002ff9c  00000000  00000000  000e4305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00022dbb  00000000  00000000  001142a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d372c  00000000  00000000  0013705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bce0  00000000  00000000  0020a788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	c8 68 0d 00                                         .h..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb5c 	bl	d66ea <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb61 	bl	d6700 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e340 	.word	0x2003e340
   d4048:	000d6e30 	.word	0x000d6e30
   d404c:	2003e3bc 	.word	0x2003e3bc
   d4050:	2003e3bc 	.word	0x2003e3bc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f8f5 	bl	d6248 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6e2c 	.word	0x000d6e2c
   d4080:	000d6df8 	.word	0x000d6df8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83a 	b.w	d40fc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ef 	bl	d426c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b8a7 	b.w	d61e4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb85 	b.w	d47a4 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bb83 	b.w	d47a4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb89 	b.w	d47b4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb87 	b.w	d47b4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z6allOffPKcS0_>:
{
  move(rightForward, data);
}

void allOff(const char *event, const char *data)
{
   d40bc:	b508      	push	{r3, lr}
  analogWrite(leftReverse, 0);
   d40be:	4b0b      	ldr	r3, [pc, #44]	; (d40ec <_Z6allOffPKcS0_+0x30>)
   d40c0:	2100      	movs	r1, #0
   d40c2:	8818      	ldrh	r0, [r3, #0]
   d40c4:	f002 f91e 	bl	d6304 <_Z11analogWritetm>
  analogWrite(leftForward, 0);
   d40c8:	4b09      	ldr	r3, [pc, #36]	; (d40f0 <_Z6allOffPKcS0_+0x34>)
   d40ca:	2100      	movs	r1, #0
   d40cc:	8818      	ldrh	r0, [r3, #0]
   d40ce:	f002 f919 	bl	d6304 <_Z11analogWritetm>
  analogWrite(rightReverse, 0);
   d40d2:	4b08      	ldr	r3, [pc, #32]	; (d40f4 <_Z6allOffPKcS0_+0x38>)
   d40d4:	2100      	movs	r1, #0
   d40d6:	8818      	ldrh	r0, [r3, #0]
   d40d8:	f002 f914 	bl	d6304 <_Z11analogWritetm>
  analogWrite(rightForward, 0);
   d40dc:	4b06      	ldr	r3, [pc, #24]	; (d40f8 <_Z6allOffPKcS0_+0x3c>)
   d40de:	2100      	movs	r1, #0
   d40e0:	8818      	ldrh	r0, [r3, #0]
}
   d40e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void allOff(const char *event, const char *data)
{
  analogWrite(leftReverse, 0);
  analogWrite(leftForward, 0);
  analogWrite(rightReverse, 0);
  analogWrite(rightForward, 0);
   d40e6:	f002 b90d 	b.w	d6304 <_Z11analogWritetm>
   d40ea:	bf00      	nop
   d40ec:	2003e34c 	.word	0x2003e34c
   d40f0:	2003e348 	.word	0x2003e348
   d40f4:	2003e344 	.word	0x2003e344
   d40f8:	2003e340 	.word	0x2003e340

000d40fc <setup>:
int32_t rightReverse = A3;

String version = "v1.2";

void setup()
{
   d40fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(leftReverse, OUTPUT);
   d40fe:	4f34      	ldr	r7, [pc, #208]	; (d41d0 <setup+0xd4>)
  pinMode(leftForward, OUTPUT);
   d4100:	4e34      	ldr	r6, [pc, #208]	; (d41d4 <setup+0xd8>)

String version = "v1.2";

void setup()
{
  pinMode(leftReverse, OUTPUT);
   d4102:	8838      	ldrh	r0, [r7, #0]
  pinMode(leftForward, OUTPUT);
  pinMode(rightForward, OUTPUT);
   d4104:	4d34      	ldr	r5, [pc, #208]	; (d41d8 <setup+0xdc>)
  pinMode(rightReverse, OUTPUT);
   d4106:	4c35      	ldr	r4, [pc, #212]	; (d41dc <setup+0xe0>)
int32_t rightReverse = A3;

String version = "v1.2";

void setup()
{
   d4108:	b085      	sub	sp, #20
  pinMode(leftReverse, OUTPUT);
   d410a:	2101      	movs	r1, #1
   d410c:	f002 f8d0 	bl	d62b0 <pinMode>
  pinMode(leftForward, OUTPUT);
   d4110:	2101      	movs	r1, #1
   d4112:	8830      	ldrh	r0, [r6, #0]
   d4114:	f002 f8cc 	bl	d62b0 <pinMode>
  pinMode(rightForward, OUTPUT);
   d4118:	2101      	movs	r1, #1
   d411a:	8828      	ldrh	r0, [r5, #0]
   d411c:	f002 f8c8 	bl	d62b0 <pinMode>
  pinMode(rightReverse, OUTPUT);
   d4120:	8820      	ldrh	r0, [r4, #0]
   d4122:	2101      	movs	r1, #1
   d4124:	f002 f8c4 	bl	d62b0 <pinMode>

  digitalWrite(leftReverse, LOW);
   d4128:	2100      	movs	r1, #0
   d412a:	8838      	ldrh	r0, [r7, #0]
   d412c:	f002 f8d1 	bl	d62d2 <digitalWrite>
  digitalWrite(leftForward, LOW);
   d4130:	2100      	movs	r1, #0
   d4132:	8830      	ldrh	r0, [r6, #0]
   d4134:	f002 f8cd 	bl	d62d2 <digitalWrite>
  digitalWrite(rightForward, LOW);
   d4138:	2100      	movs	r1, #0
   d413a:	8828      	ldrh	r0, [r5, #0]
   d413c:	f002 f8c9 	bl	d62d2 <digitalWrite>
  digitalWrite(rightReverse, LOW);
   d4140:	8820      	ldrh	r0, [r4, #0]
   d4142:	2100      	movs	r1, #0
   d4144:	f002 f8c5 	bl	d62d2 <digitalWrite>
   d4148:	4b25      	ldr	r3, [pc, #148]	; (d41e0 <setup+0xe4>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d414a:	4926      	ldr	r1, [pc, #152]	; (d41e4 <setup+0xe8>)
   d414c:	681a      	ldr	r2, [r3, #0]
   d414e:	4b26      	ldr	r3, [pc, #152]	; (d41e8 <setup+0xec>)
   d4150:	781b      	ldrb	r3, [r3, #0]
   d4152:	f88d 3000 	strb.w	r3, [sp]
   d4156:	a802      	add	r0, sp, #8
   d4158:	233c      	movs	r3, #60	; 0x3c
   d415a:	f000 fcb3 	bl	d4ac4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d415e:	9c03      	ldr	r4, [sp, #12]
   d4160:	b17c      	cbz	r4, d4182 <setup+0x86>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4162:	6863      	ldr	r3, [r4, #4]
   d4164:	3b01      	subs	r3, #1
   d4166:	6063      	str	r3, [r4, #4]
   d4168:	b95b      	cbnz	r3, d4182 <setup+0x86>
        {
          _M_dispose();
   d416a:	6823      	ldr	r3, [r4, #0]
   d416c:	4620      	mov	r0, r4
   d416e:	689b      	ldr	r3, [r3, #8]
   d4170:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4172:	68a3      	ldr	r3, [r4, #8]
   d4174:	3b01      	subs	r3, #1
   d4176:	60a3      	str	r3, [r4, #8]
   d4178:	b91b      	cbnz	r3, d4182 <setup+0x86>
            _M_destroy();
   d417a:	6823      	ldr	r3, [r4, #0]
   d417c:	4620      	mov	r0, r4
   d417e:	68db      	ldr	r3, [r3, #12]
   d4180:	4798      	blx	r3

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d4182:	2308      	movs	r3, #8
   d4184:	f8ad 3008 	strh.w	r3, [sp, #8]
        extra.update = update_string_variable;
   d4188:	4b18      	ldr	r3, [pc, #96]	; (d41ec <setup+0xf0>)
   d418a:	9303      	str	r3, [sp, #12]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d418c:	2204      	movs	r2, #4
   d418e:	ab02      	add	r3, sp, #8
   d4190:	4913      	ldr	r1, [pc, #76]	; (d41e0 <setup+0xe4>)
   d4192:	4817      	ldr	r0, [pc, #92]	; (d41f0 <setup+0xf4>)
   d4194:	f000 fa9e 	bl	d46d4 <spark_variable>

  Particle.publish("swarm-follower-online", version);
  Particle.variable("fw-version", version);

  Mesh.subscribe("leftR", leftR);
   d4198:	4a16      	ldr	r2, [pc, #88]	; (d41f4 <setup+0xf8>)
   d419a:	4917      	ldr	r1, [pc, #92]	; (d41f8 <setup+0xfc>)
   d419c:	4817      	ldr	r0, [pc, #92]	; (d41fc <setup+0x100>)
   d419e:	f001 f8bd 	bl	d531c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("leftF", leftF);
   d41a2:	4a17      	ldr	r2, [pc, #92]	; (d4200 <setup+0x104>)
   d41a4:	4917      	ldr	r1, [pc, #92]	; (d4204 <setup+0x108>)
   d41a6:	4815      	ldr	r0, [pc, #84]	; (d41fc <setup+0x100>)
   d41a8:	f001 f8b8 	bl	d531c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("rightR", rightR);
   d41ac:	4a16      	ldr	r2, [pc, #88]	; (d4208 <setup+0x10c>)
   d41ae:	4917      	ldr	r1, [pc, #92]	; (d420c <setup+0x110>)
   d41b0:	4812      	ldr	r0, [pc, #72]	; (d41fc <setup+0x100>)
   d41b2:	f001 f8b3 	bl	d531c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("rightF", rightF);
   d41b6:	4a16      	ldr	r2, [pc, #88]	; (d4210 <setup+0x114>)
   d41b8:	4916      	ldr	r1, [pc, #88]	; (d4214 <setup+0x118>)
   d41ba:	4810      	ldr	r0, [pc, #64]	; (d41fc <setup+0x100>)
   d41bc:	f001 f8ae 	bl	d531c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("allOff", allOff);
   d41c0:	4a15      	ldr	r2, [pc, #84]	; (d4218 <setup+0x11c>)
   d41c2:	4916      	ldr	r1, [pc, #88]	; (d421c <setup+0x120>)
   d41c4:	480d      	ldr	r0, [pc, #52]	; (d41fc <setup+0x100>)
   d41c6:	f001 f8a9 	bl	d531c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
}
   d41ca:	b005      	add	sp, #20
   d41cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41ce:	bf00      	nop
   d41d0:	2003e34c 	.word	0x2003e34c
   d41d4:	2003e348 	.word	0x2003e348
   d41d8:	2003e340 	.word	0x2003e340
   d41dc:	2003e344 	.word	0x2003e344
   d41e0:	2003e3c4 	.word	0x2003e3c4
   d41e4:	000d68dc 	.word	0x000d68dc
   d41e8:	2003e3c0 	.word	0x2003e3c0
   d41ec:	000d40b7 	.word	0x000d40b7
   d41f0:	000d68f2 	.word	0x000d68f2
   d41f4:	000d423d 	.word	0x000d423d
   d41f8:	000d68fd 	.word	0x000d68fd
   d41fc:	2003e3e8 	.word	0x2003e3e8
   d4200:	000d4249 	.word	0x000d4249
   d4204:	000d6903 	.word	0x000d6903
   d4208:	000d4255 	.word	0x000d4255
   d420c:	000d6909 	.word	0x000d6909
   d4210:	000d4261 	.word	0x000d4261
   d4214:	000d6910 	.word	0x000d6910
   d4218:	000d40bd 	.word	0x000d40bd
   d421c:	000d6917 	.word	0x000d6917

000d4220 <_Z4moveiPKc>:
  analogWrite(rightReverse, 0);
  analogWrite(rightForward, 0);
}

void move(int pin, const char *speed)
{
   d4220:	b510      	push	{r4, lr}
   d4222:	4604      	mov	r4, r0
  int32_t speedVal = atoi(speed);
   d4224:	4608      	mov	r0, r1
   d4226:	f002 fa3f 	bl	d66a8 <atoi>

  if (speedVal > 16)
   d422a:	2810      	cmp	r0, #16
  analogWrite(rightForward, 0);
}

void move(int pin, const char *speed)
{
  int32_t speedVal = atoi(speed);
   d422c:	4601      	mov	r1, r0
   d422e:	b2a0      	uxth	r0, r4
  {
    analogWrite(pin, speedVal);
  }
  else
  {
    analogWrite(pin, 0);
   d4230:	bfd8      	it	le
   d4232:	2100      	movle	r1, #0
  }
}
   d4234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    analogWrite(pin, speedVal);
  }
  else
  {
    analogWrite(pin, 0);
   d4238:	f002 b864 	b.w	d6304 <_Z11analogWritetm>

000d423c <_Z5leftRPKcS0_>:
  Mesh.subscribe("allOff", allOff);
}

void leftR(const char *event, const char *data)
{
  move(leftReverse, data);
   d423c:	4b01      	ldr	r3, [pc, #4]	; (d4244 <_Z5leftRPKcS0_+0x8>)
   d423e:	6818      	ldr	r0, [r3, #0]
   d4240:	f7ff bfee 	b.w	d4220 <_Z4moveiPKc>
   d4244:	2003e34c 	.word	0x2003e34c

000d4248 <_Z5leftFPKcS0_>:
}

void leftF(const char *event, const char *data)
{
  move(leftForward, data);
   d4248:	4b01      	ldr	r3, [pc, #4]	; (d4250 <_Z5leftFPKcS0_+0x8>)
   d424a:	6818      	ldr	r0, [r3, #0]
   d424c:	f7ff bfe8 	b.w	d4220 <_Z4moveiPKc>
   d4250:	2003e348 	.word	0x2003e348

000d4254 <_Z6rightRPKcS0_>:
}

void rightR(const char *event, const char *data)
{
  move(rightReverse, data);
   d4254:	4b01      	ldr	r3, [pc, #4]	; (d425c <_Z6rightRPKcS0_+0x8>)
   d4256:	6818      	ldr	r0, [r3, #0]
   d4258:	f7ff bfe2 	b.w	d4220 <_Z4moveiPKc>
   d425c:	2003e344 	.word	0x2003e344

000d4260 <_Z6rightFPKcS0_>:
}

void rightF(const char *event, const char *data)
{
  move(rightForward, data);
   d4260:	4b01      	ldr	r3, [pc, #4]	; (d4268 <_Z6rightFPKcS0_+0x8>)
   d4262:	6818      	ldr	r0, [r3, #0]
   d4264:	f7ff bfdc 	b.w	d4220 <_Z4moveiPKc>
   d4268:	2003e340 	.word	0x2003e340

000d426c <loop>:
    analogWrite(pin, 0);
  }
}

void loop()
{
   d426c:	4770      	bx	lr
	...

000d4270 <_GLOBAL__sub_I_leftReverse>:
  // Nothing to see here. Just doing what the leader tells us to do
   d4270:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4272:	4b08      	ldr	r3, [pc, #32]	; (d4294 <_GLOBAL__sub_I_leftReverse+0x24>)
int32_t leftReverse = A0;
int32_t leftForward = A1;
int32_t rightForward = A2;
int32_t rightReverse = A3;

String version = "v1.2";
   d4274:	4c08      	ldr	r4, [pc, #32]	; (d4298 <_GLOBAL__sub_I_leftReverse+0x28>)
   d4276:	2200      	movs	r2, #0
   d4278:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d427a:	f000 f86d 	bl	d4358 <HAL_Pin_Map>
   d427e:	4907      	ldr	r1, [pc, #28]	; (d429c <_GLOBAL__sub_I_leftReverse+0x2c>)
   d4280:	4620      	mov	r0, r4
   d4282:	f001 faa2 	bl	d57ca <_ZN6StringC1EPK19__FlashStringHelper>
   d4286:	4620      	mov	r0, r4
   d4288:	4a05      	ldr	r2, [pc, #20]	; (d42a0 <_GLOBAL__sub_I_leftReverse+0x30>)
   d428a:	4906      	ldr	r1, [pc, #24]	; (d42a4 <_GLOBAL__sub_I_leftReverse+0x34>)
}

void loop()
{
  // Nothing to see here. Just doing what the leader tells us to do
   d428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int32_t leftReverse = A0;
int32_t leftForward = A1;
int32_t rightForward = A2;
int32_t rightReverse = A3;

String version = "v1.2";
   d4290:	f002 b8a0 	b.w	d63d4 <__aeabi_atexit>
   d4294:	2003e3c0 	.word	0x2003e3c0
   d4298:	2003e3c4 	.word	0x2003e3c4
   d429c:	000d691e 	.word	0x000d691e
   d42a0:	2003e3bc 	.word	0x2003e3bc
   d42a4:	000d573d 	.word	0x000d573d

000d42a8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <os_thread_create+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	685b      	ldr	r3, [r3, #4]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	00030248 	.word	0x00030248

000d42b8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <os_thread_is_current+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	689b      	ldr	r3, [r3, #8]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030248 	.word	0x00030248

000d42c8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <os_thread_join+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	691b      	ldr	r3, [r3, #16]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030248 	.word	0x00030248

000d42d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <os_thread_cleanup+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	695b      	ldr	r3, [r3, #20]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030248 	.word	0x00030248

000d42e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <os_mutex_create+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030248 	.word	0x00030248

000d42f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <os_mutex_recursive_create+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030248 	.word	0x00030248

000d4308 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <os_mutex_recursive_lock+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030248 	.word	0x00030248

000d4318 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <os_mutex_recursive_unlock+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030248 	.word	0x00030248

000d4328 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <os_thread_exit+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030248 	.word	0x00030248

000d4338 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <HAL_Delay_Milliseconds+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	689b      	ldr	r3, [r3, #8]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030218 	.word	0x00030218

000d4348 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	695b      	ldr	r3, [r3, #20]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030218 	.word	0x00030218

000d4358 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_Pin_Map+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	681b      	ldr	r3, [r3, #0]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003022c 	.word	0x0003022c

000d4368 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_Validate_Pin_Function+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	685b      	ldr	r3, [r3, #4]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003022c 	.word	0x0003022c

000d4378 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_Pin_Mode+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	689b      	ldr	r3, [r3, #8]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003022c 	.word	0x0003022c

000d4388 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_Get_Pin_Mode+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	68db      	ldr	r3, [r3, #12]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003022c 	.word	0x0003022c

000d4398 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_GPIO_Write+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	691b      	ldr	r3, [r3, #16]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003022c 	.word	0x0003022c

000d43a8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_DAC_Write+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003022c 	.word	0x0003022c

000d43b8 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_PWM_Write_Ext+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003022c 	.word	0x0003022c

000d43c8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_I2C_Write_Data+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a1b      	ldr	r3, [r3, #32]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030228 	.word	0x00030228

000d43d8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_I2C_Available_Data+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030228 	.word	0x00030228

000d43e8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_I2C_Read_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030228 	.word	0x00030228

000d43f8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_I2C_Peek_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030228 	.word	0x00030228

000d4408 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_I2C_Flush_Data+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030228 	.word	0x00030228

000d4418 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_I2C_Is_Enabled+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030228 	.word	0x00030228

000d4428 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_I2C_Init+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030228 	.word	0x00030228

000d4438 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <if_name_to_index+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	691b      	ldr	r3, [r3, #16]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003026c 	.word	0x0003026c

000d4448 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <if_index_to_name+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	695b      	ldr	r3, [r3, #20]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003026c 	.word	0x0003026c

000d4458 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <if_get_by_index+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	699b      	ldr	r3, [r3, #24]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003026c 	.word	0x0003026c

000d4468 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <if_get_addrs+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003026c 	.word	0x0003026c

000d4478 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <if_free_if_addrs+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003026c 	.word	0x0003026c

000d4488 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <inet_inet_ntop+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030264 	.word	0x00030264

000d4498 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <inet_inet_pton+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	699b      	ldr	r3, [r3, #24]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030264 	.word	0x00030264

000d44a8 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <inet_htonl+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6a1b      	ldr	r3, [r3, #32]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030264 	.word	0x00030264

000d44b8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <inet_ntohs+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030264 	.word	0x00030264

000d44c8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <inet_htons+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030264 	.word	0x00030264

000d44d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <netdb_freeaddrinfo+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	689b      	ldr	r3, [r3, #8]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030268 	.word	0x00030268

000d44e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <netdb_getaddrinfo+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	68db      	ldr	r3, [r3, #12]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030268 	.word	0x00030268

000d44f8 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <sock_bind+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	685b      	ldr	r3, [r3, #4]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030238 	.word	0x00030238

000d4508 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <sock_setsockopt+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	699b      	ldr	r3, [r3, #24]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030238 	.word	0x00030238

000d4518 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <sock_close+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	69db      	ldr	r3, [r3, #28]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030238 	.word	0x00030238

000d4528 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <sock_recvfrom+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030238 	.word	0x00030238

000d4538 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <sock_sendto+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030238 	.word	0x00030238

000d4548 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <sock_socket+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030238 	.word	0x00030238

000d4558 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_SPI_Init+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	69db      	ldr	r3, [r3, #28]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030230 	.word	0x00030230

000d4568 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_SPI_Is_Enabled+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a1b      	ldr	r3, [r3, #32]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030230 	.word	0x00030230

000d4578 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_USART_Init+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	681b      	ldr	r3, [r3, #0]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	0003023c 	.word	0x0003023c

000d4588 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_USART_Write_Data+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	68db      	ldr	r3, [r3, #12]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	0003023c 	.word	0x0003023c

000d4598 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_USART_Available_Data+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	691b      	ldr	r3, [r3, #16]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	0003023c 	.word	0x0003023c

000d45a8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_USART_Read_Data+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	695b      	ldr	r3, [r3, #20]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003023c 	.word	0x0003023c

000d45b8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_USART_Peek_Data+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	699b      	ldr	r3, [r3, #24]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	0003023c 	.word	0x0003023c

000d45c8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_USART_Flush_Data+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	69db      	ldr	r3, [r3, #28]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003023c 	.word	0x0003023c

000d45d8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_USART_Is_Enabled+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	6a1b      	ldr	r3, [r3, #32]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003023c 	.word	0x0003023c

000d45e8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_USART_Available_Data_For_Write+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003023c 	.word	0x0003023c

000d45f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USB_USART_Init+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	681b      	ldr	r3, [r3, #0]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003024c 	.word	0x0003024c

000d4608 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USB_USART_Available_Data+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	691b      	ldr	r3, [r3, #16]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003024c 	.word	0x0003024c

000d4618 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	695b      	ldr	r3, [r3, #20]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003024c 	.word	0x0003024c

000d4628 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USB_USART_Receive_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	699b      	ldr	r3, [r3, #24]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003024c 	.word	0x0003024c

000d4638 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USB_USART_Send_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	69db      	ldr	r3, [r3, #28]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003024c 	.word	0x0003024c

000d4648 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USB_USART_Flush_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6a1b      	ldr	r3, [r3, #32]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003024c 	.word	0x0003024c

000d4658 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <log_message+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030260 	.word	0x00030260

000d4668 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <set_system_mode+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	685b      	ldr	r3, [r3, #4]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030220 	.word	0x00030220

000d4678 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <application_thread_current+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030220 	.word	0x00030220

000d4688 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <application_thread_invoke+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030220 	.word	0x00030220

000d4698 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b03      	ldr	r3, [pc, #12]	; (d46a8 <system_ctrl_set_app_request_handler+0x10>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46a2:	9301      	str	r3, [sp, #4]
   d46a4:	bd08      	pop	{r3, pc}
   d46a6:	0000      	.short	0x0000
   d46a8:	00030220 	.word	0x00030220

000d46ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b03      	ldr	r3, [pc, #12]	; (d46bc <system_ctrl_set_result+0x10>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46b6:	9301      	str	r3, [sp, #4]
   d46b8:	bd08      	pop	{r3, pc}
   d46ba:	0000      	.short	0x0000
   d46bc:	00030220 	.word	0x00030220

000d46c0 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int32_t(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b03      	ldr	r3, [pc, #12]	; (d46d0 <system_invoke_event_handler+0x10>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d46ca:	9301      	str	r3, [sp, #4]
   d46cc:	bd08      	pop	{r3, pc}
   d46ce:	0000      	.short	0x0000
   d46d0:	00030220 	.word	0x00030220

000d46d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <spark_variable+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	681b      	ldr	r3, [r3, #0]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030244 	.word	0x00030244

000d46e4 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <spark_send_event+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a1b      	ldr	r3, [r3, #32]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030244 	.word	0x00030244

000d46f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030244 	.word	0x00030244

000d4704 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <network_connect+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030240 	.word	0x00030240

000d4714 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <network_connecting+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	689b      	ldr	r3, [r3, #8]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030240 	.word	0x00030240

000d4724 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <network_disconnect+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	68db      	ldr	r3, [r3, #12]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030240 	.word	0x00030240

000d4734 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <network_ready+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	691b      	ldr	r3, [r3, #16]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030240 	.word	0x00030240

000d4744 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <network_on+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	695b      	ldr	r3, [r3, #20]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030240 	.word	0x00030240

000d4754 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <network_off+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	699b      	ldr	r3, [r3, #24]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030240 	.word	0x00030240

000d4764 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <network_listen+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	69db      	ldr	r3, [r3, #28]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030240 	.word	0x00030240

000d4774 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <network_listening+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6a1b      	ldr	r3, [r3, #32]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030240 	.word	0x00030240

000d4784 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <network_set_listen_timeout+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030240 	.word	0x00030240

000d4794 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <network_get_listen_timeout+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030240 	.word	0x00030240

000d47a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <malloc+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	681b      	ldr	r3, [r3, #0]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003021c 	.word	0x0003021c

000d47b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <free+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	685b      	ldr	r3, [r3, #4]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003021c 	.word	0x0003021c

000d47c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <realloc+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	689b      	ldr	r3, [r3, #8]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003021c 	.word	0x0003021c

000d47d4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <abort+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003021c 	.word	0x0003021c

000d47e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <_malloc_r+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003021c 	.word	0x0003021c

000d47f4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d47f4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d47f6:	6883      	ldr	r3, [r0, #8]
   d47f8:	4604      	mov	r4, r0
   d47fa:	b90b      	cbnz	r3, d4800 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d47fc:	f001 fe09 	bl	d6412 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4800:	68c3      	ldr	r3, [r0, #12]
   d4802:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4804:	68a3      	ldr	r3, [r4, #8]
   d4806:	b11b      	cbz	r3, d4810 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4808:	2203      	movs	r2, #3
   d480a:	4621      	mov	r1, r4
   d480c:	4620      	mov	r0, r4
   d480e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4810:	4620      	mov	r0, r4
}
   d4812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4816:	f7ff bc42 	b.w	d409e <_ZdlPv>

000d481a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d481a:	4770      	bx	lr

000d481c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d481c:	2000      	movs	r0, #0
   d481e:	4770      	bx	lr

000d4820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4820:	b510      	push	{r4, lr}
   d4822:	4604      	mov	r4, r0
   d4824:	f7ff fc3b 	bl	d409e <_ZdlPv>
   d4828:	4620      	mov	r0, r4
   d482a:	bd10      	pop	{r4, pc}

000d482c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d482c:	b508      	push	{r3, lr}
      { delete this; }
   d482e:	b108      	cbz	r0, d4834 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4830:	f7ff fff6 	bl	d4820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4834:	bd08      	pop	{r3, pc}

000d4836 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4836:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4838:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d483a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d483c:	b113      	cbz	r3, d4844 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d483e:	2203      	movs	r2, #3
   d4840:	4601      	mov	r1, r0
   d4842:	4798      	blx	r3
    }
   d4844:	4620      	mov	r0, r4
   d4846:	bd10      	pop	{r4, pc}

000d4848 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4848:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d484a:	68c4      	ldr	r4, [r0, #12]
   d484c:	b1d4      	cbz	r4, d4884 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d484e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4850:	2b02      	cmp	r3, #2
   d4852:	d102      	bne.n	d485a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4854:	68e0      	ldr	r0, [r4, #12]
   d4856:	f7ff ffad 	bl	d47b4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d485a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d485c:	b12d      	cbz	r5, d486a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d485e:	4628      	mov	r0, r5
   d4860:	f7ff ffe9 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
   d4864:	4628      	mov	r0, r5
   d4866:	f7ff fc1a 	bl	d409e <_ZdlPv>
   d486a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d486c:	b12d      	cbz	r5, d487a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d486e:	4628      	mov	r0, r5
   d4870:	f7ff ffe1 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
   d4874:	4628      	mov	r0, r5
   d4876:	f7ff fc12 	bl	d409e <_ZdlPv>
   d487a:	4620      	mov	r0, r4
   d487c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4880:	f7ff bc0d 	b.w	d409e <_ZdlPv>
   d4884:	bd38      	pop	{r3, r4, r5, pc}

000d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4886:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4888:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d488a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d488c:	b17c      	cbz	r4, d48ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d488e:	6863      	ldr	r3, [r4, #4]
   d4890:	3b01      	subs	r3, #1
   d4892:	6063      	str	r3, [r4, #4]
   d4894:	b95b      	cbnz	r3, d48ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4896:	6823      	ldr	r3, [r4, #0]
   d4898:	4620      	mov	r0, r4
   d489a:	689b      	ldr	r3, [r3, #8]
   d489c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d489e:	68a3      	ldr	r3, [r4, #8]
   d48a0:	3b01      	subs	r3, #1
   d48a2:	60a3      	str	r3, [r4, #8]
   d48a4:	b91b      	cbnz	r3, d48ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d48a6:	6823      	ldr	r3, [r4, #0]
   d48a8:	4620      	mov	r0, r4
   d48aa:	68db      	ldr	r3, [r3, #12]
   d48ac:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48ae:	4628      	mov	r0, r5
   d48b0:	bd38      	pop	{r3, r4, r5, pc}

000d48b2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d48b2:	b513      	push	{r0, r1, r4, lr}
   d48b4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d48b6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d48ba:	2300      	movs	r3, #0
   d48bc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48be:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d48c0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d48c2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48c4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d48c6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48c8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48ca:	f7ff ffdc 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48ce:	4620      	mov	r0, r4
   d48d0:	b002      	add	sp, #8
   d48d2:	bd10      	pop	{r4, pc}

000d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48d4:	680b      	ldr	r3, [r1, #0]
   d48d6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48d8:	b113      	cbz	r3, d48e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d48da:	685a      	ldr	r2, [r3, #4]
   d48dc:	3201      	adds	r2, #1
   d48de:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d48e0:	4770      	bx	lr

000d48e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d48e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48e4:	460c      	mov	r4, r1
   d48e6:	ad02      	add	r5, sp, #8
   d48e8:	f854 3b04 	ldr.w	r3, [r4], #4
   d48ec:	f845 3d08 	str.w	r3, [r5, #-8]!
   d48f0:	4606      	mov	r6, r0
   d48f2:	460f      	mov	r7, r1
   d48f4:	a801      	add	r0, sp, #4
   d48f6:	4621      	mov	r1, r4
   d48f8:	f7ff ffec 	bl	d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d48fc:	4629      	mov	r1, r5
   d48fe:	4630      	mov	r0, r6
   d4900:	f7ff ffd7 	bl	d48b2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4904:	a801      	add	r0, sp, #4
   d4906:	f7ff ffbe 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d490a:	4620      	mov	r0, r4
   d490c:	f7ff ffbb 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4910:	4638      	mov	r0, r7
   d4912:	f7ff fbc4 	bl	d409e <_ZdlPv>
        return p;
    }
   d4916:	4630      	mov	r0, r6
   d4918:	b003      	add	sp, #12
   d491a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d491c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d491c:	b513      	push	{r0, r1, r4, lr}
   d491e:	460b      	mov	r3, r1
   d4920:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4922:	c803      	ldmia	r0, {r0, r1}
   d4924:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4928:	e893 0003 	ldmia.w	r3, {r0, r1}
   d492c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4930:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4934:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4938:	b002      	add	sp, #8
   d493a:	bd10      	pop	{r4, pc}

000d493c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d493c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d493e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4940:	b90a      	cbnz	r2, d4946 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4942:	f001 fd66 	bl	d6412 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4946:	68c3      	ldr	r3, [r0, #12]
    }
   d4948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d494c:	4718      	bx	r3

000d494e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d494e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4950:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4952:	f100 0110 	add.w	r1, r0, #16
   d4956:	f7ff fff1 	bl	d493c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d495a:	bd08      	pop	{r3, pc}

000d495c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d495c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d495e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4960:	b90a      	cbnz	r2, d4966 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4962:	f001 fd56 	bl	d6412 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4966:	68c3      	ldr	r3, [r0, #12]
    }
   d4968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d496c:	4718      	bx	r3

000d496e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d496e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4970:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4972:	f100 0110 	add.w	r1, r0, #16
   d4976:	f7ff fff1 	bl	d495c <_ZNKSt8functionIFvRKbEEclES1_>
   d497a:	bd08      	pop	{r3, pc}

000d497c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d497c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d497e:	2300      	movs	r3, #0
   d4980:	6083      	str	r3, [r0, #8]
   d4982:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4984:	4604      	mov	r4, r0
   d4986:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4988:	b12b      	cbz	r3, d4996 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d498a:	2202      	movs	r2, #2
   d498c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d498e:	68eb      	ldr	r3, [r5, #12]
   d4990:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4992:	68ab      	ldr	r3, [r5, #8]
   d4994:	60a3      	str	r3, [r4, #8]
	}
    }
   d4996:	4620      	mov	r0, r4
   d4998:	bd38      	pop	{r3, r4, r5, pc}
	...

000d499c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d49a0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d49a4:	b086      	sub	sp, #24
   d49a6:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49a8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d49ac:	808b      	strh	r3, [r1, #4]
   d49ae:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49b0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d49b2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d49b6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d49b8:	f04f 0002 	mov.w	r0, #2
   d49bc:	e8d4 1f4f 	ldrexb	r1, [r4]
   d49c0:	4299      	cmp	r1, r3
   d49c2:	d103      	bne.n	d49cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d49c4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d49c8:	2d00      	cmp	r5, #0
   d49ca:	d1f7      	bne.n	d49bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d49cc:	d002      	beq.n	d49d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d49ce:	f88d 1000 	strb.w	r1, [sp]
   d49d2:	e06a      	b.n	d4aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d49d4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49d8:	bf1e      	ittt	ne
   d49da:	60e7      	strne	r7, [r4, #12]
   d49dc:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d49de:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d49e0:	2301      	movs	r3, #1
   d49e2:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d49e6:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d49e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d49ea:	f104 0308 	add.w	r3, r4, #8
   d49ee:	f3bf 8f5f 	dmb	sy
   d49f2:	e853 6f00 	ldrex	r6, [r3]
   d49f6:	e843 0200 	strex	r2, r0, [r3]
   d49fa:	2a00      	cmp	r2, #0
   d49fc:	d1f9      	bne.n	d49f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d49fe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4a02:	2e00      	cmp	r6, #0
   d4a04:	d051      	beq.n	d4aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4a06:	f7ff fe37 	bl	d4678 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4a0a:	b120      	cbz	r0, d4a16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4a0c:	4629      	mov	r1, r5
   d4a0e:	4630      	mov	r0, r6
   d4a10:	f7ff ff94 	bl	d493c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a14:	e043      	b.n	d4a9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4a16:	4631      	mov	r1, r6
   d4a18:	4668      	mov	r0, sp
   d4a1a:	f7ff ffaf 	bl	d497c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4a1e:	68e0      	ldr	r0, [r4, #12]
   d4a20:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4a24:	b108      	cbz	r0, d4a2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4a26:	f001 fe7b 	bl	d6720 <strdup>
   d4a2a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4a2c:	2010      	movs	r0, #16
   d4a2e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4a32:	f7ff fb30 	bl	d4096 <_Znwj>
   d4a36:	4605      	mov	r5, r0
   d4a38:	b330      	cbz	r0, d4a88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a3a:	f04f 0800 	mov.w	r8, #0
   d4a3e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a42:	2018      	movs	r0, #24
   d4a44:	f7ff fb27 	bl	d4096 <_Znwj>
   d4a48:	4604      	mov	r4, r0
   d4a4a:	b1c0      	cbz	r0, d4a7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a4c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4a50:	4601      	mov	r1, r0
   d4a52:	4668      	mov	r0, sp
   d4a54:	f7ff ff62 	bl	d491c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a58:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4a5a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a5c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a5e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4a60:	9202      	str	r2, [sp, #8]
   d4a62:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a64:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4a6a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4a70:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a74:	9b04      	ldr	r3, [sp, #16]
   d4a76:	9203      	str	r2, [sp, #12]
   d4a78:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a7a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4a7e:	4b0e      	ldr	r3, [pc, #56]	; (d4ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4a80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4a82:	4b0e      	ldr	r3, [pc, #56]	; (d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a84:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4a86:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4a88:	9804      	ldr	r0, [sp, #16]
   d4a8a:	f7ff fe93 	bl	d47b4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a8e:	4668      	mov	r0, sp
   d4a90:	f7ff fed1 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4a94:	2200      	movs	r2, #0
   d4a96:	4629      	mov	r1, r5
   d4a98:	4809      	ldr	r0, [pc, #36]	; (d4ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4a9a:	f7ff fdf5 	bl	d4688 <application_thread_invoke>
   d4a9e:	4630      	mov	r0, r6
   d4aa0:	f7ff fec9 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4aa4:	4630      	mov	r0, r6
   d4aa6:	f7ff fafa 	bl	d409e <_ZdlPv>
   d4aaa:	4638      	mov	r0, r7
   d4aac:	f7ff fe82 	bl	d47b4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4ab0:	b006      	add	sp, #24
   d4ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ab6:	bf00      	nop
   d4ab8:	000d494f 	.word	0x000d494f
   d4abc:	000d4bad 	.word	0x000d4bad
   d4ac0:	000d47f5 	.word	0x000d47f5

000d4ac4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ac8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4aca:	ad07      	add	r5, sp, #28
   d4acc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ad0:	4606      	mov	r6, r0
   d4ad2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4ad4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ad6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ad8:	460f      	mov	r7, r1
   d4ada:	4690      	mov	r8, r2
   d4adc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ae0:	f8c5 b004 	str.w	fp, [r5, #4]
   d4ae4:	f8c5 b008 	str.w	fp, [r5, #8]
   d4ae8:	9307      	str	r3, [sp, #28]
   d4aea:	f7ff fad4 	bl	d4096 <_Znwj>
   d4aee:	4604      	mov	r4, r0
   d4af0:	b138      	cbz	r0, d4b02 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4af2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4af6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4afa:	f8c0 b004 	str.w	fp, [r0, #4]
   d4afe:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b02:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b04:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4b06:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b08:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b0a:	f7ff fac4 	bl	d4096 <_Znwj>
   d4b0e:	b128      	cbz	r0, d4b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4b10:	2301      	movs	r3, #1
   d4b12:	6043      	str	r3, [r0, #4]
   d4b14:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4b16:	4b23      	ldr	r3, [pc, #140]	; (d4ba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4b18:	6003      	str	r3, [r0, #0]
   d4b1a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b1c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4b1e:	4b22      	ldr	r3, [pc, #136]	; (d4ba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4b20:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4b22:	2008      	movs	r0, #8
   d4b24:	f7ff fab7 	bl	d4096 <_Znwj>
   d4b28:	4604      	mov	r4, r0
   d4b2a:	b128      	cbz	r0, d4b38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b2c:	9b03      	ldr	r3, [sp, #12]
   d4b2e:	f840 3b04 	str.w	r3, [r0], #4
   d4b32:	a904      	add	r1, sp, #16
   d4b34:	f7ff fece 	bl	d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b38:	9500      	str	r5, [sp, #0]
   d4b3a:	fa5f f38a 	uxtb.w	r3, sl
   d4b3e:	464a      	mov	r2, r9
   d4b40:	4641      	mov	r1, r8
   d4b42:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4b44:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b46:	f7ff fdcd 	bl	d46e4 <spark_send_event>
   d4b4a:	b9b8      	cbnz	r0, d4b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4b4c:	9b03      	ldr	r3, [sp, #12]
   d4b4e:	785b      	ldrb	r3, [r3, #1]
   d4b50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4b54:	b993      	cbnz	r3, d4b7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4b56:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4b5a:	a905      	add	r1, sp, #20
   d4b5c:	a803      	add	r0, sp, #12
   d4b5e:	9205      	str	r2, [sp, #20]
   d4b60:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b64:	f7ff ff1a 	bl	d499c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4b68:	9805      	ldr	r0, [sp, #20]
   d4b6a:	f7ff fe23 	bl	d47b4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4b6e:	a805      	add	r0, sp, #20
   d4b70:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4b72:	f7ff feb6 	bl	d48e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b76:	a806      	add	r0, sp, #24
   d4b78:	f7ff fe85 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b7c:	9b03      	ldr	r3, [sp, #12]
   d4b7e:	9305      	str	r3, [sp, #20]
   d4b80:	a904      	add	r1, sp, #16
   d4b82:	a806      	add	r0, sp, #24
   d4b84:	f7ff fea6 	bl	d48d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4b88:	a905      	add	r1, sp, #20
   d4b8a:	4630      	mov	r0, r6
   d4b8c:	f7ff fe91 	bl	d48b2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b90:	a806      	add	r0, sp, #24
   d4b92:	f7ff fe78 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b96:	a804      	add	r0, sp, #16
   d4b98:	f7ff fe75 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4b9c:	4630      	mov	r0, r6
   d4b9e:	b00b      	add	sp, #44	; 0x2c
   d4ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ba4:	000d692c 	.word	0x000d692c
   d4ba8:	000d4d15 	.word	0x000d4d15

000d4bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4bac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bb0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4bb2:	d006      	beq.n	d4bc2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4bb4:	2a03      	cmp	r2, #3
   d4bb6:	d017      	beq.n	d4be8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4bb8:	2a01      	cmp	r2, #1
   d4bba:	d120      	bne.n	d4bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4bbc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4bbe:	6003      	str	r3, [r0, #0]
	      break;
   d4bc0:	e01d      	b.n	d4bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4bc2:	2018      	movs	r0, #24
   d4bc4:	680e      	ldr	r6, [r1, #0]
   d4bc6:	f7ff fa66 	bl	d4096 <_Znwj>
   d4bca:	4605      	mov	r5, r0
   d4bcc:	b150      	cbz	r0, d4be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4bce:	4631      	mov	r1, r6
   d4bd0:	f7ff fed4 	bl	d497c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bd4:	6930      	ldr	r0, [r6, #16]
   d4bd6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bda:	b108      	cbz	r0, d4be0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4bdc:	f001 fda0 	bl	d6720 <strdup>
   d4be0:	6128      	str	r0, [r5, #16]
   d4be2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4be4:	6025      	str	r5, [r4, #0]
   d4be6:	e00a      	b.n	d4bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4be8:	6804      	ldr	r4, [r0, #0]
   d4bea:	b144      	cbz	r4, d4bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4bec:	6920      	ldr	r0, [r4, #16]
   d4bee:	f7ff fde1 	bl	d47b4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bf2:	4620      	mov	r0, r4
   d4bf4:	f7ff fe1f 	bl	d4836 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	f7ff fa50 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4bfe:	2000      	movs	r0, #0
   d4c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c02 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c02:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c04:	2300      	movs	r3, #0
   d4c06:	6083      	str	r3, [r0, #8]
   d4c08:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c0a:	4604      	mov	r4, r0
   d4c0c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c0e:	b12b      	cbz	r3, d4c1c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c10:	2202      	movs	r2, #2
   d4c12:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c14:	68eb      	ldr	r3, [r5, #12]
   d4c16:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c18:	68ab      	ldr	r3, [r5, #8]
   d4c1a:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	bd38      	pop	{r3, r4, r5, pc}

000d4c20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c20:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c22:	b570      	push	{r4, r5, r6, lr}
   d4c24:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c26:	d006      	beq.n	d4c36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4c28:	2a03      	cmp	r2, #3
   d4c2a:	d011      	beq.n	d4c50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4c2c:	2a01      	cmp	r2, #1
   d4c2e:	d117      	bne.n	d4c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c30:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c32:	6003      	str	r3, [r0, #0]
	      break;
   d4c34:	e014      	b.n	d4c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c36:	2014      	movs	r0, #20
   d4c38:	680e      	ldr	r6, [r1, #0]
   d4c3a:	f7ff fa2c 	bl	d4096 <_Znwj>
   d4c3e:	4605      	mov	r5, r0
   d4c40:	b120      	cbz	r0, d4c4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4c42:	4631      	mov	r1, r6
   d4c44:	f7ff ffdd 	bl	d4c02 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4c48:	7c33      	ldrb	r3, [r6, #16]
   d4c4a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c4c:	6025      	str	r5, [r4, #0]
   d4c4e:	e007      	b.n	d4c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c50:	6804      	ldr	r4, [r0, #0]
   d4c52:	b12c      	cbz	r4, d4c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c54:	4620      	mov	r0, r4
   d4c56:	f7ff fdee 	bl	d4836 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f7ff fa1f 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4c60:	2000      	movs	r0, #0
   d4c62:	bd70      	pop	{r4, r5, r6, pc}

000d4c64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4c64:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4c66:	2300      	movs	r3, #0
   d4c68:	b087      	sub	sp, #28
   d4c6a:	460c      	mov	r4, r1
   d4c6c:	f3bf 8f5f 	dmb	sy
   d4c70:	e850 6f00 	ldrex	r6, [r0]
   d4c74:	e840 3200 	strex	r2, r3, [r0]
   d4c78:	2a00      	cmp	r2, #0
   d4c7a:	d1f9      	bne.n	d4c70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4c7c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4c80:	2e00      	cmp	r6, #0
   d4c82:	d03e      	beq.n	d4d02 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4c84:	4618      	mov	r0, r3
   d4c86:	f7ff fcf7 	bl	d4678 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4c8a:	4607      	mov	r7, r0
   d4c8c:	b120      	cbz	r0, d4c98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c8e:	4621      	mov	r1, r4
   d4c90:	4630      	mov	r0, r6
   d4c92:	f7ff fe63 	bl	d495c <_ZNKSt8functionIFvRKbEEclES1_>
   d4c96:	e02e      	b.n	d4cf6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4c98:	4631      	mov	r1, r6
   d4c9a:	a801      	add	r0, sp, #4
   d4c9c:	f7ff ffb1 	bl	d4c02 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4ca0:	7823      	ldrb	r3, [r4, #0]
   d4ca2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ca6:	2010      	movs	r0, #16
   d4ca8:	f7ff f9f5 	bl	d4096 <_Znwj>
   d4cac:	4605      	mov	r5, r0
   d4cae:	b1d0      	cbz	r0, d4ce6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cb0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cb2:	2014      	movs	r0, #20
   d4cb4:	f7ff f9ef 	bl	d4096 <_Znwj>
   d4cb8:	4604      	mov	r4, r0
   d4cba:	b178      	cbz	r0, d4cdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cbc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4cbe:	4601      	mov	r1, r0
   d4cc0:	a801      	add	r0, sp, #4
   d4cc2:	f7ff fe2b 	bl	d491c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cc6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4cc8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ccc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4cce:	9203      	str	r2, [sp, #12]
   d4cd0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cd2:	60e3      	str	r3, [r4, #12]
   d4cd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4cd8:	9204      	str	r2, [sp, #16]
   d4cda:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4cdc:	4b0a      	ldr	r3, [pc, #40]	; (d4d08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4cde:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ce0:	4b0a      	ldr	r3, [pc, #40]	; (d4d0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ce2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ce4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ce6:	a801      	add	r0, sp, #4
   d4ce8:	f7ff fda5 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4cec:	2200      	movs	r2, #0
   d4cee:	4629      	mov	r1, r5
   d4cf0:	4807      	ldr	r0, [pc, #28]	; (d4d10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4cf2:	f7ff fcc9 	bl	d4688 <application_thread_invoke>
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f7ff fd9d 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4cfc:	4630      	mov	r0, r6
   d4cfe:	f7ff f9ce 	bl	d409e <_ZdlPv>
        }
    }
   d4d02:	b007      	add	sp, #28
   d4d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d06:	bf00      	nop
   d4d08:	000d496f 	.word	0x000d496f
   d4d0c:	000d4c21 	.word	0x000d4c21
   d4d10:	000d47f5 	.word	0x000d47f5

000d4d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4d14:	b530      	push	{r4, r5, lr}
   d4d16:	b085      	sub	sp, #20
   d4d18:	4604      	mov	r4, r0
   d4d1a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4d1c:	4668      	mov	r0, sp
   d4d1e:	4611      	mov	r1, r2
   d4d20:	f7ff fddf 	bl	d48e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4d24:	b17c      	cbz	r4, d4d46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4d26:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d28:	4628      	mov	r0, r5
   d4d2a:	b10d      	cbz	r5, d4d30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4d2c:	f001 fcf8 	bl	d6720 <strdup>
   d4d30:	9002      	str	r0, [sp, #8]
   d4d32:	a902      	add	r1, sp, #8
   d4d34:	4668      	mov	r0, sp
   d4d36:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4d3a:	f7ff fe2f 	bl	d499c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d3e:	9802      	ldr	r0, [sp, #8]
   d4d40:	f7ff fd38 	bl	d47b4 <free>
   d4d44:	e01d      	b.n	d4d82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4d46:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d48:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4d4c:	f04f 0201 	mov.w	r2, #1
   d4d50:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4d54:	42a3      	cmp	r3, r4
   d4d56:	d103      	bne.n	d4d60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4d58:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4d5c:	2900      	cmp	r1, #0
   d4d5e:	d1f7      	bne.n	d4d50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4d60:	d002      	beq.n	d4d68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4d62:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d66:	e00c      	b.n	d4d82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4d68:	f110 010c 	adds.w	r1, r0, #12
   d4d6c:	f04f 0301 	mov.w	r3, #1
   d4d70:	bf18      	it	ne
   d4d72:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4d74:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4d78:	3004      	adds	r0, #4
   d4d7a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4d7e:	f7ff ff71 	bl	d4c64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4d82:	a801      	add	r0, sp, #4
   d4d84:	f7ff fd7f 	bl	d4886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4d88:	b005      	add	sp, #20
   d4d8a:	bd30      	pop	{r4, r5, pc}

000d4d8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d8c:	2200      	movs	r2, #0
   d4d8e:	4611      	mov	r1, r2
   d4d90:	6840      	ldr	r0, [r0, #4]
   d4d92:	f7ff bcef 	b.w	d4774 <network_listening>

000d4d96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d96:	2200      	movs	r2, #0
   d4d98:	4611      	mov	r1, r2
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	f7ff bcfa 	b.w	d4794 <network_get_listen_timeout>

000d4da0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4da0:	2200      	movs	r2, #0
   d4da2:	6840      	ldr	r0, [r0, #4]
   d4da4:	f7ff bcee 	b.w	d4784 <network_set_listen_timeout>

000d4da8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4da8:	2200      	movs	r2, #0
   d4daa:	f081 0101 	eor.w	r1, r1, #1
   d4dae:	6840      	ldr	r0, [r0, #4]
   d4db0:	f7ff bcd8 	b.w	d4764 <network_listen>

000d4db4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4db4:	2300      	movs	r3, #0
   d4db6:	461a      	mov	r2, r3
   d4db8:	4619      	mov	r1, r3
   d4dba:	6840      	ldr	r0, [r0, #4]
   d4dbc:	f7ff bcca 	b.w	d4754 <network_off>

000d4dc0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4dc0:	2300      	movs	r3, #0
   d4dc2:	461a      	mov	r2, r3
   d4dc4:	4619      	mov	r1, r3
   d4dc6:	6840      	ldr	r0, [r0, #4]
   d4dc8:	f7ff bcbc 	b.w	d4744 <network_on>

000d4dcc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dcc:	2200      	movs	r2, #0
   d4dce:	4611      	mov	r1, r2
   d4dd0:	6840      	ldr	r0, [r0, #4]
   d4dd2:	f7ff bcaf 	b.w	d4734 <network_ready>

000d4dd6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4dd6:	2200      	movs	r2, #0
   d4dd8:	4611      	mov	r1, r2
   d4dda:	6840      	ldr	r0, [r0, #4]
   d4ddc:	f7ff bc9a 	b.w	d4714 <network_connecting>

000d4de0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4de0:	2200      	movs	r2, #0
   d4de2:	2102      	movs	r1, #2
   d4de4:	6840      	ldr	r0, [r0, #4]
   d4de6:	f7ff bc9d 	b.w	d4724 <network_disconnect>

000d4dea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4dea:	2300      	movs	r3, #0
   d4dec:	461a      	mov	r2, r3
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	f7ff bc88 	b.w	d4704 <network_connect>

000d4df4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4df4:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4df6:	2203      	movs	r2, #3
   d4df8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4dfa:	4a02      	ldr	r2, [pc, #8]	; (d4e04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4dfc:	601a      	str	r2, [r3, #0]
   d4dfe:	4770      	bx	lr
   d4e00:	2003e3d4 	.word	0x2003e3d4
   d4e04:	000d6948 	.word	0x000d6948

000d4e08 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e08:	4770      	bx	lr

000d4e0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e0c:	4606      	mov	r6, r0
   d4e0e:	4615      	mov	r5, r2
   d4e10:	460c      	mov	r4, r1
   d4e12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e14:	42bc      	cmp	r4, r7
   d4e16:	d006      	beq.n	d4e26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e18:	6833      	ldr	r3, [r6, #0]
   d4e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e1e:	689b      	ldr	r3, [r3, #8]
   d4e20:	4630      	mov	r0, r6
   d4e22:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e24:	e7f6      	b.n	d4e14 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4e26:	4628      	mov	r0, r5
   d4e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e2a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4e2a:	2200      	movs	r2, #0
   d4e2c:	7c00      	ldrb	r0, [r0, #16]
   d4e2e:	f7ff bacb 	b.w	d43c8 <HAL_I2C_Write_Data>

000d4e32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e32:	2100      	movs	r1, #0
   d4e34:	7c00      	ldrb	r0, [r0, #16]
   d4e36:	f7ff bacf 	b.w	d43d8 <HAL_I2C_Available_Data>

000d4e3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e3a:	2100      	movs	r1, #0
   d4e3c:	7c00      	ldrb	r0, [r0, #16]
   d4e3e:	f7ff bad3 	b.w	d43e8 <HAL_I2C_Read_Data>

000d4e42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e42:	2100      	movs	r1, #0
   d4e44:	7c00      	ldrb	r0, [r0, #16]
   d4e46:	f7ff bad7 	b.w	d43f8 <HAL_I2C_Peek_Data>

000d4e4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e4a:	2100      	movs	r1, #0
   d4e4c:	7c00      	ldrb	r0, [r0, #16]
   d4e4e:	f7ff badb 	b.w	d4408 <HAL_I2C_Flush_Data>

000d4e52 <_ZN7TwoWireD0Ev>:
   d4e52:	b510      	push	{r4, lr}
   d4e54:	4604      	mov	r4, r0
   d4e56:	f7ff f922 	bl	d409e <_ZdlPv>
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	bd10      	pop	{r4, pc}
	...

000d4e60 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e60:	b510      	push	{r4, lr}
   d4e62:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e68:	4608      	mov	r0, r1
   d4e6a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e6c:	2100      	movs	r1, #0
   d4e6e:	4b04      	ldr	r3, [pc, #16]	; (d4e80 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4e70:	7420      	strb	r0, [r4, #16]
   d4e72:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e74:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4e76:	f7ff fad7 	bl	d4428 <HAL_I2C_Init>

}
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	bd10      	pop	{r4, pc}
   d4e7e:	bf00      	nop
   d4e80:	000d697c 	.word	0x000d697c

000d4e84 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4e84:	2100      	movs	r1, #0
   d4e86:	7c00      	ldrb	r0, [r0, #16]
   d4e88:	f7ff bac6 	b.w	d4418 <HAL_I2C_Is_Enabled>

000d4e8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e8c:	4770      	bx	lr

000d4e8e <_ZN9IPAddressD0Ev>:
   d4e8e:	b510      	push	{r4, lr}
   d4e90:	4604      	mov	r4, r0
   d4e92:	f7ff f904 	bl	d409e <_ZdlPv>
   d4e96:	4620      	mov	r0, r4
   d4e98:	bd10      	pop	{r4, pc}

000d4e9a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4e9c:	7d03      	ldrb	r3, [r0, #20]
   d4e9e:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ea0:	b08d      	sub	sp, #52	; 0x34
   d4ea2:	460e      	mov	r6, r1
   d4ea4:	f100 0704 	add.w	r7, r0, #4
   d4ea8:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4eac:	d002      	beq.n	d4eb4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4eae:	f100 0508 	add.w	r5, r0, #8
   d4eb2:	e018      	b.n	d4ee6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4eb4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4eb6:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4eb8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ebc:	232f      	movs	r3, #47	; 0x2f
   d4ebe:	462a      	mov	r2, r5
   d4ec0:	200a      	movs	r0, #10
   d4ec2:	f7ff fae1 	bl	d4488 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ec6:	4628      	mov	r0, r5
   d4ec8:	f001 fc45 	bl	d6756 <strlen>
   d4ecc:	6833      	ldr	r3, [r6, #0]
   d4ece:	4602      	mov	r2, r0
   d4ed0:	68db      	ldr	r3, [r3, #12]
   d4ed2:	4629      	mov	r1, r5
   d4ed4:	4630      	mov	r0, r6
   d4ed6:	4798      	blx	r3
   d4ed8:	e00f      	b.n	d4efa <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4eda:	b124      	cbz	r4, d4ee6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4edc:	212e      	movs	r1, #46	; 0x2e
   d4ede:	4630      	mov	r0, r6
   d4ee0:	f000 fbc0 	bl	d5664 <_ZN5Print5printEc>
   d4ee4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4ee6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4eea:	220a      	movs	r2, #10
   d4eec:	4630      	mov	r0, r6
   d4eee:	f000 fbe9 	bl	d56c4 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ef2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ef4:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ef6:	d1f0      	bne.n	d4eda <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ef8:	4620      	mov	r0, r4
    }
    return n;
}
   d4efa:	b00d      	add	sp, #52	; 0x34
   d4efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4f00 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4f00:	b510      	push	{r4, lr}
   d4f02:	4b05      	ldr	r3, [pc, #20]	; (d4f18 <_ZN9IPAddressC1Ev+0x18>)
   d4f04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f06:	2211      	movs	r2, #17
   d4f08:	f840 3b04 	str.w	r3, [r0], #4
   d4f0c:	2100      	movs	r1, #0
   d4f0e:	f001 fbf7 	bl	d6700 <memset>
{
    clear();
}
   d4f12:	4620      	mov	r0, r4
   d4f14:	bd10      	pop	{r4, pc}
   d4f16:	bf00      	nop
   d4f18:	000d69a4 	.word	0x000d69a4

000d4f1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f1c:	4603      	mov	r3, r0
   d4f1e:	4a07      	ldr	r2, [pc, #28]	; (d4f3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f20:	b510      	push	{r4, lr}
   d4f22:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4f26:	f101 0210 	add.w	r2, r1, #16
   d4f2a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f2e:	f843 4b04 	str.w	r4, [r3], #4
   d4f32:	4291      	cmp	r1, r2
   d4f34:	d1f9      	bne.n	d4f2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f36:	780a      	ldrb	r2, [r1, #0]
   d4f38:	701a      	strb	r2, [r3, #0]
}
   d4f3a:	bd10      	pop	{r4, pc}
   d4f3c:	000d69a4 	.word	0x000d69a4

000d4f40 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4f40:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4f42:	2b04      	cmp	r3, #4
   d4f44:	d101      	bne.n	d4f4a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4f46:	6840      	ldr	r0, [r0, #4]
   d4f48:	e008      	b.n	d4f5c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4f4a:	2b06      	cmp	r3, #6
   d4f4c:	d10a      	bne.n	d4f64 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4f4e:	6843      	ldr	r3, [r0, #4]
   d4f50:	b153      	cbz	r3, d4f68 <_ZNK9IPAddresscvbEv+0x28>
   d4f52:	6883      	ldr	r3, [r0, #8]
   d4f54:	b143      	cbz	r3, d4f68 <_ZNK9IPAddresscvbEv+0x28>
   d4f56:	68c3      	ldr	r3, [r0, #12]
   d4f58:	b133      	cbz	r3, d4f68 <_ZNK9IPAddresscvbEv+0x28>
   d4f5a:	6900      	ldr	r0, [r0, #16]
   d4f5c:	3000      	adds	r0, #0
   d4f5e:	bf18      	it	ne
   d4f60:	2001      	movne	r0, #1
   d4f62:	4770      	bx	lr
   d4f64:	2000      	movs	r0, #0
   d4f66:	4770      	bx	lr
   d4f68:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4f6a:	4770      	bx	lr

000d4f6c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4f6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4f7e:	2304      	movs	r3, #4
   d4f80:	6041      	str	r1, [r0, #4]
   d4f82:	7503      	strb	r3, [r0, #20]
   d4f84:	bd10      	pop	{r4, pc}

000d4f86 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4f86:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f88:	780d      	ldrb	r5, [r1, #0]
   d4f8a:	788b      	ldrb	r3, [r1, #2]
   d4f8c:	784a      	ldrb	r2, [r1, #1]
   d4f8e:	78c9      	ldrb	r1, [r1, #3]
   d4f90:	9100      	str	r1, [sp, #0]
   d4f92:	4629      	mov	r1, r5
   d4f94:	f7ff ffea 	bl	d4f6c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4f98:	b003      	add	sp, #12
   d4f9a:	bd30      	pop	{r4, r5, pc}

000d4f9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f9c:	4b01      	ldr	r3, [pc, #4]	; (d4fa4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f9e:	4a02      	ldr	r2, [pc, #8]	; (d4fa8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4fa0:	601a      	str	r2, [r3, #0]
   d4fa2:	4770      	bx	lr
   d4fa4:	2003e3dc 	.word	0x2003e3dc
   d4fa8:	000d6a63 	.word	0x000d6a63

000d4fac <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4fac:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4fae:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4fb0:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4fb2:	b10b      	cbz	r3, d4fb8 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d4fb4:	68c0      	ldr	r0, [r0, #12]
   d4fb6:	e006      	b.n	d4fc6 <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d4fb8:	6840      	ldr	r0, [r0, #4]
   d4fba:	b128      	cbz	r0, d4fc8 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4fbc:	6883      	ldr	r3, [r0, #8]
   d4fbe:	b90b      	cbnz	r3, d4fc4 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d4fc0:	f001 fa27 	bl	d6412 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fc4:	68c3      	ldr	r3, [r0, #12]
   d4fc6:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d4fc8:	2301      	movs	r3, #1
   d4fca:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d4fcc:	2000      	movs	r0, #0
    }
   d4fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d4fd2:	f7ff b9a9 	b.w	d4328 <os_thread_exit>

000d4fd6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fd6:	2200      	movs	r2, #0
   d4fd8:	4611      	mov	r1, r2
   d4fda:	6840      	ldr	r0, [r0, #4]
   d4fdc:	f7ff bbca 	b.w	d4774 <network_listening>

000d4fe0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fe0:	2200      	movs	r2, #0
   d4fe2:	4611      	mov	r1, r2
   d4fe4:	6840      	ldr	r0, [r0, #4]
   d4fe6:	f7ff bbd5 	b.w	d4794 <network_get_listen_timeout>

000d4fea <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fea:	2200      	movs	r2, #0
   d4fec:	6840      	ldr	r0, [r0, #4]
   d4fee:	f7ff bbc9 	b.w	d4784 <network_set_listen_timeout>

000d4ff2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ff2:	2200      	movs	r2, #0
   d4ff4:	f081 0101 	eor.w	r1, r1, #1
   d4ff8:	6840      	ldr	r0, [r0, #4]
   d4ffa:	f7ff bbb3 	b.w	d4764 <network_listen>

000d4ffe <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ffe:	2300      	movs	r3, #0
   d5000:	461a      	mov	r2, r3
   d5002:	4619      	mov	r1, r3
   d5004:	6840      	ldr	r0, [r0, #4]
   d5006:	f7ff bba5 	b.w	d4754 <network_off>

000d500a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d500a:	2300      	movs	r3, #0
   d500c:	461a      	mov	r2, r3
   d500e:	4619      	mov	r1, r3
   d5010:	6840      	ldr	r0, [r0, #4]
   d5012:	f7ff bb97 	b.w	d4744 <network_on>

000d5016 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5016:	2200      	movs	r2, #0
   d5018:	4611      	mov	r1, r2
   d501a:	6840      	ldr	r0, [r0, #4]
   d501c:	f7ff bb8a 	b.w	d4734 <network_ready>

000d5020 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5020:	2200      	movs	r2, #0
   d5022:	4611      	mov	r1, r2
   d5024:	6840      	ldr	r0, [r0, #4]
   d5026:	f7ff bb75 	b.w	d4714 <network_connecting>

000d502a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d502a:	2200      	movs	r2, #0
   d502c:	2102      	movs	r1, #2
   d502e:	6840      	ldr	r0, [r0, #4]
   d5030:	f7ff bb78 	b.w	d4724 <network_disconnect>

000d5034 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5034:	2300      	movs	r3, #0
   d5036:	461a      	mov	r2, r3
   d5038:	6840      	ldr	r0, [r0, #4]
   d503a:	f7ff bb63 	b.w	d4704 <network_connect>

000d503e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d503e:	b110      	cbz	r0, d5046 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5040:	6803      	ldr	r3, [r0, #0]
   d5042:	685b      	ldr	r3, [r3, #4]
   d5044:	4718      	bx	r3
   d5046:	4770      	bx	lr

000d5048 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5048:	b538      	push	{r3, r4, r5, lr}
   d504a:	4604      	mov	r4, r0
   d504c:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d504e:	b1d0      	cbz	r0, d5086 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d5050:	f7ff f932 	bl	d42b8 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5054:	b9b8      	cbnz	r0, d5086 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5056:	7c23      	ldrb	r3, [r4, #16]
   d5058:	b91b      	cbnz	r3, d5062 <_ZN6Thread7disposeEv+0x1a>
   d505a:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d505c:	b108      	cbz	r0, d5062 <_ZN6Thread7disposeEv+0x1a>
   d505e:	f7ff f933 	bl	d42c8 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d5062:	6865      	ldr	r5, [r4, #4]
   d5064:	b155      	cbz	r5, d507c <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5066:	68ab      	ldr	r3, [r5, #8]
   d5068:	b11b      	cbz	r3, d5072 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d506a:	2203      	movs	r2, #3
   d506c:	4629      	mov	r1, r5
   d506e:	4628      	mov	r0, r5
   d5070:	4798      	blx	r3
            delete wrapper;
   d5072:	4628      	mov	r0, r5
   d5074:	f7ff f813 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d5078:	2300      	movs	r3, #0
   d507a:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d507c:	6820      	ldr	r0, [r4, #0]
   d507e:	f7ff f92b 	bl	d42d8 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5082:	2300      	movs	r3, #0
   d5084:	6023      	str	r3, [r4, #0]
   d5086:	bd38      	pop	{r3, r4, r5, pc}

000d5088 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5088:	b538      	push	{r3, r4, r5, lr}
   d508a:	4b0b      	ldr	r3, [pc, #44]	; (d50b8 <_ZN5spark9MeshClassD1Ev+0x30>)
   d508c:	6003      	str	r3, [r0, #0]
   d508e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5090:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5094:	b108      	cbz	r0, d509a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5096:	f7ff f804 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d509a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d509e:	b12d      	cbz	r5, d50ac <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d50a0:	4628      	mov	r0, r5
   d50a2:	f7ff ffd1 	bl	d5048 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50a6:	4628      	mov	r0, r5
   d50a8:	f7fe fff9 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50ac:	68a0      	ldr	r0, [r4, #8]
   d50ae:	b108      	cbz	r0, d50b4 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d50b0:	f7ff ffc5 	bl	d503e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d50b4:	4620      	mov	r0, r4
   d50b6:	bd38      	pop	{r3, r4, r5, pc}
   d50b8:	000d6a94 	.word	0x000d6a94

000d50bc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d50bc:	6800      	ldr	r0, [r0, #0]
   d50be:	f7ff b923 	b.w	d4308 <os_mutex_recursive_lock>

000d50c2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d50c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d50c8:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d50cc:	4606      	mov	r6, r0
   d50ce:	4688      	mov	r8, r1
   d50d0:	4691      	mov	r9, r2
   d50d2:	469a      	mov	sl, r3
   d50d4:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d50d6:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d50d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d50da:	454b      	cmp	r3, r9
   d50dc:	d129      	bne.n	d5132 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d50de:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d50e0:	4553      	cmp	r3, sl
   d50e2:	d126      	bne.n	d5132 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d50e4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d50e8:	455b      	cmp	r3, fp
   d50ea:	d122      	bne.n	d5132 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d50ec:	2140      	movs	r1, #64	; 0x40
   d50ee:	4640      	mov	r0, r8
   d50f0:	f001 fb4e 	bl	d6790 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d50f4:	4641      	mov	r1, r8
   d50f6:	4602      	mov	r2, r0
   d50f8:	4620      	mov	r0, r4
   d50fa:	f001 fb34 	bl	d6766 <strncmp>
   d50fe:	b9c0      	cbnz	r0, d5132 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5100:	b16f      	cbz	r7, d511e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d5102:	210c      	movs	r1, #12
   d5104:	4638      	mov	r0, r7
   d5106:	f001 fb43 	bl	d6790 <strnlen>
                if (id_len)
   d510a:	4602      	mov	r2, r0
   d510c:	b138      	cbz	r0, d511e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d510e:	2358      	movs	r3, #88	; 0x58
   d5110:	fb03 6005 	mla	r0, r3, r5, r6
   d5114:	4639      	mov	r1, r7
   d5116:	3049      	adds	r0, #73	; 0x49
   d5118:	f001 fb25 	bl	d6766 <strncmp>
   d511c:	e004      	b.n	d5128 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d511e:	2058      	movs	r0, #88	; 0x58
   d5120:	fb00 6505 	mla	r5, r0, r5, r6
   d5124:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d5128:	fab0 f080 	clz	r0, r0
   d512c:	0940      	lsrs	r0, r0, #5
   d512e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5132:	3501      	adds	r5, #1
   d5134:	2d05      	cmp	r5, #5
   d5136:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d513a:	d1cd      	bne.n	d50d8 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d513c:	2000      	movs	r0, #0
}
   d513e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5144 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5148:	b085      	sub	sp, #20
   d514a:	4607      	mov	r7, r0
   d514c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5150:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5152:	9601      	str	r6, [sp, #4]
   d5154:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5158:	4689      	mov	r9, r1
   d515a:	9202      	str	r2, [sp, #8]
   d515c:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d515e:	f7ff ffb0 	bl	d50c2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d5162:	2800      	cmp	r0, #0
   d5164:	d13c      	bne.n	d51e0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d5166:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5168:	2358      	movs	r3, #88	; 0x58
   d516a:	fb03 7504 	mla	r5, r3, r4, r7
   d516e:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d5172:	f1b8 0f00 	cmp.w	r8, #0
   d5176:	d12e      	bne.n	d51d6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5178:	2140      	movs	r1, #64	; 0x40
   d517a:	4648      	mov	r0, r9
   d517c:	f001 fb08 	bl	d6790 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5180:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5182:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5184:	4602      	mov	r2, r0
   d5186:	4628      	mov	r0, r5
   d5188:	f001 faaf 	bl	d66ea <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d518c:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d5190:	4641      	mov	r1, r8
   d5192:	eb05 000b 	add.w	r0, r5, fp
   d5196:	f001 fab3 	bl	d6700 <memset>
            event_handlers[i].handler = handler;
   d519a:	9b02      	ldr	r3, [sp, #8]
   d519c:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d519e:	9b03      	ldr	r3, [sp, #12]
   d51a0:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d51a2:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d51a6:	b12e      	cbz	r6, d51b4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d51a8:	210c      	movs	r1, #12
   d51aa:	4630      	mov	r0, r6
   d51ac:	f001 faf0 	bl	d6790 <strnlen>
   d51b0:	4605      	mov	r5, r0
   d51b2:	e000      	b.n	d51b6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d51b4:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d51b6:	2058      	movs	r0, #88	; 0x58
   d51b8:	4344      	muls	r4, r0
   d51ba:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d51bc:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d51be:	462a      	mov	r2, r5
   d51c0:	4631      	mov	r1, r6
   d51c2:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d51c4:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d51c6:	f001 fa90 	bl	d66ea <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d51ca:	2000      	movs	r0, #0
   d51cc:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d51d0:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d51d4:	e005      	b.n	d51e2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d51d6:	3401      	adds	r4, #1
   d51d8:	2c05      	cmp	r4, #5
   d51da:	d1c6      	bne.n	d516a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d51dc:	4802      	ldr	r0, [pc, #8]	; (d51e8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d51de:	e000      	b.n	d51e2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d51e0:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d51e2:	b005      	add	sp, #20
   d51e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51e8:	fffffefc 	.word	0xfffffefc

000d51ec <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d51ec:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d51ee:	2300      	movs	r3, #0
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	9300      	str	r3, [sp, #0]
   d51f4:	f7ff ffa6 	bl	d5144 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d51f8:	b003      	add	sp, #12
   d51fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d51fe <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d51fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5202:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d5204:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5206:	460d      	mov	r5, r1
   d5208:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d520a:	f001 faa4 	bl	d6756 <strlen>
   d520e:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d5212:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5214:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5216:	b1ab      	cbz	r3, d5244 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5218:	2140      	movs	r1, #64	; 0x40
   d521a:	4620      	mov	r0, r4
   d521c:	f001 fab8 	bl	d6790 <strnlen>

        if (event_name_length < filter_length)
   d5220:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5222:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d5224:	d30b      	bcc.n	d523e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d5226:	4629      	mov	r1, r5
   d5228:	4620      	mov	r0, r4
   d522a:	f001 fa4f 	bl	d66cc <memcmp>
        if (0 == cmp)
   d522e:	b930      	cbnz	r0, d523e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d5230:	9000      	str	r0, [sp, #0]
   d5232:	4643      	mov	r3, r8
   d5234:	462a      	mov	r2, r5
   d5236:	4621      	mov	r1, r4
   d5238:	2058      	movs	r0, #88	; 0x58
   d523a:	f7ff fa41 	bl	d46c0 <system_invoke_event_handler>
   d523e:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5240:	42b4      	cmp	r4, r6
   d5242:	d1e7      	bne.n	d5214 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5244:	b002      	add	sp, #8
   d5246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d524c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d524c:	b530      	push	{r4, r5, lr}
   d524e:	b08d      	sub	sp, #52	; 0x34
   d5250:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5252:	2211      	movs	r2, #17
   d5254:	2100      	movs	r1, #0
   d5256:	a801      	add	r0, sp, #4
   d5258:	f001 fa52 	bl	d6700 <memset>
    addr.v = 6;
   d525c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d525e:	aa01      	add	r2, sp, #4
   d5260:	4909      	ldr	r1, [pc, #36]	; (d5288 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5262:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5266:	200a      	movs	r0, #10
   d5268:	f7ff f916 	bl	d4498 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d526c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d526e:	a901      	add	r1, sp, #4
   d5270:	a806      	add	r0, sp, #24
   d5272:	f7ff fe53 	bl	d4f1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5278:	3404      	adds	r4, #4
   d527a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d527c:	682b      	ldr	r3, [r5, #0]
   d527e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5280:	2000      	movs	r0, #0
   d5282:	b00d      	add	sp, #52	; 0x34
   d5284:	bd30      	pop	{r4, r5, pc}
   d5286:	bf00      	nop
   d5288:	000d6ac0 	.word	0x000d6ac0

000d528c <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d528c:	b530      	push	{r4, r5, lr}
   d528e:	4604      	mov	r4, r0
   d5290:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5292:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5296:	f7ff ff11 	bl	d50bc <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d529a:	6823      	ldr	r3, [r4, #0]
   d529c:	bb83      	cbnz	r3, d5300 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d529e:	204c      	movs	r0, #76	; 0x4c
   d52a0:	f7fe fef9 	bl	d4096 <_Znwj>
   d52a4:	4605      	mov	r5, r0
   d52a6:	b108      	cbz	r0, d52ac <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d52a8:	f000 fde6 	bl	d5e78 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52ac:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52ae:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52b0:	b108      	cbz	r0, d52b6 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d52b2:	f7ff fec4 	bl	d503e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52b6:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d52b8:	b320      	cbz	r0, d5304 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d52ba:	2200      	movs	r2, #0
   d52bc:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d52c0:	f000 fe09 	bl	d5ed6 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d52c4:	a908      	add	r1, sp, #32
   d52c6:	2500      	movs	r5, #0
   d52c8:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d52cc:	4811      	ldr	r0, [pc, #68]	; (d5314 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d52ce:	f7ff f8b3 	bl	d4438 <if_name_to_index>
   d52d2:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d52d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d52d8:	6803      	ldr	r3, [r0, #0]
   d52da:	f249 0169 	movw	r1, #36969	; 0x9069
   d52de:	6a1b      	ldr	r3, [r3, #32]
   d52e0:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d52e2:	a802      	add	r0, sp, #8
   d52e4:	f7ff fe0c 	bl	d4f00 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d52e8:	a802      	add	r0, sp, #8
   d52ea:	f7ff ffaf 	bl	d524c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d52ee:	2800      	cmp	r0, #0
   d52f0:	db04      	blt.n	d52fc <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d52f2:	a902      	add	r1, sp, #8
   d52f4:	6820      	ldr	r0, [r4, #0]
   d52f6:	f000 fe74 	bl	d5fe2 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d52fa:	e004      	b.n	d5306 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d52fc:	4605      	mov	r5, r0
   d52fe:	e002      	b.n	d5306 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d5300:	2500      	movs	r5, #0
   d5302:	e000      	b.n	d5306 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5304:	4d04      	ldr	r5, [pc, #16]	; (d5318 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5306:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d530a:	f7ff f805 	bl	d4318 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d530e:	4628      	mov	r0, r5
   d5310:	b009      	add	sp, #36	; 0x24
   d5312:	bd30      	pop	{r4, r5, pc}
   d5314:	000d6acd 	.word	0x000d6acd
   d5318:	fffffefc 	.word	0xfffffefc

000d531c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d531c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5320:	4604      	mov	r4, r0
   d5322:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5326:	460f      	mov	r7, r1
   d5328:	4690      	mov	r8, r2
   d532a:	f7ff fec7 	bl	d50bc <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d532e:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d5332:	b9fe      	cbnz	r6, d5374 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5334:	491a      	ldr	r1, [pc, #104]	; (d53a0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x84>)
   d5336:	2014      	movs	r0, #20
   d5338:	f001 f85a 	bl	d63f0 <_ZnwjRKSt9nothrow_t>
   d533c:	4605      	mov	r5, r0
   d533e:	b170      	cbz	r0, d535e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x42>

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5340:	4b18      	ldr	r3, [pc, #96]	; (d53a4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x88>)
   d5342:	6083      	str	r3, [r0, #8]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5344:	f44f 6340 	mov.w	r3, #3072	; 0xc00

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5348:	6006      	str	r6, [r0, #0]
   d534a:	6046      	str	r6, [r0, #4]
   d534c:	60c4      	str	r4, [r0, #12]
   d534e:	7406      	strb	r6, [r0, #16]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5350:	2203      	movs	r2, #3
   d5352:	9301      	str	r3, [sp, #4]
   d5354:	9000      	str	r0, [sp, #0]
   d5356:	4b14      	ldr	r3, [pc, #80]	; (d53a8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8c>)
   d5358:	4914      	ldr	r1, [pc, #80]	; (d53ac <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>)
   d535a:	f7fe ffa5 	bl	d42a8 <os_thread_create>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d535e:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d5362:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5366:	b12e      	cbz	r6, d5374 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        }
    }

    ~Thread()
    {
        dispose();
   d5368:	4630      	mov	r0, r6
   d536a:	f7ff fe6d 	bl	d5048 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d536e:	4630      	mov	r0, r6
   d5370:	f7fe fe95 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5374:	4620      	mov	r0, r4
   d5376:	f7ff ff89 	bl	d528c <_ZN5spark11MeshPublish14initialize_udpEv>
   d537a:	2800      	cmp	r0, #0
   d537c:	db07      	blt.n	d538e <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x72>
    CHECK(subscriptions.add(prefix, handler));
   d537e:	4642      	mov	r2, r8
   d5380:	4639      	mov	r1, r7
   d5382:	1d20      	adds	r0, r4, #4
   d5384:	f7ff ff32 	bl	d51ec <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5388:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d538c:	e000      	b.n	d5390 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x74>
   d538e:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5390:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5394:	f7fe ffc0 	bl	d4318 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5398:	4628      	mov	r0, r5
   d539a:	b002      	add	sp, #8
   d539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d53a0:	000d6c90 	.word	0x000d6c90
   d53a4:	000d54c1 	.word	0x000d54c1
   d53a8:	000d4fad 	.word	0x000d4fad
   d53ac:	000d6ad1 	.word	0x000d6ad1

000d53b0 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d53b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53b4:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d53b6:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d53ba:	b08a      	sub	sp, #40	; 0x28
   d53bc:	4630      	mov	r0, r6
   d53be:	f7ff fe7d 	bl	d50bc <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d53c2:	682c      	ldr	r4, [r5, #0]
   d53c4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d53c8:	f7fe ffa6 	bl	d4318 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d53cc:	2c00      	cmp	r4, #0
   d53ce:	d063      	beq.n	d5498 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d53d0:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d53d4:	b163      	cbz	r3, d53f0 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d53d6:	6823      	ldr	r3, [r4, #0]
   d53d8:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d53dc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d53de:	4620      	mov	r0, r4
   d53e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53e4:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d53e8:	47b8      	blx	r7
        if (len > 0) {
   d53ea:	1e04      	subs	r4, r0, #0
   d53ec:	dc13      	bgt.n	d5416 <_ZN5spark11MeshPublish4pollEv+0x66>
   d53ee:	e056      	b.n	d549e <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d53f0:	492d      	ldr	r1, [pc, #180]	; (d54a8 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d53f2:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d53f6:	f001 f80a 	bl	d640e <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53fa:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d53fe:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d5402:	b113      	cbz	r3, d540a <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5404:	4618      	mov	r0, r3
   d5406:	f7fe fe4c 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d540a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d540e:	2b00      	cmp	r3, #0
   d5410:	d1e1      	bne.n	d53d6 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5412:	4826      	ldr	r0, [pc, #152]	; (d54ac <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5414:	e044      	b.n	d54a0 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5416:	2320      	movs	r3, #32
   d5418:	4a25      	ldr	r2, [pc, #148]	; (d54b0 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d541a:	9302      	str	r3, [sp, #8]
   d541c:	9200      	str	r2, [sp, #0]
   d541e:	2300      	movs	r3, #0
   d5420:	9401      	str	r4, [sp, #4]
   d5422:	aa02      	add	r2, sp, #8
   d5424:	4923      	ldr	r1, [pc, #140]	; (d54b4 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5426:	9303      	str	r3, [sp, #12]
   d5428:	2001      	movs	r0, #1
   d542a:	f7ff f915 	bl	d4658 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d542e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5432:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5434:	781b      	ldrb	r3, [r3, #0]
   d5436:	bb6b      	cbnz	r3, d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5438:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d543a:	4621      	mov	r1, r4
   d543c:	4638      	mov	r0, r7
   d543e:	f001 f9a7 	bl	d6790 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5442:	b338      	cbz	r0, d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5444:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5446:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5448:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d544c:	dd22      	ble.n	d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d544e:	5c3b      	ldrb	r3, [r7, r0]
   d5450:	bb03      	cbnz	r3, d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5452:	3c01      	subs	r4, #1
   d5454:	d00e      	beq.n	d5474 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5456:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d545a:	4621      	mov	r1, r4
   d545c:	4640      	mov	r0, r8
   d545e:	f001 f997 	bl	d6790 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5462:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5464:	2c00      	cmp	r4, #0
   d5466:	dd15      	ble.n	d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5468:	f818 3000 	ldrb.w	r3, [r8, r0]
   d546c:	b993      	cbnz	r3, d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d546e:	2c01      	cmp	r4, #1
   d5470:	d002      	beq.n	d5478 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5472:	e00f      	b.n	d5494 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5474:	f8df 8044 	ldr.w	r8, [pc, #68]	; d54bc <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5478:	4630      	mov	r0, r6
   d547a:	f7ff fe1f 	bl	d50bc <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d547e:	4642      	mov	r2, r8
   d5480:	4639      	mov	r1, r7
   d5482:	1d28      	adds	r0, r5, #4
   d5484:	f7ff febb 	bl	d51fe <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5488:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d548c:	f7fe ff44 	bl	d4318 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5490:	2000      	movs	r0, #0
   d5492:	e005      	b.n	d54a0 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5494:	4808      	ldr	r0, [pc, #32]	; (d54b8 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5496:	e003      	b.n	d54a0 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5498:	2064      	movs	r0, #100	; 0x64
   d549a:	f7fe ff4d 	bl	d4338 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d549e:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d54a0:	b00a      	add	sp, #40	; 0x28
   d54a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54a6:	bf00      	nop
   d54a8:	000d6c90 	.word	0x000d6c90
   d54ac:	fffffefc 	.word	0xfffffefc
   d54b0:	000d6ae0 	.word	0x000d6ae0
   d54b4:	000d6ad9 	.word	0x000d6ad9
   d54b8:	fffffee8 	.word	0xfffffee8
   d54bc:	000d69c4 	.word	0x000d69c4

000d54c0 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d54c4:	4620      	mov	r0, r4
   d54c6:	f7ff ff73 	bl	d53b0 <_ZN5spark11MeshPublish4pollEv>
   d54ca:	e7fb      	b.n	d54c4 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d54cc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d54cc:	b538      	push	{r3, r4, r5, lr}
   d54ce:	4c0d      	ldr	r4, [pc, #52]	; (d5504 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d54d0:	4b0d      	ldr	r3, [pc, #52]	; (d5508 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d54d2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d54d4:	2500      	movs	r5, #0
   d54d6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d54d8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d54dc:	6063      	str	r3, [r4, #4]
   d54de:	60a5      	str	r5, [r4, #8]
   d54e0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54e4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d54e8:	f7fe ff06 	bl	d42f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d54ec:	4b07      	ldr	r3, [pc, #28]	; (d550c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d54ee:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d54f2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d54f4:	4620      	mov	r0, r4
   d54f6:	4a06      	ldr	r2, [pc, #24]	; (d5510 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d54f8:	4906      	ldr	r1, [pc, #24]	; (d5514 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d54fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d54fe:	f000 bf69 	b.w	d63d4 <__aeabi_atexit>
   d5502:	bf00      	nop
   d5504:	2003e3e0 	.word	0x2003e3e0
   d5508:	000d6af8 	.word	0x000d6af8
   d550c:	000d6a94 	.word	0x000d6a94
   d5510:	2003e3bc 	.word	0x2003e3bc
   d5514:	000d5089 	.word	0x000d5089

000d5518 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5518:	2300      	movs	r3, #0
   d551a:	461a      	mov	r2, r3
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	f7ff b8f1 	b.w	d4704 <network_connect>

000d5522 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5522:	2200      	movs	r2, #0
   d5524:	2102      	movs	r1, #2
   d5526:	6840      	ldr	r0, [r0, #4]
   d5528:	f7ff b8fc 	b.w	d4724 <network_disconnect>

000d552c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d552c:	2200      	movs	r2, #0
   d552e:	4611      	mov	r1, r2
   d5530:	6840      	ldr	r0, [r0, #4]
   d5532:	f7ff b8ef 	b.w	d4714 <network_connecting>

000d5536 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5536:	2200      	movs	r2, #0
   d5538:	4611      	mov	r1, r2
   d553a:	6840      	ldr	r0, [r0, #4]
   d553c:	f7ff b8fa 	b.w	d4734 <network_ready>

000d5540 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5540:	2300      	movs	r3, #0
   d5542:	461a      	mov	r2, r3
   d5544:	4619      	mov	r1, r3
   d5546:	6840      	ldr	r0, [r0, #4]
   d5548:	f7ff b8fc 	b.w	d4744 <network_on>

000d554c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d554c:	2300      	movs	r3, #0
   d554e:	461a      	mov	r2, r3
   d5550:	4619      	mov	r1, r3
   d5552:	6840      	ldr	r0, [r0, #4]
   d5554:	f7ff b8fe 	b.w	d4754 <network_off>

000d5558 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5558:	2200      	movs	r2, #0
   d555a:	f081 0101 	eor.w	r1, r1, #1
   d555e:	6840      	ldr	r0, [r0, #4]
   d5560:	f7ff b900 	b.w	d4764 <network_listen>

000d5564 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5564:	2200      	movs	r2, #0
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f7ff b90c 	b.w	d4784 <network_set_listen_timeout>

000d556c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d556c:	2200      	movs	r2, #0
   d556e:	4611      	mov	r1, r2
   d5570:	6840      	ldr	r0, [r0, #4]
   d5572:	f7ff b90f 	b.w	d4794 <network_get_listen_timeout>

000d5576 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5576:	2200      	movs	r2, #0
   d5578:	4611      	mov	r1, r2
   d557a:	6840      	ldr	r0, [r0, #4]
   d557c:	f7ff b8fa 	b.w	d4774 <network_listening>

000d5580 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5580:	b570      	push	{r4, r5, r6, lr}
   d5582:	b08c      	sub	sp, #48	; 0x30
   d5584:	4614      	mov	r4, r2
   d5586:	4606      	mov	r6, r0
    IPAddress addr;
   d5588:	f7ff fcba 	bl	d4f00 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d558c:	ab0c      	add	r3, sp, #48	; 0x30
   d558e:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5590:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5592:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5596:	4620      	mov	r0, r4
   d5598:	f7fe ffa6 	bl	d44e8 <netdb_getaddrinfo>
    if (!r && ai) {
   d559c:	4601      	mov	r1, r0
   d559e:	bb58      	cbnz	r0, d55f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d55a0:	9b00      	ldr	r3, [sp, #0]
   d55a2:	b34b      	cbz	r3, d55f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d55a4:	685a      	ldr	r2, [r3, #4]
   d55a6:	2a02      	cmp	r2, #2
   d55a8:	d00e      	beq.n	d55c8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d55aa:	2a0a      	cmp	r2, #10
   d55ac:	d124      	bne.n	d55f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d55ae:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d55b0:	2211      	movs	r2, #17
   d55b2:	a801      	add	r0, sp, #4
   d55b4:	f001 f8a4 	bl	d6700 <memset>
                a.v = 6;
   d55b8:	2306      	movs	r3, #6
   d55ba:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55be:	ad01      	add	r5, sp, #4
   d55c0:	f104 0308 	add.w	r3, r4, #8
   d55c4:	3418      	adds	r4, #24
   d55c6:	e005      	b.n	d55d4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d55c8:	6959      	ldr	r1, [r3, #20]
   d55ca:	4630      	mov	r0, r6
   d55cc:	3104      	adds	r1, #4
   d55ce:	f7ff fcda 	bl	d4f86 <_ZN9IPAddressaSEPKh>
                break;
   d55d2:	e011      	b.n	d55f8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55d4:	6818      	ldr	r0, [r3, #0]
   d55d6:	6859      	ldr	r1, [r3, #4]
   d55d8:	462a      	mov	r2, r5
   d55da:	c203      	stmia	r2!, {r0, r1}
   d55dc:	3308      	adds	r3, #8
   d55de:	42a3      	cmp	r3, r4
   d55e0:	4615      	mov	r5, r2
   d55e2:	d1f7      	bne.n	d55d4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d55e4:	a901      	add	r1, sp, #4
   d55e6:	a806      	add	r0, sp, #24
   d55e8:	ad07      	add	r5, sp, #28
   d55ea:	f7ff fc97 	bl	d4f1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55f0:	1d34      	adds	r4, r6, #4
   d55f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55f4:	682b      	ldr	r3, [r5, #0]
   d55f6:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d55f8:	9800      	ldr	r0, [sp, #0]
   d55fa:	f7fe ff6d 	bl	d44d8 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55fe:	4630      	mov	r0, r6
   d5600:	b00c      	add	sp, #48	; 0x30
   d5602:	bd70      	pop	{r4, r5, r6, pc}

000d5604 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5604:	4b02      	ldr	r3, [pc, #8]	; (d5610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5606:	4a03      	ldr	r2, [pc, #12]	; (d5614 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5608:	601a      	str	r2, [r3, #0]
   d560a:	2200      	movs	r2, #0
   d560c:	605a      	str	r2, [r3, #4]
   d560e:	4770      	bx	lr
   d5610:	2003e5b0 	.word	0x2003e5b0
   d5614:	000d6af8 	.word	0x000d6af8

000d5618 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d561a:	4606      	mov	r6, r0
   d561c:	460d      	mov	r5, r1
   d561e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5620:	2400      	movs	r4, #0
  while (size--) {
   d5622:	42bd      	cmp	r5, r7
   d5624:	d00c      	beq.n	d5640 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5626:	6833      	ldr	r3, [r6, #0]
   d5628:	f815 1b01 	ldrb.w	r1, [r5], #1
   d562c:	689b      	ldr	r3, [r3, #8]
   d562e:	4630      	mov	r0, r6
   d5630:	4798      	blx	r3
     if (chunk>=0)
   d5632:	2800      	cmp	r0, #0
   d5634:	db01      	blt.n	d563a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5636:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5638:	e7f3      	b.n	d5622 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d563a:	2c00      	cmp	r4, #0
   d563c:	bf08      	it	eq
   d563e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5640:	4620      	mov	r0, r4
   d5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5644 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5644:	b570      	push	{r4, r5, r6, lr}
   d5646:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5648:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d564a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d564c:	b149      	cbz	r1, d5662 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d564e:	f001 f882 	bl	d6756 <strlen>
   d5652:	682b      	ldr	r3, [r5, #0]
   d5654:	4602      	mov	r2, r0
   d5656:	4621      	mov	r1, r4
   d5658:	4628      	mov	r0, r5
   d565a:	68db      	ldr	r3, [r3, #12]
    }
   d565c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5660:	4718      	bx	r3
    }
   d5662:	bd70      	pop	{r4, r5, r6, pc}

000d5664 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5664:	6803      	ldr	r3, [r0, #0]
   d5666:	689b      	ldr	r3, [r3, #8]
   d5668:	4718      	bx	r3

000d566a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d566a:	b530      	push	{r4, r5, lr}
   d566c:	b08b      	sub	sp, #44	; 0x2c
   d566e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5670:	2100      	movs	r1, #0
   d5672:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5676:	2a01      	cmp	r2, #1
   d5678:	bf98      	it	ls
   d567a:	220a      	movls	r2, #10
   d567c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5680:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5684:	fb05 3312 	mls	r3, r5, r2, r3
   d5688:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d568c:	2b09      	cmp	r3, #9
   d568e:	bf94      	ite	ls
   d5690:	3330      	addls	r3, #48	; 0x30
   d5692:	3337      	addhi	r3, #55	; 0x37
   d5694:	b2db      	uxtb	r3, r3
   d5696:	4621      	mov	r1, r4
   d5698:	f804 3901 	strb.w	r3, [r4], #-1
   d569c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d569e:	2d00      	cmp	r5, #0
   d56a0:	d1ee      	bne.n	d5680 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d56a2:	f7ff ffcf 	bl	d5644 <_ZN5Print5writeEPKc>
}
   d56a6:	b00b      	add	sp, #44	; 0x2c
   d56a8:	bd30      	pop	{r4, r5, pc}

000d56aa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d56aa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d56ac:	b92a      	cbnz	r2, d56ba <_ZN5Print5printEmi+0x10>
   d56ae:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d56b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d56b4:	689b      	ldr	r3, [r3, #8]
   d56b6:	b2c9      	uxtb	r1, r1
   d56b8:	4718      	bx	r3
  else return printNumber(n, base);
   d56ba:	b2d2      	uxtb	r2, r2
}
   d56bc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d56c0:	f7ff bfd3 	b.w	d566a <_ZN5Print11printNumberEmh>

000d56c4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d56c4:	f7ff bff1 	b.w	d56aa <_ZN5Print5printEmi>

000d56c8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d56c8:	b510      	push	{r4, lr}
   d56ca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56cc:	f7ff f8b3 	bl	d4836 <_ZNSt14_Function_baseD1Ev>
   d56d0:	4620      	mov	r0, r4
   d56d2:	bd10      	pop	{r4, pc}

000d56d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56d4:	4803      	ldr	r0, [pc, #12]	; (d56e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d56d6:	4a04      	ldr	r2, [pc, #16]	; (d56e8 <_GLOBAL__sub_I_RGB+0x14>)
   d56d8:	4904      	ldr	r1, [pc, #16]	; (d56ec <_GLOBAL__sub_I_RGB+0x18>)
   d56da:	2300      	movs	r3, #0
   d56dc:	6083      	str	r3, [r0, #8]
   d56de:	f000 be79 	b.w	d63d4 <__aeabi_atexit>
   d56e2:	bf00      	nop
   d56e4:	2003e5b8 	.word	0x2003e5b8
   d56e8:	2003e3bc 	.word	0x2003e3bc
   d56ec:	000d56c9 	.word	0x000d56c9

000d56f0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d56f0:	4770      	bx	lr

000d56f2 <_ZN8SPIClassD0Ev>:
   d56f2:	b510      	push	{r4, lr}
   d56f4:	4604      	mov	r4, r0
   d56f6:	f7fe fcd2 	bl	d409e <_ZdlPv>
   d56fa:	4620      	mov	r0, r4
   d56fc:	bd10      	pop	{r4, pc}
	...

000d5700 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5700:	b570      	push	{r4, r5, r6, lr}
   d5702:	4b08      	ldr	r3, [pc, #32]	; (d5724 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5704:	6003      	str	r3, [r0, #0]
   d5706:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5708:	2500      	movs	r5, #0
   d570a:	460e      	mov	r6, r1
   d570c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5710:	f7fe fdea 	bl	d42e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5714:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5716:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5718:	f7fe ff1e 	bl	d4558 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d571c:	60a5      	str	r5, [r4, #8]
}
   d571e:	4620      	mov	r0, r4
   d5720:	bd70      	pop	{r4, r5, r6, pc}
   d5722:	bf00      	nop
   d5724:	000d6b2c 	.word	0x000d6b2c

000d5728 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5728:	7900      	ldrb	r0, [r0, #4]
   d572a:	f7fe bf1d 	b.w	d4568 <HAL_SPI_Is_Enabled>

000d572e <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d572e:	4770      	bx	lr

000d5730 <_ZN21StringPrintableHelperD0Ev>:
   d5730:	b510      	push	{r4, lr}
   d5732:	4604      	mov	r4, r0
   d5734:	f7fe fcb3 	bl	d409e <_ZdlPv>
   d5738:	4620      	mov	r0, r4
   d573a:	bd10      	pop	{r4, pc}

000d573c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d573c:	b510      	push	{r4, lr}
   d573e:	4604      	mov	r4, r0
{
	free(buffer);
   d5740:	6800      	ldr	r0, [r0, #0]
   d5742:	f7ff f837 	bl	d47b4 <free>
}
   d5746:	4620      	mov	r0, r4
   d5748:	bd10      	pop	{r4, pc}

000d574a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d574a:	b510      	push	{r4, lr}
   d574c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d574e:	6800      	ldr	r0, [r0, #0]
   d5750:	b108      	cbz	r0, d5756 <_ZN6String10invalidateEv+0xc>
   d5752:	f7ff f82f 	bl	d47b4 <free>
	buffer = NULL;
   d5756:	2300      	movs	r3, #0
   d5758:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d575a:	60a3      	str	r3, [r4, #8]
   d575c:	6063      	str	r3, [r4, #4]
   d575e:	bd10      	pop	{r4, pc}

000d5760 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5760:	b538      	push	{r3, r4, r5, lr}
   d5762:	4604      	mov	r4, r0
   d5764:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5766:	6800      	ldr	r0, [r0, #0]
   d5768:	3101      	adds	r1, #1
   d576a:	f7ff f82b 	bl	d47c4 <realloc>
	if (newbuffer) {
   d576e:	b110      	cbz	r0, d5776 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5770:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5774:	2001      	movs	r0, #1
	}
	return 0;
}
   d5776:	bd38      	pop	{r3, r4, r5, pc}

000d5778 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5778:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d577a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d577c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d577e:	b113      	cbz	r3, d5786 <_ZN6String7reserveEj+0xe>
   d5780:	6843      	ldr	r3, [r0, #4]
   d5782:	428b      	cmp	r3, r1
   d5784:	d207      	bcs.n	d5796 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5786:	4620      	mov	r0, r4
   d5788:	f7ff ffea 	bl	d5760 <_ZN6String12changeBufferEj>
   d578c:	b120      	cbz	r0, d5798 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d578e:	68a3      	ldr	r3, [r4, #8]
   d5790:	b90b      	cbnz	r3, d5796 <_ZN6String7reserveEj+0x1e>
   d5792:	6822      	ldr	r2, [r4, #0]
   d5794:	7013      	strb	r3, [r2, #0]
   d5796:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5798:	bd10      	pop	{r4, pc}

000d579a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d579a:	b570      	push	{r4, r5, r6, lr}
   d579c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d579e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d57a0:	4604      	mov	r4, r0
   d57a2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d57a4:	f7ff ffe8 	bl	d5778 <_ZN6String7reserveEj>
   d57a8:	b918      	cbnz	r0, d57b2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d57aa:	4620      	mov	r0, r4
   d57ac:	f7ff ffcd 	bl	d574a <_ZN6String10invalidateEv>
		return *this;
   d57b0:	e009      	b.n	d57c6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d57b2:	462a      	mov	r2, r5
   d57b4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d57b6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d57b8:	6820      	ldr	r0, [r4, #0]
   d57ba:	f000 ff96 	bl	d66ea <memcpy>
	buffer[len] = 0;
   d57be:	6822      	ldr	r2, [r4, #0]
   d57c0:	68a3      	ldr	r3, [r4, #8]
   d57c2:	2100      	movs	r1, #0
   d57c4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d57c6:	4620      	mov	r0, r4
   d57c8:	bd70      	pop	{r4, r5, r6, pc}

000d57ca <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d57ca:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57cc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d57ce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d57d2:	6043      	str	r3, [r0, #4]
	len = 0;
   d57d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d57d6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d57d8:	460d      	mov	r5, r1
   d57da:	b139      	cbz	r1, d57ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d57dc:	4608      	mov	r0, r1
   d57de:	f000 ffba 	bl	d6756 <strlen>
   d57e2:	4629      	mov	r1, r5
   d57e4:	4602      	mov	r2, r0
   d57e6:	4620      	mov	r0, r4
   d57e8:	f7ff ffd7 	bl	d579a <_ZN6String4copyEPKcj>
}
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd38      	pop	{r3, r4, r5, pc}

000d57f0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d57f0:	b570      	push	{r4, r5, r6, lr}
   d57f2:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d57f4:	460e      	mov	r6, r1
   d57f6:	b909      	cbnz	r1, d57fc <_ZN6String6concatEPKcj+0xc>
   d57f8:	2000      	movs	r0, #0
   d57fa:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d57fc:	b16a      	cbz	r2, d581a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d57fe:	6883      	ldr	r3, [r0, #8]
   d5800:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5802:	4629      	mov	r1, r5
   d5804:	f7ff ffb8 	bl	d5778 <_ZN6String7reserveEj>
   d5808:	2800      	cmp	r0, #0
   d580a:	d0f5      	beq.n	d57f8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d580c:	6820      	ldr	r0, [r4, #0]
   d580e:	68a3      	ldr	r3, [r4, #8]
   d5810:	4631      	mov	r1, r6
   d5812:	4418      	add	r0, r3
   d5814:	f000 ff7c 	bl	d6710 <strcpy>
	len = newlen;
   d5818:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d581a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d581c:	bd70      	pop	{r4, r5, r6, pc}

000d581e <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d581e:	b538      	push	{r3, r4, r5, lr}
   d5820:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d5822:	6880      	ldr	r0, [r0, #8]
   d5824:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d5826:	f7ff ffe3 	bl	d57f0 <_ZN6String6concatEPKcj>
   d582a:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d582c:	6898      	ldr	r0, [r3, #8]
    }
   d582e:	1b40      	subs	r0, r0, r5
   d5830:	bd38      	pop	{r3, r4, r5, pc}

000d5832 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5832:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5834:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5836:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d583a:	2201      	movs	r2, #1
   d583c:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d583e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5842:	f7ff ffd5 	bl	d57f0 <_ZN6String6concatEPKcj>
}
   d5846:	b003      	add	sp, #12
   d5848:	f85d fb04 	ldr.w	pc, [sp], #4

000d584c <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d584c:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d584e:	6880      	ldr	r0, [r0, #8]
   d5850:	f7ff ffef 	bl	d5832 <_ZN6String6concatEc>
    }
   d5854:	bd08      	pop	{r3, pc}
	...

000d5858 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   d5858:	b530      	push	{r4, r5, lr}
   d585a:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d585c:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d585e:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5860:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5862:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5864:	6043      	str	r3, [r0, #4]
	len = 0;
   d5866:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5868:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d586a:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d586c:	4b06      	ldr	r3, [pc, #24]	; (d5888 <_ZN6StringC1ERK9Printable+0x30>)
   d586e:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5870:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5872:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d5874:	f7ff ff80 	bl	d5778 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d5878:	682b      	ldr	r3, [r5, #0]
   d587a:	a901      	add	r1, sp, #4
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	4628      	mov	r0, r5
   d5880:	4798      	blx	r3
}
   d5882:	4620      	mov	r0, r4
   d5884:	b005      	add	sp, #20
   d5886:	bd30      	pop	{r4, r5, pc}
   d5888:	000d6b3c 	.word	0x000d6b3c

000d588c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d588c:	4b05      	ldr	r3, [pc, #20]	; (d58a4 <_GLOBAL__sub_I_System+0x18>)
   d588e:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5892:	2000      	movs	r0, #0
   d5894:	805a      	strh	r2, [r3, #2]
   d5896:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d589a:	7018      	strb	r0, [r3, #0]
   d589c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d589e:	f7fe bee3 	b.w	d4668 <set_system_mode>
   d58a2:	bf00      	nop
   d58a4:	2003e5c8 	.word	0x2003e5c8

000d58a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d58a8:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d58aa:	681a      	ldr	r2, [r3, #0]
   d58ac:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d58ae:	601a      	str	r2, [r3, #0]
   d58b0:	4770      	bx	lr
   d58b2:	bf00      	nop
   d58b4:	2003e350 	.word	0x2003e350
   d58b8:	2003e5d0 	.word	0x2003e5d0

000d58bc <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d58bc:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d58be:	6804      	ldr	r4, [r0, #0]
   d58c0:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d58c2:	46a4      	mov	ip, r4
    }
   d58c4:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d58c8:	4760      	bx	ip

000d58ca <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d58ca:	6803      	ldr	r3, [r0, #0]
   d58cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d58ce:	4718      	bx	r3

000d58d0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d58d0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d58d2:	4770      	bx	lr

000d58d4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d58d4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d58d6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d58d8:	1a10      	subs	r0, r2, r0
   d58da:	4770      	bx	lr

000d58dc <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d58dc:	b513      	push	{r0, r1, r4, lr}
   d58de:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d58e0:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d58e2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d58e6:	68d4      	ldr	r4, [r2, #12]
   d58e8:	4619      	mov	r1, r3
   d58ea:	2201      	movs	r2, #1
   d58ec:	47a0      	blx	r4
}
   d58ee:	b002      	add	sp, #8
   d58f0:	bd10      	pop	{r4, pc}

000d58f2 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d58f2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d58f4:	6803      	ldr	r3, [r0, #0]
   d58f6:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d58f8:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d58fa:	4798      	blx	r3
   d58fc:	b128      	cbz	r0, d590a <_ZN3UDP4readEv+0x18>
   d58fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5900:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5902:	1c59      	adds	r1, r3, #1
   d5904:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5906:	5cd0      	ldrb	r0, [r2, r3]
   d5908:	bd10      	pop	{r4, pc}
   d590a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d590e:	bd10      	pop	{r4, pc}

000d5910 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5910:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5912:	6803      	ldr	r3, [r0, #0]
   d5914:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5916:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5918:	4798      	blx	r3
   d591a:	b118      	cbz	r0, d5924 <_ZN3UDP4peekEv+0x14>
   d591c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d591e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5920:	5cd0      	ldrb	r0, [r2, r3]
   d5922:	bd10      	pop	{r4, pc}
   d5924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5928:	bd10      	pop	{r4, pc}

000d592a <_ZN3UDP5flushEv>:

void UDP::flush() {
   d592a:	4770      	bx	lr

000d592c <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d592c:	b410      	push	{r4}
   d592e:	4603      	mov	r3, r0
   d5930:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5932:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5934:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5936:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5938:	6803      	ldr	r3, [r0, #0]
   d593a:	1a52      	subs	r2, r2, r1
   d593c:	68db      	ldr	r3, [r3, #12]
   d593e:	4421      	add	r1, r4
}
   d5940:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5944:	4718      	bx	r3

000d5946 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5946:	f1a0 0010 	sub.w	r0, r0, #16
   d594a:	f7ff bfef 	b.w	d592c <_ZNK3UDP7printToER5Print>

000d594e <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d594e:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5950:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5952:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5954:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5958:	4604      	mov	r4, r0
   d595a:	460f      	mov	r7, r1
   d595c:	4615      	mov	r5, r2
    stop();
   d595e:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5960:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5962:	4632      	mov	r2, r6
   d5964:	2100      	movs	r1, #0
   d5966:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5968:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d596a:	f000 fec9 	bl	d6700 <memset>
    saddr.sin6_len = sizeof(saddr);
   d596e:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5972:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5974:	260a      	movs	r6, #10
   d5976:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d597a:	f7fe fda5 	bl	d44c8 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d597e:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5980:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5984:	2102      	movs	r1, #2
   d5986:	4630      	mov	r0, r6
   d5988:	f7fe fdde 	bl	d4548 <sock_socket>

    if (_sock < 0) {
   d598c:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d598e:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5990:	db24      	blt.n	d59dc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5992:	2204      	movs	r2, #4
   d5994:	9200      	str	r2, [sp, #0]
   d5996:	ab02      	add	r3, sp, #8
   d5998:	f640 71ff 	movw	r1, #4095	; 0xfff
   d599c:	f7fe fdb4 	bl	d4508 <sock_setsockopt>
   d59a0:	b9e0      	cbnz	r0, d59dc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d59a2:	b195      	cbz	r5, d59ca <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d59a4:	9003      	str	r0, [sp, #12]
   d59a6:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d59aa:	a903      	add	r1, sp, #12
   d59ac:	b2e8      	uxtb	r0, r5
   d59ae:	f7fe fd4b 	bl	d4448 <if_index_to_name>
   d59b2:	b998      	cbnz	r0, d59dc <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d59b4:	2306      	movs	r3, #6
   d59b6:	9300      	str	r3, [sp, #0]
   d59b8:	f241 020b 	movw	r2, #4107	; 0x100b
   d59bc:	ab03      	add	r3, sp, #12
   d59be:	f640 71ff 	movw	r1, #4095	; 0xfff
   d59c2:	6960      	ldr	r0, [r4, #20]
   d59c4:	f7fe fda0 	bl	d4508 <sock_setsockopt>
   d59c8:	b940      	cbnz	r0, d59dc <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d59ca:	221c      	movs	r2, #28
   d59cc:	a905      	add	r1, sp, #20
   d59ce:	6960      	ldr	r0, [r4, #20]
   d59d0:	f7fe fd92 	bl	d44f8 <sock_bind>
   d59d4:	b910      	cbnz	r0, d59dc <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d59d6:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d59d8:	2001      	movs	r0, #1
   d59da:	e004      	b.n	d59e6 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d59dc:	6823      	ldr	r3, [r4, #0]
   d59de:	4620      	mov	r0, r4
   d59e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59e2:	4798      	blx	r3
   d59e4:	2000      	movs	r0, #0
    }
    return bound;
}
   d59e6:	b00d      	add	sp, #52	; 0x34
   d59e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59ea <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d59ea:	b510      	push	{r4, lr}
   d59ec:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d59ee:	6940      	ldr	r0, [r0, #20]
   d59f0:	2800      	cmp	r0, #0
   d59f2:	db01      	blt.n	d59f8 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d59f4:	f7fe fd90 	bl	d4518 <sock_close>
    }

    _sock = -1;
   d59f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d59fc:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d59fe:	2300      	movs	r3, #0
   d5a00:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5a02:	8723      	strh	r3, [r4, #56]	; 0x38
   d5a04:	bd10      	pop	{r4, pc}

000d5a06 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5a06:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5a08:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5a0a:	4605      	mov	r5, r0
   d5a0c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5a0e:	b113      	cbz	r3, d5a16 <_ZN3UDP5writeEPKhj+0x10>
   d5a10:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d5a12:	1a24      	subs	r4, r4, r0
   d5a14:	e000      	b.n	d5a18 <_ZN3UDP5writeEPKhj+0x12>
   d5a16:	461c      	mov	r4, r3
   d5a18:	4294      	cmp	r4, r2
   d5a1a:	bf28      	it	cs
   d5a1c:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d5a1e:	4622      	mov	r2, r4
   d5a20:	4418      	add	r0, r3
   d5a22:	f000 fe62 	bl	d66ea <memcpy>
    _offset += size;
   d5a26:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5a28:	4423      	add	r3, r4
   d5a2a:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	bd38      	pop	{r3, r4, r5, pc}

000d5a30 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5a30:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d5a32:	6803      	ldr	r3, [r0, #0]
   d5a34:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5a36:	4604      	mov	r4, r0
   d5a38:	460e      	mov	r6, r1
   d5a3a:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d5a3c:	4798      	blx	r3
   d5a3e:	b188      	cbz	r0, d5a64 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d5a40:	6823      	ldr	r3, [r4, #0]
   d5a42:	4620      	mov	r0, r4
   d5a44:	691b      	ldr	r3, [r3, #16]
   d5a46:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5a48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5a4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5a4c:	4285      	cmp	r5, r0
   d5a4e:	bfa8      	it	ge
   d5a50:	4605      	movge	r5, r0
   d5a52:	4419      	add	r1, r3
   d5a54:	462a      	mov	r2, r5
   d5a56:	4630      	mov	r0, r6
   d5a58:	f000 fe47 	bl	d66ea <memcpy>
        _offset += read;
   d5a5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5a5e:	442b      	add	r3, r5
   d5a60:	86e3      	strh	r3, [r4, #54]	; 0x36
   d5a62:	e001      	b.n	d5a68 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5a64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5a68:	4628      	mov	r0, r5
   d5a6a:	bd70      	pop	{r4, r5, r6, pc}

000d5a6c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5a6c:	b570      	push	{r4, r5, r6, lr}
   d5a6e:	4604      	mov	r4, r0
   d5a70:	4b05      	ldr	r3, [pc, #20]	; (d5a88 <_ZN3UDP8remoteIPEv+0x1c>)
   d5a72:	f844 3b04 	str.w	r3, [r4], #4
   d5a76:	f101 0520 	add.w	r5, r1, #32
   d5a7a:	4606      	mov	r6, r0
   d5a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a80:	682b      	ldr	r3, [r5, #0]
   d5a82:	7023      	strb	r3, [r4, #0]
   d5a84:	4630      	mov	r0, r6
   d5a86:	bd70      	pop	{r4, r5, r6, pc}
   d5a88:	000d69a4 	.word	0x000d69a4

000d5a8c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a8e:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5a90:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5a92:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5a94:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5a96:	4a0a      	ldr	r2, [pc, #40]	; (d5ac0 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5a98:	9202      	str	r2, [sp, #8]
   d5a9a:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5a9c:	468e      	mov	lr, r1
   d5a9e:	4606      	mov	r6, r0
   d5aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5aa2:	ac03      	add	r4, sp, #12
   d5aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5aa6:	682b      	ldr	r3, [r5, #0]
   d5aa8:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5aaa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5aae:	9300      	str	r3, [sp, #0]
   d5ab0:	4662      	mov	r2, ip
   d5ab2:	ab02      	add	r3, sp, #8
   d5ab4:	4671      	mov	r1, lr
   d5ab6:	4630      	mov	r0, r6
   d5ab8:	47b8      	blx	r7
    }
   d5aba:	b009      	add	sp, #36	; 0x24
   d5abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5abe:	bf00      	nop
   d5ac0:	000d69a4 	.word	0x000d69a4

000d5ac4 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5ac6:	6803      	ldr	r3, [r0, #0]
   d5ac8:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5acc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5ace:	4b0d      	ldr	r3, [pc, #52]	; (d5b04 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5ad0:	b089      	sub	sp, #36	; 0x24
   d5ad2:	f100 0620 	add.w	r6, r0, #32
   d5ad6:	4604      	mov	r4, r0
   d5ad8:	9302      	str	r3, [sp, #8]
   d5ada:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5adc:	ad03      	add	r5, sp, #12
   d5ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5ae0:	6833      	ldr	r3, [r6, #0]
   d5ae2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5ae4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5ae6:	9300      	str	r3, [sp, #0]
   d5ae8:	4672      	mov	r2, lr
   d5aea:	ab02      	add	r3, sp, #8
   d5aec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5aee:	4620      	mov	r0, r4
   d5af0:	47b8      	blx	r7
    flush(); // wait for send to complete
   d5af2:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5af4:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d5af6:	69db      	ldr	r3, [r3, #28]
   d5af8:	4620      	mov	r0, r4
   d5afa:	4798      	blx	r3
    return result;
}
   d5afc:	4628      	mov	r0, r5
   d5afe:	b009      	add	sp, #36	; 0x24
   d5b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b02:	bf00      	nop
   d5b04:	000d69a4 	.word	0x000d69a4

000d5b08 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5b0a:	7843      	ldrb	r3, [r0, #1]
   d5b0c:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5b0e:	b08d      	sub	sp, #52	; 0x34
   d5b10:	4605      	mov	r5, r0
   d5b12:	460c      	mov	r4, r1
   d5b14:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5b16:	d101      	bne.n	d5b1c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5b18:	1d01      	adds	r1, r0, #4
   d5b1a:	e033      	b.n	d5b84 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5b1c:	2b0a      	cmp	r3, #10
   d5b1e:	d135      	bne.n	d5b8c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5b20:	2211      	movs	r2, #17
   d5b22:	2100      	movs	r1, #0
   d5b24:	a801      	add	r0, sp, #4
   d5b26:	f000 fdeb 	bl	d6700 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5b2a:	68ab      	ldr	r3, [r5, #8]
   d5b2c:	b943      	cbnz	r3, d5b40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5b2e:	68eb      	ldr	r3, [r5, #12]
   d5b30:	b933      	cbnz	r3, d5b40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5b32:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5b36:	692e      	ldr	r6, [r5, #16]
   d5b38:	f7fe fcb6 	bl	d44a8 <inet_htonl>
   d5b3c:	4286      	cmp	r6, r0
   d5b3e:	d01f      	beq.n	d5b80 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b40:	f105 0308 	add.w	r3, r5, #8
   d5b44:	ae01      	add	r6, sp, #4
   d5b46:	f105 0e18 	add.w	lr, r5, #24
   d5b4a:	6818      	ldr	r0, [r3, #0]
   d5b4c:	6859      	ldr	r1, [r3, #4]
   d5b4e:	4632      	mov	r2, r6
   d5b50:	c203      	stmia	r2!, {r0, r1}
   d5b52:	3308      	adds	r3, #8
   d5b54:	4573      	cmp	r3, lr
   d5b56:	4616      	mov	r6, r2
   d5b58:	d1f7      	bne.n	d5b4a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5b5a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5b5c:	a901      	add	r1, sp, #4
   d5b5e:	a806      	add	r0, sp, #24
   d5b60:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5b62:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5b66:	f7ff f9d9 	bl	d4f1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5b6c:	3404      	adds	r4, #4
   d5b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b70:	6833      	ldr	r3, [r6, #0]
   d5b72:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5b74:	b157      	cbz	r7, d5b8c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5b76:	8868      	ldrh	r0, [r5, #2]
   d5b78:	f7fe fc9e 	bl	d44b8 <inet_ntohs>
   d5b7c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5b7e:	e005      	b.n	d5b8c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5b80:	f105 0114 	add.w	r1, r5, #20
   d5b84:	4620      	mov	r0, r4
   d5b86:	f7ff f9fe 	bl	d4f86 <_ZN9IPAddressaSEPKh>
   d5b8a:	e7f3      	b.n	d5b74 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5b8c:	b00d      	add	sp, #52	; 0x34
   d5b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b90 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b94:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5b96:	ab0e      	add	r3, sp, #56	; 0x38
   d5b98:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5b9a:	4606      	mov	r6, r0
   d5b9c:	4617      	mov	r7, r2
   d5b9e:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5ba0:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5ba4:	462a      	mov	r2, r5
   d5ba6:	4629      	mov	r1, r5
   d5ba8:	f7fe fc9e 	bl	d44e8 <netdb_getaddrinfo>
   d5bac:	2800      	cmp	r0, #0
   d5bae:	db1f      	blt.n	d5bf0 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5bb0:	9b01      	ldr	r3, [sp, #4]
   d5bb2:	b1fb      	cbz	r3, d5bf4 <_ZN3UDP11beginPacketEPKct+0x64>
   d5bb4:	695b      	ldr	r3, [r3, #20]
   d5bb6:	b1eb      	cbz	r3, d5bf4 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5bb8:	a802      	add	r0, sp, #8
   d5bba:	f7ff f9a1 	bl	d4f00 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5bbe:	9b01      	ldr	r3, [sp, #4]
   d5bc0:	462a      	mov	r2, r5
   d5bc2:	6958      	ldr	r0, [r3, #20]
   d5bc4:	a902      	add	r1, sp, #8
   d5bc6:	f7ff ff9f 	bl	d5b08 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5bca:	a802      	add	r0, sp, #8
   d5bcc:	f7ff f9b8 	bl	d4f40 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5bd0:	b180      	cbz	r0, d5bf4 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5bd2:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5bd4:	ad03      	add	r5, sp, #12
   d5bd6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5bda:	4b0b      	ldr	r3, [pc, #44]	; (d5c08 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5bdc:	9308      	str	r3, [sp, #32]
   d5bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5be0:	ac09      	add	r4, sp, #36	; 0x24
   d5be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5be4:	682b      	ldr	r3, [r5, #0]
   d5be6:	7023      	strb	r3, [r4, #0]
   d5be8:	463a      	mov	r2, r7
   d5bea:	a908      	add	r1, sp, #32
   d5bec:	4630      	mov	r0, r6
   d5bee:	47c0      	blx	r8
   d5bf0:	4604      	mov	r4, r0
   d5bf2:	e001      	b.n	d5bf8 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5bf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5bf8:	9801      	ldr	r0, [sp, #4]
   d5bfa:	f7fe fc6d 	bl	d44d8 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d5bfe:	4620      	mov	r0, r4
   d5c00:	b00e      	add	sp, #56	; 0x38
   d5c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c06:	bf00      	nop
   d5c08:	000d69a4 	.word	0x000d69a4

000d5c0c <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5c10:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5c14:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5c18:	b098      	sub	sp, #96	; 0x60
   d5c1a:	4605      	mov	r5, r0
   d5c1c:	460c      	mov	r4, r1
   d5c1e:	4617      	mov	r7, r2
   d5c20:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5c22:	db00      	blt.n	d5c26 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d5c24:	b911      	cbnz	r1, d5c2c <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d5c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5c2a:	e04e      	b.n	d5cca <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5c2c:	f04f 0a1c 	mov.w	sl, #28
   d5c30:	ae09      	add	r6, sp, #36	; 0x24
   d5c32:	4652      	mov	r2, sl
   d5c34:	2100      	movs	r1, #0
   d5c36:	4630      	mov	r0, r6
   d5c38:	f000 fd62 	bl	d6700 <memset>
        socklen_t slen = sizeof(saddr);
   d5c3c:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d5c40:	f1b9 0f00 	cmp.w	r9, #0
   d5c44:	d014      	beq.n	d5c70 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c4a:	fbb9 f1f2 	udiv	r1, r9, r2
   d5c4e:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d5c50:	fb02 9111 	mls	r1, r2, r1, r9
   d5c54:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5c56:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5c58:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5c5a:	9300      	str	r3, [sp, #0]
   d5c5c:	f241 0206 	movw	r2, #4102	; 0x1006
   d5c60:	ab10      	add	r3, sp, #64	; 0x40
   d5c62:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5c66:	4640      	mov	r0, r8
   d5c68:	f7fe fc4e 	bl	d4508 <sock_setsockopt>
            if (ret) {
   d5c6c:	b108      	cbz	r0, d5c72 <_ZN3UDP13receivePacketEPhjm+0x66>
   d5c6e:	e02c      	b.n	d5cca <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5c70:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5c72:	ab04      	add	r3, sp, #16
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	4621      	mov	r1, r4
   d5c78:	4603      	mov	r3, r0
   d5c7a:	9600      	str	r6, [sp, #0]
   d5c7c:	463a      	mov	r2, r7
   d5c7e:	6968      	ldr	r0, [r5, #20]
   d5c80:	f7fe fc52 	bl	d4528 <sock_recvfrom>
        if (ret >= 0) {
   d5c84:	1e04      	subs	r4, r0, #0
   d5c86:	db1f      	blt.n	d5cc8 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5c88:	f105 071c 	add.w	r7, r5, #28
   d5c8c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5c90:	4630      	mov	r0, r6
   d5c92:	4639      	mov	r1, r7
   d5c94:	f7ff ff38 	bl	d5b08 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5c98:	2600      	movs	r6, #0
   d5c9a:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d5c9c:	4639      	mov	r1, r7
   d5c9e:	a805      	add	r0, sp, #20
   d5ca0:	9310      	str	r3, [sp, #64]	; 0x40
   d5ca2:	9611      	str	r6, [sp, #68]	; 0x44
   d5ca4:	f7ff fdd8 	bl	d5858 <_ZN6StringC1ERK9Printable>
   d5ca8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d5caa:	9303      	str	r3, [sp, #12]
   d5cac:	9b05      	ldr	r3, [sp, #20]
   d5cae:	9302      	str	r3, [sp, #8]
   d5cb0:	4b07      	ldr	r3, [pc, #28]	; (d5cd0 <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d5cb2:	9300      	str	r3, [sp, #0]
   d5cb4:	2001      	movs	r0, #1
   d5cb6:	9401      	str	r4, [sp, #4]
   d5cb8:	4633      	mov	r3, r6
   d5cba:	aa10      	add	r2, sp, #64	; 0x40
   d5cbc:	4905      	ldr	r1, [pc, #20]	; (d5cd4 <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d5cbe:	f7fe fccb 	bl	d4658 <log_message>
   d5cc2:	a805      	add	r0, sp, #20
   d5cc4:	f7ff fd3a 	bl	d573c <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5cc8:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5cca:	b018      	add	sp, #96	; 0x60
   d5ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5cd0:	000d6b75 	.word	0x000d6b75
   d5cd4:	000d6ad9 	.word	0x000d6ad9

000d5cd8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5cd8:	b538      	push	{r3, r4, r5, lr}
   d5cda:	4605      	mov	r5, r0
   d5cdc:	4614      	mov	r4, r2
   d5cde:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5ce0:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5ce2:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5ce4:	d111      	bne.n	d5d0a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5ce6:	231c      	movs	r3, #28
   d5ce8:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5cea:	230a      	movs	r3, #10
   d5cec:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5cee:	f7fe fbeb 	bl	d44c8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5cf2:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5cf4:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5cf8:	1d2b      	adds	r3, r5, #4
   d5cfa:	3514      	adds	r5, #20
   d5cfc:	f853 2b04 	ldr.w	r2, [r3], #4
   d5d00:	f844 2b04 	str.w	r2, [r4], #4
   d5d04:	42ab      	cmp	r3, r5
   d5d06:	d1f9      	bne.n	d5cfc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5d08:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5d0a:	2b04      	cmp	r3, #4
   d5d0c:	d10a      	bne.n	d5d24 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5d0e:	2310      	movs	r3, #16
   d5d10:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5d12:	2302      	movs	r3, #2
   d5d14:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5d16:	f7fe fbd7 	bl	d44c8 <inet_htons>
   d5d1a:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5d1c:	6868      	ldr	r0, [r5, #4]
   d5d1e:	f7fe fbc3 	bl	d44a8 <inet_htonl>
   d5d22:	6060      	str	r0, [r4, #4]
   d5d24:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d28 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d2c:	4698      	mov	r8, r3
   d5d2e:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5d30:	2320      	movs	r3, #32
   d5d32:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5d34:	4682      	mov	sl, r0
   d5d36:	468b      	mov	fp, r1
   d5d38:	a804      	add	r0, sp, #16
   d5d3a:	4641      	mov	r1, r8
   d5d3c:	4616      	mov	r6, r2
   d5d3e:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5d42:	9308      	str	r3, [sp, #32]
   d5d44:	9409      	str	r4, [sp, #36]	; 0x24
   d5d46:	f7ff fd87 	bl	d5858 <_ZN6StringC1ERK9Printable>
   d5d4a:	9b04      	ldr	r3, [sp, #16]
   d5d4c:	9302      	str	r3, [sp, #8]
   d5d4e:	ad08      	add	r5, sp, #32
   d5d50:	4b15      	ldr	r3, [pc, #84]	; (d5da8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d5d52:	4916      	ldr	r1, [pc, #88]	; (d5dac <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d5d54:	9300      	str	r3, [sp, #0]
   d5d56:	462a      	mov	r2, r5
   d5d58:	4623      	mov	r3, r4
   d5d5a:	2001      	movs	r0, #1
   d5d5c:	f8cd 900c 	str.w	r9, [sp, #12]
   d5d60:	9601      	str	r6, [sp, #4]
   d5d62:	f7fe fc79 	bl	d4658 <log_message>
	sockaddr_storage s = {};
   d5d66:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5d68:	a804      	add	r0, sp, #16
   d5d6a:	f7ff fce7 	bl	d573c <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d5d6e:	463a      	mov	r2, r7
   d5d70:	4621      	mov	r1, r4
   d5d72:	4628      	mov	r0, r5
   d5d74:	f000 fcc4 	bl	d6700 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5d78:	462a      	mov	r2, r5
   d5d7a:	4649      	mov	r1, r9
   d5d7c:	4640      	mov	r0, r8
   d5d7e:	f7ff ffab 	bl	d5cd8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5d82:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d5d86:	b14b      	cbz	r3, d5d9c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5d88:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d5d8c:	4623      	mov	r3, r4
   d5d8e:	4632      	mov	r2, r6
   d5d90:	4659      	mov	r1, fp
   d5d92:	f8da 0014 	ldr.w	r0, [sl, #20]
   d5d96:	f7fe fbcf 	bl	d4538 <sock_sendto>
   d5d9a:	e001      	b.n	d5da0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5da0:	b011      	add	sp, #68	; 0x44
   d5da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5da6:	bf00      	nop
   d5da8:	000d6b92 	.word	0x000d6b92
   d5dac:	000d6ad9 	.word	0x000d6ad9

000d5db0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5db2:	b091      	sub	sp, #68	; 0x44
   d5db4:	460c      	mov	r4, r1
   d5db6:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5db8:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5dba:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5dbc:	a809      	add	r0, sp, #36	; 0x24
   d5dbe:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5dc0:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5dc2:	f000 fc9d 	bl	d6700 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5dc6:	aa09      	add	r2, sp, #36	; 0x24
   d5dc8:	2100      	movs	r1, #0
   d5dca:	4620      	mov	r0, r4
   d5dcc:	f7ff ff84 	bl	d5cd8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5dd0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5dd4:	2b02      	cmp	r3, #2
   d5dd6:	d12e      	bne.n	d5e36 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d5dd8:	2300      	movs	r3, #0
   d5dda:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5dde:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5de0:	b1dd      	cbz	r5, d5e1a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5de2:	a902      	add	r1, sp, #8
   d5de4:	4628      	mov	r0, r5
   d5de6:	f7fe fb37 	bl	d4458 <if_get_by_index>
   d5dea:	b9b0      	cbnz	r0, d5e1a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d5dec:	a910      	add	r1, sp, #64	; 0x40
   d5dee:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5df2:	9802      	ldr	r0, [sp, #8]
   d5df4:	f7fe fb38 	bl	d4468 <if_get_addrs>
   d5df8:	b960      	cbnz	r0, d5e14 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5dfa:	9b03      	ldr	r3, [sp, #12]
   d5dfc:	b153      	cbz	r3, d5e14 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5dfe:	68da      	ldr	r2, [r3, #12]
   d5e00:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5e02:	7851      	ldrb	r1, [r2, #1]
   d5e04:	2902      	cmp	r1, #2
   d5e06:	d103      	bne.n	d5e10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5e08:	6852      	ldr	r2, [r2, #4]
   d5e0a:	b10a      	cbz	r2, d5e10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5e0c:	9205      	str	r2, [sp, #20]
   d5e0e:	e001      	b.n	d5e14 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	e7f3      	b.n	d5dfc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5e14:	9803      	ldr	r0, [sp, #12]
   d5e16:	f7fe fb2f 	bl	d4478 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5e1a:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5e1c:	f04f 0308 	mov.w	r3, #8
   d5e20:	9300      	str	r3, [sp, #0]
   d5e22:	bf18      	it	ne
   d5e24:	2203      	movne	r2, #3
   d5e26:	ab04      	add	r3, sp, #16
   d5e28:	bf08      	it	eq
   d5e2a:	2204      	moveq	r2, #4
   d5e2c:	2100      	movs	r1, #0
   d5e2e:	4630      	mov	r0, r6
   d5e30:	f7fe fb6a 	bl	d4508 <sock_setsockopt>
   d5e34:	e01e      	b.n	d5e74 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5e36:	2b0a      	cmp	r3, #10
   d5e38:	d11a      	bne.n	d5e70 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d5e3a:	ac04      	add	r4, sp, #16
   d5e3c:	2214      	movs	r2, #20
   d5e3e:	2100      	movs	r1, #0
   d5e40:	4620      	mov	r0, r4
   d5e42:	f000 fc5d 	bl	d6700 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5e46:	ab0b      	add	r3, sp, #44	; 0x2c
   d5e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5e4a:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5e50:	f04f 0314 	mov.w	r3, #20
   d5e54:	9300      	str	r3, [sp, #0]
   d5e56:	bf18      	it	ne
   d5e58:	220c      	movne	r2, #12
   d5e5a:	4623      	mov	r3, r4
   d5e5c:	bf08      	it	eq
   d5e5e:	220d      	moveq	r2, #13
   d5e60:	2129      	movs	r1, #41	; 0x29
   d5e62:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5e64:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5e66:	f7fe fb4f 	bl	d4508 <sock_setsockopt>
   d5e6a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5e6e:	e001      	b.n	d5e74 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5e74:	b011      	add	sp, #68	; 0x44
   d5e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e78 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5e78:	b538      	push	{r3, r4, r5, lr}
   d5e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e7e:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5e80:	4b0b      	ldr	r3, [pc, #44]	; (d5eb0 <_ZN3UDPC1Ev+0x38>)
   d5e82:	f103 0208 	add.w	r2, r3, #8
   d5e86:	336c      	adds	r3, #108	; 0x6c
   d5e88:	2500      	movs	r5, #0
   d5e8a:	6103      	str	r3, [r0, #16]
   d5e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d5e90:	4604      	mov	r4, r0
   d5e92:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5e94:	6002      	str	r2, [r0, #0]
   d5e96:	6143      	str	r3, [r0, #20]
   d5e98:	301c      	adds	r0, #28
   d5e9a:	f7ff f831 	bl	d4f00 <_ZN9IPAddressC1Ev>
   d5e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5ea2:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5ea4:	8725      	strh	r5, [r4, #56]	; 0x38
   d5ea6:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5ea8:	6423      	str	r3, [r4, #64]	; 0x40
   d5eaa:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5eac:	4620      	mov	r0, r4
   d5eae:	bd38      	pop	{r3, r4, r5, pc}
   d5eb0:	000d6bc0 	.word	0x000d6bc0

000d5eb4 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5eb4:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5eb6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5eba:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5ebc:	b11b      	cbz	r3, d5ec6 <_ZN3UDP13releaseBufferEv+0x12>
   d5ebe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5ec0:	b108      	cbz	r0, d5ec6 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5ec2:	f7fe f8ec 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5ec6:	2300      	movs	r3, #0
   d5ec8:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5eca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5ece:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5ed0:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5ed2:	8723      	strh	r3, [r4, #56]	; 0x38
   d5ed4:	bd10      	pop	{r4, pc}

000d5ed6 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5ed6:	b570      	push	{r4, r5, r6, lr}
   d5ed8:	4604      	mov	r4, r0
   d5eda:	4616      	mov	r6, r2
   d5edc:	460d      	mov	r5, r1
    releaseBuffer();
   d5ede:	f7ff ffe9 	bl	d5eb4 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5ee2:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5ee4:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5ee6:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5ee8:	b93e      	cbnz	r6, d5efa <_ZN3UDP9setBufferEjPh+0x24>
   d5eea:	b135      	cbz	r5, d5efa <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5eec:	4628      	mov	r0, r5
   d5eee:	f7fe f8d4 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5ef2:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5ef4:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5ef6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5efa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5efc:	b103      	cbz	r3, d5f00 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5efe:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5f00:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5f02:	3000      	adds	r0, #0
   d5f04:	bf18      	it	ne
   d5f06:	2001      	movne	r0, #1
   d5f08:	bd70      	pop	{r4, r5, r6, pc}

000d5f0a <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5f0a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5f0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5f0e:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d5f10:	b91a      	cbnz	r2, d5f1a <_ZN3UDP11parsePacketEm+0x10>
   d5f12:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5f14:	b109      	cbz	r1, d5f1a <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d5f16:	f7ff ffde 	bl	d5ed6 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5f1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5f1c:	2300      	movs	r3, #0
   d5f1e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5f20:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5f22:	b141      	cbz	r1, d5f36 <_ZN3UDP11parsePacketEm+0x2c>
   d5f24:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5f26:	b132      	cbz	r2, d5f36 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d5f28:	6820      	ldr	r0, [r4, #0]
   d5f2a:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	47a8      	blx	r5
        if (result > 0) {
   d5f30:	2800      	cmp	r0, #0
            _total = result;
   d5f32:	bfc8      	it	gt
   d5f34:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5f36:	6823      	ldr	r3, [r4, #0]
   d5f38:	4620      	mov	r0, r4
   d5f3a:	691b      	ldr	r3, [r3, #16]
}
   d5f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5f40:	4718      	bx	r3
	...

000d5f44 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f46:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5f48:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5f4a:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5f4c:	2600      	movs	r6, #0
   d5f4e:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5f50:	4617      	mov	r7, r2
   d5f52:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5f54:	9308      	str	r3, [sp, #32]
   d5f56:	9609      	str	r6, [sp, #36]	; 0x24
   d5f58:	f7ff fc7e 	bl	d5858 <_ZN6StringC1ERK9Printable>
   d5f5c:	9b04      	ldr	r3, [sp, #16]
   d5f5e:	9301      	str	r3, [sp, #4]
   d5f60:	4b10      	ldr	r3, [pc, #64]	; (d5fa4 <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d5f62:	9300      	str	r3, [sp, #0]
   d5f64:	aa08      	add	r2, sp, #32
   d5f66:	4633      	mov	r3, r6
   d5f68:	490f      	ldr	r1, [pc, #60]	; (d5fa8 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d5f6a:	9702      	str	r7, [sp, #8]
   d5f6c:	2001      	movs	r0, #1
   d5f6e:	f7fe fb73 	bl	d4658 <log_message>
   d5f72:	a804      	add	r0, sp, #16
   d5f74:	f7ff fbe2 	bl	d573c <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5f78:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d5f7a:	b922      	cbnz	r2, d5f86 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d5f7c:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d5f7e:	b111      	cbz	r1, d5f86 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d5f80:	4628      	mov	r0, r5
   d5f82:	f7ff ffa8 	bl	d5ed6 <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f86:	3404      	adds	r4, #4
   d5f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5f8a:	f105 0620 	add.w	r6, r5, #32
   d5f8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5f90:	6823      	ldr	r3, [r4, #0]
   d5f92:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5f94:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5f96:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5f98:	2300      	movs	r3, #0
   d5f9a:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5f9c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5f9e:	b011      	add	sp, #68	; 0x44
   d5fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fa2:	bf00      	nop
   d5fa4:	000d6bac 	.word	0x000d6bac
   d5fa8:	000d6ad9 	.word	0x000d6ad9

000d5fac <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5fac:	b510      	push	{r4, lr}
   d5fae:	4b07      	ldr	r3, [pc, #28]	; (d5fcc <_ZN3UDPD1Ev+0x20>)
   d5fb0:	f103 0208 	add.w	r2, r3, #8
   d5fb4:	336c      	adds	r3, #108	; 0x6c
   d5fb6:	4604      	mov	r4, r0
   d5fb8:	6002      	str	r2, [r0, #0]
   d5fba:	6103      	str	r3, [r0, #16]
   d5fbc:	f7ff fd15 	bl	d59ea <_ZN3UDP4stopEv>
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	f7ff ff77 	bl	d5eb4 <_ZN3UDP13releaseBufferEv>
   d5fc6:	4620      	mov	r0, r4
   d5fc8:	bd10      	pop	{r4, pc}
   d5fca:	bf00      	nop
   d5fcc:	000d6bc0 	.word	0x000d6bc0

000d5fd0 <_ZN3UDPD0Ev>:
   d5fd0:	b510      	push	{r4, lr}
   d5fd2:	4604      	mov	r4, r0
   d5fd4:	f7ff ffea 	bl	d5fac <_ZN3UDPD1Ev>
   d5fd8:	4620      	mov	r0, r4
   d5fda:	f7fe f860 	bl	d409e <_ZdlPv>
   d5fde:	4620      	mov	r0, r4
   d5fe0:	bd10      	pop	{r4, pc}

000d5fe2 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5fe2:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5fe4:	6940      	ldr	r0, [r0, #20]
   d5fe6:	2800      	cmp	r0, #0
   d5fe8:	db04      	blt.n	d5ff4 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5fea:	2301      	movs	r3, #1
   d5fec:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5ff0:	f7ff bede 	b.w	d5db0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d5ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5ff8:	4770      	bx	lr

000d5ffa <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5ffa:	4770      	bx	lr

000d5ffc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ffc:	7441      	strb	r1, [r0, #17]
   d5ffe:	4770      	bx	lr

000d6000 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d6000:	7c00      	ldrb	r0, [r0, #16]
   d6002:	f7fe baf1 	b.w	d45e8 <HAL_USART_Available_Data_For_Write>

000d6006 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6006:	7c00      	ldrb	r0, [r0, #16]
   d6008:	f7fe bac6 	b.w	d4598 <HAL_USART_Available_Data>

000d600c <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d600c:	7c00      	ldrb	r0, [r0, #16]
   d600e:	f7fe bad3 	b.w	d45b8 <HAL_USART_Peek_Data>

000d6012 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6012:	7c00      	ldrb	r0, [r0, #16]
   d6014:	f7fe bac8 	b.w	d45a8 <HAL_USART_Read_Data>

000d6018 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6018:	7c00      	ldrb	r0, [r0, #16]
   d601a:	f7fe bad5 	b.w	d45c8 <HAL_USART_Flush_Data>

000d601e <_ZN11USARTSerialD0Ev>:
   d601e:	b510      	push	{r4, lr}
   d6020:	4604      	mov	r4, r0
   d6022:	f7fe f83c 	bl	d409e <_ZdlPv>
   d6026:	4620      	mov	r0, r4
   d6028:	bd10      	pop	{r4, pc}

000d602a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d602a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d602c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d602e:	4604      	mov	r4, r0
   d6030:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6032:	b925      	cbnz	r5, d603e <_ZN11USARTSerial5writeEh+0x14>
   d6034:	7c00      	ldrb	r0, [r0, #16]
   d6036:	f7fe fad7 	bl	d45e8 <HAL_USART_Available_Data_For_Write>
   d603a:	2800      	cmp	r0, #0
   d603c:	dd05      	ble.n	d604a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d603e:	4631      	mov	r1, r6
   d6040:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6046:	f7fe ba9f 	b.w	d4588 <HAL_USART_Write_Data>
  }
  return 0;
}
   d604a:	4628      	mov	r0, r5
   d604c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6050 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6050:	b510      	push	{r4, lr}
   d6052:	4604      	mov	r4, r0
   d6054:	4608      	mov	r0, r1
   d6056:	4611      	mov	r1, r2
   d6058:	2200      	movs	r2, #0
   d605a:	6062      	str	r2, [r4, #4]
   d605c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6060:	60a2      	str	r2, [r4, #8]
   d6062:	4a05      	ldr	r2, [pc, #20]	; (d6078 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6064:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6066:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6068:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d606a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d606c:	461a      	mov	r2, r3
   d606e:	f7fe fa83 	bl	d4578 <HAL_USART_Init>
}
   d6072:	4620      	mov	r0, r4
   d6074:	bd10      	pop	{r4, pc}
   d6076:	bf00      	nop
   d6078:	000d6c38 	.word	0x000d6c38

000d607c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d607c:	7c00      	ldrb	r0, [r0, #16]
   d607e:	f7fe baab 	b.w	d45d8 <HAL_USART_Is_Enabled>
	...

000d6084 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6084:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6086:	4d0c      	ldr	r5, [pc, #48]	; (d60b8 <_Z22__fetch_global_Serial1v+0x34>)
   d6088:	6829      	ldr	r1, [r5, #0]
   d608a:	f011 0401 	ands.w	r4, r1, #1
   d608e:	d111      	bne.n	d60b4 <_Z22__fetch_global_Serial1v+0x30>
   d6090:	4628      	mov	r0, r5
   d6092:	f7fe f808 	bl	d40a6 <__cxa_guard_acquire>
   d6096:	b168      	cbz	r0, d60b4 <_Z22__fetch_global_Serial1v+0x30>
   d6098:	4a08      	ldr	r2, [pc, #32]	; (d60bc <_Z22__fetch_global_Serial1v+0x38>)
   d609a:	4b09      	ldr	r3, [pc, #36]	; (d60c0 <_Z22__fetch_global_Serial1v+0x3c>)
   d609c:	4809      	ldr	r0, [pc, #36]	; (d60c4 <_Z22__fetch_global_Serial1v+0x40>)
   d609e:	4621      	mov	r1, r4
   d60a0:	f7ff ffd6 	bl	d6050 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d60a4:	4628      	mov	r0, r5
   d60a6:	f7fe f803 	bl	d40b0 <__cxa_guard_release>
   d60aa:	4a07      	ldr	r2, [pc, #28]	; (d60c8 <_Z22__fetch_global_Serial1v+0x44>)
   d60ac:	4907      	ldr	r1, [pc, #28]	; (d60cc <_Z22__fetch_global_Serial1v+0x48>)
   d60ae:	4805      	ldr	r0, [pc, #20]	; (d60c4 <_Z22__fetch_global_Serial1v+0x40>)
   d60b0:	f000 f990 	bl	d63d4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d60b4:	4803      	ldr	r0, [pc, #12]	; (d60c4 <_Z22__fetch_global_Serial1v+0x40>)
   d60b6:	bd38      	pop	{r3, r4, r5, pc}
   d60b8:	2003e66c 	.word	0x2003e66c
   d60bc:	2003e670 	.word	0x2003e670
   d60c0:	2003e5e8 	.word	0x2003e5e8
   d60c4:	2003e5d4 	.word	0x2003e5d4
   d60c8:	2003e3bc 	.word	0x2003e3bc
   d60cc:	000d5ffb 	.word	0x000d5ffb

000d60d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60d0:	7441      	strb	r1, [r0, #17]
   d60d2:	4770      	bx	lr

000d60d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d60d4:	4770      	bx	lr

000d60d6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d60d6:	2100      	movs	r1, #0
   d60d8:	7c00      	ldrb	r0, [r0, #16]
   d60da:	f7fe baa5 	b.w	d4628 <HAL_USB_USART_Receive_Data>

000d60de <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d60de:	2101      	movs	r1, #1
   d60e0:	7c00      	ldrb	r0, [r0, #16]
   d60e2:	f7fe baa1 	b.w	d4628 <HAL_USB_USART_Receive_Data>

000d60e6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d60e6:	7c00      	ldrb	r0, [r0, #16]
   d60e8:	f7fe ba96 	b.w	d4618 <HAL_USB_USART_Available_Data_For_Write>

000d60ec <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d60ec:	7c00      	ldrb	r0, [r0, #16]
   d60ee:	f7fe ba8b 	b.w	d4608 <HAL_USB_USART_Available_Data>

000d60f2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d60f2:	b538      	push	{r3, r4, r5, lr}
   d60f4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60f6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d60f8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60fa:	f7fe fa8d 	bl	d4618 <HAL_USB_USART_Available_Data_For_Write>
   d60fe:	2800      	cmp	r0, #0
   d6100:	dc01      	bgt.n	d6106 <_ZN9USBSerial5writeEh+0x14>
   d6102:	7c60      	ldrb	r0, [r4, #17]
   d6104:	b120      	cbz	r0, d6110 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d6106:	4629      	mov	r1, r5
   d6108:	7c20      	ldrb	r0, [r4, #16]
   d610a:	f7fe fa95 	bl	d4638 <HAL_USB_USART_Send_Data>
    return 1;
   d610e:	2001      	movs	r0, #1
  }
  return 0;
}
   d6110:	bd38      	pop	{r3, r4, r5, pc}

000d6112 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6112:	7c00      	ldrb	r0, [r0, #16]
   d6114:	f7fe ba98 	b.w	d4648 <HAL_USB_USART_Flush_Data>

000d6118 <_ZN9USBSerialD0Ev>:
   d6118:	b510      	push	{r4, lr}
   d611a:	4604      	mov	r4, r0
   d611c:	f7fd ffbf 	bl	d409e <_ZdlPv>
   d6120:	4620      	mov	r0, r4
   d6122:	bd10      	pop	{r4, pc}

000d6124 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6124:	b510      	push	{r4, lr}
   d6126:	4604      	mov	r4, r0
   d6128:	2300      	movs	r3, #0
   d612a:	6063      	str	r3, [r4, #4]
   d612c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6130:	60a3      	str	r3, [r4, #8]
   d6132:	4b05      	ldr	r3, [pc, #20]	; (d6148 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6134:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6136:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6138:	4608      	mov	r0, r1
{
  _serial = serial;
   d613a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d613c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d613e:	4611      	mov	r1, r2
   d6140:	f7fe fa5a 	bl	d45f8 <HAL_USB_USART_Init>
}
   d6144:	4620      	mov	r0, r4
   d6146:	bd10      	pop	{r4, pc}
   d6148:	000d6c68 	.word	0x000d6c68

000d614c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d614c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d614e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6150:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6152:	2100      	movs	r1, #0
   d6154:	f000 fad4 	bl	d6700 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6158:	4620      	mov	r0, r4
   d615a:	bd10      	pop	{r4, pc}

000d615c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d615c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d615e:	4d0e      	ldr	r5, [pc, #56]	; (d6198 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6160:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6162:	a801      	add	r0, sp, #4
   d6164:	f7ff fff2 	bl	d614c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6168:	6829      	ldr	r1, [r5, #0]
   d616a:	f011 0401 	ands.w	r4, r1, #1
   d616e:	d110      	bne.n	d6192 <_Z16_fetch_usbserialv+0x36>
   d6170:	4628      	mov	r0, r5
   d6172:	f7fd ff98 	bl	d40a6 <__cxa_guard_acquire>
   d6176:	b160      	cbz	r0, d6192 <_Z16_fetch_usbserialv+0x36>
   d6178:	aa01      	add	r2, sp, #4
   d617a:	4621      	mov	r1, r4
   d617c:	4807      	ldr	r0, [pc, #28]	; (d619c <_Z16_fetch_usbserialv+0x40>)
   d617e:	f7ff ffd1 	bl	d6124 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6182:	4628      	mov	r0, r5
   d6184:	f7fd ff94 	bl	d40b0 <__cxa_guard_release>
   d6188:	4a05      	ldr	r2, [pc, #20]	; (d61a0 <_Z16_fetch_usbserialv+0x44>)
   d618a:	4906      	ldr	r1, [pc, #24]	; (d61a4 <_Z16_fetch_usbserialv+0x48>)
   d618c:	4803      	ldr	r0, [pc, #12]	; (d619c <_Z16_fetch_usbserialv+0x40>)
   d618e:	f000 f921 	bl	d63d4 <__aeabi_atexit>
	return _usbserial;
}
   d6192:	4802      	ldr	r0, [pc, #8]	; (d619c <_Z16_fetch_usbserialv+0x40>)
   d6194:	b007      	add	sp, #28
   d6196:	bd30      	pop	{r4, r5, pc}
   d6198:	2003e6f4 	.word	0x2003e6f4
   d619c:	2003e6f8 	.word	0x2003e6f8
   d61a0:	2003e3bc 	.word	0x2003e3bc
   d61a4:	000d60d5 	.word	0x000d60d5

000d61a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d61a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d61aa:	4b0c      	ldr	r3, [pc, #48]	; (d61dc <serialEventRun+0x34>)
   d61ac:	b133      	cbz	r3, d61bc <serialEventRun+0x14>
   d61ae:	f7ff ffd5 	bl	d615c <_Z16_fetch_usbserialv>
   d61b2:	6803      	ldr	r3, [r0, #0]
   d61b4:	691b      	ldr	r3, [r3, #16]
   d61b6:	4798      	blx	r3
   d61b8:	2800      	cmp	r0, #0
   d61ba:	dc09      	bgt.n	d61d0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d61bc:	4b08      	ldr	r3, [pc, #32]	; (d61e0 <serialEventRun+0x38>)
   d61be:	b163      	cbz	r3, d61da <serialEventRun+0x32>
   d61c0:	f7ff ff60 	bl	d6084 <_Z22__fetch_global_Serial1v>
   d61c4:	6803      	ldr	r3, [r0, #0]
   d61c6:	691b      	ldr	r3, [r3, #16]
   d61c8:	4798      	blx	r3
   d61ca:	2800      	cmp	r0, #0
   d61cc:	dc03      	bgt.n	d61d6 <serialEventRun+0x2e>
   d61ce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d61d0:	f3af 8000 	nop.w
   d61d4:	e7f2      	b.n	d61bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d61d6:	f3af 8000 	nop.w
   d61da:	bd08      	pop	{r3, pc}
	...

000d61e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d61e4:	b508      	push	{r3, lr}
	serialEventRun();
   d61e6:	f7ff ffdf 	bl	d61a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d61ea:	f7fe f8ad 	bl	d4348 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d61ee:	4b01      	ldr	r3, [pc, #4]	; (d61f4 <_post_loop+0x10>)
   d61f0:	6018      	str	r0, [r3, #0]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	2003e710 	.word	0x2003e710

000d61f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d61f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d61fa:	2300      	movs	r3, #0
   d61fc:	9300      	str	r3, [sp, #0]
   d61fe:	461a      	mov	r2, r3
   d6200:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6204:	f7fe fa52 	bl	d46ac <system_ctrl_set_result>
}
   d6208:	b003      	add	sp, #12
   d620a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6210 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6210:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6212:	8843      	ldrh	r3, [r0, #2]
   d6214:	2b0a      	cmp	r3, #10
   d6216:	d008      	beq.n	d622a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6218:	2b50      	cmp	r3, #80	; 0x50
   d621a:	d109      	bne.n	d6230 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d621c:	4b09      	ldr	r3, [pc, #36]	; (d6244 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d621e:	681b      	ldr	r3, [r3, #0]
   d6220:	b13b      	cbz	r3, d6232 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6222:	b003      	add	sp, #12
   d6224:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6228:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d622a:	f7ff ffe5 	bl	d61f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d622e:	e006      	b.n	d623e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6230:	2300      	movs	r3, #0
   d6232:	9300      	str	r3, [sp, #0]
   d6234:	461a      	mov	r2, r3
   d6236:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d623a:	f7fe fa37 	bl	d46ac <system_ctrl_set_result>
        break;
    }
}
   d623e:	b003      	add	sp, #12
   d6240:	f85d fb04 	ldr.w	pc, [sp], #4
   d6244:	2003e70c 	.word	0x2003e70c

000d6248 <module_user_init_hook>:

void module_user_init_hook()
{
   d6248:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d624a:	2100      	movs	r1, #0
   d624c:	4804      	ldr	r0, [pc, #16]	; (d6260 <module_user_init_hook+0x18>)
   d624e:	f7fe fa51 	bl	d46f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6252:	2100      	movs	r1, #0
   d6254:	4803      	ldr	r0, [pc, #12]	; (d6264 <module_user_init_hook+0x1c>)
}
   d6256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d625a:	f7fe ba1d 	b.w	d4698 <system_ctrl_set_app_request_handler>
   d625e:	bf00      	nop
   d6260:	00000000 	.word	0x00000000
   d6264:	000d6211 	.word	0x000d6211

000d6268 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6268:	b510      	push	{r4, lr}
   d626a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d626c:	480f      	ldr	r0, [pc, #60]	; (d62ac <pinAvailable+0x44>)
   d626e:	f7ff fa5b 	bl	d5728 <_ZN8SPIClass9isEnabledEv>
   d6272:	b128      	cbz	r0, d6280 <pinAvailable+0x18>
   d6274:	f1a4 030b 	sub.w	r3, r4, #11
   d6278:	2b02      	cmp	r3, #2
   d627a:	d801      	bhi.n	d6280 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d627c:	2000      	movs	r0, #0
   d627e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6280:	f000 f866 	bl	d6350 <_Z19__fetch_global_Wirev>
   d6284:	f7fe fdfe 	bl	d4e84 <_ZN7TwoWire9isEnabledEv>
   d6288:	b108      	cbz	r0, d628e <pinAvailable+0x26>
   d628a:	2c01      	cmp	r4, #1
   d628c:	d9f6      	bls.n	d627c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d628e:	f7ff fef9 	bl	d6084 <_Z22__fetch_global_Serial1v>
   d6292:	f7ff fef3 	bl	d607c <_ZN11USARTSerial9isEnabledEv>
   d6296:	b118      	cbz	r0, d62a0 <pinAvailable+0x38>
   d6298:	f1a4 0309 	sub.w	r3, r4, #9
   d629c:	2b01      	cmp	r3, #1
   d629e:	d9ed      	bls.n	d627c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d62a0:	2c1e      	cmp	r4, #30
   d62a2:	bf8c      	ite	hi
   d62a4:	2000      	movhi	r0, #0
   d62a6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d62a8:	bd10      	pop	{r4, pc}
   d62aa:	bf00      	nop
   d62ac:	2003e72c 	.word	0x2003e72c

000d62b0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b0:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d62b2:	b538      	push	{r3, r4, r5, lr}
   d62b4:	4604      	mov	r4, r0
   d62b6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b8:	d80a      	bhi.n	d62d0 <pinMode+0x20>
   d62ba:	29ff      	cmp	r1, #255	; 0xff
   d62bc:	d008      	beq.n	d62d0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62be:	f7ff ffd3 	bl	d6268 <pinAvailable>
   d62c2:	b128      	cbz	r0, d62d0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c4:	4629      	mov	r1, r5
   d62c6:	4620      	mov	r0, r4
}
   d62c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62cc:	f7fe b854 	b.w	d4378 <HAL_Pin_Mode>
   d62d0:	bd38      	pop	{r3, r4, r5, pc}

000d62d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62d2:	b538      	push	{r3, r4, r5, lr}
   d62d4:	4604      	mov	r4, r0
   d62d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d62d8:	f7fe f856 	bl	d4388 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d62dc:	28ff      	cmp	r0, #255	; 0xff
   d62de:	d010      	beq.n	d6302 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d62e0:	2806      	cmp	r0, #6
   d62e2:	d804      	bhi.n	d62ee <digitalWrite+0x1c>
   d62e4:	234d      	movs	r3, #77	; 0x4d
   d62e6:	fa23 f000 	lsr.w	r0, r3, r0
   d62ea:	07c3      	lsls	r3, r0, #31
   d62ec:	d409      	bmi.n	d6302 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ffba 	bl	d6268 <pinAvailable>
   d62f4:	b128      	cbz	r0, d6302 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62f6:	4629      	mov	r1, r5
   d62f8:	4620      	mov	r0, r4
}
   d62fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62fe:	f7fe b84b 	b.w	d4398 <HAL_GPIO_Write>
   d6302:	bd38      	pop	{r3, r4, r5, pc}

000d6304 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6304:	b538      	push	{r3, r4, r5, lr}
   d6306:	4604      	mov	r4, r0
   d6308:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d630a:	f7ff ffad 	bl	d6268 <pinAvailable>
   d630e:	b1f0      	cbz	r0, d634e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6310:	2104      	movs	r1, #4
   d6312:	4620      	mov	r0, r4
   d6314:	f7fe f828 	bl	d4368 <HAL_Validate_Pin_Function>
   d6318:	2804      	cmp	r0, #4
   d631a:	d105      	bne.n	d6328 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d631c:	b2a9      	uxth	r1, r5
   d631e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d6324:	f7fe b840 	b.w	d43a8 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6328:	2102      	movs	r1, #2
   d632a:	4620      	mov	r0, r4
   d632c:	f7fe f81c 	bl	d4368 <HAL_Validate_Pin_Function>
   d6330:	2802      	cmp	r0, #2
   d6332:	d10c      	bne.n	d634e <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6334:	4620      	mov	r0, r4
   d6336:	f7fe f827 	bl	d4388 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d633a:	2801      	cmp	r0, #1
   d633c:	d001      	beq.n	d6342 <_Z11analogWritetm+0x3e>
   d633e:	2804      	cmp	r0, #4
   d6340:	d105      	bne.n	d634e <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6342:	4629      	mov	r1, r5
   d6344:	4620      	mov	r0, r4
    }
}
   d6346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d634a:	f7fe b835 	b.w	d43b8 <HAL_PWM_Write_Ext>
   d634e:	bd38      	pop	{r3, r4, r5, pc}

000d6350 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6350:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6352:	4d0b      	ldr	r5, [pc, #44]	; (d6380 <_Z19__fetch_global_Wirev+0x30>)
   d6354:	6829      	ldr	r1, [r5, #0]
   d6356:	f011 0401 	ands.w	r4, r1, #1
   d635a:	d10f      	bne.n	d637c <_Z19__fetch_global_Wirev+0x2c>
   d635c:	4628      	mov	r0, r5
   d635e:	f7fd fea2 	bl	d40a6 <__cxa_guard_acquire>
   d6362:	b158      	cbz	r0, d637c <_Z19__fetch_global_Wirev+0x2c>
   d6364:	4621      	mov	r1, r4
   d6366:	4807      	ldr	r0, [pc, #28]	; (d6384 <_Z19__fetch_global_Wirev+0x34>)
   d6368:	f7fe fd7a 	bl	d4e60 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d636c:	4628      	mov	r0, r5
   d636e:	f7fd fe9f 	bl	d40b0 <__cxa_guard_release>
   d6372:	4a05      	ldr	r2, [pc, #20]	; (d6388 <_Z19__fetch_global_Wirev+0x38>)
   d6374:	4905      	ldr	r1, [pc, #20]	; (d638c <_Z19__fetch_global_Wirev+0x3c>)
   d6376:	4803      	ldr	r0, [pc, #12]	; (d6384 <_Z19__fetch_global_Wirev+0x34>)
   d6378:	f000 f82c 	bl	d63d4 <__aeabi_atexit>
	return wire;
}
   d637c:	4801      	ldr	r0, [pc, #4]	; (d6384 <_Z19__fetch_global_Wirev+0x34>)
   d637e:	bd38      	pop	{r3, r4, r5, pc}
   d6380:	2003e714 	.word	0x2003e714
   d6384:	2003e718 	.word	0x2003e718
   d6388:	2003e3bc 	.word	0x2003e3bc
   d638c:	000d4e09 	.word	0x000d4e09

000d6390 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6390:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6392:	4c0c      	ldr	r4, [pc, #48]	; (d63c4 <_GLOBAL__sub_I_SPI+0x34>)
   d6394:	4e0c      	ldr	r6, [pc, #48]	; (d63c8 <_GLOBAL__sub_I_SPI+0x38>)
   d6396:	4d0d      	ldr	r5, [pc, #52]	; (d63cc <_GLOBAL__sub_I_SPI+0x3c>)
   d6398:	2100      	movs	r1, #0
   d639a:	4620      	mov	r0, r4
   d639c:	f7ff f9b0 	bl	d5700 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d63a0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d63a2:	4c0b      	ldr	r4, [pc, #44]	; (d63d0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d63a4:	4632      	mov	r2, r6
   d63a6:	4629      	mov	r1, r5
   d63a8:	f000 f814 	bl	d63d4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d63ac:	2101      	movs	r1, #1
   d63ae:	4620      	mov	r0, r4
   d63b0:	f7ff f9a6 	bl	d5700 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d63b4:	4632      	mov	r2, r6
   d63b6:	4629      	mov	r1, r5
   d63b8:	4620      	mov	r0, r4
   d63ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d63be:	f000 b809 	b.w	d63d4 <__aeabi_atexit>
   d63c2:	bf00      	nop
   d63c4:	2003e72c 	.word	0x2003e72c
   d63c8:	2003e3bc 	.word	0x2003e3bc
   d63cc:	000d56f1 	.word	0x000d56f1
   d63d0:	2003e73c 	.word	0x2003e73c

000d63d4 <__aeabi_atexit>:
   d63d4:	460b      	mov	r3, r1
   d63d6:	4601      	mov	r1, r0
   d63d8:	4618      	mov	r0, r3
   d63da:	f000 b969 	b.w	d66b0 <__cxa_atexit>
	...

000d63e0 <_ZSt15get_new_handlerv>:
   d63e0:	4b02      	ldr	r3, [pc, #8]	; (d63ec <_ZSt15get_new_handlerv+0xc>)
   d63e2:	6818      	ldr	r0, [r3, #0]
   d63e4:	f3bf 8f5f 	dmb	sy
   d63e8:	4770      	bx	lr
   d63ea:	bf00      	nop
   d63ec:	2003e74c 	.word	0x2003e74c

000d63f0 <_ZnwjRKSt9nothrow_t>:
   d63f0:	b510      	push	{r4, lr}
   d63f2:	2800      	cmp	r0, #0
   d63f4:	bf14      	ite	ne
   d63f6:	4604      	movne	r4, r0
   d63f8:	2401      	moveq	r4, #1
   d63fa:	4620      	mov	r0, r4
   d63fc:	f7fe f9d2 	bl	d47a4 <malloc>
   d6400:	b920      	cbnz	r0, d640c <_ZnwjRKSt9nothrow_t+0x1c>
   d6402:	f7ff ffed 	bl	d63e0 <_ZSt15get_new_handlerv>
   d6406:	b108      	cbz	r0, d640c <_ZnwjRKSt9nothrow_t+0x1c>
   d6408:	4780      	blx	r0
   d640a:	e7f6      	b.n	d63fa <_ZnwjRKSt9nothrow_t+0xa>
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZnajRKSt9nothrow_t>:
   d640e:	f7ff bfef 	b.w	d63f0 <_ZnwjRKSt9nothrow_t>

000d6412 <_ZSt25__throw_bad_function_callv>:
   d6412:	b508      	push	{r3, lr}
   d6414:	f7fe f9de 	bl	d47d4 <abort>

000d6418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6418:	4b24      	ldr	r3, [pc, #144]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d0      	lsls	r0, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4b22      	ldr	r3, [pc, #136]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6426:	681a      	ldr	r2, [r3, #0]
   d6428:	07d1      	lsls	r1, r2, #31
   d642a:	bf5c      	itt	pl
   d642c:	2201      	movpl	r2, #1
   d642e:	601a      	strpl	r2, [r3, #0]
   d6430:	4b20      	ldr	r3, [pc, #128]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6432:	681a      	ldr	r2, [r3, #0]
   d6434:	07d2      	lsls	r2, r2, #31
   d6436:	bf5c      	itt	pl
   d6438:	2201      	movpl	r2, #1
   d643a:	601a      	strpl	r2, [r3, #0]
   d643c:	4b1e      	ldr	r3, [pc, #120]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d643e:	681a      	ldr	r2, [r3, #0]
   d6440:	07d0      	lsls	r0, r2, #31
   d6442:	bf5c      	itt	pl
   d6444:	2201      	movpl	r2, #1
   d6446:	601a      	strpl	r2, [r3, #0]
   d6448:	4b1c      	ldr	r3, [pc, #112]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d1      	lsls	r1, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4b1a      	ldr	r3, [pc, #104]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6456:	681a      	ldr	r2, [r3, #0]
   d6458:	07d2      	lsls	r2, r2, #31
   d645a:	bf5c      	itt	pl
   d645c:	2201      	movpl	r2, #1
   d645e:	601a      	strpl	r2, [r3, #0]
   d6460:	4b18      	ldr	r3, [pc, #96]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6462:	681a      	ldr	r2, [r3, #0]
   d6464:	07d0      	lsls	r0, r2, #31
   d6466:	bf5c      	itt	pl
   d6468:	2201      	movpl	r2, #1
   d646a:	601a      	strpl	r2, [r3, #0]
   d646c:	4b16      	ldr	r3, [pc, #88]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d646e:	681a      	ldr	r2, [r3, #0]
   d6470:	07d1      	lsls	r1, r2, #31
   d6472:	bf5c      	itt	pl
   d6474:	2201      	movpl	r2, #1
   d6476:	601a      	strpl	r2, [r3, #0]
   d6478:	4b14      	ldr	r3, [pc, #80]	; (d64cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d647a:	681a      	ldr	r2, [r3, #0]
   d647c:	07d2      	lsls	r2, r2, #31
   d647e:	bf5c      	itt	pl
   d6480:	2201      	movpl	r2, #1
   d6482:	601a      	strpl	r2, [r3, #0]
   d6484:	4b12      	ldr	r3, [pc, #72]	; (d64d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6486:	681a      	ldr	r2, [r3, #0]
   d6488:	07d0      	lsls	r0, r2, #31
   d648a:	bf5c      	itt	pl
   d648c:	2201      	movpl	r2, #1
   d648e:	601a      	strpl	r2, [r3, #0]
   d6490:	4b10      	ldr	r3, [pc, #64]	; (d64d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	07d1      	lsls	r1, r2, #31
   d6496:	bf5c      	itt	pl
   d6498:	2201      	movpl	r2, #1
   d649a:	601a      	strpl	r2, [r3, #0]
   d649c:	4b0e      	ldr	r3, [pc, #56]	; (d64d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d649e:	681a      	ldr	r2, [r3, #0]
   d64a0:	07d2      	lsls	r2, r2, #31
   d64a2:	bf5c      	itt	pl
   d64a4:	2201      	movpl	r2, #1
   d64a6:	601a      	strpl	r2, [r3, #0]
   d64a8:	4770      	bx	lr
   d64aa:	bf00      	nop
   d64ac:	2003e77c 	.word	0x2003e77c
   d64b0:	2003e778 	.word	0x2003e778
   d64b4:	2003e774 	.word	0x2003e774
   d64b8:	2003e770 	.word	0x2003e770
   d64bc:	2003e76c 	.word	0x2003e76c
   d64c0:	2003e768 	.word	0x2003e768
   d64c4:	2003e764 	.word	0x2003e764
   d64c8:	2003e760 	.word	0x2003e760
   d64cc:	2003e75c 	.word	0x2003e75c
   d64d0:	2003e758 	.word	0x2003e758
   d64d4:	2003e754 	.word	0x2003e754
   d64d8:	2003e750 	.word	0x2003e750

000d64dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d64dc:	4b18      	ldr	r3, [pc, #96]	; (d6540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d64de:	681a      	ldr	r2, [r3, #0]
   d64e0:	07d1      	lsls	r1, r2, #31
   d64e2:	bf5c      	itt	pl
   d64e4:	2201      	movpl	r2, #1
   d64e6:	601a      	strpl	r2, [r3, #0]
   d64e8:	4b16      	ldr	r3, [pc, #88]	; (d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d64ea:	681a      	ldr	r2, [r3, #0]
   d64ec:	07d2      	lsls	r2, r2, #31
   d64ee:	bf5c      	itt	pl
   d64f0:	2201      	movpl	r2, #1
   d64f2:	601a      	strpl	r2, [r3, #0]
   d64f4:	4b14      	ldr	r3, [pc, #80]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64f6:	681a      	ldr	r2, [r3, #0]
   d64f8:	07d0      	lsls	r0, r2, #31
   d64fa:	bf5c      	itt	pl
   d64fc:	2201      	movpl	r2, #1
   d64fe:	601a      	strpl	r2, [r3, #0]
   d6500:	4b12      	ldr	r3, [pc, #72]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6502:	681a      	ldr	r2, [r3, #0]
   d6504:	07d1      	lsls	r1, r2, #31
   d6506:	bf5c      	itt	pl
   d6508:	2201      	movpl	r2, #1
   d650a:	601a      	strpl	r2, [r3, #0]
   d650c:	4b10      	ldr	r3, [pc, #64]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d650e:	681a      	ldr	r2, [r3, #0]
   d6510:	07d2      	lsls	r2, r2, #31
   d6512:	bf5c      	itt	pl
   d6514:	2201      	movpl	r2, #1
   d6516:	601a      	strpl	r2, [r3, #0]
   d6518:	4b0e      	ldr	r3, [pc, #56]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d651a:	681a      	ldr	r2, [r3, #0]
   d651c:	07d0      	lsls	r0, r2, #31
   d651e:	bf5c      	itt	pl
   d6520:	2201      	movpl	r2, #1
   d6522:	601a      	strpl	r2, [r3, #0]
   d6524:	4b0c      	ldr	r3, [pc, #48]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6526:	681a      	ldr	r2, [r3, #0]
   d6528:	07d1      	lsls	r1, r2, #31
   d652a:	bf5c      	itt	pl
   d652c:	2201      	movpl	r2, #1
   d652e:	601a      	strpl	r2, [r3, #0]
   d6530:	4b0a      	ldr	r3, [pc, #40]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6532:	681a      	ldr	r2, [r3, #0]
   d6534:	07d2      	lsls	r2, r2, #31
   d6536:	bf5c      	itt	pl
   d6538:	2201      	movpl	r2, #1
   d653a:	601a      	strpl	r2, [r3, #0]
   d653c:	4770      	bx	lr
   d653e:	bf00      	nop
   d6540:	2003e79c 	.word	0x2003e79c
   d6544:	2003e798 	.word	0x2003e798
   d6548:	2003e794 	.word	0x2003e794
   d654c:	2003e790 	.word	0x2003e790
   d6550:	2003e78c 	.word	0x2003e78c
   d6554:	2003e788 	.word	0x2003e788
   d6558:	2003e784 	.word	0x2003e784
   d655c:	2003e780 	.word	0x2003e780

000d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6560:	4b18      	ldr	r3, [pc, #96]	; (d65c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6562:	681a      	ldr	r2, [r3, #0]
   d6564:	07d1      	lsls	r1, r2, #31
   d6566:	bf5c      	itt	pl
   d6568:	2201      	movpl	r2, #1
   d656a:	601a      	strpl	r2, [r3, #0]
   d656c:	4b16      	ldr	r3, [pc, #88]	; (d65c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d656e:	681a      	ldr	r2, [r3, #0]
   d6570:	07d2      	lsls	r2, r2, #31
   d6572:	bf5c      	itt	pl
   d6574:	2201      	movpl	r2, #1
   d6576:	601a      	strpl	r2, [r3, #0]
   d6578:	4b14      	ldr	r3, [pc, #80]	; (d65cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d657a:	681a      	ldr	r2, [r3, #0]
   d657c:	07d0      	lsls	r0, r2, #31
   d657e:	bf5c      	itt	pl
   d6580:	2201      	movpl	r2, #1
   d6582:	601a      	strpl	r2, [r3, #0]
   d6584:	4b12      	ldr	r3, [pc, #72]	; (d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d1      	lsls	r1, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b10      	ldr	r3, [pc, #64]	; (d65d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d2      	lsls	r2, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b0e      	ldr	r3, [pc, #56]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d0      	lsls	r0, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b0c      	ldr	r3, [pc, #48]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d1      	lsls	r1, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b0a      	ldr	r3, [pc, #40]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d2      	lsls	r2, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4770      	bx	lr
   d65c2:	bf00      	nop
   d65c4:	2003e7bc 	.word	0x2003e7bc
   d65c8:	2003e7b8 	.word	0x2003e7b8
   d65cc:	2003e7b4 	.word	0x2003e7b4
   d65d0:	2003e7b0 	.word	0x2003e7b0
   d65d4:	2003e7ac 	.word	0x2003e7ac
   d65d8:	2003e7a8 	.word	0x2003e7a8
   d65dc:	2003e7a4 	.word	0x2003e7a4
   d65e0:	2003e7a0 	.word	0x2003e7a0

000d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d65e4:	4b24      	ldr	r3, [pc, #144]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d65e6:	681a      	ldr	r2, [r3, #0]
   d65e8:	07d0      	lsls	r0, r2, #31
   d65ea:	bf5c      	itt	pl
   d65ec:	2201      	movpl	r2, #1
   d65ee:	601a      	strpl	r2, [r3, #0]
   d65f0:	4b22      	ldr	r3, [pc, #136]	; (d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d65f2:	681a      	ldr	r2, [r3, #0]
   d65f4:	07d1      	lsls	r1, r2, #31
   d65f6:	bf5c      	itt	pl
   d65f8:	2201      	movpl	r2, #1
   d65fa:	601a      	strpl	r2, [r3, #0]
   d65fc:	4b20      	ldr	r3, [pc, #128]	; (d6680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	07d2      	lsls	r2, r2, #31
   d6602:	bf5c      	itt	pl
   d6604:	2201      	movpl	r2, #1
   d6606:	601a      	strpl	r2, [r3, #0]
   d6608:	4b1e      	ldr	r3, [pc, #120]	; (d6684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d0      	lsls	r0, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4b1c      	ldr	r3, [pc, #112]	; (d6688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6616:	681a      	ldr	r2, [r3, #0]
   d6618:	07d1      	lsls	r1, r2, #31
   d661a:	bf5c      	itt	pl
   d661c:	2201      	movpl	r2, #1
   d661e:	601a      	strpl	r2, [r3, #0]
   d6620:	4b1a      	ldr	r3, [pc, #104]	; (d668c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6622:	681a      	ldr	r2, [r3, #0]
   d6624:	07d2      	lsls	r2, r2, #31
   d6626:	bf5c      	itt	pl
   d6628:	2201      	movpl	r2, #1
   d662a:	601a      	strpl	r2, [r3, #0]
   d662c:	4b18      	ldr	r3, [pc, #96]	; (d6690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d662e:	681a      	ldr	r2, [r3, #0]
   d6630:	07d0      	lsls	r0, r2, #31
   d6632:	bf5c      	itt	pl
   d6634:	2201      	movpl	r2, #1
   d6636:	601a      	strpl	r2, [r3, #0]
   d6638:	4b16      	ldr	r3, [pc, #88]	; (d6694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d663a:	681a      	ldr	r2, [r3, #0]
   d663c:	07d1      	lsls	r1, r2, #31
   d663e:	bf5c      	itt	pl
   d6640:	2201      	movpl	r2, #1
   d6642:	601a      	strpl	r2, [r3, #0]
   d6644:	4b14      	ldr	r3, [pc, #80]	; (d6698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6646:	681a      	ldr	r2, [r3, #0]
   d6648:	07d2      	lsls	r2, r2, #31
   d664a:	bf5c      	itt	pl
   d664c:	2201      	movpl	r2, #1
   d664e:	601a      	strpl	r2, [r3, #0]
   d6650:	4b12      	ldr	r3, [pc, #72]	; (d669c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6652:	681a      	ldr	r2, [r3, #0]
   d6654:	07d0      	lsls	r0, r2, #31
   d6656:	bf5c      	itt	pl
   d6658:	2201      	movpl	r2, #1
   d665a:	601a      	strpl	r2, [r3, #0]
   d665c:	4b10      	ldr	r3, [pc, #64]	; (d66a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d665e:	681a      	ldr	r2, [r3, #0]
   d6660:	07d1      	lsls	r1, r2, #31
   d6662:	bf5c      	itt	pl
   d6664:	2201      	movpl	r2, #1
   d6666:	601a      	strpl	r2, [r3, #0]
   d6668:	4b0e      	ldr	r3, [pc, #56]	; (d66a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d666a:	681a      	ldr	r2, [r3, #0]
   d666c:	07d2      	lsls	r2, r2, #31
   d666e:	bf5c      	itt	pl
   d6670:	2201      	movpl	r2, #1
   d6672:	601a      	strpl	r2, [r3, #0]
   d6674:	4770      	bx	lr
   d6676:	bf00      	nop
   d6678:	2003e7ec 	.word	0x2003e7ec
   d667c:	2003e7e8 	.word	0x2003e7e8
   d6680:	2003e7e4 	.word	0x2003e7e4
   d6684:	2003e7e0 	.word	0x2003e7e0
   d6688:	2003e7dc 	.word	0x2003e7dc
   d668c:	2003e7d8 	.word	0x2003e7d8
   d6690:	2003e7d4 	.word	0x2003e7d4
   d6694:	2003e7d0 	.word	0x2003e7d0
   d6698:	2003e7cc 	.word	0x2003e7cc
   d669c:	2003e7c8 	.word	0x2003e7c8
   d66a0:	2003e7c4 	.word	0x2003e7c4
   d66a4:	2003e7c0 	.word	0x2003e7c0

000d66a8 <atoi>:
   d66a8:	220a      	movs	r2, #10
   d66aa:	2100      	movs	r1, #0
   d66ac:	f000 b902 	b.w	d68b4 <strtol>

000d66b0 <__cxa_atexit>:
   d66b0:	b510      	push	{r4, lr}
   d66b2:	4c05      	ldr	r4, [pc, #20]	; (d66c8 <__cxa_atexit+0x18>)
   d66b4:	4613      	mov	r3, r2
   d66b6:	b12c      	cbz	r4, d66c4 <__cxa_atexit+0x14>
   d66b8:	460a      	mov	r2, r1
   d66ba:	4601      	mov	r1, r0
   d66bc:	2002      	movs	r0, #2
   d66be:	f3af 8000 	nop.w
   d66c2:	bd10      	pop	{r4, pc}
   d66c4:	4620      	mov	r0, r4
   d66c6:	bd10      	pop	{r4, pc}
   d66c8:	00000000 	.word	0x00000000

000d66cc <memcmp>:
   d66cc:	b510      	push	{r4, lr}
   d66ce:	3901      	subs	r1, #1
   d66d0:	4402      	add	r2, r0
   d66d2:	4290      	cmp	r0, r2
   d66d4:	d007      	beq.n	d66e6 <memcmp+0x1a>
   d66d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d66da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d66de:	42a3      	cmp	r3, r4
   d66e0:	d0f7      	beq.n	d66d2 <memcmp+0x6>
   d66e2:	1b18      	subs	r0, r3, r4
   d66e4:	bd10      	pop	{r4, pc}
   d66e6:	2000      	movs	r0, #0
   d66e8:	bd10      	pop	{r4, pc}

000d66ea <memcpy>:
   d66ea:	b510      	push	{r4, lr}
   d66ec:	1e43      	subs	r3, r0, #1
   d66ee:	440a      	add	r2, r1
   d66f0:	4291      	cmp	r1, r2
   d66f2:	d004      	beq.n	d66fe <memcpy+0x14>
   d66f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66f8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66fc:	e7f8      	b.n	d66f0 <memcpy+0x6>
   d66fe:	bd10      	pop	{r4, pc}

000d6700 <memset>:
   d6700:	4402      	add	r2, r0
   d6702:	4603      	mov	r3, r0
   d6704:	4293      	cmp	r3, r2
   d6706:	d002      	beq.n	d670e <memset+0xe>
   d6708:	f803 1b01 	strb.w	r1, [r3], #1
   d670c:	e7fa      	b.n	d6704 <memset+0x4>
   d670e:	4770      	bx	lr

000d6710 <strcpy>:
   d6710:	4603      	mov	r3, r0
   d6712:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6716:	f803 2b01 	strb.w	r2, [r3], #1
   d671a:	2a00      	cmp	r2, #0
   d671c:	d1f9      	bne.n	d6712 <strcpy+0x2>
   d671e:	4770      	bx	lr

000d6720 <strdup>:
   d6720:	4b02      	ldr	r3, [pc, #8]	; (d672c <strdup+0xc>)
   d6722:	4601      	mov	r1, r0
   d6724:	6818      	ldr	r0, [r3, #0]
   d6726:	f000 b803 	b.w	d6730 <_strdup_r>
   d672a:	bf00      	nop
   d672c:	2003e3b8 	.word	0x2003e3b8

000d6730 <_strdup_r>:
   d6730:	b570      	push	{r4, r5, r6, lr}
   d6732:	4606      	mov	r6, r0
   d6734:	4608      	mov	r0, r1
   d6736:	460c      	mov	r4, r1
   d6738:	f000 f80d 	bl	d6756 <strlen>
   d673c:	1c45      	adds	r5, r0, #1
   d673e:	4629      	mov	r1, r5
   d6740:	4630      	mov	r0, r6
   d6742:	f7fe f84f 	bl	d47e4 <_malloc_r>
   d6746:	4606      	mov	r6, r0
   d6748:	b118      	cbz	r0, d6752 <_strdup_r+0x22>
   d674a:	462a      	mov	r2, r5
   d674c:	4621      	mov	r1, r4
   d674e:	f7ff ffcc 	bl	d66ea <memcpy>
   d6752:	4630      	mov	r0, r6
   d6754:	bd70      	pop	{r4, r5, r6, pc}

000d6756 <strlen>:
   d6756:	4603      	mov	r3, r0
   d6758:	f813 2b01 	ldrb.w	r2, [r3], #1
   d675c:	2a00      	cmp	r2, #0
   d675e:	d1fb      	bne.n	d6758 <strlen+0x2>
   d6760:	1a18      	subs	r0, r3, r0
   d6762:	3801      	subs	r0, #1
   d6764:	4770      	bx	lr

000d6766 <strncmp>:
   d6766:	b530      	push	{r4, r5, lr}
   d6768:	b182      	cbz	r2, d678c <strncmp+0x26>
   d676a:	1e45      	subs	r5, r0, #1
   d676c:	3901      	subs	r1, #1
   d676e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6772:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6776:	42a3      	cmp	r3, r4
   d6778:	d106      	bne.n	d6788 <strncmp+0x22>
   d677a:	43ec      	mvns	r4, r5
   d677c:	4414      	add	r4, r2
   d677e:	42e0      	cmn	r0, r4
   d6780:	d001      	beq.n	d6786 <strncmp+0x20>
   d6782:	2b00      	cmp	r3, #0
   d6784:	d1f3      	bne.n	d676e <strncmp+0x8>
   d6786:	461c      	mov	r4, r3
   d6788:	1b18      	subs	r0, r3, r4
   d678a:	bd30      	pop	{r4, r5, pc}
   d678c:	4610      	mov	r0, r2
   d678e:	bd30      	pop	{r4, r5, pc}

000d6790 <strnlen>:
   d6790:	b510      	push	{r4, lr}
   d6792:	4603      	mov	r3, r0
   d6794:	4401      	add	r1, r0
   d6796:	428b      	cmp	r3, r1
   d6798:	d004      	beq.n	d67a4 <strnlen+0x14>
   d679a:	781a      	ldrb	r2, [r3, #0]
   d679c:	1c5c      	adds	r4, r3, #1
   d679e:	b10a      	cbz	r2, d67a4 <strnlen+0x14>
   d67a0:	4623      	mov	r3, r4
   d67a2:	e7f8      	b.n	d6796 <strnlen+0x6>
   d67a4:	1a18      	subs	r0, r3, r0
   d67a6:	bd10      	pop	{r4, pc}

000d67a8 <_strtol_r>:
   d67a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67ac:	4680      	mov	r8, r0
   d67ae:	4840      	ldr	r0, [pc, #256]	; (d68b0 <_strtol_r+0x108>)
   d67b0:	f8d0 9000 	ldr.w	r9, [r0]
   d67b4:	460f      	mov	r7, r1
   d67b6:	463d      	mov	r5, r7
   d67b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d67bc:	eb09 0004 	add.w	r0, r9, r4
   d67c0:	7840      	ldrb	r0, [r0, #1]
   d67c2:	f000 0008 	and.w	r0, r0, #8
   d67c6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d67ca:	b108      	cbz	r0, d67d0 <_strtol_r+0x28>
   d67cc:	462f      	mov	r7, r5
   d67ce:	e7f2      	b.n	d67b6 <_strtol_r+0xe>
   d67d0:	2c2d      	cmp	r4, #45	; 0x2d
   d67d2:	d103      	bne.n	d67dc <_strtol_r+0x34>
   d67d4:	1cbd      	adds	r5, r7, #2
   d67d6:	787c      	ldrb	r4, [r7, #1]
   d67d8:	2601      	movs	r6, #1
   d67da:	e003      	b.n	d67e4 <_strtol_r+0x3c>
   d67dc:	2c2b      	cmp	r4, #43	; 0x2b
   d67de:	bf04      	itt	eq
   d67e0:	787c      	ldrbeq	r4, [r7, #1]
   d67e2:	1cbd      	addeq	r5, r7, #2
   d67e4:	b113      	cbz	r3, d67ec <_strtol_r+0x44>
   d67e6:	2b10      	cmp	r3, #16
   d67e8:	d10a      	bne.n	d6800 <_strtol_r+0x58>
   d67ea:	e05b      	b.n	d68a4 <_strtol_r+0xfc>
   d67ec:	2c30      	cmp	r4, #48	; 0x30
   d67ee:	d157      	bne.n	d68a0 <_strtol_r+0xf8>
   d67f0:	7828      	ldrb	r0, [r5, #0]
   d67f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d67f6:	2858      	cmp	r0, #88	; 0x58
   d67f8:	d14d      	bne.n	d6896 <_strtol_r+0xee>
   d67fa:	786c      	ldrb	r4, [r5, #1]
   d67fc:	2310      	movs	r3, #16
   d67fe:	3502      	adds	r5, #2
   d6800:	2e00      	cmp	r6, #0
   d6802:	bf14      	ite	ne
   d6804:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6808:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d680c:	2700      	movs	r7, #0
   d680e:	fbbc faf3 	udiv	sl, ip, r3
   d6812:	4638      	mov	r0, r7
   d6814:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6818:	eb09 0e04 	add.w	lr, r9, r4
   d681c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6820:	f01e 0f04 	tst.w	lr, #4
   d6824:	d001      	beq.n	d682a <_strtol_r+0x82>
   d6826:	3c30      	subs	r4, #48	; 0x30
   d6828:	e00b      	b.n	d6842 <_strtol_r+0x9a>
   d682a:	f01e 0e03 	ands.w	lr, lr, #3
   d682e:	d01b      	beq.n	d6868 <_strtol_r+0xc0>
   d6830:	f1be 0f01 	cmp.w	lr, #1
   d6834:	bf0c      	ite	eq
   d6836:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d683a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d683e:	ebce 0404 	rsb	r4, lr, r4
   d6842:	42a3      	cmp	r3, r4
   d6844:	dd10      	ble.n	d6868 <_strtol_r+0xc0>
   d6846:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d684a:	d00a      	beq.n	d6862 <_strtol_r+0xba>
   d684c:	4550      	cmp	r0, sl
   d684e:	d806      	bhi.n	d685e <_strtol_r+0xb6>
   d6850:	d101      	bne.n	d6856 <_strtol_r+0xae>
   d6852:	4564      	cmp	r4, ip
   d6854:	dc03      	bgt.n	d685e <_strtol_r+0xb6>
   d6856:	fb03 4000 	mla	r0, r3, r0, r4
   d685a:	2701      	movs	r7, #1
   d685c:	e001      	b.n	d6862 <_strtol_r+0xba>
   d685e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d6862:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6866:	e7d7      	b.n	d6818 <_strtol_r+0x70>
   d6868:	1c7b      	adds	r3, r7, #1
   d686a:	d10c      	bne.n	d6886 <_strtol_r+0xde>
   d686c:	2e00      	cmp	r6, #0
   d686e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d6872:	bf14      	ite	ne
   d6874:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6878:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d687c:	f8c8 3000 	str.w	r3, [r8]
   d6880:	b92a      	cbnz	r2, d688e <_strtol_r+0xe6>
   d6882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6886:	b106      	cbz	r6, d688a <_strtol_r+0xe2>
   d6888:	4240      	negs	r0, r0
   d688a:	b172      	cbz	r2, d68aa <_strtol_r+0x102>
   d688c:	b107      	cbz	r7, d6890 <_strtol_r+0xe8>
   d688e:	1e69      	subs	r1, r5, #1
   d6890:	6011      	str	r1, [r2, #0]
   d6892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6896:	2430      	movs	r4, #48	; 0x30
   d6898:	2b00      	cmp	r3, #0
   d689a:	d1b1      	bne.n	d6800 <_strtol_r+0x58>
   d689c:	2308      	movs	r3, #8
   d689e:	e7af      	b.n	d6800 <_strtol_r+0x58>
   d68a0:	230a      	movs	r3, #10
   d68a2:	e7ad      	b.n	d6800 <_strtol_r+0x58>
   d68a4:	2c30      	cmp	r4, #48	; 0x30
   d68a6:	d0a3      	beq.n	d67f0 <_strtol_r+0x48>
   d68a8:	e7aa      	b.n	d6800 <_strtol_r+0x58>
   d68aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68ae:	bf00      	nop
   d68b0:	2003e354 	.word	0x2003e354

000d68b4 <strtol>:
   d68b4:	4613      	mov	r3, r2
   d68b6:	460a      	mov	r2, r1
   d68b8:	4601      	mov	r1, r0
   d68ba:	4802      	ldr	r0, [pc, #8]	; (d68c4 <strtol+0x10>)
   d68bc:	6800      	ldr	r0, [r0, #0]
   d68be:	f7ff bf73 	b.w	d67a8 <_strtol_r>
   d68c2:	bf00      	nop
   d68c4:	2003e3b8 	.word	0x2003e3b8

000d68c8 <dynalib_user>:
   d68c8:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d68d8:	00000000 72617773 6f662d6d 776f6c6c     ....swarm-follow
   d68e8:	6f2d7265 6e696c6e 77660065 7265762d     er-online.fw-ver
   d68f8:	6e6f6973 66656c00 6c005274 46746665     sion.leftR.leftF
   d6908:	67697200 00527468 68676972 61004674     .rightR.rightF.a
   d6918:	664f6c6c 31760066 0000322e              llOff.v1.2..

000d6924 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d692c:	000d481b 000d4821 000d4849 000d482d     .H..!H..IH..-H..
   d693c:	000d481d                                .H..

000d6940 <_ZTVN5spark13EthernetClassE>:
	...
   d6948:	000d4deb 000d4de1 000d4dd7 000d4dcd     .M...M...M...M..
   d6958:	000d4dc1 000d4db5 000d4da9 000d4da1     .M...M...M...M..
   d6968:	000d4d97 000d4d8d 000d5581              .M...M...U..

000d6974 <_ZTV7TwoWire>:
	...
   d697c:	000d4e09 000d4e53 000d4e2b 000d4e0b     .N..SN..+N...N..
   d698c:	000d4e33 000d4e3b 000d4e43 000d4e4b     3N..;N..CN..KN..

000d699c <_ZTV9IPAddress>:
	...
   d69a4:	000d4e9b 000d4e8d 000d4e8f 66006e6c     .N...N...N..ln.f
   d69b4:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
   d69c4:	31302500 00207530 2c00205d 29280020     .%010u .] ., .()
   d69d4:	2000203a 6f63005b 3d206564 69250020     : . [.code = .%i
   d69e4:	74656400 736c6961 00203d20 64756162     .details = .baud
   d69f4:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d6a04:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
   d6a14:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
   d6a24:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
   d6a34:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
   d6a44:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
   d6a54:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
   d6a64:	6e007070 00656e6f 63617274 6e690065     pp.none.trace.in
   d6a74:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
   d6a84:	0063696e 006c6c61                       nic.all.

000d6a8c <_ZTVN5spark9MeshClassE>:
	...
   d6a94:	000d5035 000d502b 000d5021 000d5017     5P..+P..!P...P..
   d6aa4:	000d500b 000d4fff 000d4ff3 000d4feb     .P...O...O...O..
   d6ab4:	000d4fe1 000d4fd7 000d5581 33306666     .O...O...U..ff03
   d6ac4:	3a313a3a 31303031 31687400 73656d00     ::1:1001.th1.mes
   d6ad4:	62757068 72697700 00676e69 73726170     hpub.wiring.pars
   d6ae4:	61702065 74656b63 00642520              e packet %d.

000d6af0 <_ZTVN5spark12NetworkClassE>:
	...
   d6af8:	000d5519 000d5523 000d552d 000d5537     .U..#U..-U..7U..
   d6b08:	000d5541 000d554d 000d5559 000d5565     AU..MU..YU..eU..
   d6b18:	000d556d 000d5577 000d5581              mU..wU...U..

000d6b24 <_ZTV8SPIClass>:
	...
   d6b2c:	000d56f1 000d56f3                       .V...V..

000d6b34 <_ZTV21StringPrintableHelper>:
	...
   d6b3c:	000d572f 000d5731 000d584d 000d581f     /W..1W..MX...X..
   d6b4c:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d6b5c:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d6b6c:	63736100 656d6974 63657200 65766965     .asctime.receive
   d6b7c:	64252064 74796220 66207365 206d6f72     d %d bytes from 
   d6b8c:	25237325 65730064 6150646e 74656b63     %s#%d.sendPacket
   d6b9c:	7a697320 64252065 7325202c 00642523      size %d, %s#%d.
   d6bac:	69676562 6170206e 74656b63 23732520     begin packet %s#
   d6bbc:	00006425                                %d..

000d6bc0 <_ZTV3UDP>:
	...
   d6bc8:	000d5fad 000d5fd1 000d58dd 000d5a07     ._..._...X...Z..
   d6bd8:	000d58d5 000d58f3 000d5911 000d592b     .X...X...Y..+Y..
   d6be8:	000d594f 000d59eb 000d5d29 000d5a8d     OY...Y..)]...Z..
   d6bf8:	000d5c0d 000d58bd 000d5f45 000d5b91     .\...X..E_...[..
   d6c08:	000d5ac5 000d5f0b 000d5a31 000d58cb     .Z..._..1Z...X..
   d6c18:	000d5a6d 000d58d1 000d592d fffffff0     mZ...X..-Y......
   d6c28:	00000000 000d5947                       ....GY..

000d6c30 <_ZTV11USARTSerial>:
	...
   d6c38:	000d5ffb 000d601f 000d602b 000d5619     ._...`..+`...V..
   d6c48:	000d6007 000d6013 000d600d 000d6019     .`...`...`...`..
   d6c58:	000d5ffd 000d6001                       ._...`..

000d6c60 <_ZTV9USBSerial>:
	...
   d6c68:	000d60d5 000d6119 000d60f3 000d5619     .`...a...`...V..
   d6c78:	000d60ed 000d60d7 000d60df 000d6113     .`...`...`...a..
   d6c88:	000d60e7 000d60d1                       .`...`..

000d6c90 <_ZSt7nothrow>:
	...

000d6c91 <_ctype_>:
   d6c91:	20202000 20202020 28282020 20282828     .         ((((( 
   d6ca1:	20202020 20202020 20202020 20202020                     
   d6cb1:	10108820 10101010 10101010 10101010      ...............
   d6cc1:	04040410 04040404 10040404 10101010     ................
   d6cd1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6ce1:	01010101 01010101 01010101 10101010     ................
   d6cf1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6d01:	02020202 02020202 02020202 10101010     ................
   d6d11:	00000020 00000000 00000000 00000000      ...............
	...

000d6d94 <__sf_fake_stdin>:
	...

000d6db4 <__sf_fake_stdout>:
	...

000d6dd4 <__sf_fake_stderr>:
	...
   d6df4:	00000043                                         C.

000d6df6 <link_const_variable_data_end>:
	...

000d6df8 <link_constructors_location>:
   d6df8:	000d4271 	.word	0x000d4271
   d6dfc:	000d4df5 	.word	0x000d4df5
   d6e00:	000d4f9d 	.word	0x000d4f9d
   d6e04:	000d54cd 	.word	0x000d54cd
   d6e08:	000d5605 	.word	0x000d5605
   d6e0c:	000d56d5 	.word	0x000d56d5
   d6e10:	000d588d 	.word	0x000d588d
   d6e14:	000d58a9 	.word	0x000d58a9
   d6e18:	000d6391 	.word	0x000d6391
   d6e1c:	000d6419 	.word	0x000d6419
   d6e20:	000d64dd 	.word	0x000d64dd
   d6e24:	000d6561 	.word	0x000d6561
   d6e28:	000d65e5 	.word	0x000d65e5

000d6e2c <link_constructors_end>:
   d6e2c:	00000000 	.word	0x00000000
