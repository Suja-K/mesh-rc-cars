
/Users/bsatrom/Development/particle/rc-mesh/rc-swarm-follower/target/rc-swarm-follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016ca8  2**0
                  CONTENTS
  3 .data         0000007c  2003e340  000d6c00  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000434  2003e3bc  2003e3bc  0001e3bc  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6c7c  000d6c7c  00016c7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6ca4  000d6ca4  00016ca4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a7ea8  00000000  00000000  00016ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f819  00000000  00000000  000beb50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000149d3  00000000  00000000  000ce369  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020b0  00000000  00000000  000e2d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003560  00000000  00000000  000e4dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000311f8  00000000  00000000  000e834c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024592  00000000  00000000  00119544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3770  00000000  00000000  0013dad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bce0  00000000  00000000  00211248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	9c 67 0d 00                                         .g..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb56 	bl	d66de <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb5b 	bl	d66f4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e340 	.word	0x2003e340
   d4048:	000d6c00 	.word	0x000d6c00
   d404c:	2003e3bc 	.word	0x2003e3bc
   d4050:	2003e3bc 	.word	0x2003e3bc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f8f3 	bl	d6244 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6bf4 	.word	0x000d6bf4
   d4080:	000d6bc0 	.word	0x000d6bc0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81a 	b.w	d40bc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8e3 	bl	d4254 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b8a5 	b.w	d61e0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb81 	b.w	d479c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bb7f 	b.w	d479c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb85 	b.w	d47ac <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb83 	b.w	d47ac <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <setup>:
int speed = 85;

String version = "v0.8";

void setup()
{
   d40bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(leftReverse, OUTPUT);
   d40be:	4f2c      	ldr	r7, [pc, #176]	; (d4170 <setup+0xb4>)
  pinMode(leftForward, OUTPUT);
   d40c0:	4e2c      	ldr	r6, [pc, #176]	; (d4174 <setup+0xb8>)

String version = "v0.8";

void setup()
{
  pinMode(leftReverse, OUTPUT);
   d40c2:	8838      	ldrh	r0, [r7, #0]
  pinMode(leftForward, OUTPUT);
  pinMode(rightForward, OUTPUT);
   d40c4:	4d2c      	ldr	r5, [pc, #176]	; (d4178 <setup+0xbc>)
  pinMode(rightReverse, OUTPUT);
   d40c6:	4c2d      	ldr	r4, [pc, #180]	; (d417c <setup+0xc0>)
int speed = 85;

String version = "v0.8";

void setup()
{
   d40c8:	b085      	sub	sp, #20
  pinMode(leftReverse, OUTPUT);
   d40ca:	2101      	movs	r1, #1
   d40cc:	f002 f8ee 	bl	d62ac <pinMode>
  pinMode(leftForward, OUTPUT);
   d40d0:	2101      	movs	r1, #1
   d40d2:	8830      	ldrh	r0, [r6, #0]
   d40d4:	f002 f8ea 	bl	d62ac <pinMode>
  pinMode(rightForward, OUTPUT);
   d40d8:	2101      	movs	r1, #1
   d40da:	8828      	ldrh	r0, [r5, #0]
   d40dc:	f002 f8e6 	bl	d62ac <pinMode>
  pinMode(rightReverse, OUTPUT);
   d40e0:	8820      	ldrh	r0, [r4, #0]
   d40e2:	2101      	movs	r1, #1
   d40e4:	f002 f8e2 	bl	d62ac <pinMode>

  digitalWrite(leftReverse, LOW);
   d40e8:	2100      	movs	r1, #0
   d40ea:	8838      	ldrh	r0, [r7, #0]
   d40ec:	f002 f8ef 	bl	d62ce <digitalWrite>
  digitalWrite(leftForward, LOW);
   d40f0:	2100      	movs	r1, #0
   d40f2:	8830      	ldrh	r0, [r6, #0]
   d40f4:	f002 f8eb 	bl	d62ce <digitalWrite>
  digitalWrite(rightForward, LOW);
   d40f8:	2100      	movs	r1, #0
   d40fa:	8828      	ldrh	r0, [r5, #0]
   d40fc:	f002 f8e7 	bl	d62ce <digitalWrite>
  digitalWrite(rightReverse, LOW);
   d4100:	8820      	ldrh	r0, [r4, #0]
   d4102:	2100      	movs	r1, #0
   d4104:	f002 f8e3 	bl	d62ce <digitalWrite>
   d4108:	4b1d      	ldr	r3, [pc, #116]	; (d4180 <setup+0xc4>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d410a:	491e      	ldr	r1, [pc, #120]	; (d4184 <setup+0xc8>)
   d410c:	681a      	ldr	r2, [r3, #0]
   d410e:	4b1e      	ldr	r3, [pc, #120]	; (d4188 <setup+0xcc>)
   d4110:	781b      	ldrb	r3, [r3, #0]
   d4112:	f88d 3000 	strb.w	r3, [sp]
   d4116:	a802      	add	r0, sp, #8
   d4118:	233c      	movs	r3, #60	; 0x3c
   d411a:	f000 fcd1 	bl	d4ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d411e:	9c03      	ldr	r4, [sp, #12]
   d4120:	b17c      	cbz	r4, d4142 <setup+0x86>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4122:	6863      	ldr	r3, [r4, #4]
   d4124:	3b01      	subs	r3, #1
   d4126:	6063      	str	r3, [r4, #4]
   d4128:	b95b      	cbnz	r3, d4142 <setup+0x86>
        {
          _M_dispose();
   d412a:	6823      	ldr	r3, [r4, #0]
   d412c:	4620      	mov	r0, r4
   d412e:	689b      	ldr	r3, [r3, #8]
   d4130:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4132:	68a3      	ldr	r3, [r4, #8]
   d4134:	3b01      	subs	r3, #1
   d4136:	60a3      	str	r3, [r4, #8]
   d4138:	b91b      	cbnz	r3, d4142 <setup+0x86>
            _M_destroy();
   d413a:	6823      	ldr	r3, [r4, #0]
   d413c:	4620      	mov	r0, r4
   d413e:	68db      	ldr	r3, [r3, #12]
   d4140:	4798      	blx	r3

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d4142:	2308      	movs	r3, #8
   d4144:	f8ad 3008 	strh.w	r3, [sp, #8]
        extra.update = update_string_variable;
   d4148:	4b10      	ldr	r3, [pc, #64]	; (d418c <setup+0xd0>)
   d414a:	9303      	str	r3, [sp, #12]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d414c:	2204      	movs	r2, #4
   d414e:	ab02      	add	r3, sp, #8
   d4150:	490b      	ldr	r1, [pc, #44]	; (d4180 <setup+0xc4>)
   d4152:	480f      	ldr	r0, [pc, #60]	; (d4190 <setup+0xd4>)
   d4154:	f000 faba 	bl	d46cc <spark_variable>

  Particle.publish("swarm-follower-online", version);
  Particle.variable("fw-version", version);

  Mesh.subscribe("goForward", goForward);
   d4158:	4a0e      	ldr	r2, [pc, #56]	; (d4194 <setup+0xd8>)
   d415a:	490f      	ldr	r1, [pc, #60]	; (d4198 <setup+0xdc>)
   d415c:	480f      	ldr	r0, [pc, #60]	; (d419c <setup+0xe0>)
   d415e:	f001 f8db 	bl	d5318 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("goBack", goBack);
   d4162:	4a0f      	ldr	r2, [pc, #60]	; (d41a0 <setup+0xe4>)
   d4164:	490f      	ldr	r1, [pc, #60]	; (d41a4 <setup+0xe8>)
   d4166:	480d      	ldr	r0, [pc, #52]	; (d419c <setup+0xe0>)
   d4168:	f001 f8d6 	bl	d5318 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
}
   d416c:	b005      	add	sp, #20
   d416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4170:	2003e34c 	.word	0x2003e34c
   d4174:	2003e348 	.word	0x2003e348
   d4178:	2003e340 	.word	0x2003e340
   d417c:	2003e344 	.word	0x2003e344
   d4180:	2003e3c4 	.word	0x2003e3c4
   d4184:	000d67b0 	.word	0x000d67b0
   d4188:	2003e3c0 	.word	0x2003e3c0
   d418c:	000d40b7 	.word	0x000d40b7
   d4190:	000d67c6 	.word	0x000d67c6
   d4194:	000d41ed 	.word	0x000d41ed
   d4198:	000d67d1 	.word	0x000d67d1
   d419c:	2003e3e8 	.word	0x2003e3e8
   d41a0:	000d4221 	.word	0x000d4221
   d41a4:	000d67db 	.word	0x000d67db

000d41a8 <_Z6allOffv>:

  allOff();
}

void allOff()
{
   d41a8:	b508      	push	{r3, lr}
  analogWrite(leftReverse, 0);
   d41aa:	4b0c      	ldr	r3, [pc, #48]	; (d41dc <_Z6allOffv+0x34>)
   d41ac:	2100      	movs	r1, #0
   d41ae:	8818      	ldrh	r0, [r3, #0]
   d41b0:	f002 f8a6 	bl	d6300 <_Z11analogWritetm>
  analogWrite(leftForward, 0);
   d41b4:	4b0a      	ldr	r3, [pc, #40]	; (d41e0 <_Z6allOffv+0x38>)
   d41b6:	2100      	movs	r1, #0
   d41b8:	8818      	ldrh	r0, [r3, #0]
   d41ba:	f002 f8a1 	bl	d6300 <_Z11analogWritetm>
  analogWrite(rightForward, 0);
   d41be:	4b09      	ldr	r3, [pc, #36]	; (d41e4 <_Z6allOffv+0x3c>)
   d41c0:	2100      	movs	r1, #0
   d41c2:	8818      	ldrh	r0, [r3, #0]
   d41c4:	f002 f89c 	bl	d6300 <_Z11analogWritetm>
  analogWrite(rightReverse, 0);
   d41c8:	4b07      	ldr	r3, [pc, #28]	; (d41e8 <_Z6allOffv+0x40>)
   d41ca:	2100      	movs	r1, #0
   d41cc:	8818      	ldrh	r0, [r3, #0]
   d41ce:	f002 f897 	bl	d6300 <_Z11analogWritetm>

  delay(50);
   d41d2:	2032      	movs	r0, #50	; 0x32
}
   d41d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  analogWrite(leftReverse, 0);
  analogWrite(leftForward, 0);
  analogWrite(rightForward, 0);
  analogWrite(rightReverse, 0);

  delay(50);
   d41d8:	f000 bb08 	b.w	d47ec <delay>
   d41dc:	2003e34c 	.word	0x2003e34c
   d41e0:	2003e348 	.word	0x2003e348
   d41e4:	2003e340 	.word	0x2003e340
   d41e8:	2003e344 	.word	0x2003e344

000d41ec <_Z9goForwardPKcS0_>:
  Mesh.subscribe("goForward", goForward);
  Mesh.subscribe("goBack", goBack);
}

void goForward(const char *event, const char *data)
{
   d41ec:	b510      	push	{r4, lr}
  analogWrite(rightForward, speed);
   d41ee:	4b09      	ldr	r3, [pc, #36]	; (d4214 <_Z9goForwardPKcS0_+0x28>)
   d41f0:	4c09      	ldr	r4, [pc, #36]	; (d4218 <_Z9goForwardPKcS0_+0x2c>)
   d41f2:	8818      	ldrh	r0, [r3, #0]
   d41f4:	6821      	ldr	r1, [r4, #0]
   d41f6:	f002 f883 	bl	d6300 <_Z11analogWritetm>
  analogWrite(leftForward, speed);
   d41fa:	4b08      	ldr	r3, [pc, #32]	; (d421c <_Z9goForwardPKcS0_+0x30>)
   d41fc:	6821      	ldr	r1, [r4, #0]
   d41fe:	8818      	ldrh	r0, [r3, #0]
   d4200:	f002 f87e 	bl	d6300 <_Z11analogWritetm>

  delay(1000);
   d4204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4208:	f000 faf0 	bl	d47ec <delay>

  allOff();
}
   d420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(rightForward, speed);
  analogWrite(leftForward, speed);

  delay(1000);

  allOff();
   d4210:	f7ff bfca 	b.w	d41a8 <_Z6allOffv>
   d4214:	2003e340 	.word	0x2003e340
   d4218:	2003e350 	.word	0x2003e350
   d421c:	2003e348 	.word	0x2003e348

000d4220 <_Z6goBackPKcS0_>:
}

void goBack(const char *event, const char *data)
{
   d4220:	b510      	push	{r4, lr}
  analogWrite(rightReverse, speed);
   d4222:	4b09      	ldr	r3, [pc, #36]	; (d4248 <_Z6goBackPKcS0_+0x28>)
   d4224:	4c09      	ldr	r4, [pc, #36]	; (d424c <_Z6goBackPKcS0_+0x2c>)
   d4226:	8818      	ldrh	r0, [r3, #0]
   d4228:	6821      	ldr	r1, [r4, #0]
   d422a:	f002 f869 	bl	d6300 <_Z11analogWritetm>
  analogWrite(leftReverse, speed);
   d422e:	4b08      	ldr	r3, [pc, #32]	; (d4250 <_Z6goBackPKcS0_+0x30>)
   d4230:	6821      	ldr	r1, [r4, #0]
   d4232:	8818      	ldrh	r0, [r3, #0]
   d4234:	f002 f864 	bl	d6300 <_Z11analogWritetm>

  delay(1000);
   d4238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d423c:	f000 fad6 	bl	d47ec <delay>

  allOff();
}
   d4240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(rightReverse, speed);
  analogWrite(leftReverse, speed);

  delay(1000);

  allOff();
   d4244:	f7ff bfb0 	b.w	d41a8 <_Z6allOffv>
   d4248:	2003e344 	.word	0x2003e344
   d424c:	2003e350 	.word	0x2003e350
   d4250:	2003e34c 	.word	0x2003e34c

000d4254 <loop>:

  delay(50);
}

void loop()
{
   d4254:	4770      	bx	lr
	...

000d4258 <_GLOBAL__sub_I_leftReverse>:
   d4258:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d425a:	4b08      	ldr	r3, [pc, #32]	; (d427c <_GLOBAL__sub_I_leftReverse+0x24>)
int rightForward = A2;
int rightReverse = A3;

int speed = 85;

String version = "v0.8";
   d425c:	4c08      	ldr	r4, [pc, #32]	; (d4280 <_GLOBAL__sub_I_leftReverse+0x28>)
   d425e:	2200      	movs	r2, #0
   d4260:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4262:	f000 f86d 	bl	d4340 <HAL_Pin_Map>
   d4266:	4907      	ldr	r1, [pc, #28]	; (d4284 <_GLOBAL__sub_I_leftReverse+0x2c>)
   d4268:	4620      	mov	r0, r4
   d426a:	f001 faac 	bl	d57c6 <_ZN6StringC1EPK19__FlashStringHelper>
   d426e:	4620      	mov	r0, r4
   d4270:	4a05      	ldr	r2, [pc, #20]	; (d4288 <_GLOBAL__sub_I_leftReverse+0x30>)
   d4272:	4906      	ldr	r1, [pc, #24]	; (d428c <_GLOBAL__sub_I_leftReverse+0x34>)
  delay(50);
}

void loop()
{
   d4274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int rightForward = A2;
int rightReverse = A3;

int speed = 85;

String version = "v0.8";
   d4278:	f002 b8aa 	b.w	d63d0 <__aeabi_atexit>
   d427c:	2003e3c0 	.word	0x2003e3c0
   d4280:	2003e3c4 	.word	0x2003e3c4
   d4284:	000d67e2 	.word	0x000d67e2
   d4288:	2003e3bc 	.word	0x2003e3bc
   d428c:	000d5739 	.word	0x000d5739

000d4290 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <os_thread_create+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	685b      	ldr	r3, [r3, #4]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030248 	.word	0x00030248

000d42a0 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <os_thread_is_current+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	689b      	ldr	r3, [r3, #8]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030248 	.word	0x00030248

000d42b0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <os_thread_join+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	691b      	ldr	r3, [r3, #16]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030248 	.word	0x00030248

000d42c0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <os_thread_cleanup+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	695b      	ldr	r3, [r3, #20]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030248 	.word	0x00030248

000d42d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <os_mutex_create+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030248 	.word	0x00030248

000d42e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <os_mutex_recursive_create+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030248 	.word	0x00030248

000d42f0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <os_mutex_recursive_lock+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030248 	.word	0x00030248

000d4300 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <os_mutex_recursive_unlock+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030248 	.word	0x00030248

000d4310 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <os_thread_exit+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030248 	.word	0x00030248

000d4320 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_Delay_Milliseconds+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	689b      	ldr	r3, [r3, #8]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030218 	.word	0x00030218

000d4330 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	695b      	ldr	r3, [r3, #20]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030218 	.word	0x00030218

000d4340 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_Pin_Map+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	681b      	ldr	r3, [r3, #0]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003022c 	.word	0x0003022c

000d4350 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_Validate_Pin_Function+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	685b      	ldr	r3, [r3, #4]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003022c 	.word	0x0003022c

000d4360 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_Pin_Mode+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	689b      	ldr	r3, [r3, #8]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003022c 	.word	0x0003022c

000d4370 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_Get_Pin_Mode+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	68db      	ldr	r3, [r3, #12]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003022c 	.word	0x0003022c

000d4380 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_GPIO_Write+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	691b      	ldr	r3, [r3, #16]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003022c 	.word	0x0003022c

000d4390 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_DAC_Write+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003022c 	.word	0x0003022c

000d43a0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_PWM_Write_Ext+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003022c 	.word	0x0003022c

000d43b0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_I2C_Write_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	6a1b      	ldr	r3, [r3, #32]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030228 	.word	0x00030228

000d43c0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_I2C_Available_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030228 	.word	0x00030228

000d43d0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_I2C_Read_Data+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030228 	.word	0x00030228

000d43e0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_I2C_Peek_Data+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030228 	.word	0x00030228

000d43f0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_I2C_Flush_Data+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030228 	.word	0x00030228

000d4400 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_I2C_Is_Enabled+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030228 	.word	0x00030228

000d4410 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_I2C_Init+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030228 	.word	0x00030228

000d4420 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <if_name_to_index+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	691b      	ldr	r3, [r3, #16]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003026c 	.word	0x0003026c

000d4430 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <if_index_to_name+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003026c 	.word	0x0003026c

000d4440 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <if_get_by_index+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	699b      	ldr	r3, [r3, #24]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003026c 	.word	0x0003026c

000d4450 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <if_get_addrs+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003026c 	.word	0x0003026c

000d4460 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <if_free_if_addrs+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003026c 	.word	0x0003026c

000d4470 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <inet_inet_ntop+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	695b      	ldr	r3, [r3, #20]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030264 	.word	0x00030264

000d4480 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <inet_inet_pton+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	699b      	ldr	r3, [r3, #24]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030264 	.word	0x00030264

000d4490 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <inet_htonl+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6a1b      	ldr	r3, [r3, #32]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030264 	.word	0x00030264

000d44a0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <inet_ntohs+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030264 	.word	0x00030264

000d44b0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <inet_htons+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030264 	.word	0x00030264

000d44c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <netdb_freeaddrinfo+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	689b      	ldr	r3, [r3, #8]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030268 	.word	0x00030268

000d44d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <netdb_getaddrinfo+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	68db      	ldr	r3, [r3, #12]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030268 	.word	0x00030268

000d44e0 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <sock_bind+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	685b      	ldr	r3, [r3, #4]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030238 	.word	0x00030238

000d44f0 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <sock_setsockopt+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	699b      	ldr	r3, [r3, #24]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030238 	.word	0x00030238

000d4500 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <sock_close+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	69db      	ldr	r3, [r3, #28]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030238 	.word	0x00030238

000d4510 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <sock_recvfrom+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030238 	.word	0x00030238

000d4520 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <sock_sendto+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030238 	.word	0x00030238

000d4530 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <sock_socket+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030238 	.word	0x00030238

000d4540 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_SPI_Init+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	69db      	ldr	r3, [r3, #28]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030230 	.word	0x00030230

000d4550 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_SPI_Is_Enabled+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6a1b      	ldr	r3, [r3, #32]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030230 	.word	0x00030230

000d4560 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_USART_Init+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	681b      	ldr	r3, [r3, #0]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003023c 	.word	0x0003023c

000d4570 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_USART_Write_Data+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	68db      	ldr	r3, [r3, #12]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003023c 	.word	0x0003023c

000d4580 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_USART_Available_Data+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	691b      	ldr	r3, [r3, #16]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003023c 	.word	0x0003023c

000d4590 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_USART_Read_Data+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003023c 	.word	0x0003023c

000d45a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_USART_Peek_Data+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	699b      	ldr	r3, [r3, #24]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003023c 	.word	0x0003023c

000d45b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USART_Flush_Data+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	69db      	ldr	r3, [r3, #28]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003023c 	.word	0x0003023c

000d45c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USART_Is_Enabled+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6a1b      	ldr	r3, [r3, #32]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003023c 	.word	0x0003023c

000d45d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USART_Available_Data_For_Write+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003023c 	.word	0x0003023c

000d45e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USB_USART_Init+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	681b      	ldr	r3, [r3, #0]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003024c 	.word	0x0003024c

000d45f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USB_USART_Available_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	691b      	ldr	r3, [r3, #16]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003024c 	.word	0x0003024c

000d4600 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	695b      	ldr	r3, [r3, #20]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003024c 	.word	0x0003024c

000d4610 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USB_USART_Receive_Data+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	699b      	ldr	r3, [r3, #24]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003024c 	.word	0x0003024c

000d4620 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_USB_USART_Send_Data+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	69db      	ldr	r3, [r3, #28]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003024c 	.word	0x0003024c

000d4630 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_USB_USART_Flush_Data+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6a1b      	ldr	r3, [r3, #32]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003024c 	.word	0x0003024c

000d4640 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <log_message+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030260 	.word	0x00030260

000d4650 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <set_system_mode+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	685b      	ldr	r3, [r3, #4]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030220 	.word	0x00030220

000d4660 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <system_delay_ms+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	695b      	ldr	r3, [r3, #20]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030220 	.word	0x00030220

000d4670 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <application_thread_current+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030220 	.word	0x00030220

000d4680 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <application_thread_invoke+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030220 	.word	0x00030220

000d4690 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b03      	ldr	r3, [pc, #12]	; (d46a0 <system_ctrl_set_app_request_handler+0x10>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d469a:	9301      	str	r3, [sp, #4]
   d469c:	bd08      	pop	{r3, pc}
   d469e:	0000      	.short	0x0000
   d46a0:	00030220 	.word	0x00030220

000d46a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b03      	ldr	r3, [pc, #12]	; (d46b4 <system_ctrl_set_result+0x10>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46ae:	9301      	str	r3, [sp, #4]
   d46b0:	bd08      	pop	{r3, pc}
   d46b2:	0000      	.short	0x0000
   d46b4:	00030220 	.word	0x00030220

000d46b8 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int32_t(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b03      	ldr	r3, [pc, #12]	; (d46c8 <system_invoke_event_handler+0x10>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d46c2:	9301      	str	r3, [sp, #4]
   d46c4:	bd08      	pop	{r3, pc}
   d46c6:	0000      	.short	0x0000
   d46c8:	00030220 	.word	0x00030220

000d46cc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <spark_variable+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	681b      	ldr	r3, [r3, #0]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030244 	.word	0x00030244

000d46dc <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <spark_send_event+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	6a1b      	ldr	r3, [r3, #32]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030244 	.word	0x00030244

000d46ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030244 	.word	0x00030244

000d46fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <network_connect+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	685b      	ldr	r3, [r3, #4]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030240 	.word	0x00030240

000d470c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <network_connecting+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	689b      	ldr	r3, [r3, #8]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030240 	.word	0x00030240

000d471c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_disconnect+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	68db      	ldr	r3, [r3, #12]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <network_ready+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	691b      	ldr	r3, [r3, #16]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030240 	.word	0x00030240

000d473c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <network_on+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	695b      	ldr	r3, [r3, #20]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030240 	.word	0x00030240

000d474c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <network_off+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	699b      	ldr	r3, [r3, #24]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030240 	.word	0x00030240

000d475c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_listen+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	69db      	ldr	r3, [r3, #28]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <network_listening+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6a1b      	ldr	r3, [r3, #32]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030240 	.word	0x00030240

000d477c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <network_set_listen_timeout+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030240 	.word	0x00030240

000d478c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <network_get_listen_timeout+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030240 	.word	0x00030240

000d479c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <malloc+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	681b      	ldr	r3, [r3, #0]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003021c 	.word	0x0003021c

000d47ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <free+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	685b      	ldr	r3, [r3, #4]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003021c 	.word	0x0003021c

000d47bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <realloc+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003021c 	.word	0x0003021c

000d47cc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <abort+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003021c 	.word	0x0003021c

000d47dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <_malloc_r+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	0003021c 	.word	0x0003021c

000d47ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d47ec:	2100      	movs	r1, #0
   d47ee:	f7ff bf37 	b.w	d4660 <system_delay_ms>

000d47f2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d47f2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d47f4:	6883      	ldr	r3, [r0, #8]
   d47f6:	4604      	mov	r4, r0
   d47f8:	b90b      	cbnz	r3, d47fe <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d47fa:	f001 fe08 	bl	d640e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d47fe:	68c3      	ldr	r3, [r0, #12]
   d4800:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4802:	68a3      	ldr	r3, [r4, #8]
   d4804:	b11b      	cbz	r3, d480e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4806:	2203      	movs	r2, #3
   d4808:	4621      	mov	r1, r4
   d480a:	4620      	mov	r0, r4
   d480c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d480e:	4620      	mov	r0, r4
}
   d4810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4814:	f7ff bc43 	b.w	d409e <_ZdlPv>

000d4818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4818:	4770      	bx	lr

000d481a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d481a:	2000      	movs	r0, #0
   d481c:	4770      	bx	lr

000d481e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d481e:	b510      	push	{r4, lr}
   d4820:	4604      	mov	r4, r0
   d4822:	f7ff fc3c 	bl	d409e <_ZdlPv>
   d4826:	4620      	mov	r0, r4
   d4828:	bd10      	pop	{r4, pc}

000d482a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d482a:	b508      	push	{r3, lr}
      { delete this; }
   d482c:	b108      	cbz	r0, d4832 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d482e:	f7ff fff6 	bl	d481e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4832:	bd08      	pop	{r3, pc}

000d4834 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4834:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4836:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4838:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d483a:	b113      	cbz	r3, d4842 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d483c:	2203      	movs	r2, #3
   d483e:	4601      	mov	r1, r0
   d4840:	4798      	blx	r3
    }
   d4842:	4620      	mov	r0, r4
   d4844:	bd10      	pop	{r4, pc}

000d4846 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4846:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4848:	68c4      	ldr	r4, [r0, #12]
   d484a:	b1d4      	cbz	r4, d4882 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d484c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d484e:	2b02      	cmp	r3, #2
   d4850:	d102      	bne.n	d4858 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4852:	68e0      	ldr	r0, [r4, #12]
   d4854:	f7ff ffaa 	bl	d47ac <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4858:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d485a:	b12d      	cbz	r5, d4868 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d485c:	4628      	mov	r0, r5
   d485e:	f7ff ffe9 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
   d4862:	4628      	mov	r0, r5
   d4864:	f7ff fc1b 	bl	d409e <_ZdlPv>
   d4868:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d486a:	b12d      	cbz	r5, d4878 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d486c:	4628      	mov	r0, r5
   d486e:	f7ff ffe1 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
   d4872:	4628      	mov	r0, r5
   d4874:	f7ff fc13 	bl	d409e <_ZdlPv>
   d4878:	4620      	mov	r0, r4
   d487a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d487e:	f7ff bc0e 	b.w	d409e <_ZdlPv>
   d4882:	bd38      	pop	{r3, r4, r5, pc}

000d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4884:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4886:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4888:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d488a:	b17c      	cbz	r4, d48ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d488c:	6863      	ldr	r3, [r4, #4]
   d488e:	3b01      	subs	r3, #1
   d4890:	6063      	str	r3, [r4, #4]
   d4892:	b95b      	cbnz	r3, d48ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4894:	6823      	ldr	r3, [r4, #0]
   d4896:	4620      	mov	r0, r4
   d4898:	689b      	ldr	r3, [r3, #8]
   d489a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d489c:	68a3      	ldr	r3, [r4, #8]
   d489e:	3b01      	subs	r3, #1
   d48a0:	60a3      	str	r3, [r4, #8]
   d48a2:	b91b      	cbnz	r3, d48ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d48a4:	6823      	ldr	r3, [r4, #0]
   d48a6:	4620      	mov	r0, r4
   d48a8:	68db      	ldr	r3, [r3, #12]
   d48aa:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48ac:	4628      	mov	r0, r5
   d48ae:	bd38      	pop	{r3, r4, r5, pc}

000d48b0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d48b0:	b513      	push	{r0, r1, r4, lr}
   d48b2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d48b4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d48b8:	2300      	movs	r3, #0
   d48ba:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48bc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d48be:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d48c0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48c2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d48c4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48c6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48c8:	f7ff ffdc 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48cc:	4620      	mov	r0, r4
   d48ce:	b002      	add	sp, #8
   d48d0:	bd10      	pop	{r4, pc}

000d48d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48d2:	680b      	ldr	r3, [r1, #0]
   d48d4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48d6:	b113      	cbz	r3, d48de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d48d8:	685a      	ldr	r2, [r3, #4]
   d48da:	3201      	adds	r2, #1
   d48dc:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d48de:	4770      	bx	lr

000d48e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d48e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48e2:	460c      	mov	r4, r1
   d48e4:	ad02      	add	r5, sp, #8
   d48e6:	f854 3b04 	ldr.w	r3, [r4], #4
   d48ea:	f845 3d08 	str.w	r3, [r5, #-8]!
   d48ee:	4606      	mov	r6, r0
   d48f0:	460f      	mov	r7, r1
   d48f2:	a801      	add	r0, sp, #4
   d48f4:	4621      	mov	r1, r4
   d48f6:	f7ff ffec 	bl	d48d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d48fa:	4629      	mov	r1, r5
   d48fc:	4630      	mov	r0, r6
   d48fe:	f7ff ffd7 	bl	d48b0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4902:	a801      	add	r0, sp, #4
   d4904:	f7ff ffbe 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4908:	4620      	mov	r0, r4
   d490a:	f7ff ffbb 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d490e:	4638      	mov	r0, r7
   d4910:	f7ff fbc5 	bl	d409e <_ZdlPv>
        return p;
    }
   d4914:	4630      	mov	r0, r6
   d4916:	b003      	add	sp, #12
   d4918:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d491a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d491a:	b513      	push	{r0, r1, r4, lr}
   d491c:	460b      	mov	r3, r1
   d491e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4920:	c803      	ldmia	r0, {r0, r1}
   d4922:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4926:	e893 0003 	ldmia.w	r3, {r0, r1}
   d492a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d492e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4932:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4936:	b002      	add	sp, #8
   d4938:	bd10      	pop	{r4, pc}

000d493a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d493a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d493c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d493e:	b90a      	cbnz	r2, d4944 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4940:	f001 fd65 	bl	d640e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4944:	68c3      	ldr	r3, [r0, #12]
    }
   d4946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d494a:	4718      	bx	r3

000d494c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d494c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d494e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4950:	f100 0110 	add.w	r1, r0, #16
   d4954:	f7ff fff1 	bl	d493a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4958:	bd08      	pop	{r3, pc}

000d495a <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d495a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d495c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d495e:	b90a      	cbnz	r2, d4964 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4960:	f001 fd55 	bl	d640e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4964:	68c3      	ldr	r3, [r0, #12]
    }
   d4966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d496a:	4718      	bx	r3

000d496c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d496c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d496e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4970:	f100 0110 	add.w	r1, r0, #16
   d4974:	f7ff fff1 	bl	d495a <_ZNKSt8functionIFvRKbEEclES1_>
   d4978:	bd08      	pop	{r3, pc}

000d497a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d497a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d497c:	2300      	movs	r3, #0
   d497e:	6083      	str	r3, [r0, #8]
   d4980:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4982:	4604      	mov	r4, r0
   d4984:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4986:	b12b      	cbz	r3, d4994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4988:	2202      	movs	r2, #2
   d498a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d498c:	68eb      	ldr	r3, [r5, #12]
   d498e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4990:	68ab      	ldr	r3, [r5, #8]
   d4992:	60a3      	str	r3, [r4, #8]
	}
    }
   d4994:	4620      	mov	r0, r4
   d4996:	bd38      	pop	{r3, r4, r5, pc}

000d4998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d499c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d49a0:	b086      	sub	sp, #24
   d49a2:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49a4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d49a8:	808b      	strh	r3, [r1, #4]
   d49aa:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49ac:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d49ae:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d49b2:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d49b4:	f04f 0002 	mov.w	r0, #2
   d49b8:	e8d4 1f4f 	ldrexb	r1, [r4]
   d49bc:	4299      	cmp	r1, r3
   d49be:	d103      	bne.n	d49c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d49c0:	e8c4 0f45 	strexb	r5, r0, [r4]
   d49c4:	2d00      	cmp	r5, #0
   d49c6:	d1f7      	bne.n	d49b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d49c8:	d002      	beq.n	d49d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d49ca:	f88d 1000 	strb.w	r1, [sp]
   d49ce:	e06a      	b.n	d4aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d49d0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49d4:	bf1e      	ittt	ne
   d49d6:	60e7      	strne	r7, [r4, #12]
   d49d8:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d49da:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d49dc:	2301      	movs	r3, #1
   d49de:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d49e2:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d49e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d49e6:	f104 0308 	add.w	r3, r4, #8
   d49ea:	f3bf 8f5f 	dmb	sy
   d49ee:	e853 6f00 	ldrex	r6, [r3]
   d49f2:	e843 0200 	strex	r2, r0, [r3]
   d49f6:	2a00      	cmp	r2, #0
   d49f8:	d1f9      	bne.n	d49ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d49fa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d49fe:	2e00      	cmp	r6, #0
   d4a00:	d051      	beq.n	d4aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4a02:	f7ff fe35 	bl	d4670 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4a06:	b120      	cbz	r0, d4a12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4a08:	4629      	mov	r1, r5
   d4a0a:	4630      	mov	r0, r6
   d4a0c:	f7ff ff95 	bl	d493a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a10:	e043      	b.n	d4a9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4a12:	4631      	mov	r1, r6
   d4a14:	4668      	mov	r0, sp
   d4a16:	f7ff ffb0 	bl	d497a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4a1a:	68e0      	ldr	r0, [r4, #12]
   d4a1c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4a20:	b108      	cbz	r0, d4a26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4a22:	f001 fe77 	bl	d6714 <strdup>
   d4a26:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4a28:	2010      	movs	r0, #16
   d4a2a:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4a2e:	f7ff fb32 	bl	d4096 <_Znwj>
   d4a32:	4605      	mov	r5, r0
   d4a34:	b330      	cbz	r0, d4a84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a36:	f04f 0800 	mov.w	r8, #0
   d4a3a:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a3e:	2018      	movs	r0, #24
   d4a40:	f7ff fb29 	bl	d4096 <_Znwj>
   d4a44:	4604      	mov	r4, r0
   d4a46:	b1c0      	cbz	r0, d4a7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a48:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4a4c:	4601      	mov	r1, r0
   d4a4e:	4668      	mov	r0, sp
   d4a50:	f7ff ff63 	bl	d491a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a54:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4a56:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a58:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a5a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4a5c:	9202      	str	r2, [sp, #8]
   d4a5e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a60:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4a66:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a68:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a70:	9b04      	ldr	r3, [sp, #16]
   d4a72:	9203      	str	r2, [sp, #12]
   d4a74:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a76:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4a7a:	4b0e      	ldr	r3, [pc, #56]	; (d4ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4a7c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4a7e:	4b0e      	ldr	r3, [pc, #56]	; (d4ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a80:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4a82:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4a84:	9804      	ldr	r0, [sp, #16]
   d4a86:	f7ff fe91 	bl	d47ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4a8a:	4668      	mov	r0, sp
   d4a8c:	f7ff fed2 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4a90:	2200      	movs	r2, #0
   d4a92:	4629      	mov	r1, r5
   d4a94:	4809      	ldr	r0, [pc, #36]	; (d4abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4a96:	f7ff fdf3 	bl	d4680 <application_thread_invoke>
   d4a9a:	4630      	mov	r0, r6
   d4a9c:	f7ff feca 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4aa0:	4630      	mov	r0, r6
   d4aa2:	f7ff fafc 	bl	d409e <_ZdlPv>
   d4aa6:	4638      	mov	r0, r7
   d4aa8:	f7ff fe80 	bl	d47ac <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4aac:	b006      	add	sp, #24
   d4aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ab2:	bf00      	nop
   d4ab4:	000d494d 	.word	0x000d494d
   d4ab8:	000d4ba9 	.word	0x000d4ba9
   d4abc:	000d47f3 	.word	0x000d47f3

000d4ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ac4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ac6:	ad07      	add	r5, sp, #28
   d4ac8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4acc:	4606      	mov	r6, r0
   d4ace:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4ad0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ad2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ad4:	460f      	mov	r7, r1
   d4ad6:	4690      	mov	r8, r2
   d4ad8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4adc:	f8c5 b004 	str.w	fp, [r5, #4]
   d4ae0:	f8c5 b008 	str.w	fp, [r5, #8]
   d4ae4:	9307      	str	r3, [sp, #28]
   d4ae6:	f7ff fad6 	bl	d4096 <_Znwj>
   d4aea:	4604      	mov	r4, r0
   d4aec:	b138      	cbz	r0, d4afe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4aee:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4af2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4af6:	f8c0 b004 	str.w	fp, [r0, #4]
   d4afa:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4afe:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b00:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4b02:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b04:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b06:	f7ff fac6 	bl	d4096 <_Znwj>
   d4b0a:	b128      	cbz	r0, d4b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4b0c:	2301      	movs	r3, #1
   d4b0e:	6043      	str	r3, [r0, #4]
   d4b10:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4b12:	4b23      	ldr	r3, [pc, #140]	; (d4ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4b14:	6003      	str	r3, [r0, #0]
   d4b16:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b18:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4b1a:	4b22      	ldr	r3, [pc, #136]	; (d4ba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4b1c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4b1e:	2008      	movs	r0, #8
   d4b20:	f7ff fab9 	bl	d4096 <_Znwj>
   d4b24:	4604      	mov	r4, r0
   d4b26:	b128      	cbz	r0, d4b34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b28:	9b03      	ldr	r3, [sp, #12]
   d4b2a:	f840 3b04 	str.w	r3, [r0], #4
   d4b2e:	a904      	add	r1, sp, #16
   d4b30:	f7ff fecf 	bl	d48d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b34:	9500      	str	r5, [sp, #0]
   d4b36:	fa5f f38a 	uxtb.w	r3, sl
   d4b3a:	464a      	mov	r2, r9
   d4b3c:	4641      	mov	r1, r8
   d4b3e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4b40:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b42:	f7ff fdcb 	bl	d46dc <spark_send_event>
   d4b46:	b9b8      	cbnz	r0, d4b78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4b48:	9b03      	ldr	r3, [sp, #12]
   d4b4a:	785b      	ldrb	r3, [r3, #1]
   d4b4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4b50:	b993      	cbnz	r3, d4b78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4b52:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4b56:	a905      	add	r1, sp, #20
   d4b58:	a803      	add	r0, sp, #12
   d4b5a:	9205      	str	r2, [sp, #20]
   d4b5c:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b60:	f7ff ff1a 	bl	d4998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4b64:	9805      	ldr	r0, [sp, #20]
   d4b66:	f7ff fe21 	bl	d47ac <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4b6a:	a805      	add	r0, sp, #20
   d4b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4b6e:	f7ff feb7 	bl	d48e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b72:	a806      	add	r0, sp, #24
   d4b74:	f7ff fe86 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b78:	9b03      	ldr	r3, [sp, #12]
   d4b7a:	9305      	str	r3, [sp, #20]
   d4b7c:	a904      	add	r1, sp, #16
   d4b7e:	a806      	add	r0, sp, #24
   d4b80:	f7ff fea7 	bl	d48d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4b84:	a905      	add	r1, sp, #20
   d4b86:	4630      	mov	r0, r6
   d4b88:	f7ff fe92 	bl	d48b0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b8c:	a806      	add	r0, sp, #24
   d4b8e:	f7ff fe79 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b92:	a804      	add	r0, sp, #16
   d4b94:	f7ff fe76 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4b98:	4630      	mov	r0, r6
   d4b9a:	b00b      	add	sp, #44	; 0x2c
   d4b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ba0:	000d67f0 	.word	0x000d67f0
   d4ba4:	000d4d11 	.word	0x000d4d11

000d4ba8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ba8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4bae:	d006      	beq.n	d4bbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4bb0:	2a03      	cmp	r2, #3
   d4bb2:	d017      	beq.n	d4be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4bb4:	2a01      	cmp	r2, #1
   d4bb6:	d120      	bne.n	d4bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4bb8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4bba:	6003      	str	r3, [r0, #0]
	      break;
   d4bbc:	e01d      	b.n	d4bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4bbe:	2018      	movs	r0, #24
   d4bc0:	680e      	ldr	r6, [r1, #0]
   d4bc2:	f7ff fa68 	bl	d4096 <_Znwj>
   d4bc6:	4605      	mov	r5, r0
   d4bc8:	b150      	cbz	r0, d4be0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4bca:	4631      	mov	r1, r6
   d4bcc:	f7ff fed5 	bl	d497a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bd0:	6930      	ldr	r0, [r6, #16]
   d4bd2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bd6:	b108      	cbz	r0, d4bdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4bd8:	f001 fd9c 	bl	d6714 <strdup>
   d4bdc:	6128      	str	r0, [r5, #16]
   d4bde:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4be0:	6025      	str	r5, [r4, #0]
   d4be2:	e00a      	b.n	d4bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4be4:	6804      	ldr	r4, [r0, #0]
   d4be6:	b144      	cbz	r4, d4bfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4be8:	6920      	ldr	r0, [r4, #16]
   d4bea:	f7ff fddf 	bl	d47ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bee:	4620      	mov	r0, r4
   d4bf0:	f7ff fe20 	bl	d4834 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	f7ff fa52 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4bfa:	2000      	movs	r0, #0
   d4bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bfe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4bfe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c00:	2300      	movs	r3, #0
   d4c02:	6083      	str	r3, [r0, #8]
   d4c04:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c06:	4604      	mov	r4, r0
   d4c08:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4c0a:	b12b      	cbz	r3, d4c18 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c0c:	2202      	movs	r2, #2
   d4c0e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c10:	68eb      	ldr	r3, [r5, #12]
   d4c12:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c14:	68ab      	ldr	r3, [r5, #8]
   d4c16:	60a3      	str	r3, [r4, #8]
	}
    }
   d4c18:	4620      	mov	r0, r4
   d4c1a:	bd38      	pop	{r3, r4, r5, pc}

000d4c1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c1e:	b570      	push	{r4, r5, r6, lr}
   d4c20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c22:	d006      	beq.n	d4c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4c24:	2a03      	cmp	r2, #3
   d4c26:	d011      	beq.n	d4c4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4c28:	2a01      	cmp	r2, #1
   d4c2a:	d117      	bne.n	d4c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c2c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c2e:	6003      	str	r3, [r0, #0]
	      break;
   d4c30:	e014      	b.n	d4c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c32:	2014      	movs	r0, #20
   d4c34:	680e      	ldr	r6, [r1, #0]
   d4c36:	f7ff fa2e 	bl	d4096 <_Znwj>
   d4c3a:	4605      	mov	r5, r0
   d4c3c:	b120      	cbz	r0, d4c48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4c3e:	4631      	mov	r1, r6
   d4c40:	f7ff ffdd 	bl	d4bfe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4c44:	7c33      	ldrb	r3, [r6, #16]
   d4c46:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c48:	6025      	str	r5, [r4, #0]
   d4c4a:	e007      	b.n	d4c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c4c:	6804      	ldr	r4, [r0, #0]
   d4c4e:	b12c      	cbz	r4, d4c5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c50:	4620      	mov	r0, r4
   d4c52:	f7ff fdef 	bl	d4834 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c56:	4620      	mov	r0, r4
   d4c58:	f7ff fa21 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4c5c:	2000      	movs	r0, #0
   d4c5e:	bd70      	pop	{r4, r5, r6, pc}

000d4c60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4c60:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4c62:	2300      	movs	r3, #0
   d4c64:	b087      	sub	sp, #28
   d4c66:	460c      	mov	r4, r1
   d4c68:	f3bf 8f5f 	dmb	sy
   d4c6c:	e850 6f00 	ldrex	r6, [r0]
   d4c70:	e840 3200 	strex	r2, r3, [r0]
   d4c74:	2a00      	cmp	r2, #0
   d4c76:	d1f9      	bne.n	d4c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4c78:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4c7c:	2e00      	cmp	r6, #0
   d4c7e:	d03e      	beq.n	d4cfe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4c80:	4618      	mov	r0, r3
   d4c82:	f7ff fcf5 	bl	d4670 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4c86:	4607      	mov	r7, r0
   d4c88:	b120      	cbz	r0, d4c94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c8a:	4621      	mov	r1, r4
   d4c8c:	4630      	mov	r0, r6
   d4c8e:	f7ff fe64 	bl	d495a <_ZNKSt8functionIFvRKbEEclES1_>
   d4c92:	e02e      	b.n	d4cf2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4c94:	4631      	mov	r1, r6
   d4c96:	a801      	add	r0, sp, #4
   d4c98:	f7ff ffb1 	bl	d4bfe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c9c:	7823      	ldrb	r3, [r4, #0]
   d4c9e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ca2:	2010      	movs	r0, #16
   d4ca4:	f7ff f9f7 	bl	d4096 <_Znwj>
   d4ca8:	4605      	mov	r5, r0
   d4caa:	b1d0      	cbz	r0, d4ce2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cae:	2014      	movs	r0, #20
   d4cb0:	f7ff f9f1 	bl	d4096 <_Znwj>
   d4cb4:	4604      	mov	r4, r0
   d4cb6:	b178      	cbz	r0, d4cd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cb8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4cba:	4601      	mov	r1, r0
   d4cbc:	a801      	add	r0, sp, #4
   d4cbe:	f7ff fe2c 	bl	d491a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cc2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4cc4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cc6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cc8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4cca:	9203      	str	r2, [sp, #12]
   d4ccc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cce:	60e3      	str	r3, [r4, #12]
   d4cd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4cd4:	9204      	str	r2, [sp, #16]
   d4cd6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4cd8:	4b0a      	ldr	r3, [pc, #40]	; (d4d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4cda:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4cdc:	4b0a      	ldr	r3, [pc, #40]	; (d4d08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cde:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ce0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ce2:	a801      	add	r0, sp, #4
   d4ce4:	f7ff fda6 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4ce8:	2200      	movs	r2, #0
   d4cea:	4629      	mov	r1, r5
   d4cec:	4807      	ldr	r0, [pc, #28]	; (d4d0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4cee:	f7ff fcc7 	bl	d4680 <application_thread_invoke>
   d4cf2:	4630      	mov	r0, r6
   d4cf4:	f7ff fd9e 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4cf8:	4630      	mov	r0, r6
   d4cfa:	f7ff f9d0 	bl	d409e <_ZdlPv>
        }
    }
   d4cfe:	b007      	add	sp, #28
   d4d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d02:	bf00      	nop
   d4d04:	000d496d 	.word	0x000d496d
   d4d08:	000d4c1d 	.word	0x000d4c1d
   d4d0c:	000d47f3 	.word	0x000d47f3

000d4d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4d10:	b530      	push	{r4, r5, lr}
   d4d12:	b085      	sub	sp, #20
   d4d14:	4604      	mov	r4, r0
   d4d16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4d18:	4668      	mov	r0, sp
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	f7ff fde0 	bl	d48e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4d20:	b17c      	cbz	r4, d4d42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4d22:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d24:	4628      	mov	r0, r5
   d4d26:	b10d      	cbz	r5, d4d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4d28:	f001 fcf4 	bl	d6714 <strdup>
   d4d2c:	9002      	str	r0, [sp, #8]
   d4d2e:	a902      	add	r1, sp, #8
   d4d30:	4668      	mov	r0, sp
   d4d32:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4d36:	f7ff fe2f 	bl	d4998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d3a:	9802      	ldr	r0, [sp, #8]
   d4d3c:	f7ff fd36 	bl	d47ac <free>
   d4d40:	e01d      	b.n	d4d7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4d42:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d44:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4d48:	f04f 0201 	mov.w	r2, #1
   d4d4c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4d50:	42a3      	cmp	r3, r4
   d4d52:	d103      	bne.n	d4d5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4d54:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4d58:	2900      	cmp	r1, #0
   d4d5a:	d1f7      	bne.n	d4d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4d5c:	d002      	beq.n	d4d64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4d5e:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d62:	e00c      	b.n	d4d7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4d64:	f110 010c 	adds.w	r1, r0, #12
   d4d68:	f04f 0301 	mov.w	r3, #1
   d4d6c:	bf18      	it	ne
   d4d6e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4d70:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4d74:	3004      	adds	r0, #4
   d4d76:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4d7a:	f7ff ff71 	bl	d4c60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4d7e:	a801      	add	r0, sp, #4
   d4d80:	f7ff fd80 	bl	d4884 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4d84:	b005      	add	sp, #20
   d4d86:	bd30      	pop	{r4, r5, pc}

000d4d88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d88:	2200      	movs	r2, #0
   d4d8a:	4611      	mov	r1, r2
   d4d8c:	6840      	ldr	r0, [r0, #4]
   d4d8e:	f7ff bced 	b.w	d476c <network_listening>

000d4d92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d92:	2200      	movs	r2, #0
   d4d94:	4611      	mov	r1, r2
   d4d96:	6840      	ldr	r0, [r0, #4]
   d4d98:	f7ff bcf8 	b.w	d478c <network_get_listen_timeout>

000d4d9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	6840      	ldr	r0, [r0, #4]
   d4da0:	f7ff bcec 	b.w	d477c <network_set_listen_timeout>

000d4da4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4da4:	2200      	movs	r2, #0
   d4da6:	f081 0101 	eor.w	r1, r1, #1
   d4daa:	6840      	ldr	r0, [r0, #4]
   d4dac:	f7ff bcd6 	b.w	d475c <network_listen>

000d4db0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4db0:	2300      	movs	r3, #0
   d4db2:	461a      	mov	r2, r3
   d4db4:	4619      	mov	r1, r3
   d4db6:	6840      	ldr	r0, [r0, #4]
   d4db8:	f7ff bcc8 	b.w	d474c <network_off>

000d4dbc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4dbc:	2300      	movs	r3, #0
   d4dbe:	461a      	mov	r2, r3
   d4dc0:	4619      	mov	r1, r3
   d4dc2:	6840      	ldr	r0, [r0, #4]
   d4dc4:	f7ff bcba 	b.w	d473c <network_on>

000d4dc8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dc8:	2200      	movs	r2, #0
   d4dca:	4611      	mov	r1, r2
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	f7ff bcad 	b.w	d472c <network_ready>

000d4dd2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4dd2:	2200      	movs	r2, #0
   d4dd4:	4611      	mov	r1, r2
   d4dd6:	6840      	ldr	r0, [r0, #4]
   d4dd8:	f7ff bc98 	b.w	d470c <network_connecting>

000d4ddc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ddc:	2200      	movs	r2, #0
   d4dde:	2102      	movs	r1, #2
   d4de0:	6840      	ldr	r0, [r0, #4]
   d4de2:	f7ff bc9b 	b.w	d471c <network_disconnect>

000d4de6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4de6:	2300      	movs	r3, #0
   d4de8:	461a      	mov	r2, r3
   d4dea:	6840      	ldr	r0, [r0, #4]
   d4dec:	f7ff bc86 	b.w	d46fc <network_connect>

000d4df0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4df0:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4df2:	2203      	movs	r2, #3
   d4df4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4df6:	4a02      	ldr	r2, [pc, #8]	; (d4e00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4df8:	601a      	str	r2, [r3, #0]
   d4dfa:	4770      	bx	lr
   d4dfc:	2003e3d4 	.word	0x2003e3d4
   d4e00:	000d680c 	.word	0x000d680c

000d4e04 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e04:	4770      	bx	lr

000d4e06 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e08:	4606      	mov	r6, r0
   d4e0a:	4615      	mov	r5, r2
   d4e0c:	460c      	mov	r4, r1
   d4e0e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e10:	42bc      	cmp	r4, r7
   d4e12:	d006      	beq.n	d4e22 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e14:	6833      	ldr	r3, [r6, #0]
   d4e16:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e1a:	689b      	ldr	r3, [r3, #8]
   d4e1c:	4630      	mov	r0, r6
   d4e1e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e20:	e7f6      	b.n	d4e10 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4e22:	4628      	mov	r0, r5
   d4e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e26 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4e26:	2200      	movs	r2, #0
   d4e28:	7c00      	ldrb	r0, [r0, #16]
   d4e2a:	f7ff bac1 	b.w	d43b0 <HAL_I2C_Write_Data>

000d4e2e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e2e:	2100      	movs	r1, #0
   d4e30:	7c00      	ldrb	r0, [r0, #16]
   d4e32:	f7ff bac5 	b.w	d43c0 <HAL_I2C_Available_Data>

000d4e36 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e36:	2100      	movs	r1, #0
   d4e38:	7c00      	ldrb	r0, [r0, #16]
   d4e3a:	f7ff bac9 	b.w	d43d0 <HAL_I2C_Read_Data>

000d4e3e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e3e:	2100      	movs	r1, #0
   d4e40:	7c00      	ldrb	r0, [r0, #16]
   d4e42:	f7ff bacd 	b.w	d43e0 <HAL_I2C_Peek_Data>

000d4e46 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e46:	2100      	movs	r1, #0
   d4e48:	7c00      	ldrb	r0, [r0, #16]
   d4e4a:	f7ff bad1 	b.w	d43f0 <HAL_I2C_Flush_Data>

000d4e4e <_ZN7TwoWireD0Ev>:
   d4e4e:	b510      	push	{r4, lr}
   d4e50:	4604      	mov	r4, r0
   d4e52:	f7ff f924 	bl	d409e <_ZdlPv>
   d4e56:	4620      	mov	r0, r4
   d4e58:	bd10      	pop	{r4, pc}
	...

000d4e5c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e5c:	b510      	push	{r4, lr}
   d4e5e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e64:	4608      	mov	r0, r1
   d4e66:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e68:	2100      	movs	r1, #0
   d4e6a:	4b04      	ldr	r3, [pc, #16]	; (d4e7c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4e6c:	7420      	strb	r0, [r4, #16]
   d4e6e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4e70:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4e72:	f7ff facd 	bl	d4410 <HAL_I2C_Init>

}
   d4e76:	4620      	mov	r0, r4
   d4e78:	bd10      	pop	{r4, pc}
   d4e7a:	bf00      	nop
   d4e7c:	000d6840 	.word	0x000d6840

000d4e80 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4e80:	2100      	movs	r1, #0
   d4e82:	7c00      	ldrb	r0, [r0, #16]
   d4e84:	f7ff babc 	b.w	d4400 <HAL_I2C_Is_Enabled>

000d4e88 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e88:	4770      	bx	lr

000d4e8a <_ZN9IPAddressD0Ev>:
   d4e8a:	b510      	push	{r4, lr}
   d4e8c:	4604      	mov	r4, r0
   d4e8e:	f7ff f906 	bl	d409e <_ZdlPv>
   d4e92:	4620      	mov	r0, r4
   d4e94:	bd10      	pop	{r4, pc}

000d4e96 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e96:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4e98:	7d03      	ldrb	r3, [r0, #20]
   d4e9a:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e9c:	b08d      	sub	sp, #52	; 0x34
   d4e9e:	460e      	mov	r6, r1
   d4ea0:	f100 0704 	add.w	r7, r0, #4
   d4ea4:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4ea8:	d002      	beq.n	d4eb0 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4eaa:	f100 0508 	add.w	r5, r0, #8
   d4eae:	e018      	b.n	d4ee2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4eb0:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4eb2:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4eb4:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4eb8:	232f      	movs	r3, #47	; 0x2f
   d4eba:	462a      	mov	r2, r5
   d4ebc:	200a      	movs	r0, #10
   d4ebe:	f7ff fad7 	bl	d4470 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	f001 fc41 	bl	d674a <strlen>
   d4ec8:	6833      	ldr	r3, [r6, #0]
   d4eca:	4602      	mov	r2, r0
   d4ecc:	68db      	ldr	r3, [r3, #12]
   d4ece:	4629      	mov	r1, r5
   d4ed0:	4630      	mov	r0, r6
   d4ed2:	4798      	blx	r3
   d4ed4:	e00f      	b.n	d4ef6 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ed6:	b124      	cbz	r4, d4ee2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4ed8:	212e      	movs	r1, #46	; 0x2e
   d4eda:	4630      	mov	r0, r6
   d4edc:	f000 fbc0 	bl	d5660 <_ZN5Print5printEc>
   d4ee0:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4ee2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ee6:	220a      	movs	r2, #10
   d4ee8:	4630      	mov	r0, r6
   d4eea:	f000 fbe9 	bl	d56c0 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4eee:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ef0:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ef2:	d1f0      	bne.n	d4ed6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ef4:	4620      	mov	r0, r4
    }
    return n;
}
   d4ef6:	b00d      	add	sp, #52	; 0x34
   d4ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4efc <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4efc:	b510      	push	{r4, lr}
   d4efe:	4b05      	ldr	r3, [pc, #20]	; (d4f14 <_ZN9IPAddressC1Ev+0x18>)
   d4f00:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f02:	2211      	movs	r2, #17
   d4f04:	f840 3b04 	str.w	r3, [r0], #4
   d4f08:	2100      	movs	r1, #0
   d4f0a:	f001 fbf3 	bl	d66f4 <memset>
{
    clear();
}
   d4f0e:	4620      	mov	r0, r4
   d4f10:	bd10      	pop	{r4, pc}
   d4f12:	bf00      	nop
   d4f14:	000d6868 	.word	0x000d6868

000d4f18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f18:	4603      	mov	r3, r0
   d4f1a:	4a07      	ldr	r2, [pc, #28]	; (d4f38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f1c:	b510      	push	{r4, lr}
   d4f1e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4f22:	f101 0210 	add.w	r2, r1, #16
   d4f26:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f2a:	f843 4b04 	str.w	r4, [r3], #4
   d4f2e:	4291      	cmp	r1, r2
   d4f30:	d1f9      	bne.n	d4f26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f32:	780a      	ldrb	r2, [r1, #0]
   d4f34:	701a      	strb	r2, [r3, #0]
}
   d4f36:	bd10      	pop	{r4, pc}
   d4f38:	000d6868 	.word	0x000d6868

000d4f3c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4f3c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4f3e:	2b04      	cmp	r3, #4
   d4f40:	d101      	bne.n	d4f46 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	e008      	b.n	d4f58 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4f46:	2b06      	cmp	r3, #6
   d4f48:	d10a      	bne.n	d4f60 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4f4a:	6843      	ldr	r3, [r0, #4]
   d4f4c:	b153      	cbz	r3, d4f64 <_ZNK9IPAddresscvbEv+0x28>
   d4f4e:	6883      	ldr	r3, [r0, #8]
   d4f50:	b143      	cbz	r3, d4f64 <_ZNK9IPAddresscvbEv+0x28>
   d4f52:	68c3      	ldr	r3, [r0, #12]
   d4f54:	b133      	cbz	r3, d4f64 <_ZNK9IPAddresscvbEv+0x28>
   d4f56:	6900      	ldr	r0, [r0, #16]
   d4f58:	3000      	adds	r0, #0
   d4f5a:	bf18      	it	ne
   d4f5c:	2001      	movne	r0, #1
   d4f5e:	4770      	bx	lr
   d4f60:	2000      	movs	r0, #0
   d4f62:	4770      	bx	lr
   d4f64:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4f66:	4770      	bx	lr

000d4f68 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4f68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4f7a:	2304      	movs	r3, #4
   d4f7c:	6041      	str	r1, [r0, #4]
   d4f7e:	7503      	strb	r3, [r0, #20]
   d4f80:	bd10      	pop	{r4, pc}

000d4f82 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f84:	780d      	ldrb	r5, [r1, #0]
   d4f86:	788b      	ldrb	r3, [r1, #2]
   d4f88:	784a      	ldrb	r2, [r1, #1]
   d4f8a:	78c9      	ldrb	r1, [r1, #3]
   d4f8c:	9100      	str	r1, [sp, #0]
   d4f8e:	4629      	mov	r1, r5
   d4f90:	f7ff ffea 	bl	d4f68 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4f94:	b003      	add	sp, #12
   d4f96:	bd30      	pop	{r4, r5, pc}

000d4f98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f98:	4b01      	ldr	r3, [pc, #4]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f9a:	4a02      	ldr	r2, [pc, #8]	; (d4fa4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f9c:	601a      	str	r2, [r3, #0]
   d4f9e:	4770      	bx	lr
   d4fa0:	2003e3dc 	.word	0x2003e3dc
   d4fa4:	000d6929 	.word	0x000d6929

000d4fa8 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4fa8:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4faa:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4fac:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
   d4fae:	b10b      	cbz	r3, d4fb4 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
   d4fb0:	68c0      	ldr	r0, [r0, #12]
   d4fb2:	e006      	b.n	d4fc2 <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	b128      	cbz	r0, d4fc4 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4fb8:	6883      	ldr	r3, [r0, #8]
   d4fba:	b90b      	cbnz	r3, d4fc0 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
   d4fbc:	f001 fa27 	bl	d640e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fc0:	68c3      	ldr	r3, [r0, #12]
   d4fc2:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
   d4fc4:	2301      	movs	r3, #1
   d4fc6:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
   d4fc8:	2000      	movs	r0, #0
    }
   d4fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
   d4fce:	f7ff b99f 	b.w	d4310 <os_thread_exit>

000d4fd2 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fd2:	2200      	movs	r2, #0
   d4fd4:	4611      	mov	r1, r2
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	f7ff bbc8 	b.w	d476c <network_listening>

000d4fdc <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fdc:	2200      	movs	r2, #0
   d4fde:	4611      	mov	r1, r2
   d4fe0:	6840      	ldr	r0, [r0, #4]
   d4fe2:	f7ff bbd3 	b.w	d478c <network_get_listen_timeout>

000d4fe6 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fe6:	2200      	movs	r2, #0
   d4fe8:	6840      	ldr	r0, [r0, #4]
   d4fea:	f7ff bbc7 	b.w	d477c <network_set_listen_timeout>

000d4fee <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fee:	2200      	movs	r2, #0
   d4ff0:	f081 0101 	eor.w	r1, r1, #1
   d4ff4:	6840      	ldr	r0, [r0, #4]
   d4ff6:	f7ff bbb1 	b.w	d475c <network_listen>

000d4ffa <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ffa:	2300      	movs	r3, #0
   d4ffc:	461a      	mov	r2, r3
   d4ffe:	4619      	mov	r1, r3
   d5000:	6840      	ldr	r0, [r0, #4]
   d5002:	f7ff bba3 	b.w	d474c <network_off>

000d5006 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5006:	2300      	movs	r3, #0
   d5008:	461a      	mov	r2, r3
   d500a:	4619      	mov	r1, r3
   d500c:	6840      	ldr	r0, [r0, #4]
   d500e:	f7ff bb95 	b.w	d473c <network_on>

000d5012 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5012:	2200      	movs	r2, #0
   d5014:	4611      	mov	r1, r2
   d5016:	6840      	ldr	r0, [r0, #4]
   d5018:	f7ff bb88 	b.w	d472c <network_ready>

000d501c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d501c:	2200      	movs	r2, #0
   d501e:	4611      	mov	r1, r2
   d5020:	6840      	ldr	r0, [r0, #4]
   d5022:	f7ff bb73 	b.w	d470c <network_connecting>

000d5026 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5026:	2200      	movs	r2, #0
   d5028:	2102      	movs	r1, #2
   d502a:	6840      	ldr	r0, [r0, #4]
   d502c:	f7ff bb76 	b.w	d471c <network_disconnect>

000d5030 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5030:	2300      	movs	r3, #0
   d5032:	461a      	mov	r2, r3
   d5034:	6840      	ldr	r0, [r0, #4]
   d5036:	f7ff bb61 	b.w	d46fc <network_connect>

000d503a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d503a:	b110      	cbz	r0, d5042 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d503c:	6803      	ldr	r3, [r0, #0]
   d503e:	685b      	ldr	r3, [r3, #4]
   d5040:	4718      	bx	r3
   d5042:	4770      	bx	lr

000d5044 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5044:	b538      	push	{r3, r4, r5, lr}
   d5046:	4604      	mov	r4, r0
   d5048:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d504a:	b1d0      	cbz	r0, d5082 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d504c:	f7ff f928 	bl	d42a0 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5050:	b9b8      	cbnz	r0, d5082 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5052:	7c23      	ldrb	r3, [r4, #16]
   d5054:	b91b      	cbnz	r3, d505e <_ZN6Thread7disposeEv+0x1a>
   d5056:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5058:	b108      	cbz	r0, d505e <_ZN6Thread7disposeEv+0x1a>
   d505a:	f7ff f929 	bl	d42b0 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d505e:	6865      	ldr	r5, [r4, #4]
   d5060:	b155      	cbz	r5, d5078 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5062:	68ab      	ldr	r3, [r5, #8]
   d5064:	b11b      	cbz	r3, d506e <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5066:	2203      	movs	r2, #3
   d5068:	4629      	mov	r1, r5
   d506a:	4628      	mov	r0, r5
   d506c:	4798      	blx	r3
            delete wrapper;
   d506e:	4628      	mov	r0, r5
   d5070:	f7ff f815 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d5074:	2300      	movs	r3, #0
   d5076:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5078:	6820      	ldr	r0, [r4, #0]
   d507a:	f7ff f921 	bl	d42c0 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d507e:	2300      	movs	r3, #0
   d5080:	6023      	str	r3, [r4, #0]
   d5082:	bd38      	pop	{r3, r4, r5, pc}

000d5084 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5084:	b538      	push	{r3, r4, r5, lr}
   d5086:	4b0b      	ldr	r3, [pc, #44]	; (d50b4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5088:	6003      	str	r3, [r0, #0]
   d508a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d508c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5090:	b108      	cbz	r0, d5096 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5092:	f7ff f806 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5096:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d509a:	b12d      	cbz	r5, d50a8 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d509c:	4628      	mov	r0, r5
   d509e:	f7ff ffd1 	bl	d5044 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50a2:	4628      	mov	r0, r5
   d50a4:	f7fe fffb 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50a8:	68a0      	ldr	r0, [r4, #8]
   d50aa:	b108      	cbz	r0, d50b0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d50ac:	f7ff ffc5 	bl	d503a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d50b0:	4620      	mov	r0, r4
   d50b2:	bd38      	pop	{r3, r4, r5, pc}
   d50b4:	000d695c 	.word	0x000d695c

000d50b8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d50b8:	6800      	ldr	r0, [r0, #0]
   d50ba:	f7ff b919 	b.w	d42f0 <os_mutex_recursive_lock>

000d50be <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d50be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d50c4:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d50c8:	4606      	mov	r6, r0
   d50ca:	4688      	mov	r8, r1
   d50cc:	4691      	mov	r9, r2
   d50ce:	469a      	mov	sl, r3
   d50d0:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d50d2:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d50d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d50d6:	454b      	cmp	r3, r9
   d50d8:	d129      	bne.n	d512e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d50da:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d50dc:	4553      	cmp	r3, sl
   d50de:	d126      	bne.n	d512e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d50e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d50e4:	455b      	cmp	r3, fp
   d50e6:	d122      	bne.n	d512e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d50e8:	2140      	movs	r1, #64	; 0x40
   d50ea:	4640      	mov	r0, r8
   d50ec:	f001 fb4a 	bl	d6784 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d50f0:	4641      	mov	r1, r8
   d50f2:	4602      	mov	r2, r0
   d50f4:	4620      	mov	r0, r4
   d50f6:	f001 fb30 	bl	d675a <strncmp>
   d50fa:	b9c0      	cbnz	r0, d512e <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d50fc:	b16f      	cbz	r7, d511a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d50fe:	210c      	movs	r1, #12
   d5100:	4638      	mov	r0, r7
   d5102:	f001 fb3f 	bl	d6784 <strnlen>
                if (id_len)
   d5106:	4602      	mov	r2, r0
   d5108:	b138      	cbz	r0, d511a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d510a:	2358      	movs	r3, #88	; 0x58
   d510c:	fb03 6005 	mla	r0, r3, r5, r6
   d5110:	4639      	mov	r1, r7
   d5112:	3049      	adds	r0, #73	; 0x49
   d5114:	f001 fb21 	bl	d675a <strncmp>
   d5118:	e004      	b.n	d5124 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d511a:	2058      	movs	r0, #88	; 0x58
   d511c:	fb00 6505 	mla	r5, r0, r5, r6
   d5120:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d5124:	fab0 f080 	clz	r0, r0
   d5128:	0940      	lsrs	r0, r0, #5
   d512a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d512e:	3501      	adds	r5, #1
   d5130:	2d05      	cmp	r5, #5
   d5132:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d5136:	d1cd      	bne.n	d50d4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d5138:	2000      	movs	r0, #0
}
   d513a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5140 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5144:	b085      	sub	sp, #20
   d5146:	4607      	mov	r7, r0
   d5148:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d514c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d514e:	9601      	str	r6, [sp, #4]
   d5150:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5154:	4689      	mov	r9, r1
   d5156:	9202      	str	r2, [sp, #8]
   d5158:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d515a:	f7ff ffb0 	bl	d50be <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d515e:	2800      	cmp	r0, #0
   d5160:	d13c      	bne.n	d51dc <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d5162:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5164:	2358      	movs	r3, #88	; 0x58
   d5166:	fb03 7504 	mla	r5, r3, r4, r7
   d516a:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d516e:	f1b8 0f00 	cmp.w	r8, #0
   d5172:	d12e      	bne.n	d51d2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5174:	2140      	movs	r1, #64	; 0x40
   d5176:	4648      	mov	r0, r9
   d5178:	f001 fb04 	bl	d6784 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d517c:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d517e:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5180:	4602      	mov	r2, r0
   d5182:	4628      	mov	r0, r5
   d5184:	f001 faab 	bl	d66de <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d5188:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d518c:	4641      	mov	r1, r8
   d518e:	eb05 000b 	add.w	r0, r5, fp
   d5192:	f001 faaf 	bl	d66f4 <memset>
            event_handlers[i].handler = handler;
   d5196:	9b02      	ldr	r3, [sp, #8]
   d5198:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d519a:	9b03      	ldr	r3, [sp, #12]
   d519c:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d519e:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d51a2:	b12e      	cbz	r6, d51b0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d51a4:	210c      	movs	r1, #12
   d51a6:	4630      	mov	r0, r6
   d51a8:	f001 faec 	bl	d6784 <strnlen>
   d51ac:	4605      	mov	r5, r0
   d51ae:	e000      	b.n	d51b2 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d51b0:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d51b2:	2058      	movs	r0, #88	; 0x58
   d51b4:	4344      	muls	r4, r0
   d51b6:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d51b8:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d51ba:	462a      	mov	r2, r5
   d51bc:	4631      	mov	r1, r6
   d51be:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d51c0:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d51c2:	f001 fa8c 	bl	d66de <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d51c6:	2000      	movs	r0, #0
   d51c8:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d51cc:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d51d0:	e005      	b.n	d51de <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d51d2:	3401      	adds	r4, #1
   d51d4:	2c05      	cmp	r4, #5
   d51d6:	d1c6      	bne.n	d5166 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d51d8:	4802      	ldr	r0, [pc, #8]	; (d51e4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d51da:	e000      	b.n	d51de <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d51dc:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d51de:	b005      	add	sp, #20
   d51e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51e4:	fffffefc 	.word	0xfffffefc

000d51e8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d51e8:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d51ea:	2300      	movs	r3, #0
   d51ec:	9301      	str	r3, [sp, #4]
   d51ee:	9300      	str	r3, [sp, #0]
   d51f0:	f7ff ffa6 	bl	d5140 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d51f4:	b003      	add	sp, #12
   d51f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d51fa <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d51fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d51fe:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d5200:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5202:	460d      	mov	r5, r1
   d5204:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d5206:	f001 faa0 	bl	d674a <strlen>
   d520a:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d520e:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5210:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5212:	b1ab      	cbz	r3, d5240 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5214:	2140      	movs	r1, #64	; 0x40
   d5216:	4620      	mov	r0, r4
   d5218:	f001 fab4 	bl	d6784 <strnlen>

        if (event_name_length < filter_length)
   d521c:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d521e:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d5220:	d30b      	bcc.n	d523a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d5222:	4629      	mov	r1, r5
   d5224:	4620      	mov	r0, r4
   d5226:	f001 fa4b 	bl	d66c0 <memcmp>
        if (0 == cmp)
   d522a:	b930      	cbnz	r0, d523a <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d522c:	9000      	str	r0, [sp, #0]
   d522e:	4643      	mov	r3, r8
   d5230:	462a      	mov	r2, r5
   d5232:	4621      	mov	r1, r4
   d5234:	2058      	movs	r0, #88	; 0x58
   d5236:	f7ff fa3f 	bl	d46b8 <system_invoke_event_handler>
   d523a:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d523c:	42b4      	cmp	r4, r6
   d523e:	d1e7      	bne.n	d5210 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5240:	b002      	add	sp, #8
   d5242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5248 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5248:	b530      	push	{r4, r5, lr}
   d524a:	b08d      	sub	sp, #52	; 0x34
   d524c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d524e:	2211      	movs	r2, #17
   d5250:	2100      	movs	r1, #0
   d5252:	a801      	add	r0, sp, #4
   d5254:	f001 fa4e 	bl	d66f4 <memset>
    addr.v = 6;
   d5258:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d525a:	aa01      	add	r2, sp, #4
   d525c:	4909      	ldr	r1, [pc, #36]	; (d5284 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d525e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5262:	200a      	movs	r0, #10
   d5264:	f7ff f90c 	bl	d4480 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5268:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d526a:	a901      	add	r1, sp, #4
   d526c:	a806      	add	r0, sp, #24
   d526e:	f7ff fe53 	bl	d4f18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5274:	3404      	adds	r4, #4
   d5276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5278:	682b      	ldr	r3, [r5, #0]
   d527a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d527c:	2000      	movs	r0, #0
   d527e:	b00d      	add	sp, #52	; 0x34
   d5280:	bd30      	pop	{r4, r5, pc}
   d5282:	bf00      	nop
   d5284:	000d6988 	.word	0x000d6988

000d5288 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5288:	b530      	push	{r4, r5, lr}
   d528a:	4604      	mov	r4, r0
   d528c:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d528e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5292:	f7ff ff11 	bl	d50b8 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d5296:	6823      	ldr	r3, [r4, #0]
   d5298:	bb83      	cbnz	r3, d52fc <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d529a:	204c      	movs	r0, #76	; 0x4c
   d529c:	f7fe fefb 	bl	d4096 <_Znwj>
   d52a0:	4605      	mov	r5, r0
   d52a2:	b108      	cbz	r0, d52a8 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d52a4:	f000 fde6 	bl	d5e74 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52a8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52aa:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52ac:	b108      	cbz	r0, d52b2 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d52ae:	f7ff fec4 	bl	d503a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52b2:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d52b4:	b320      	cbz	r0, d5300 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d52b6:	2200      	movs	r2, #0
   d52b8:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d52bc:	f000 fe09 	bl	d5ed2 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d52c0:	a908      	add	r1, sp, #32
   d52c2:	2500      	movs	r5, #0
   d52c4:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d52c8:	4811      	ldr	r0, [pc, #68]	; (d5310 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d52ca:	f7ff f8a9 	bl	d4420 <if_name_to_index>
   d52ce:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d52d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d52d4:	6803      	ldr	r3, [r0, #0]
   d52d6:	f249 0169 	movw	r1, #36969	; 0x9069
   d52da:	6a1b      	ldr	r3, [r3, #32]
   d52dc:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d52de:	a802      	add	r0, sp, #8
   d52e0:	f7ff fe0c 	bl	d4efc <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d52e4:	a802      	add	r0, sp, #8
   d52e6:	f7ff ffaf 	bl	d5248 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d52ea:	2800      	cmp	r0, #0
   d52ec:	db04      	blt.n	d52f8 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d52ee:	a902      	add	r1, sp, #8
   d52f0:	6820      	ldr	r0, [r4, #0]
   d52f2:	f000 fe74 	bl	d5fde <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d52f6:	e004      	b.n	d5302 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d52f8:	4605      	mov	r5, r0
   d52fa:	e002      	b.n	d5302 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d52fc:	2500      	movs	r5, #0
   d52fe:	e000      	b.n	d5302 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5300:	4d04      	ldr	r5, [pc, #16]	; (d5314 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5302:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5306:	f7fe fffb 	bl	d4300 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d530a:	4628      	mov	r0, r5
   d530c:	b009      	add	sp, #36	; 0x24
   d530e:	bd30      	pop	{r4, r5, pc}
   d5310:	000d6995 	.word	0x000d6995
   d5314:	fffffefc 	.word	0xfffffefc

000d5318 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d5318:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d531c:	4604      	mov	r4, r0
   d531e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5322:	460f      	mov	r7, r1
   d5324:	4690      	mov	r8, r2
   d5326:	f7ff fec7 	bl	d50b8 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d532a:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d532e:	b9fe      	cbnz	r6, d5370 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5330:	491a      	ldr	r1, [pc, #104]	; (d539c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x84>)
   d5332:	2014      	movs	r0, #20
   d5334:	f001 f85a 	bl	d63ec <_ZnwjRKSt9nothrow_t>
   d5338:	4605      	mov	r5, r0
   d533a:	b170      	cbz	r0, d535a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x42>

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d533c:	4b18      	ldr	r3, [pc, #96]	; (d53a0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x88>)
   d533e:	6083      	str	r3, [r0, #8]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d5340:	f44f 6340 	mov.w	r3, #3072	; 0xc00

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : wrapper(NULL),
          func_(function),
          func_param_(function_param)
   d5344:	6006      	str	r6, [r0, #0]
   d5346:	6046      	str	r6, [r0, #4]
   d5348:	60c4      	str	r4, [r0, #12]
   d534a:	7406      	strb	r6, [r0, #16]
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
   d534c:	2203      	movs	r2, #3
   d534e:	9301      	str	r3, [sp, #4]
   d5350:	9000      	str	r0, [sp, #0]
   d5352:	4b14      	ldr	r3, [pc, #80]	; (d53a4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8c>)
   d5354:	4914      	ldr	r1, [pc, #80]	; (d53a8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x90>)
   d5356:	f7fe ff9b 	bl	d4290 <os_thread_create>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d535a:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d535e:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5362:	b12e      	cbz	r6, d5370 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x58>
        }
    }

    ~Thread()
    {
        dispose();
   d5364:	4630      	mov	r0, r6
   d5366:	f7ff fe6d 	bl	d5044 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d536a:	4630      	mov	r0, r6
   d536c:	f7fe fe97 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5370:	4620      	mov	r0, r4
   d5372:	f7ff ff89 	bl	d5288 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5376:	2800      	cmp	r0, #0
   d5378:	db07      	blt.n	d538a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x72>
    CHECK(subscriptions.add(prefix, handler));
   d537a:	4642      	mov	r2, r8
   d537c:	4639      	mov	r1, r7
   d537e:	1d20      	adds	r0, r4, #4
   d5380:	f7ff ff32 	bl	d51e8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5384:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d5388:	e000      	b.n	d538c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x74>
   d538a:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d538c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5390:	f7fe ffb6 	bl	d4300 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5394:	4628      	mov	r0, r5
   d5396:	b002      	add	sp, #8
   d5398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d539c:	000d6b58 	.word	0x000d6b58
   d53a0:	000d54bd 	.word	0x000d54bd
   d53a4:	000d4fa9 	.word	0x000d4fa9
   d53a8:	000d6999 	.word	0x000d6999

000d53ac <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d53ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53b0:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d53b2:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d53b6:	b08a      	sub	sp, #40	; 0x28
   d53b8:	4630      	mov	r0, r6
   d53ba:	f7ff fe7d 	bl	d50b8 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d53be:	682c      	ldr	r4, [r5, #0]
   d53c0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d53c4:	f7fe ff9c 	bl	d4300 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d53c8:	2c00      	cmp	r4, #0
   d53ca:	d063      	beq.n	d5494 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d53cc:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d53d0:	b163      	cbz	r3, d53ec <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d53d2:	6823      	ldr	r3, [r4, #0]
   d53d4:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d53d8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d53da:	4620      	mov	r0, r4
   d53dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53e0:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d53e4:	47b8      	blx	r7
        if (len > 0) {
   d53e6:	1e04      	subs	r4, r0, #0
   d53e8:	dc13      	bgt.n	d5412 <_ZN5spark11MeshPublish4pollEv+0x66>
   d53ea:	e056      	b.n	d549a <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d53ec:	492d      	ldr	r1, [pc, #180]	; (d54a4 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d53ee:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d53f2:	f001 f80a 	bl	d640a <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53f6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d53fa:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d53fe:	b113      	cbz	r3, d5406 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5400:	4618      	mov	r0, r3
   d5402:	f7fe fe4e 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d5406:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d540a:	2b00      	cmp	r3, #0
   d540c:	d1e1      	bne.n	d53d2 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d540e:	4826      	ldr	r0, [pc, #152]	; (d54a8 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5410:	e044      	b.n	d549c <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5412:	2320      	movs	r3, #32
   d5414:	4a25      	ldr	r2, [pc, #148]	; (d54ac <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5416:	9302      	str	r3, [sp, #8]
   d5418:	9200      	str	r2, [sp, #0]
   d541a:	2300      	movs	r3, #0
   d541c:	9401      	str	r4, [sp, #4]
   d541e:	aa02      	add	r2, sp, #8
   d5420:	4923      	ldr	r1, [pc, #140]	; (d54b0 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5422:	9303      	str	r3, [sp, #12]
   d5424:	2001      	movs	r0, #1
   d5426:	f7ff f90b 	bl	d4640 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d542a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d542e:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5430:	781b      	ldrb	r3, [r3, #0]
   d5432:	bb6b      	cbnz	r3, d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5434:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5436:	4621      	mov	r1, r4
   d5438:	4638      	mov	r0, r7
   d543a:	f001 f9a3 	bl	d6784 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d543e:	b338      	cbz	r0, d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5440:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5442:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5444:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5448:	dd22      	ble.n	d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d544a:	5c3b      	ldrb	r3, [r7, r0]
   d544c:	bb03      	cbnz	r3, d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d544e:	3c01      	subs	r4, #1
   d5450:	d00e      	beq.n	d5470 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5452:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5456:	4621      	mov	r1, r4
   d5458:	4640      	mov	r0, r8
   d545a:	f001 f993 	bl	d6784 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d545e:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5460:	2c00      	cmp	r4, #0
   d5462:	dd15      	ble.n	d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5464:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5468:	b993      	cbnz	r3, d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d546a:	2c01      	cmp	r4, #1
   d546c:	d002      	beq.n	d5474 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d546e:	e00f      	b.n	d5490 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5470:	f8df 8044 	ldr.w	r8, [pc, #68]	; d54b8 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5474:	4630      	mov	r0, r6
   d5476:	f7ff fe1f 	bl	d50b8 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d547a:	4642      	mov	r2, r8
   d547c:	4639      	mov	r1, r7
   d547e:	1d28      	adds	r0, r5, #4
   d5480:	f7ff febb 	bl	d51fa <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5484:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5488:	f7fe ff3a 	bl	d4300 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d548c:	2000      	movs	r0, #0
   d548e:	e005      	b.n	d549c <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5490:	4808      	ldr	r0, [pc, #32]	; (d54b4 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5492:	e003      	b.n	d549c <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5494:	2064      	movs	r0, #100	; 0x64
   d5496:	f7fe ff43 	bl	d4320 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d549a:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d549c:	b00a      	add	sp, #40	; 0x28
   d549e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54a2:	bf00      	nop
   d54a4:	000d6b58 	.word	0x000d6b58
   d54a8:	fffffefc 	.word	0xfffffefc
   d54ac:	000d69a8 	.word	0x000d69a8
   d54b0:	000d69a1 	.word	0x000d69a1
   d54b4:	fffffee8 	.word	0xfffffee8
   d54b8:	000d688a 	.word	0x000d688a

000d54bc <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d54bc:	b508      	push	{r3, lr}
   d54be:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d54c0:	4620      	mov	r0, r4
   d54c2:	f7ff ff73 	bl	d53ac <_ZN5spark11MeshPublish4pollEv>
   d54c6:	e7fb      	b.n	d54c0 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d54c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d54c8:	b538      	push	{r3, r4, r5, lr}
   d54ca:	4c0d      	ldr	r4, [pc, #52]	; (d5500 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d54cc:	4b0d      	ldr	r3, [pc, #52]	; (d5504 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d54ce:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d54d0:	2500      	movs	r5, #0
   d54d2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d54d4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d54d8:	6063      	str	r3, [r4, #4]
   d54da:	60a5      	str	r5, [r4, #8]
   d54dc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54e0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d54e4:	f7fe fefc 	bl	d42e0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d54e8:	4b07      	ldr	r3, [pc, #28]	; (d5508 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d54ea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d54ee:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d54f0:	4620      	mov	r0, r4
   d54f2:	4a06      	ldr	r2, [pc, #24]	; (d550c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d54f4:	4906      	ldr	r1, [pc, #24]	; (d5510 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d54f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d54fa:	f000 bf69 	b.w	d63d0 <__aeabi_atexit>
   d54fe:	bf00      	nop
   d5500:	2003e3e0 	.word	0x2003e3e0
   d5504:	000d69c0 	.word	0x000d69c0
   d5508:	000d695c 	.word	0x000d695c
   d550c:	2003e3bc 	.word	0x2003e3bc
   d5510:	000d5085 	.word	0x000d5085

000d5514 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5514:	2300      	movs	r3, #0
   d5516:	461a      	mov	r2, r3
   d5518:	6840      	ldr	r0, [r0, #4]
   d551a:	f7ff b8ef 	b.w	d46fc <network_connect>

000d551e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d551e:	2200      	movs	r2, #0
   d5520:	2102      	movs	r1, #2
   d5522:	6840      	ldr	r0, [r0, #4]
   d5524:	f7ff b8fa 	b.w	d471c <network_disconnect>

000d5528 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5528:	2200      	movs	r2, #0
   d552a:	4611      	mov	r1, r2
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	f7ff b8ed 	b.w	d470c <network_connecting>

000d5532 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5532:	2200      	movs	r2, #0
   d5534:	4611      	mov	r1, r2
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	f7ff b8f8 	b.w	d472c <network_ready>

000d553c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d553c:	2300      	movs	r3, #0
   d553e:	461a      	mov	r2, r3
   d5540:	4619      	mov	r1, r3
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	f7ff b8fa 	b.w	d473c <network_on>

000d5548 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5548:	2300      	movs	r3, #0
   d554a:	461a      	mov	r2, r3
   d554c:	4619      	mov	r1, r3
   d554e:	6840      	ldr	r0, [r0, #4]
   d5550:	f7ff b8fc 	b.w	d474c <network_off>

000d5554 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5554:	2200      	movs	r2, #0
   d5556:	f081 0101 	eor.w	r1, r1, #1
   d555a:	6840      	ldr	r0, [r0, #4]
   d555c:	f7ff b8fe 	b.w	d475c <network_listen>

000d5560 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5560:	2200      	movs	r2, #0
   d5562:	6840      	ldr	r0, [r0, #4]
   d5564:	f7ff b90a 	b.w	d477c <network_set_listen_timeout>

000d5568 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5568:	2200      	movs	r2, #0
   d556a:	4611      	mov	r1, r2
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	f7ff b90d 	b.w	d478c <network_get_listen_timeout>

000d5572 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5572:	2200      	movs	r2, #0
   d5574:	4611      	mov	r1, r2
   d5576:	6840      	ldr	r0, [r0, #4]
   d5578:	f7ff b8f8 	b.w	d476c <network_listening>

000d557c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d557c:	b570      	push	{r4, r5, r6, lr}
   d557e:	b08c      	sub	sp, #48	; 0x30
   d5580:	4614      	mov	r4, r2
   d5582:	4606      	mov	r6, r0
    IPAddress addr;
   d5584:	f7ff fcba 	bl	d4efc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5588:	ab0c      	add	r3, sp, #48	; 0x30
   d558a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d558c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d558e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5592:	4620      	mov	r0, r4
   d5594:	f7fe ff9c 	bl	d44d0 <netdb_getaddrinfo>
    if (!r && ai) {
   d5598:	4601      	mov	r1, r0
   d559a:	bb58      	cbnz	r0, d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d559c:	9b00      	ldr	r3, [sp, #0]
   d559e:	b34b      	cbz	r3, d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d55a0:	685a      	ldr	r2, [r3, #4]
   d55a2:	2a02      	cmp	r2, #2
   d55a4:	d00e      	beq.n	d55c4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d55a6:	2a0a      	cmp	r2, #10
   d55a8:	d124      	bne.n	d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d55aa:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d55ac:	2211      	movs	r2, #17
   d55ae:	a801      	add	r0, sp, #4
   d55b0:	f001 f8a0 	bl	d66f4 <memset>
                a.v = 6;
   d55b4:	2306      	movs	r3, #6
   d55b6:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55ba:	ad01      	add	r5, sp, #4
   d55bc:	f104 0308 	add.w	r3, r4, #8
   d55c0:	3418      	adds	r4, #24
   d55c2:	e005      	b.n	d55d0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d55c4:	6959      	ldr	r1, [r3, #20]
   d55c6:	4630      	mov	r0, r6
   d55c8:	3104      	adds	r1, #4
   d55ca:	f7ff fcda 	bl	d4f82 <_ZN9IPAddressaSEPKh>
                break;
   d55ce:	e011      	b.n	d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55d0:	6818      	ldr	r0, [r3, #0]
   d55d2:	6859      	ldr	r1, [r3, #4]
   d55d4:	462a      	mov	r2, r5
   d55d6:	c203      	stmia	r2!, {r0, r1}
   d55d8:	3308      	adds	r3, #8
   d55da:	42a3      	cmp	r3, r4
   d55dc:	4615      	mov	r5, r2
   d55de:	d1f7      	bne.n	d55d0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d55e0:	a901      	add	r1, sp, #4
   d55e2:	a806      	add	r0, sp, #24
   d55e4:	ad07      	add	r5, sp, #28
   d55e6:	f7ff fc97 	bl	d4f18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55ec:	1d34      	adds	r4, r6, #4
   d55ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55f0:	682b      	ldr	r3, [r5, #0]
   d55f2:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d55f4:	9800      	ldr	r0, [sp, #0]
   d55f6:	f7fe ff63 	bl	d44c0 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55fa:	4630      	mov	r0, r6
   d55fc:	b00c      	add	sp, #48	; 0x30
   d55fe:	bd70      	pop	{r4, r5, r6, pc}

000d5600 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5600:	4b02      	ldr	r3, [pc, #8]	; (d560c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5602:	4a03      	ldr	r2, [pc, #12]	; (d5610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5604:	601a      	str	r2, [r3, #0]
   d5606:	2200      	movs	r2, #0
   d5608:	605a      	str	r2, [r3, #4]
   d560a:	4770      	bx	lr
   d560c:	2003e5b0 	.word	0x2003e5b0
   d5610:	000d69c0 	.word	0x000d69c0

000d5614 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5616:	4606      	mov	r6, r0
   d5618:	460d      	mov	r5, r1
   d561a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d561c:	2400      	movs	r4, #0
  while (size--) {
   d561e:	42bd      	cmp	r5, r7
   d5620:	d00c      	beq.n	d563c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5622:	6833      	ldr	r3, [r6, #0]
   d5624:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5628:	689b      	ldr	r3, [r3, #8]
   d562a:	4630      	mov	r0, r6
   d562c:	4798      	blx	r3
     if (chunk>=0)
   d562e:	2800      	cmp	r0, #0
   d5630:	db01      	blt.n	d5636 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5632:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5634:	e7f3      	b.n	d561e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5636:	2c00      	cmp	r4, #0
   d5638:	bf08      	it	eq
   d563a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d563c:	4620      	mov	r0, r4
   d563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5640 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5640:	b570      	push	{r4, r5, r6, lr}
   d5642:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5644:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5646:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5648:	b149      	cbz	r1, d565e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d564a:	f001 f87e 	bl	d674a <strlen>
   d564e:	682b      	ldr	r3, [r5, #0]
   d5650:	4602      	mov	r2, r0
   d5652:	4621      	mov	r1, r4
   d5654:	4628      	mov	r0, r5
   d5656:	68db      	ldr	r3, [r3, #12]
    }
   d5658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d565c:	4718      	bx	r3
    }
   d565e:	bd70      	pop	{r4, r5, r6, pc}

000d5660 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5660:	6803      	ldr	r3, [r0, #0]
   d5662:	689b      	ldr	r3, [r3, #8]
   d5664:	4718      	bx	r3

000d5666 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5666:	b530      	push	{r4, r5, lr}
   d5668:	b08b      	sub	sp, #44	; 0x2c
   d566a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d566c:	2100      	movs	r1, #0
   d566e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5672:	2a01      	cmp	r2, #1
   d5674:	bf98      	it	ls
   d5676:	220a      	movls	r2, #10
   d5678:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d567c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5680:	fb05 3312 	mls	r3, r5, r2, r3
   d5684:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5688:	2b09      	cmp	r3, #9
   d568a:	bf94      	ite	ls
   d568c:	3330      	addls	r3, #48	; 0x30
   d568e:	3337      	addhi	r3, #55	; 0x37
   d5690:	b2db      	uxtb	r3, r3
   d5692:	4621      	mov	r1, r4
   d5694:	f804 3901 	strb.w	r3, [r4], #-1
   d5698:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d569a:	2d00      	cmp	r5, #0
   d569c:	d1ee      	bne.n	d567c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d569e:	f7ff ffcf 	bl	d5640 <_ZN5Print5writeEPKc>
}
   d56a2:	b00b      	add	sp, #44	; 0x2c
   d56a4:	bd30      	pop	{r4, r5, pc}

000d56a6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d56a6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d56a8:	b92a      	cbnz	r2, d56b6 <_ZN5Print5printEmi+0x10>
   d56aa:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d56ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d56b0:	689b      	ldr	r3, [r3, #8]
   d56b2:	b2c9      	uxtb	r1, r1
   d56b4:	4718      	bx	r3
  else return printNumber(n, base);
   d56b6:	b2d2      	uxtb	r2, r2
}
   d56b8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d56bc:	f7ff bfd3 	b.w	d5666 <_ZN5Print11printNumberEmh>

000d56c0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d56c0:	f7ff bff1 	b.w	d56a6 <_ZN5Print5printEmi>

000d56c4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d56c4:	b510      	push	{r4, lr}
   d56c6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56c8:	f7ff f8b4 	bl	d4834 <_ZNSt14_Function_baseD1Ev>
   d56cc:	4620      	mov	r0, r4
   d56ce:	bd10      	pop	{r4, pc}

000d56d0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56d0:	4803      	ldr	r0, [pc, #12]	; (d56e0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d56d2:	4a04      	ldr	r2, [pc, #16]	; (d56e4 <_GLOBAL__sub_I_RGB+0x14>)
   d56d4:	4904      	ldr	r1, [pc, #16]	; (d56e8 <_GLOBAL__sub_I_RGB+0x18>)
   d56d6:	2300      	movs	r3, #0
   d56d8:	6083      	str	r3, [r0, #8]
   d56da:	f000 be79 	b.w	d63d0 <__aeabi_atexit>
   d56de:	bf00      	nop
   d56e0:	2003e5b8 	.word	0x2003e5b8
   d56e4:	2003e3bc 	.word	0x2003e3bc
   d56e8:	000d56c5 	.word	0x000d56c5

000d56ec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d56ec:	4770      	bx	lr

000d56ee <_ZN8SPIClassD0Ev>:
   d56ee:	b510      	push	{r4, lr}
   d56f0:	4604      	mov	r4, r0
   d56f2:	f7fe fcd4 	bl	d409e <_ZdlPv>
   d56f6:	4620      	mov	r0, r4
   d56f8:	bd10      	pop	{r4, pc}
	...

000d56fc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d56fc:	b570      	push	{r4, r5, r6, lr}
   d56fe:	4b08      	ldr	r3, [pc, #32]	; (d5720 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5700:	6003      	str	r3, [r0, #0]
   d5702:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5704:	2500      	movs	r5, #0
   d5706:	460e      	mov	r6, r1
   d5708:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d570c:	f7fe fde0 	bl	d42d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5710:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5712:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5714:	f7fe ff14 	bl	d4540 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5718:	60a5      	str	r5, [r4, #8]
}
   d571a:	4620      	mov	r0, r4
   d571c:	bd70      	pop	{r4, r5, r6, pc}
   d571e:	bf00      	nop
   d5720:	000d69f4 	.word	0x000d69f4

000d5724 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5724:	7900      	ldrb	r0, [r0, #4]
   d5726:	f7fe bf13 	b.w	d4550 <HAL_SPI_Is_Enabled>

000d572a <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d572a:	4770      	bx	lr

000d572c <_ZN21StringPrintableHelperD0Ev>:
   d572c:	b510      	push	{r4, lr}
   d572e:	4604      	mov	r4, r0
   d5730:	f7fe fcb5 	bl	d409e <_ZdlPv>
   d5734:	4620      	mov	r0, r4
   d5736:	bd10      	pop	{r4, pc}

000d5738 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5738:	b510      	push	{r4, lr}
   d573a:	4604      	mov	r4, r0
{
	free(buffer);
   d573c:	6800      	ldr	r0, [r0, #0]
   d573e:	f7ff f835 	bl	d47ac <free>
}
   d5742:	4620      	mov	r0, r4
   d5744:	bd10      	pop	{r4, pc}

000d5746 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5746:	b510      	push	{r4, lr}
   d5748:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d574a:	6800      	ldr	r0, [r0, #0]
   d574c:	b108      	cbz	r0, d5752 <_ZN6String10invalidateEv+0xc>
   d574e:	f7ff f82d 	bl	d47ac <free>
	buffer = NULL;
   d5752:	2300      	movs	r3, #0
   d5754:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5756:	60a3      	str	r3, [r4, #8]
   d5758:	6063      	str	r3, [r4, #4]
   d575a:	bd10      	pop	{r4, pc}

000d575c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d575c:	b538      	push	{r3, r4, r5, lr}
   d575e:	4604      	mov	r4, r0
   d5760:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5762:	6800      	ldr	r0, [r0, #0]
   d5764:	3101      	adds	r1, #1
   d5766:	f7ff f829 	bl	d47bc <realloc>
	if (newbuffer) {
   d576a:	b110      	cbz	r0, d5772 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d576c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5770:	2001      	movs	r0, #1
	}
	return 0;
}
   d5772:	bd38      	pop	{r3, r4, r5, pc}

000d5774 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5774:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5776:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5778:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d577a:	b113      	cbz	r3, d5782 <_ZN6String7reserveEj+0xe>
   d577c:	6843      	ldr	r3, [r0, #4]
   d577e:	428b      	cmp	r3, r1
   d5780:	d207      	bcs.n	d5792 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff ffea 	bl	d575c <_ZN6String12changeBufferEj>
   d5788:	b120      	cbz	r0, d5794 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d578a:	68a3      	ldr	r3, [r4, #8]
   d578c:	b90b      	cbnz	r3, d5792 <_ZN6String7reserveEj+0x1e>
   d578e:	6822      	ldr	r2, [r4, #0]
   d5790:	7013      	strb	r3, [r2, #0]
   d5792:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5794:	bd10      	pop	{r4, pc}

000d5796 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5796:	b570      	push	{r4, r5, r6, lr}
   d5798:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d579a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d579c:	4604      	mov	r4, r0
   d579e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d57a0:	f7ff ffe8 	bl	d5774 <_ZN6String7reserveEj>
   d57a4:	b918      	cbnz	r0, d57ae <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d57a6:	4620      	mov	r0, r4
   d57a8:	f7ff ffcd 	bl	d5746 <_ZN6String10invalidateEv>
		return *this;
   d57ac:	e009      	b.n	d57c2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d57ae:	462a      	mov	r2, r5
   d57b0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d57b2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d57b4:	6820      	ldr	r0, [r4, #0]
   d57b6:	f000 ff92 	bl	d66de <memcpy>
	buffer[len] = 0;
   d57ba:	6822      	ldr	r2, [r4, #0]
   d57bc:	68a3      	ldr	r3, [r4, #8]
   d57be:	2100      	movs	r1, #0
   d57c0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d57c2:	4620      	mov	r0, r4
   d57c4:	bd70      	pop	{r4, r5, r6, pc}

000d57c6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d57c6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57c8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d57ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d57cc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d57ce:	6043      	str	r3, [r0, #4]
	len = 0;
   d57d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d57d2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d57d4:	460d      	mov	r5, r1
   d57d6:	b139      	cbz	r1, d57e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d57d8:	4608      	mov	r0, r1
   d57da:	f000 ffb6 	bl	d674a <strlen>
   d57de:	4629      	mov	r1, r5
   d57e0:	4602      	mov	r2, r0
   d57e2:	4620      	mov	r0, r4
   d57e4:	f7ff ffd7 	bl	d5796 <_ZN6String4copyEPKcj>
}
   d57e8:	4620      	mov	r0, r4
   d57ea:	bd38      	pop	{r3, r4, r5, pc}

000d57ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d57ec:	b570      	push	{r4, r5, r6, lr}
   d57ee:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d57f0:	460e      	mov	r6, r1
   d57f2:	b909      	cbnz	r1, d57f8 <_ZN6String6concatEPKcj+0xc>
   d57f4:	2000      	movs	r0, #0
   d57f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d57f8:	b16a      	cbz	r2, d5816 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d57fa:	6883      	ldr	r3, [r0, #8]
   d57fc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d57fe:	4629      	mov	r1, r5
   d5800:	f7ff ffb8 	bl	d5774 <_ZN6String7reserveEj>
   d5804:	2800      	cmp	r0, #0
   d5806:	d0f5      	beq.n	d57f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5808:	6820      	ldr	r0, [r4, #0]
   d580a:	68a3      	ldr	r3, [r4, #8]
   d580c:	4631      	mov	r1, r6
   d580e:	4418      	add	r0, r3
   d5810:	f000 ff78 	bl	d6704 <strcpy>
	len = newlen;
   d5814:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5816:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5818:	bd70      	pop	{r4, r5, r6, pc}

000d581a <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d581a:	b538      	push	{r3, r4, r5, lr}
   d581c:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d581e:	6880      	ldr	r0, [r0, #8]
   d5820:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d5822:	f7ff ffe3 	bl	d57ec <_ZN6String6concatEPKcj>
   d5826:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d5828:	6898      	ldr	r0, [r3, #8]
    }
   d582a:	1b40      	subs	r0, r0, r5
   d582c:	bd38      	pop	{r3, r4, r5, pc}

000d582e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d582e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5830:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5832:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5836:	2201      	movs	r2, #1
   d5838:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d583a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d583e:	f7ff ffd5 	bl	d57ec <_ZN6String6concatEPKcj>
}
   d5842:	b003      	add	sp, #12
   d5844:	f85d fb04 	ldr.w	pc, [sp], #4

000d5848 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d5848:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d584a:	6880      	ldr	r0, [r0, #8]
   d584c:	f7ff ffef 	bl	d582e <_ZN6String6concatEc>
    }
   d5850:	bd08      	pop	{r3, pc}
	...

000d5854 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   d5854:	b530      	push	{r4, r5, lr}
   d5856:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5858:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d585a:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d585c:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d585e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5860:	6043      	str	r3, [r0, #4]
	len = 0;
   d5862:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5864:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d5866:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5868:	4b06      	ldr	r3, [pc, #24]	; (d5884 <_ZN6StringC1ERK9Printable+0x30>)
   d586a:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d586c:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d586e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d5870:	f7ff ff80 	bl	d5774 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d5874:	682b      	ldr	r3, [r5, #0]
   d5876:	a901      	add	r1, sp, #4
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	4628      	mov	r0, r5
   d587c:	4798      	blx	r3
}
   d587e:	4620      	mov	r0, r4
   d5880:	b005      	add	sp, #20
   d5882:	bd30      	pop	{r4, r5, pc}
   d5884:	000d6a04 	.word	0x000d6a04

000d5888 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5888:	4b05      	ldr	r3, [pc, #20]	; (d58a0 <_GLOBAL__sub_I_System+0x18>)
   d588a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d588e:	2000      	movs	r0, #0
   d5890:	805a      	strh	r2, [r3, #2]
   d5892:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5896:	7018      	strb	r0, [r3, #0]
   d5898:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d589a:	f7fe bed9 	b.w	d4650 <set_system_mode>
   d589e:	bf00      	nop
   d58a0:	2003e5c8 	.word	0x2003e5c8

000d58a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d58a4:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d58a6:	681a      	ldr	r2, [r3, #0]
   d58a8:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d58aa:	601a      	str	r2, [r3, #0]
   d58ac:	4770      	bx	lr
   d58ae:	bf00      	nop
   d58b0:	2003e354 	.word	0x2003e354
   d58b4:	2003e5d0 	.word	0x2003e5d0

000d58b8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d58b8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d58ba:	6804      	ldr	r4, [r0, #0]
   d58bc:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d58be:	46a4      	mov	ip, r4
    }
   d58c0:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d58c4:	4760      	bx	ip

000d58c6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d58c6:	6803      	ldr	r3, [r0, #0]
   d58c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d58ca:	4718      	bx	r3

000d58cc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d58cc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d58ce:	4770      	bx	lr

000d58d0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d58d0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d58d2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d58d4:	1a10      	subs	r0, r2, r0
   d58d6:	4770      	bx	lr

000d58d8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d58d8:	b513      	push	{r0, r1, r4, lr}
   d58da:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d58dc:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d58de:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d58e2:	68d4      	ldr	r4, [r2, #12]
   d58e4:	4619      	mov	r1, r3
   d58e6:	2201      	movs	r2, #1
   d58e8:	47a0      	blx	r4
}
   d58ea:	b002      	add	sp, #8
   d58ec:	bd10      	pop	{r4, pc}

000d58ee <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d58ee:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d58f0:	6803      	ldr	r3, [r0, #0]
   d58f2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d58f4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d58f6:	4798      	blx	r3
   d58f8:	b128      	cbz	r0, d5906 <_ZN3UDP4readEv+0x18>
   d58fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d58fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d58fe:	1c59      	adds	r1, r3, #1
   d5900:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5902:	5cd0      	ldrb	r0, [r2, r3]
   d5904:	bd10      	pop	{r4, pc}
   d5906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d590a:	bd10      	pop	{r4, pc}

000d590c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d590c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d590e:	6803      	ldr	r3, [r0, #0]
   d5910:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5912:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5914:	4798      	blx	r3
   d5916:	b118      	cbz	r0, d5920 <_ZN3UDP4peekEv+0x14>
   d5918:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d591a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d591c:	5cd0      	ldrb	r0, [r2, r3]
   d591e:	bd10      	pop	{r4, pc}
   d5920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5924:	bd10      	pop	{r4, pc}

000d5926 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5926:	4770      	bx	lr

000d5928 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5928:	b410      	push	{r4}
   d592a:	4603      	mov	r3, r0
   d592c:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d592e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5930:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5932:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5934:	6803      	ldr	r3, [r0, #0]
   d5936:	1a52      	subs	r2, r2, r1
   d5938:	68db      	ldr	r3, [r3, #12]
   d593a:	4421      	add	r1, r4
}
   d593c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5940:	4718      	bx	r3

000d5942 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5942:	f1a0 0010 	sub.w	r0, r0, #16
   d5946:	f7ff bfef 	b.w	d5928 <_ZNK3UDP7printToER5Print>

000d594a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d594a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d594c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d594e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5950:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5954:	4604      	mov	r4, r0
   d5956:	460f      	mov	r7, r1
   d5958:	4615      	mov	r5, r2
    stop();
   d595a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d595c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d595e:	4632      	mov	r2, r6
   d5960:	2100      	movs	r1, #0
   d5962:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5964:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5966:	f000 fec5 	bl	d66f4 <memset>
    saddr.sin6_len = sizeof(saddr);
   d596a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d596e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5970:	260a      	movs	r6, #10
   d5972:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5976:	f7fe fd9b 	bl	d44b0 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d597a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d597c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5980:	2102      	movs	r1, #2
   d5982:	4630      	mov	r0, r6
   d5984:	f7fe fdd4 	bl	d4530 <sock_socket>

    if (_sock < 0) {
   d5988:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d598a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d598c:	db24      	blt.n	d59d8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d598e:	2204      	movs	r2, #4
   d5990:	9200      	str	r2, [sp, #0]
   d5992:	ab02      	add	r3, sp, #8
   d5994:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5998:	f7fe fdaa 	bl	d44f0 <sock_setsockopt>
   d599c:	b9e0      	cbnz	r0, d59d8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d599e:	b195      	cbz	r5, d59c6 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d59a0:	9003      	str	r0, [sp, #12]
   d59a2:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d59a6:	a903      	add	r1, sp, #12
   d59a8:	b2e8      	uxtb	r0, r5
   d59aa:	f7fe fd41 	bl	d4430 <if_index_to_name>
   d59ae:	b998      	cbnz	r0, d59d8 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d59b0:	2306      	movs	r3, #6
   d59b2:	9300      	str	r3, [sp, #0]
   d59b4:	f241 020b 	movw	r2, #4107	; 0x100b
   d59b8:	ab03      	add	r3, sp, #12
   d59ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   d59be:	6960      	ldr	r0, [r4, #20]
   d59c0:	f7fe fd96 	bl	d44f0 <sock_setsockopt>
   d59c4:	b940      	cbnz	r0, d59d8 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d59c6:	221c      	movs	r2, #28
   d59c8:	a905      	add	r1, sp, #20
   d59ca:	6960      	ldr	r0, [r4, #20]
   d59cc:	f7fe fd88 	bl	d44e0 <sock_bind>
   d59d0:	b910      	cbnz	r0, d59d8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d59d2:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d59d4:	2001      	movs	r0, #1
   d59d6:	e004      	b.n	d59e2 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d59d8:	6823      	ldr	r3, [r4, #0]
   d59da:	4620      	mov	r0, r4
   d59dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59de:	4798      	blx	r3
   d59e0:	2000      	movs	r0, #0
    }
    return bound;
}
   d59e2:	b00d      	add	sp, #52	; 0x34
   d59e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59e6 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d59e6:	b510      	push	{r4, lr}
   d59e8:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d59ea:	6940      	ldr	r0, [r0, #20]
   d59ec:	2800      	cmp	r0, #0
   d59ee:	db01      	blt.n	d59f4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d59f0:	f7fe fd86 	bl	d4500 <sock_close>
    }

    _sock = -1;
   d59f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d59f8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d59fa:	2300      	movs	r3, #0
   d59fc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d59fe:	8723      	strh	r3, [r4, #56]	; 0x38
   d5a00:	bd10      	pop	{r4, pc}

000d5a02 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5a02:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5a04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5a06:	4605      	mov	r5, r0
   d5a08:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5a0a:	b113      	cbz	r3, d5a12 <_ZN3UDP5writeEPKhj+0x10>
   d5a0c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d5a0e:	1a24      	subs	r4, r4, r0
   d5a10:	e000      	b.n	d5a14 <_ZN3UDP5writeEPKhj+0x12>
   d5a12:	461c      	mov	r4, r3
   d5a14:	4294      	cmp	r4, r2
   d5a16:	bf28      	it	cs
   d5a18:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d5a1a:	4622      	mov	r2, r4
   d5a1c:	4418      	add	r0, r3
   d5a1e:	f000 fe5e 	bl	d66de <memcpy>
    _offset += size;
   d5a22:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5a24:	4423      	add	r3, r4
   d5a26:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d5a28:	4620      	mov	r0, r4
   d5a2a:	bd38      	pop	{r3, r4, r5, pc}

000d5a2c <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5a2c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d5a2e:	6803      	ldr	r3, [r0, #0]
   d5a30:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5a32:	4604      	mov	r4, r0
   d5a34:	460e      	mov	r6, r1
   d5a36:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d5a38:	4798      	blx	r3
   d5a3a:	b188      	cbz	r0, d5a60 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d5a3c:	6823      	ldr	r3, [r4, #0]
   d5a3e:	4620      	mov	r0, r4
   d5a40:	691b      	ldr	r3, [r3, #16]
   d5a42:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5a44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5a46:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5a48:	4285      	cmp	r5, r0
   d5a4a:	bfa8      	it	ge
   d5a4c:	4605      	movge	r5, r0
   d5a4e:	4419      	add	r1, r3
   d5a50:	462a      	mov	r2, r5
   d5a52:	4630      	mov	r0, r6
   d5a54:	f000 fe43 	bl	d66de <memcpy>
        _offset += read;
   d5a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5a5a:	442b      	add	r3, r5
   d5a5c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d5a5e:	e001      	b.n	d5a64 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5a60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5a64:	4628      	mov	r0, r5
   d5a66:	bd70      	pop	{r4, r5, r6, pc}

000d5a68 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5a68:	b570      	push	{r4, r5, r6, lr}
   d5a6a:	4604      	mov	r4, r0
   d5a6c:	4b05      	ldr	r3, [pc, #20]	; (d5a84 <_ZN3UDP8remoteIPEv+0x1c>)
   d5a6e:	f844 3b04 	str.w	r3, [r4], #4
   d5a72:	f101 0520 	add.w	r5, r1, #32
   d5a76:	4606      	mov	r6, r0
   d5a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a7c:	682b      	ldr	r3, [r5, #0]
   d5a7e:	7023      	strb	r3, [r4, #0]
   d5a80:	4630      	mov	r0, r6
   d5a82:	bd70      	pop	{r4, r5, r6, pc}
   d5a84:	000d6868 	.word	0x000d6868

000d5a88 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a8a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5a8c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5a8e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5a90:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5a92:	4a0a      	ldr	r2, [pc, #40]	; (d5abc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5a94:	9202      	str	r2, [sp, #8]
   d5a96:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5a98:	468e      	mov	lr, r1
   d5a9a:	4606      	mov	r6, r0
   d5a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a9e:	ac03      	add	r4, sp, #12
   d5aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5aa2:	682b      	ldr	r3, [r5, #0]
   d5aa4:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5aa6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5aaa:	9300      	str	r3, [sp, #0]
   d5aac:	4662      	mov	r2, ip
   d5aae:	ab02      	add	r3, sp, #8
   d5ab0:	4671      	mov	r1, lr
   d5ab2:	4630      	mov	r0, r6
   d5ab4:	47b8      	blx	r7
    }
   d5ab6:	b009      	add	sp, #36	; 0x24
   d5ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5aba:	bf00      	nop
   d5abc:	000d6868 	.word	0x000d6868

000d5ac0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5ac2:	6803      	ldr	r3, [r0, #0]
   d5ac4:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5ac8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5aca:	4b0d      	ldr	r3, [pc, #52]	; (d5b00 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5acc:	b089      	sub	sp, #36	; 0x24
   d5ace:	f100 0620 	add.w	r6, r0, #32
   d5ad2:	4604      	mov	r4, r0
   d5ad4:	9302      	str	r3, [sp, #8]
   d5ad6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5ad8:	ad03      	add	r5, sp, #12
   d5ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5adc:	6833      	ldr	r3, [r6, #0]
   d5ade:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5ae0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5ae2:	9300      	str	r3, [sp, #0]
   d5ae4:	4672      	mov	r2, lr
   d5ae6:	ab02      	add	r3, sp, #8
   d5ae8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5aea:	4620      	mov	r0, r4
   d5aec:	47b8      	blx	r7
    flush(); // wait for send to complete
   d5aee:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5af0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d5af2:	69db      	ldr	r3, [r3, #28]
   d5af4:	4620      	mov	r0, r4
   d5af6:	4798      	blx	r3
    return result;
}
   d5af8:	4628      	mov	r0, r5
   d5afa:	b009      	add	sp, #36	; 0x24
   d5afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5afe:	bf00      	nop
   d5b00:	000d6868 	.word	0x000d6868

000d5b04 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5b06:	7843      	ldrb	r3, [r0, #1]
   d5b08:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5b0a:	b08d      	sub	sp, #52	; 0x34
   d5b0c:	4605      	mov	r5, r0
   d5b0e:	460c      	mov	r4, r1
   d5b10:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5b12:	d101      	bne.n	d5b18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5b14:	1d01      	adds	r1, r0, #4
   d5b16:	e033      	b.n	d5b80 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5b18:	2b0a      	cmp	r3, #10
   d5b1a:	d135      	bne.n	d5b88 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5b1c:	2211      	movs	r2, #17
   d5b1e:	2100      	movs	r1, #0
   d5b20:	a801      	add	r0, sp, #4
   d5b22:	f000 fde7 	bl	d66f4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5b26:	68ab      	ldr	r3, [r5, #8]
   d5b28:	b943      	cbnz	r3, d5b3c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5b2a:	68eb      	ldr	r3, [r5, #12]
   d5b2c:	b933      	cbnz	r3, d5b3c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5b2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5b32:	692e      	ldr	r6, [r5, #16]
   d5b34:	f7fe fcac 	bl	d4490 <inet_htonl>
   d5b38:	4286      	cmp	r6, r0
   d5b3a:	d01f      	beq.n	d5b7c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b3c:	f105 0308 	add.w	r3, r5, #8
   d5b40:	ae01      	add	r6, sp, #4
   d5b42:	f105 0e18 	add.w	lr, r5, #24
   d5b46:	6818      	ldr	r0, [r3, #0]
   d5b48:	6859      	ldr	r1, [r3, #4]
   d5b4a:	4632      	mov	r2, r6
   d5b4c:	c203      	stmia	r2!, {r0, r1}
   d5b4e:	3308      	adds	r3, #8
   d5b50:	4573      	cmp	r3, lr
   d5b52:	4616      	mov	r6, r2
   d5b54:	d1f7      	bne.n	d5b46 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5b56:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5b58:	a901      	add	r1, sp, #4
   d5b5a:	a806      	add	r0, sp, #24
   d5b5c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5b5e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5b62:	f7ff f9d9 	bl	d4f18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5b68:	3404      	adds	r4, #4
   d5b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b6c:	6833      	ldr	r3, [r6, #0]
   d5b6e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5b70:	b157      	cbz	r7, d5b88 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5b72:	8868      	ldrh	r0, [r5, #2]
   d5b74:	f7fe fc94 	bl	d44a0 <inet_ntohs>
   d5b78:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5b7a:	e005      	b.n	d5b88 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5b7c:	f105 0114 	add.w	r1, r5, #20
   d5b80:	4620      	mov	r0, r4
   d5b82:	f7ff f9fe 	bl	d4f82 <_ZN9IPAddressaSEPKh>
   d5b86:	e7f3      	b.n	d5b70 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5b88:	b00d      	add	sp, #52	; 0x34
   d5b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b8c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b90:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5b92:	ab0e      	add	r3, sp, #56	; 0x38
   d5b94:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5b96:	4606      	mov	r6, r0
   d5b98:	4617      	mov	r7, r2
   d5b9a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5b9c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5ba0:	462a      	mov	r2, r5
   d5ba2:	4629      	mov	r1, r5
   d5ba4:	f7fe fc94 	bl	d44d0 <netdb_getaddrinfo>
   d5ba8:	2800      	cmp	r0, #0
   d5baa:	db1f      	blt.n	d5bec <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5bac:	9b01      	ldr	r3, [sp, #4]
   d5bae:	b1fb      	cbz	r3, d5bf0 <_ZN3UDP11beginPacketEPKct+0x64>
   d5bb0:	695b      	ldr	r3, [r3, #20]
   d5bb2:	b1eb      	cbz	r3, d5bf0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5bb4:	a802      	add	r0, sp, #8
   d5bb6:	f7ff f9a1 	bl	d4efc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5bba:	9b01      	ldr	r3, [sp, #4]
   d5bbc:	462a      	mov	r2, r5
   d5bbe:	6958      	ldr	r0, [r3, #20]
   d5bc0:	a902      	add	r1, sp, #8
   d5bc2:	f7ff ff9f 	bl	d5b04 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5bc6:	a802      	add	r0, sp, #8
   d5bc8:	f7ff f9b8 	bl	d4f3c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5bcc:	b180      	cbz	r0, d5bf0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5bce:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5bd0:	ad03      	add	r5, sp, #12
   d5bd2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5bd6:	4b0b      	ldr	r3, [pc, #44]	; (d5c04 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5bd8:	9308      	str	r3, [sp, #32]
   d5bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5bdc:	ac09      	add	r4, sp, #36	; 0x24
   d5bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5be0:	682b      	ldr	r3, [r5, #0]
   d5be2:	7023      	strb	r3, [r4, #0]
   d5be4:	463a      	mov	r2, r7
   d5be6:	a908      	add	r1, sp, #32
   d5be8:	4630      	mov	r0, r6
   d5bea:	47c0      	blx	r8
   d5bec:	4604      	mov	r4, r0
   d5bee:	e001      	b.n	d5bf4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5bf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5bf4:	9801      	ldr	r0, [sp, #4]
   d5bf6:	f7fe fc63 	bl	d44c0 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	b00e      	add	sp, #56	; 0x38
   d5bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5c02:	bf00      	nop
   d5c04:	000d6868 	.word	0x000d6868

000d5c08 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5c0c:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5c10:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5c14:	b098      	sub	sp, #96	; 0x60
   d5c16:	4605      	mov	r5, r0
   d5c18:	460c      	mov	r4, r1
   d5c1a:	4617      	mov	r7, r2
   d5c1c:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5c1e:	db00      	blt.n	d5c22 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d5c20:	b911      	cbnz	r1, d5c28 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d5c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5c26:	e04e      	b.n	d5cc6 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5c28:	f04f 0a1c 	mov.w	sl, #28
   d5c2c:	ae09      	add	r6, sp, #36	; 0x24
   d5c2e:	4652      	mov	r2, sl
   d5c30:	2100      	movs	r1, #0
   d5c32:	4630      	mov	r0, r6
   d5c34:	f000 fd5e 	bl	d66f4 <memset>
        socklen_t slen = sizeof(saddr);
   d5c38:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d5c3c:	f1b9 0f00 	cmp.w	r9, #0
   d5c40:	d014      	beq.n	d5c6c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5c42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c46:	fbb9 f1f2 	udiv	r1, r9, r2
   d5c4a:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d5c4c:	fb02 9111 	mls	r1, r2, r1, r9
   d5c50:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5c52:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5c54:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5c56:	9300      	str	r3, [sp, #0]
   d5c58:	f241 0206 	movw	r2, #4102	; 0x1006
   d5c5c:	ab10      	add	r3, sp, #64	; 0x40
   d5c5e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5c62:	4640      	mov	r0, r8
   d5c64:	f7fe fc44 	bl	d44f0 <sock_setsockopt>
            if (ret) {
   d5c68:	b108      	cbz	r0, d5c6e <_ZN3UDP13receivePacketEPhjm+0x66>
   d5c6a:	e02c      	b.n	d5cc6 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5c6c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5c6e:	ab04      	add	r3, sp, #16
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	4621      	mov	r1, r4
   d5c74:	4603      	mov	r3, r0
   d5c76:	9600      	str	r6, [sp, #0]
   d5c78:	463a      	mov	r2, r7
   d5c7a:	6968      	ldr	r0, [r5, #20]
   d5c7c:	f7fe fc48 	bl	d4510 <sock_recvfrom>
        if (ret >= 0) {
   d5c80:	1e04      	subs	r4, r0, #0
   d5c82:	db1f      	blt.n	d5cc4 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5c84:	f105 071c 	add.w	r7, r5, #28
   d5c88:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5c8c:	4630      	mov	r0, r6
   d5c8e:	4639      	mov	r1, r7
   d5c90:	f7ff ff38 	bl	d5b04 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5c94:	2600      	movs	r6, #0
   d5c96:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d5c98:	4639      	mov	r1, r7
   d5c9a:	a805      	add	r0, sp, #20
   d5c9c:	9310      	str	r3, [sp, #64]	; 0x40
   d5c9e:	9611      	str	r6, [sp, #68]	; 0x44
   d5ca0:	f7ff fdd8 	bl	d5854 <_ZN6StringC1ERK9Printable>
   d5ca4:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d5ca6:	9303      	str	r3, [sp, #12]
   d5ca8:	9b05      	ldr	r3, [sp, #20]
   d5caa:	9302      	str	r3, [sp, #8]
   d5cac:	4b07      	ldr	r3, [pc, #28]	; (d5ccc <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d5cae:	9300      	str	r3, [sp, #0]
   d5cb0:	2001      	movs	r0, #1
   d5cb2:	9401      	str	r4, [sp, #4]
   d5cb4:	4633      	mov	r3, r6
   d5cb6:	aa10      	add	r2, sp, #64	; 0x40
   d5cb8:	4905      	ldr	r1, [pc, #20]	; (d5cd0 <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d5cba:	f7fe fcc1 	bl	d4640 <log_message>
   d5cbe:	a805      	add	r0, sp, #20
   d5cc0:	f7ff fd3a 	bl	d5738 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5cc4:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5cc6:	b018      	add	sp, #96	; 0x60
   d5cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ccc:	000d6a3d 	.word	0x000d6a3d
   d5cd0:	000d69a1 	.word	0x000d69a1

000d5cd4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5cd4:	b538      	push	{r3, r4, r5, lr}
   d5cd6:	4605      	mov	r5, r0
   d5cd8:	4614      	mov	r4, r2
   d5cda:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5cdc:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5cde:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5ce0:	d111      	bne.n	d5d06 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5ce2:	231c      	movs	r3, #28
   d5ce4:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5ce6:	230a      	movs	r3, #10
   d5ce8:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5cea:	f7fe fbe1 	bl	d44b0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5cee:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5cf0:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5cf4:	1d2b      	adds	r3, r5, #4
   d5cf6:	3514      	adds	r5, #20
   d5cf8:	f853 2b04 	ldr.w	r2, [r3], #4
   d5cfc:	f844 2b04 	str.w	r2, [r4], #4
   d5d00:	42ab      	cmp	r3, r5
   d5d02:	d1f9      	bne.n	d5cf8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5d04:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5d06:	2b04      	cmp	r3, #4
   d5d08:	d10a      	bne.n	d5d20 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5d0a:	2310      	movs	r3, #16
   d5d0c:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5d0e:	2302      	movs	r3, #2
   d5d10:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5d12:	f7fe fbcd 	bl	d44b0 <inet_htons>
   d5d16:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5d18:	6868      	ldr	r0, [r5, #4]
   d5d1a:	f7fe fbb9 	bl	d4490 <inet_htonl>
   d5d1e:	6060      	str	r0, [r4, #4]
   d5d20:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d24 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d28:	4698      	mov	r8, r3
   d5d2a:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5d2c:	2320      	movs	r3, #32
   d5d2e:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5d30:	4682      	mov	sl, r0
   d5d32:	468b      	mov	fp, r1
   d5d34:	a804      	add	r0, sp, #16
   d5d36:	4641      	mov	r1, r8
   d5d38:	4616      	mov	r6, r2
   d5d3a:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5d3e:	9308      	str	r3, [sp, #32]
   d5d40:	9409      	str	r4, [sp, #36]	; 0x24
   d5d42:	f7ff fd87 	bl	d5854 <_ZN6StringC1ERK9Printable>
   d5d46:	9b04      	ldr	r3, [sp, #16]
   d5d48:	9302      	str	r3, [sp, #8]
   d5d4a:	ad08      	add	r5, sp, #32
   d5d4c:	4b15      	ldr	r3, [pc, #84]	; (d5da4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d5d4e:	4916      	ldr	r1, [pc, #88]	; (d5da8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d5d50:	9300      	str	r3, [sp, #0]
   d5d52:	462a      	mov	r2, r5
   d5d54:	4623      	mov	r3, r4
   d5d56:	2001      	movs	r0, #1
   d5d58:	f8cd 900c 	str.w	r9, [sp, #12]
   d5d5c:	9601      	str	r6, [sp, #4]
   d5d5e:	f7fe fc6f 	bl	d4640 <log_message>
	sockaddr_storage s = {};
   d5d62:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5d64:	a804      	add	r0, sp, #16
   d5d66:	f7ff fce7 	bl	d5738 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d5d6a:	463a      	mov	r2, r7
   d5d6c:	4621      	mov	r1, r4
   d5d6e:	4628      	mov	r0, r5
   d5d70:	f000 fcc0 	bl	d66f4 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5d74:	462a      	mov	r2, r5
   d5d76:	4649      	mov	r1, r9
   d5d78:	4640      	mov	r0, r8
   d5d7a:	f7ff ffab 	bl	d5cd4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5d7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d5d82:	b14b      	cbz	r3, d5d98 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5d84:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d5d88:	4623      	mov	r3, r4
   d5d8a:	4632      	mov	r2, r6
   d5d8c:	4659      	mov	r1, fp
   d5d8e:	f8da 0014 	ldr.w	r0, [sl, #20]
   d5d92:	f7fe fbc5 	bl	d4520 <sock_sendto>
   d5d96:	e001      	b.n	d5d9c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5d9c:	b011      	add	sp, #68	; 0x44
   d5d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5da2:	bf00      	nop
   d5da4:	000d6a5a 	.word	0x000d6a5a
   d5da8:	000d69a1 	.word	0x000d69a1

000d5dac <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5dae:	b091      	sub	sp, #68	; 0x44
   d5db0:	460c      	mov	r4, r1
   d5db2:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5db4:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5db6:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5db8:	a809      	add	r0, sp, #36	; 0x24
   d5dba:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5dbc:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5dbe:	f000 fc99 	bl	d66f4 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5dc2:	aa09      	add	r2, sp, #36	; 0x24
   d5dc4:	2100      	movs	r1, #0
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	f7ff ff84 	bl	d5cd4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5dcc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5dd0:	2b02      	cmp	r3, #2
   d5dd2:	d12e      	bne.n	d5e32 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d5dd4:	2300      	movs	r3, #0
   d5dd6:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5dda:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5ddc:	b1dd      	cbz	r5, d5e16 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5dde:	a902      	add	r1, sp, #8
   d5de0:	4628      	mov	r0, r5
   d5de2:	f7fe fb2d 	bl	d4440 <if_get_by_index>
   d5de6:	b9b0      	cbnz	r0, d5e16 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d5de8:	a910      	add	r1, sp, #64	; 0x40
   d5dea:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5dee:	9802      	ldr	r0, [sp, #8]
   d5df0:	f7fe fb2e 	bl	d4450 <if_get_addrs>
   d5df4:	b960      	cbnz	r0, d5e10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5df6:	9b03      	ldr	r3, [sp, #12]
   d5df8:	b153      	cbz	r3, d5e10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5dfa:	68da      	ldr	r2, [r3, #12]
   d5dfc:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5dfe:	7851      	ldrb	r1, [r2, #1]
   d5e00:	2902      	cmp	r1, #2
   d5e02:	d103      	bne.n	d5e0c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5e04:	6852      	ldr	r2, [r2, #4]
   d5e06:	b10a      	cbz	r2, d5e0c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5e08:	9205      	str	r2, [sp, #20]
   d5e0a:	e001      	b.n	d5e10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	e7f3      	b.n	d5df8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5e10:	9803      	ldr	r0, [sp, #12]
   d5e12:	f7fe fb25 	bl	d4460 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5e16:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5e18:	f04f 0308 	mov.w	r3, #8
   d5e1c:	9300      	str	r3, [sp, #0]
   d5e1e:	bf18      	it	ne
   d5e20:	2203      	movne	r2, #3
   d5e22:	ab04      	add	r3, sp, #16
   d5e24:	bf08      	it	eq
   d5e26:	2204      	moveq	r2, #4
   d5e28:	2100      	movs	r1, #0
   d5e2a:	4630      	mov	r0, r6
   d5e2c:	f7fe fb60 	bl	d44f0 <sock_setsockopt>
   d5e30:	e01e      	b.n	d5e70 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5e32:	2b0a      	cmp	r3, #10
   d5e34:	d11a      	bne.n	d5e6c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d5e36:	ac04      	add	r4, sp, #16
   d5e38:	2214      	movs	r2, #20
   d5e3a:	2100      	movs	r1, #0
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f000 fc59 	bl	d66f4 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5e42:	ab0b      	add	r3, sp, #44	; 0x2c
   d5e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5e46:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5e4c:	f04f 0314 	mov.w	r3, #20
   d5e50:	9300      	str	r3, [sp, #0]
   d5e52:	bf18      	it	ne
   d5e54:	220c      	movne	r2, #12
   d5e56:	4623      	mov	r3, r4
   d5e58:	bf08      	it	eq
   d5e5a:	220d      	moveq	r2, #13
   d5e5c:	2129      	movs	r1, #41	; 0x29
   d5e5e:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5e60:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5e62:	f7fe fb45 	bl	d44f0 <sock_setsockopt>
   d5e66:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5e6a:	e001      	b.n	d5e70 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5e70:	b011      	add	sp, #68	; 0x44
   d5e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e74 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5e74:	b538      	push	{r3, r4, r5, lr}
   d5e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e7a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5e7c:	4b0b      	ldr	r3, [pc, #44]	; (d5eac <_ZN3UDPC1Ev+0x38>)
   d5e7e:	f103 0208 	add.w	r2, r3, #8
   d5e82:	336c      	adds	r3, #108	; 0x6c
   d5e84:	2500      	movs	r5, #0
   d5e86:	6103      	str	r3, [r0, #16]
   d5e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d5e8c:	4604      	mov	r4, r0
   d5e8e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5e90:	6002      	str	r2, [r0, #0]
   d5e92:	6143      	str	r3, [r0, #20]
   d5e94:	301c      	adds	r0, #28
   d5e96:	f7ff f831 	bl	d4efc <_ZN9IPAddressC1Ev>
   d5e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5e9e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5ea0:	8725      	strh	r5, [r4, #56]	; 0x38
   d5ea2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5ea4:	6423      	str	r3, [r4, #64]	; 0x40
   d5ea6:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	bd38      	pop	{r3, r4, r5, pc}
   d5eac:	000d6a88 	.word	0x000d6a88

000d5eb0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5eb0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5eb2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5eb6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5eb8:	b11b      	cbz	r3, d5ec2 <_ZN3UDP13releaseBufferEv+0x12>
   d5eba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5ebc:	b108      	cbz	r0, d5ec2 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5ebe:	f7fe f8ee 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5ec2:	2300      	movs	r3, #0
   d5ec4:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5ec6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5eca:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5ecc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5ece:	8723      	strh	r3, [r4, #56]	; 0x38
   d5ed0:	bd10      	pop	{r4, pc}

000d5ed2 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5ed2:	b570      	push	{r4, r5, r6, lr}
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	4616      	mov	r6, r2
   d5ed8:	460d      	mov	r5, r1
    releaseBuffer();
   d5eda:	f7ff ffe9 	bl	d5eb0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5ede:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5ee0:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5ee2:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5ee4:	b93e      	cbnz	r6, d5ef6 <_ZN3UDP9setBufferEjPh+0x24>
   d5ee6:	b135      	cbz	r5, d5ef6 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5ee8:	4628      	mov	r0, r5
   d5eea:	f7fe f8d6 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5eee:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5ef0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5ef2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5ef6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5ef8:	b103      	cbz	r3, d5efc <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5efa:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5efc:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5efe:	3000      	adds	r0, #0
   d5f00:	bf18      	it	ne
   d5f02:	2001      	movne	r0, #1
   d5f04:	bd70      	pop	{r4, r5, r6, pc}

000d5f06 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5f06:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5f08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5f0a:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d5f0c:	b91a      	cbnz	r2, d5f16 <_ZN3UDP11parsePacketEm+0x10>
   d5f0e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5f10:	b109      	cbz	r1, d5f16 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d5f12:	f7ff ffde 	bl	d5ed2 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5f16:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5f18:	2300      	movs	r3, #0
   d5f1a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5f1c:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5f1e:	b141      	cbz	r1, d5f32 <_ZN3UDP11parsePacketEm+0x2c>
   d5f20:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5f22:	b132      	cbz	r2, d5f32 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d5f24:	6820      	ldr	r0, [r4, #0]
   d5f26:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d5f28:	4620      	mov	r0, r4
   d5f2a:	47a8      	blx	r5
        if (result > 0) {
   d5f2c:	2800      	cmp	r0, #0
            _total = result;
   d5f2e:	bfc8      	it	gt
   d5f30:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5f32:	6823      	ldr	r3, [r4, #0]
   d5f34:	4620      	mov	r0, r4
   d5f36:	691b      	ldr	r3, [r3, #16]
}
   d5f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5f3c:	4718      	bx	r3
	...

000d5f40 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f42:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5f44:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5f46:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5f48:	2600      	movs	r6, #0
   d5f4a:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5f4c:	4617      	mov	r7, r2
   d5f4e:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5f50:	9308      	str	r3, [sp, #32]
   d5f52:	9609      	str	r6, [sp, #36]	; 0x24
   d5f54:	f7ff fc7e 	bl	d5854 <_ZN6StringC1ERK9Printable>
   d5f58:	9b04      	ldr	r3, [sp, #16]
   d5f5a:	9301      	str	r3, [sp, #4]
   d5f5c:	4b10      	ldr	r3, [pc, #64]	; (d5fa0 <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d5f5e:	9300      	str	r3, [sp, #0]
   d5f60:	aa08      	add	r2, sp, #32
   d5f62:	4633      	mov	r3, r6
   d5f64:	490f      	ldr	r1, [pc, #60]	; (d5fa4 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d5f66:	9702      	str	r7, [sp, #8]
   d5f68:	2001      	movs	r0, #1
   d5f6a:	f7fe fb69 	bl	d4640 <log_message>
   d5f6e:	a804      	add	r0, sp, #16
   d5f70:	f7ff fbe2 	bl	d5738 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5f74:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d5f76:	b922      	cbnz	r2, d5f82 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d5f78:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d5f7a:	b111      	cbz	r1, d5f82 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d5f7c:	4628      	mov	r0, r5
   d5f7e:	f7ff ffa8 	bl	d5ed2 <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f82:	3404      	adds	r4, #4
   d5f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5f86:	f105 0620 	add.w	r6, r5, #32
   d5f8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5f8c:	6823      	ldr	r3, [r4, #0]
   d5f8e:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5f90:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5f92:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5f94:	2300      	movs	r3, #0
   d5f96:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5f98:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5f9a:	b011      	add	sp, #68	; 0x44
   d5f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f9e:	bf00      	nop
   d5fa0:	000d6a74 	.word	0x000d6a74
   d5fa4:	000d69a1 	.word	0x000d69a1

000d5fa8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5fa8:	b510      	push	{r4, lr}
   d5faa:	4b07      	ldr	r3, [pc, #28]	; (d5fc8 <_ZN3UDPD1Ev+0x20>)
   d5fac:	f103 0208 	add.w	r2, r3, #8
   d5fb0:	336c      	adds	r3, #108	; 0x6c
   d5fb2:	4604      	mov	r4, r0
   d5fb4:	6002      	str	r2, [r0, #0]
   d5fb6:	6103      	str	r3, [r0, #16]
   d5fb8:	f7ff fd15 	bl	d59e6 <_ZN3UDP4stopEv>
   d5fbc:	4620      	mov	r0, r4
   d5fbe:	f7ff ff77 	bl	d5eb0 <_ZN3UDP13releaseBufferEv>
   d5fc2:	4620      	mov	r0, r4
   d5fc4:	bd10      	pop	{r4, pc}
   d5fc6:	bf00      	nop
   d5fc8:	000d6a88 	.word	0x000d6a88

000d5fcc <_ZN3UDPD0Ev>:
   d5fcc:	b510      	push	{r4, lr}
   d5fce:	4604      	mov	r4, r0
   d5fd0:	f7ff ffea 	bl	d5fa8 <_ZN3UDPD1Ev>
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7fe f862 	bl	d409e <_ZdlPv>
   d5fda:	4620      	mov	r0, r4
   d5fdc:	bd10      	pop	{r4, pc}

000d5fde <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5fde:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5fe0:	6940      	ldr	r0, [r0, #20]
   d5fe2:	2800      	cmp	r0, #0
   d5fe4:	db04      	blt.n	d5ff0 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5fe6:	2301      	movs	r3, #1
   d5fe8:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5fec:	f7ff bede 	b.w	d5dac <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d5ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5ff4:	4770      	bx	lr

000d5ff6 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5ff6:	4770      	bx	lr

000d5ff8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ff8:	7441      	strb	r1, [r0, #17]
   d5ffa:	4770      	bx	lr

000d5ffc <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5ffc:	7c00      	ldrb	r0, [r0, #16]
   d5ffe:	f7fe bae7 	b.w	d45d0 <HAL_USART_Available_Data_For_Write>

000d6002 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6002:	7c00      	ldrb	r0, [r0, #16]
   d6004:	f7fe babc 	b.w	d4580 <HAL_USART_Available_Data>

000d6008 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d6008:	7c00      	ldrb	r0, [r0, #16]
   d600a:	f7fe bac9 	b.w	d45a0 <HAL_USART_Peek_Data>

000d600e <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d600e:	7c00      	ldrb	r0, [r0, #16]
   d6010:	f7fe babe 	b.w	d4590 <HAL_USART_Read_Data>

000d6014 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6014:	7c00      	ldrb	r0, [r0, #16]
   d6016:	f7fe bacb 	b.w	d45b0 <HAL_USART_Flush_Data>

000d601a <_ZN11USARTSerialD0Ev>:
   d601a:	b510      	push	{r4, lr}
   d601c:	4604      	mov	r4, r0
   d601e:	f7fe f83e 	bl	d409e <_ZdlPv>
   d6022:	4620      	mov	r0, r4
   d6024:	bd10      	pop	{r4, pc}

000d6026 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6026:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6028:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d602a:	4604      	mov	r4, r0
   d602c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d602e:	b925      	cbnz	r5, d603a <_ZN11USARTSerial5writeEh+0x14>
   d6030:	7c00      	ldrb	r0, [r0, #16]
   d6032:	f7fe facd 	bl	d45d0 <HAL_USART_Available_Data_For_Write>
   d6036:	2800      	cmp	r0, #0
   d6038:	dd05      	ble.n	d6046 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d603a:	4631      	mov	r1, r6
   d603c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d603e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6042:	f7fe ba95 	b.w	d4570 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6046:	4628      	mov	r0, r5
   d6048:	bd70      	pop	{r4, r5, r6, pc}
	...

000d604c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d604c:	b510      	push	{r4, lr}
   d604e:	4604      	mov	r4, r0
   d6050:	4608      	mov	r0, r1
   d6052:	4611      	mov	r1, r2
   d6054:	2200      	movs	r2, #0
   d6056:	6062      	str	r2, [r4, #4]
   d6058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d605c:	60a2      	str	r2, [r4, #8]
   d605e:	4a05      	ldr	r2, [pc, #20]	; (d6074 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6060:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6062:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6064:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6066:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6068:	461a      	mov	r2, r3
   d606a:	f7fe fa79 	bl	d4560 <HAL_USART_Init>
}
   d606e:	4620      	mov	r0, r4
   d6070:	bd10      	pop	{r4, pc}
   d6072:	bf00      	nop
   d6074:	000d6b00 	.word	0x000d6b00

000d6078 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6078:	7c00      	ldrb	r0, [r0, #16]
   d607a:	f7fe baa1 	b.w	d45c0 <HAL_USART_Is_Enabled>
	...

000d6080 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6080:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6082:	4d0c      	ldr	r5, [pc, #48]	; (d60b4 <_Z22__fetch_global_Serial1v+0x34>)
   d6084:	6829      	ldr	r1, [r5, #0]
   d6086:	f011 0401 	ands.w	r4, r1, #1
   d608a:	d111      	bne.n	d60b0 <_Z22__fetch_global_Serial1v+0x30>
   d608c:	4628      	mov	r0, r5
   d608e:	f7fe f80a 	bl	d40a6 <__cxa_guard_acquire>
   d6092:	b168      	cbz	r0, d60b0 <_Z22__fetch_global_Serial1v+0x30>
   d6094:	4a08      	ldr	r2, [pc, #32]	; (d60b8 <_Z22__fetch_global_Serial1v+0x38>)
   d6096:	4b09      	ldr	r3, [pc, #36]	; (d60bc <_Z22__fetch_global_Serial1v+0x3c>)
   d6098:	4809      	ldr	r0, [pc, #36]	; (d60c0 <_Z22__fetch_global_Serial1v+0x40>)
   d609a:	4621      	mov	r1, r4
   d609c:	f7ff ffd6 	bl	d604c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d60a0:	4628      	mov	r0, r5
   d60a2:	f7fe f805 	bl	d40b0 <__cxa_guard_release>
   d60a6:	4a07      	ldr	r2, [pc, #28]	; (d60c4 <_Z22__fetch_global_Serial1v+0x44>)
   d60a8:	4907      	ldr	r1, [pc, #28]	; (d60c8 <_Z22__fetch_global_Serial1v+0x48>)
   d60aa:	4805      	ldr	r0, [pc, #20]	; (d60c0 <_Z22__fetch_global_Serial1v+0x40>)
   d60ac:	f000 f990 	bl	d63d0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d60b0:	4803      	ldr	r0, [pc, #12]	; (d60c0 <_Z22__fetch_global_Serial1v+0x40>)
   d60b2:	bd38      	pop	{r3, r4, r5, pc}
   d60b4:	2003e66c 	.word	0x2003e66c
   d60b8:	2003e670 	.word	0x2003e670
   d60bc:	2003e5e8 	.word	0x2003e5e8
   d60c0:	2003e5d4 	.word	0x2003e5d4
   d60c4:	2003e3bc 	.word	0x2003e3bc
   d60c8:	000d5ff7 	.word	0x000d5ff7

000d60cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60cc:	7441      	strb	r1, [r0, #17]
   d60ce:	4770      	bx	lr

000d60d0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d60d0:	4770      	bx	lr

000d60d2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d60d2:	2100      	movs	r1, #0
   d60d4:	7c00      	ldrb	r0, [r0, #16]
   d60d6:	f7fe ba9b 	b.w	d4610 <HAL_USB_USART_Receive_Data>

000d60da <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d60da:	2101      	movs	r1, #1
   d60dc:	7c00      	ldrb	r0, [r0, #16]
   d60de:	f7fe ba97 	b.w	d4610 <HAL_USB_USART_Receive_Data>

000d60e2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d60e2:	7c00      	ldrb	r0, [r0, #16]
   d60e4:	f7fe ba8c 	b.w	d4600 <HAL_USB_USART_Available_Data_For_Write>

000d60e8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7fe ba81 	b.w	d45f0 <HAL_USB_USART_Available_Data>

000d60ee <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d60ee:	b538      	push	{r3, r4, r5, lr}
   d60f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60f2:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d60f4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d60f6:	f7fe fa83 	bl	d4600 <HAL_USB_USART_Available_Data_For_Write>
   d60fa:	2800      	cmp	r0, #0
   d60fc:	dc01      	bgt.n	d6102 <_ZN9USBSerial5writeEh+0x14>
   d60fe:	7c60      	ldrb	r0, [r4, #17]
   d6100:	b120      	cbz	r0, d610c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d6102:	4629      	mov	r1, r5
   d6104:	7c20      	ldrb	r0, [r4, #16]
   d6106:	f7fe fa8b 	bl	d4620 <HAL_USB_USART_Send_Data>
    return 1;
   d610a:	2001      	movs	r0, #1
  }
  return 0;
}
   d610c:	bd38      	pop	{r3, r4, r5, pc}

000d610e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d610e:	7c00      	ldrb	r0, [r0, #16]
   d6110:	f7fe ba8e 	b.w	d4630 <HAL_USB_USART_Flush_Data>

000d6114 <_ZN9USBSerialD0Ev>:
   d6114:	b510      	push	{r4, lr}
   d6116:	4604      	mov	r4, r0
   d6118:	f7fd ffc1 	bl	d409e <_ZdlPv>
   d611c:	4620      	mov	r0, r4
   d611e:	bd10      	pop	{r4, pc}

000d6120 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6120:	b510      	push	{r4, lr}
   d6122:	4604      	mov	r4, r0
   d6124:	2300      	movs	r3, #0
   d6126:	6063      	str	r3, [r4, #4]
   d6128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d612c:	60a3      	str	r3, [r4, #8]
   d612e:	4b05      	ldr	r3, [pc, #20]	; (d6144 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6130:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6132:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6134:	4608      	mov	r0, r1
{
  _serial = serial;
   d6136:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6138:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d613a:	4611      	mov	r1, r2
   d613c:	f7fe fa50 	bl	d45e0 <HAL_USB_USART_Init>
}
   d6140:	4620      	mov	r0, r4
   d6142:	bd10      	pop	{r4, pc}
   d6144:	000d6b30 	.word	0x000d6b30

000d6148 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6148:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d614a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d614c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d614e:	2100      	movs	r1, #0
   d6150:	f000 fad0 	bl	d66f4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6154:	4620      	mov	r0, r4
   d6156:	bd10      	pop	{r4, pc}

000d6158 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6158:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d615a:	4d0e      	ldr	r5, [pc, #56]	; (d6194 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d615c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d615e:	a801      	add	r0, sp, #4
   d6160:	f7ff fff2 	bl	d6148 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6164:	6829      	ldr	r1, [r5, #0]
   d6166:	f011 0401 	ands.w	r4, r1, #1
   d616a:	d110      	bne.n	d618e <_Z16_fetch_usbserialv+0x36>
   d616c:	4628      	mov	r0, r5
   d616e:	f7fd ff9a 	bl	d40a6 <__cxa_guard_acquire>
   d6172:	b160      	cbz	r0, d618e <_Z16_fetch_usbserialv+0x36>
   d6174:	aa01      	add	r2, sp, #4
   d6176:	4621      	mov	r1, r4
   d6178:	4807      	ldr	r0, [pc, #28]	; (d6198 <_Z16_fetch_usbserialv+0x40>)
   d617a:	f7ff ffd1 	bl	d6120 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d617e:	4628      	mov	r0, r5
   d6180:	f7fd ff96 	bl	d40b0 <__cxa_guard_release>
   d6184:	4a05      	ldr	r2, [pc, #20]	; (d619c <_Z16_fetch_usbserialv+0x44>)
   d6186:	4906      	ldr	r1, [pc, #24]	; (d61a0 <_Z16_fetch_usbserialv+0x48>)
   d6188:	4803      	ldr	r0, [pc, #12]	; (d6198 <_Z16_fetch_usbserialv+0x40>)
   d618a:	f000 f921 	bl	d63d0 <__aeabi_atexit>
	return _usbserial;
}
   d618e:	4802      	ldr	r0, [pc, #8]	; (d6198 <_Z16_fetch_usbserialv+0x40>)
   d6190:	b007      	add	sp, #28
   d6192:	bd30      	pop	{r4, r5, pc}
   d6194:	2003e6f4 	.word	0x2003e6f4
   d6198:	2003e6f8 	.word	0x2003e6f8
   d619c:	2003e3bc 	.word	0x2003e3bc
   d61a0:	000d60d1 	.word	0x000d60d1

000d61a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d61a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d61a6:	4b0c      	ldr	r3, [pc, #48]	; (d61d8 <serialEventRun+0x34>)
   d61a8:	b133      	cbz	r3, d61b8 <serialEventRun+0x14>
   d61aa:	f7ff ffd5 	bl	d6158 <_Z16_fetch_usbserialv>
   d61ae:	6803      	ldr	r3, [r0, #0]
   d61b0:	691b      	ldr	r3, [r3, #16]
   d61b2:	4798      	blx	r3
   d61b4:	2800      	cmp	r0, #0
   d61b6:	dc09      	bgt.n	d61cc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d61b8:	4b08      	ldr	r3, [pc, #32]	; (d61dc <serialEventRun+0x38>)
   d61ba:	b163      	cbz	r3, d61d6 <serialEventRun+0x32>
   d61bc:	f7ff ff60 	bl	d6080 <_Z22__fetch_global_Serial1v>
   d61c0:	6803      	ldr	r3, [r0, #0]
   d61c2:	691b      	ldr	r3, [r3, #16]
   d61c4:	4798      	blx	r3
   d61c6:	2800      	cmp	r0, #0
   d61c8:	dc03      	bgt.n	d61d2 <serialEventRun+0x2e>
   d61ca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d61cc:	f3af 8000 	nop.w
   d61d0:	e7f2      	b.n	d61b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d61d2:	f3af 8000 	nop.w
   d61d6:	bd08      	pop	{r3, pc}
	...

000d61e0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d61e0:	b508      	push	{r3, lr}
	serialEventRun();
   d61e2:	f7ff ffdf 	bl	d61a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d61e6:	f7fe f8a3 	bl	d4330 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d61ea:	4b01      	ldr	r3, [pc, #4]	; (d61f0 <_post_loop+0x10>)
   d61ec:	6018      	str	r0, [r3, #0]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	2003e710 	.word	0x2003e710

000d61f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d61f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d61f6:	2300      	movs	r3, #0
   d61f8:	9300      	str	r3, [sp, #0]
   d61fa:	461a      	mov	r2, r3
   d61fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6200:	f7fe fa50 	bl	d46a4 <system_ctrl_set_result>
}
   d6204:	b003      	add	sp, #12
   d6206:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d620c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d620c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d620e:	8843      	ldrh	r3, [r0, #2]
   d6210:	2b0a      	cmp	r3, #10
   d6212:	d008      	beq.n	d6226 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6214:	2b50      	cmp	r3, #80	; 0x50
   d6216:	d109      	bne.n	d622c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6218:	4b09      	ldr	r3, [pc, #36]	; (d6240 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d621a:	681b      	ldr	r3, [r3, #0]
   d621c:	b13b      	cbz	r3, d622e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d621e:	b003      	add	sp, #12
   d6220:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6224:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6226:	f7ff ffe5 	bl	d61f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d622a:	e006      	b.n	d623a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d622c:	2300      	movs	r3, #0
   d622e:	9300      	str	r3, [sp, #0]
   d6230:	461a      	mov	r2, r3
   d6232:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6236:	f7fe fa35 	bl	d46a4 <system_ctrl_set_result>
        break;
    }
}
   d623a:	b003      	add	sp, #12
   d623c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6240:	2003e70c 	.word	0x2003e70c

000d6244 <module_user_init_hook>:

void module_user_init_hook()
{
   d6244:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6246:	2100      	movs	r1, #0
   d6248:	4804      	ldr	r0, [pc, #16]	; (d625c <module_user_init_hook+0x18>)
   d624a:	f7fe fa4f 	bl	d46ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d624e:	2100      	movs	r1, #0
   d6250:	4803      	ldr	r0, [pc, #12]	; (d6260 <module_user_init_hook+0x1c>)
}
   d6252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6256:	f7fe ba1b 	b.w	d4690 <system_ctrl_set_app_request_handler>
   d625a:	bf00      	nop
   d625c:	00000000 	.word	0x00000000
   d6260:	000d620d 	.word	0x000d620d

000d6264 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6264:	b510      	push	{r4, lr}
   d6266:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6268:	480f      	ldr	r0, [pc, #60]	; (d62a8 <pinAvailable+0x44>)
   d626a:	f7ff fa5b 	bl	d5724 <_ZN8SPIClass9isEnabledEv>
   d626e:	b128      	cbz	r0, d627c <pinAvailable+0x18>
   d6270:	f1a4 030b 	sub.w	r3, r4, #11
   d6274:	2b02      	cmp	r3, #2
   d6276:	d801      	bhi.n	d627c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6278:	2000      	movs	r0, #0
   d627a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d627c:	f000 f866 	bl	d634c <_Z19__fetch_global_Wirev>
   d6280:	f7fe fdfe 	bl	d4e80 <_ZN7TwoWire9isEnabledEv>
   d6284:	b108      	cbz	r0, d628a <pinAvailable+0x26>
   d6286:	2c01      	cmp	r4, #1
   d6288:	d9f6      	bls.n	d6278 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d628a:	f7ff fef9 	bl	d6080 <_Z22__fetch_global_Serial1v>
   d628e:	f7ff fef3 	bl	d6078 <_ZN11USARTSerial9isEnabledEv>
   d6292:	b118      	cbz	r0, d629c <pinAvailable+0x38>
   d6294:	f1a4 0309 	sub.w	r3, r4, #9
   d6298:	2b01      	cmp	r3, #1
   d629a:	d9ed      	bls.n	d6278 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d629c:	2c1e      	cmp	r4, #30
   d629e:	bf8c      	ite	hi
   d62a0:	2000      	movhi	r0, #0
   d62a2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d62a4:	bd10      	pop	{r4, pc}
   d62a6:	bf00      	nop
   d62a8:	2003e72c 	.word	0x2003e72c

000d62ac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62ac:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d62ae:	b538      	push	{r3, r4, r5, lr}
   d62b0:	4604      	mov	r4, r0
   d62b2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b4:	d80a      	bhi.n	d62cc <pinMode+0x20>
   d62b6:	29ff      	cmp	r1, #255	; 0xff
   d62b8:	d008      	beq.n	d62cc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62ba:	f7ff ffd3 	bl	d6264 <pinAvailable>
   d62be:	b128      	cbz	r0, d62cc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c0:	4629      	mov	r1, r5
   d62c2:	4620      	mov	r0, r4
}
   d62c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c8:	f7fe b84a 	b.w	d4360 <HAL_Pin_Mode>
   d62cc:	bd38      	pop	{r3, r4, r5, pc}

000d62ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62ce:	b538      	push	{r3, r4, r5, lr}
   d62d0:	4604      	mov	r4, r0
   d62d2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d62d4:	f7fe f84c 	bl	d4370 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d62d8:	28ff      	cmp	r0, #255	; 0xff
   d62da:	d010      	beq.n	d62fe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d62dc:	2806      	cmp	r0, #6
   d62de:	d804      	bhi.n	d62ea <digitalWrite+0x1c>
   d62e0:	234d      	movs	r3, #77	; 0x4d
   d62e2:	fa23 f000 	lsr.w	r0, r3, r0
   d62e6:	07c3      	lsls	r3, r0, #31
   d62e8:	d409      	bmi.n	d62fe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d62ea:	4620      	mov	r0, r4
   d62ec:	f7ff ffba 	bl	d6264 <pinAvailable>
   d62f0:	b128      	cbz	r0, d62fe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62f2:	4629      	mov	r1, r5
   d62f4:	4620      	mov	r0, r4
}
   d62f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62fa:	f7fe b841 	b.w	d4380 <HAL_GPIO_Write>
   d62fe:	bd38      	pop	{r3, r4, r5, pc}

000d6300 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6300:	b538      	push	{r3, r4, r5, lr}
   d6302:	4604      	mov	r4, r0
   d6304:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6306:	f7ff ffad 	bl	d6264 <pinAvailable>
   d630a:	b1f0      	cbz	r0, d634a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d630c:	2104      	movs	r1, #4
   d630e:	4620      	mov	r0, r4
   d6310:	f7fe f81e 	bl	d4350 <HAL_Validate_Pin_Function>
   d6314:	2804      	cmp	r0, #4
   d6316:	d105      	bne.n	d6324 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6318:	b2a9      	uxth	r1, r5
   d631a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d631c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d6320:	f7fe b836 	b.w	d4390 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6324:	2102      	movs	r1, #2
   d6326:	4620      	mov	r0, r4
   d6328:	f7fe f812 	bl	d4350 <HAL_Validate_Pin_Function>
   d632c:	2802      	cmp	r0, #2
   d632e:	d10c      	bne.n	d634a <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6330:	4620      	mov	r0, r4
   d6332:	f7fe f81d 	bl	d4370 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6336:	2801      	cmp	r0, #1
   d6338:	d001      	beq.n	d633e <_Z11analogWritetm+0x3e>
   d633a:	2804      	cmp	r0, #4
   d633c:	d105      	bne.n	d634a <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d633e:	4629      	mov	r1, r5
   d6340:	4620      	mov	r0, r4
    }
}
   d6342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6346:	f7fe b82b 	b.w	d43a0 <HAL_PWM_Write_Ext>
   d634a:	bd38      	pop	{r3, r4, r5, pc}

000d634c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d634c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d634e:	4d0b      	ldr	r5, [pc, #44]	; (d637c <_Z19__fetch_global_Wirev+0x30>)
   d6350:	6829      	ldr	r1, [r5, #0]
   d6352:	f011 0401 	ands.w	r4, r1, #1
   d6356:	d10f      	bne.n	d6378 <_Z19__fetch_global_Wirev+0x2c>
   d6358:	4628      	mov	r0, r5
   d635a:	f7fd fea4 	bl	d40a6 <__cxa_guard_acquire>
   d635e:	b158      	cbz	r0, d6378 <_Z19__fetch_global_Wirev+0x2c>
   d6360:	4621      	mov	r1, r4
   d6362:	4807      	ldr	r0, [pc, #28]	; (d6380 <_Z19__fetch_global_Wirev+0x34>)
   d6364:	f7fe fd7a 	bl	d4e5c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6368:	4628      	mov	r0, r5
   d636a:	f7fd fea1 	bl	d40b0 <__cxa_guard_release>
   d636e:	4a05      	ldr	r2, [pc, #20]	; (d6384 <_Z19__fetch_global_Wirev+0x38>)
   d6370:	4905      	ldr	r1, [pc, #20]	; (d6388 <_Z19__fetch_global_Wirev+0x3c>)
   d6372:	4803      	ldr	r0, [pc, #12]	; (d6380 <_Z19__fetch_global_Wirev+0x34>)
   d6374:	f000 f82c 	bl	d63d0 <__aeabi_atexit>
	return wire;
}
   d6378:	4801      	ldr	r0, [pc, #4]	; (d6380 <_Z19__fetch_global_Wirev+0x34>)
   d637a:	bd38      	pop	{r3, r4, r5, pc}
   d637c:	2003e714 	.word	0x2003e714
   d6380:	2003e718 	.word	0x2003e718
   d6384:	2003e3bc 	.word	0x2003e3bc
   d6388:	000d4e05 	.word	0x000d4e05

000d638c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d638c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d638e:	4c0c      	ldr	r4, [pc, #48]	; (d63c0 <_GLOBAL__sub_I_SPI+0x34>)
   d6390:	4e0c      	ldr	r6, [pc, #48]	; (d63c4 <_GLOBAL__sub_I_SPI+0x38>)
   d6392:	4d0d      	ldr	r5, [pc, #52]	; (d63c8 <_GLOBAL__sub_I_SPI+0x3c>)
   d6394:	2100      	movs	r1, #0
   d6396:	4620      	mov	r0, r4
   d6398:	f7ff f9b0 	bl	d56fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d639c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d639e:	4c0b      	ldr	r4, [pc, #44]	; (d63cc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d63a0:	4632      	mov	r2, r6
   d63a2:	4629      	mov	r1, r5
   d63a4:	f000 f814 	bl	d63d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d63a8:	2101      	movs	r1, #1
   d63aa:	4620      	mov	r0, r4
   d63ac:	f7ff f9a6 	bl	d56fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d63b0:	4632      	mov	r2, r6
   d63b2:	4629      	mov	r1, r5
   d63b4:	4620      	mov	r0, r4
   d63b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d63ba:	f000 b809 	b.w	d63d0 <__aeabi_atexit>
   d63be:	bf00      	nop
   d63c0:	2003e72c 	.word	0x2003e72c
   d63c4:	2003e3bc 	.word	0x2003e3bc
   d63c8:	000d56ed 	.word	0x000d56ed
   d63cc:	2003e73c 	.word	0x2003e73c

000d63d0 <__aeabi_atexit>:
   d63d0:	460b      	mov	r3, r1
   d63d2:	4601      	mov	r1, r0
   d63d4:	4618      	mov	r0, r3
   d63d6:	f000 b965 	b.w	d66a4 <__cxa_atexit>
	...

000d63dc <_ZSt15get_new_handlerv>:
   d63dc:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <_ZSt15get_new_handlerv+0xc>)
   d63de:	6818      	ldr	r0, [r3, #0]
   d63e0:	f3bf 8f5f 	dmb	sy
   d63e4:	4770      	bx	lr
   d63e6:	bf00      	nop
   d63e8:	2003e74c 	.word	0x2003e74c

000d63ec <_ZnwjRKSt9nothrow_t>:
   d63ec:	b510      	push	{r4, lr}
   d63ee:	2800      	cmp	r0, #0
   d63f0:	bf14      	ite	ne
   d63f2:	4604      	movne	r4, r0
   d63f4:	2401      	moveq	r4, #1
   d63f6:	4620      	mov	r0, r4
   d63f8:	f7fe f9d0 	bl	d479c <malloc>
   d63fc:	b920      	cbnz	r0, d6408 <_ZnwjRKSt9nothrow_t+0x1c>
   d63fe:	f7ff ffed 	bl	d63dc <_ZSt15get_new_handlerv>
   d6402:	b108      	cbz	r0, d6408 <_ZnwjRKSt9nothrow_t+0x1c>
   d6404:	4780      	blx	r0
   d6406:	e7f6      	b.n	d63f6 <_ZnwjRKSt9nothrow_t+0xa>
   d6408:	bd10      	pop	{r4, pc}

000d640a <_ZnajRKSt9nothrow_t>:
   d640a:	f7ff bfef 	b.w	d63ec <_ZnwjRKSt9nothrow_t>

000d640e <_ZSt25__throw_bad_function_callv>:
   d640e:	b508      	push	{r3, lr}
   d6410:	f7fe f9dc 	bl	d47cc <abort>

000d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6414:	4b24      	ldr	r3, [pc, #144]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d0      	lsls	r0, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b22      	ldr	r3, [pc, #136]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d1      	lsls	r1, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b20      	ldr	r3, [pc, #128]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d2      	lsls	r2, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b1e      	ldr	r3, [pc, #120]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d0      	lsls	r0, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b1c      	ldr	r3, [pc, #112]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d1      	lsls	r1, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b1a      	ldr	r3, [pc, #104]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d2      	lsls	r2, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b18      	ldr	r3, [pc, #96]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d0      	lsls	r0, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b16      	ldr	r3, [pc, #88]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d1      	lsls	r1, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b14      	ldr	r3, [pc, #80]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d2      	lsls	r2, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4b12      	ldr	r3, [pc, #72]	; (d64cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6482:	681a      	ldr	r2, [r3, #0]
   d6484:	07d0      	lsls	r0, r2, #31
   d6486:	bf5c      	itt	pl
   d6488:	2201      	movpl	r2, #1
   d648a:	601a      	strpl	r2, [r3, #0]
   d648c:	4b10      	ldr	r3, [pc, #64]	; (d64d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d648e:	681a      	ldr	r2, [r3, #0]
   d6490:	07d1      	lsls	r1, r2, #31
   d6492:	bf5c      	itt	pl
   d6494:	2201      	movpl	r2, #1
   d6496:	601a      	strpl	r2, [r3, #0]
   d6498:	4b0e      	ldr	r3, [pc, #56]	; (d64d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d649a:	681a      	ldr	r2, [r3, #0]
   d649c:	07d2      	lsls	r2, r2, #31
   d649e:	bf5c      	itt	pl
   d64a0:	2201      	movpl	r2, #1
   d64a2:	601a      	strpl	r2, [r3, #0]
   d64a4:	4770      	bx	lr
   d64a6:	bf00      	nop
   d64a8:	2003e77c 	.word	0x2003e77c
   d64ac:	2003e778 	.word	0x2003e778
   d64b0:	2003e774 	.word	0x2003e774
   d64b4:	2003e770 	.word	0x2003e770
   d64b8:	2003e76c 	.word	0x2003e76c
   d64bc:	2003e768 	.word	0x2003e768
   d64c0:	2003e764 	.word	0x2003e764
   d64c4:	2003e760 	.word	0x2003e760
   d64c8:	2003e75c 	.word	0x2003e75c
   d64cc:	2003e758 	.word	0x2003e758
   d64d0:	2003e754 	.word	0x2003e754
   d64d4:	2003e750 	.word	0x2003e750

000d64d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d64d8:	4b18      	ldr	r3, [pc, #96]	; (d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d1      	lsls	r1, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b16      	ldr	r3, [pc, #88]	; (d6540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d2      	lsls	r2, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b14      	ldr	r3, [pc, #80]	; (d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d0      	lsls	r0, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b12      	ldr	r3, [pc, #72]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d1      	lsls	r1, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b10      	ldr	r3, [pc, #64]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d2      	lsls	r2, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b0e      	ldr	r3, [pc, #56]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d0      	lsls	r0, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4b0c      	ldr	r3, [pc, #48]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d1      	lsls	r1, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b0a      	ldr	r3, [pc, #40]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d2      	lsls	r2, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4770      	bx	lr
   d653a:	bf00      	nop
   d653c:	2003e79c 	.word	0x2003e79c
   d6540:	2003e798 	.word	0x2003e798
   d6544:	2003e794 	.word	0x2003e794
   d6548:	2003e790 	.word	0x2003e790
   d654c:	2003e78c 	.word	0x2003e78c
   d6550:	2003e788 	.word	0x2003e788
   d6554:	2003e784 	.word	0x2003e784
   d6558:	2003e780 	.word	0x2003e780

000d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d655c:	4b18      	ldr	r3, [pc, #96]	; (d65c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	07d1      	lsls	r1, r2, #31
   d6562:	bf5c      	itt	pl
   d6564:	2201      	movpl	r2, #1
   d6566:	601a      	strpl	r2, [r3, #0]
   d6568:	4b16      	ldr	r3, [pc, #88]	; (d65c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d656a:	681a      	ldr	r2, [r3, #0]
   d656c:	07d2      	lsls	r2, r2, #31
   d656e:	bf5c      	itt	pl
   d6570:	2201      	movpl	r2, #1
   d6572:	601a      	strpl	r2, [r3, #0]
   d6574:	4b14      	ldr	r3, [pc, #80]	; (d65c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d0      	lsls	r0, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4b12      	ldr	r3, [pc, #72]	; (d65cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	07d1      	lsls	r1, r2, #31
   d6586:	bf5c      	itt	pl
   d6588:	2201      	movpl	r2, #1
   d658a:	601a      	strpl	r2, [r3, #0]
   d658c:	4b10      	ldr	r3, [pc, #64]	; (d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	07d2      	lsls	r2, r2, #31
   d6592:	bf5c      	itt	pl
   d6594:	2201      	movpl	r2, #1
   d6596:	601a      	strpl	r2, [r3, #0]
   d6598:	4b0e      	ldr	r3, [pc, #56]	; (d65d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d659a:	681a      	ldr	r2, [r3, #0]
   d659c:	07d0      	lsls	r0, r2, #31
   d659e:	bf5c      	itt	pl
   d65a0:	2201      	movpl	r2, #1
   d65a2:	601a      	strpl	r2, [r3, #0]
   d65a4:	4b0c      	ldr	r3, [pc, #48]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65a6:	681a      	ldr	r2, [r3, #0]
   d65a8:	07d1      	lsls	r1, r2, #31
   d65aa:	bf5c      	itt	pl
   d65ac:	2201      	movpl	r2, #1
   d65ae:	601a      	strpl	r2, [r3, #0]
   d65b0:	4b0a      	ldr	r3, [pc, #40]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d65b2:	681a      	ldr	r2, [r3, #0]
   d65b4:	07d2      	lsls	r2, r2, #31
   d65b6:	bf5c      	itt	pl
   d65b8:	2201      	movpl	r2, #1
   d65ba:	601a      	strpl	r2, [r3, #0]
   d65bc:	4770      	bx	lr
   d65be:	bf00      	nop
   d65c0:	2003e7bc 	.word	0x2003e7bc
   d65c4:	2003e7b8 	.word	0x2003e7b8
   d65c8:	2003e7b4 	.word	0x2003e7b4
   d65cc:	2003e7b0 	.word	0x2003e7b0
   d65d0:	2003e7ac 	.word	0x2003e7ac
   d65d4:	2003e7a8 	.word	0x2003e7a8
   d65d8:	2003e7a4 	.word	0x2003e7a4
   d65dc:	2003e7a0 	.word	0x2003e7a0

000d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d65e0:	4b24      	ldr	r3, [pc, #144]	; (d6674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d65e2:	681a      	ldr	r2, [r3, #0]
   d65e4:	07d0      	lsls	r0, r2, #31
   d65e6:	bf5c      	itt	pl
   d65e8:	2201      	movpl	r2, #1
   d65ea:	601a      	strpl	r2, [r3, #0]
   d65ec:	4b22      	ldr	r3, [pc, #136]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d65ee:	681a      	ldr	r2, [r3, #0]
   d65f0:	07d1      	lsls	r1, r2, #31
   d65f2:	bf5c      	itt	pl
   d65f4:	2201      	movpl	r2, #1
   d65f6:	601a      	strpl	r2, [r3, #0]
   d65f8:	4b20      	ldr	r3, [pc, #128]	; (d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d65fa:	681a      	ldr	r2, [r3, #0]
   d65fc:	07d2      	lsls	r2, r2, #31
   d65fe:	bf5c      	itt	pl
   d6600:	2201      	movpl	r2, #1
   d6602:	601a      	strpl	r2, [r3, #0]
   d6604:	4b1e      	ldr	r3, [pc, #120]	; (d6680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6606:	681a      	ldr	r2, [r3, #0]
   d6608:	07d0      	lsls	r0, r2, #31
   d660a:	bf5c      	itt	pl
   d660c:	2201      	movpl	r2, #1
   d660e:	601a      	strpl	r2, [r3, #0]
   d6610:	4b1c      	ldr	r3, [pc, #112]	; (d6684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6612:	681a      	ldr	r2, [r3, #0]
   d6614:	07d1      	lsls	r1, r2, #31
   d6616:	bf5c      	itt	pl
   d6618:	2201      	movpl	r2, #1
   d661a:	601a      	strpl	r2, [r3, #0]
   d661c:	4b1a      	ldr	r3, [pc, #104]	; (d6688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d661e:	681a      	ldr	r2, [r3, #0]
   d6620:	07d2      	lsls	r2, r2, #31
   d6622:	bf5c      	itt	pl
   d6624:	2201      	movpl	r2, #1
   d6626:	601a      	strpl	r2, [r3, #0]
   d6628:	4b18      	ldr	r3, [pc, #96]	; (d668c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d662a:	681a      	ldr	r2, [r3, #0]
   d662c:	07d0      	lsls	r0, r2, #31
   d662e:	bf5c      	itt	pl
   d6630:	2201      	movpl	r2, #1
   d6632:	601a      	strpl	r2, [r3, #0]
   d6634:	4b16      	ldr	r3, [pc, #88]	; (d6690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6636:	681a      	ldr	r2, [r3, #0]
   d6638:	07d1      	lsls	r1, r2, #31
   d663a:	bf5c      	itt	pl
   d663c:	2201      	movpl	r2, #1
   d663e:	601a      	strpl	r2, [r3, #0]
   d6640:	4b14      	ldr	r3, [pc, #80]	; (d6694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6642:	681a      	ldr	r2, [r3, #0]
   d6644:	07d2      	lsls	r2, r2, #31
   d6646:	bf5c      	itt	pl
   d6648:	2201      	movpl	r2, #1
   d664a:	601a      	strpl	r2, [r3, #0]
   d664c:	4b12      	ldr	r3, [pc, #72]	; (d6698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d664e:	681a      	ldr	r2, [r3, #0]
   d6650:	07d0      	lsls	r0, r2, #31
   d6652:	bf5c      	itt	pl
   d6654:	2201      	movpl	r2, #1
   d6656:	601a      	strpl	r2, [r3, #0]
   d6658:	4b10      	ldr	r3, [pc, #64]	; (d669c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d665a:	681a      	ldr	r2, [r3, #0]
   d665c:	07d1      	lsls	r1, r2, #31
   d665e:	bf5c      	itt	pl
   d6660:	2201      	movpl	r2, #1
   d6662:	601a      	strpl	r2, [r3, #0]
   d6664:	4b0e      	ldr	r3, [pc, #56]	; (d66a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6666:	681a      	ldr	r2, [r3, #0]
   d6668:	07d2      	lsls	r2, r2, #31
   d666a:	bf5c      	itt	pl
   d666c:	2201      	movpl	r2, #1
   d666e:	601a      	strpl	r2, [r3, #0]
   d6670:	4770      	bx	lr
   d6672:	bf00      	nop
   d6674:	2003e7ec 	.word	0x2003e7ec
   d6678:	2003e7e8 	.word	0x2003e7e8
   d667c:	2003e7e4 	.word	0x2003e7e4
   d6680:	2003e7e0 	.word	0x2003e7e0
   d6684:	2003e7dc 	.word	0x2003e7dc
   d6688:	2003e7d8 	.word	0x2003e7d8
   d668c:	2003e7d4 	.word	0x2003e7d4
   d6690:	2003e7d0 	.word	0x2003e7d0
   d6694:	2003e7cc 	.word	0x2003e7cc
   d6698:	2003e7c8 	.word	0x2003e7c8
   d669c:	2003e7c4 	.word	0x2003e7c4
   d66a0:	2003e7c0 	.word	0x2003e7c0

000d66a4 <__cxa_atexit>:
   d66a4:	b510      	push	{r4, lr}
   d66a6:	4c05      	ldr	r4, [pc, #20]	; (d66bc <__cxa_atexit+0x18>)
   d66a8:	4613      	mov	r3, r2
   d66aa:	b12c      	cbz	r4, d66b8 <__cxa_atexit+0x14>
   d66ac:	460a      	mov	r2, r1
   d66ae:	4601      	mov	r1, r0
   d66b0:	2002      	movs	r0, #2
   d66b2:	f3af 8000 	nop.w
   d66b6:	bd10      	pop	{r4, pc}
   d66b8:	4620      	mov	r0, r4
   d66ba:	bd10      	pop	{r4, pc}
   d66bc:	00000000 	.word	0x00000000

000d66c0 <memcmp>:
   d66c0:	b510      	push	{r4, lr}
   d66c2:	3901      	subs	r1, #1
   d66c4:	4402      	add	r2, r0
   d66c6:	4290      	cmp	r0, r2
   d66c8:	d007      	beq.n	d66da <memcmp+0x1a>
   d66ca:	f810 3b01 	ldrb.w	r3, [r0], #1
   d66ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d66d2:	42a3      	cmp	r3, r4
   d66d4:	d0f7      	beq.n	d66c6 <memcmp+0x6>
   d66d6:	1b18      	subs	r0, r3, r4
   d66d8:	bd10      	pop	{r4, pc}
   d66da:	2000      	movs	r0, #0
   d66dc:	bd10      	pop	{r4, pc}

000d66de <memcpy>:
   d66de:	b510      	push	{r4, lr}
   d66e0:	1e43      	subs	r3, r0, #1
   d66e2:	440a      	add	r2, r1
   d66e4:	4291      	cmp	r1, r2
   d66e6:	d004      	beq.n	d66f2 <memcpy+0x14>
   d66e8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66ec:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66f0:	e7f8      	b.n	d66e4 <memcpy+0x6>
   d66f2:	bd10      	pop	{r4, pc}

000d66f4 <memset>:
   d66f4:	4402      	add	r2, r0
   d66f6:	4603      	mov	r3, r0
   d66f8:	4293      	cmp	r3, r2
   d66fa:	d002      	beq.n	d6702 <memset+0xe>
   d66fc:	f803 1b01 	strb.w	r1, [r3], #1
   d6700:	e7fa      	b.n	d66f8 <memset+0x4>
   d6702:	4770      	bx	lr

000d6704 <strcpy>:
   d6704:	4603      	mov	r3, r0
   d6706:	f811 2b01 	ldrb.w	r2, [r1], #1
   d670a:	f803 2b01 	strb.w	r2, [r3], #1
   d670e:	2a00      	cmp	r2, #0
   d6710:	d1f9      	bne.n	d6706 <strcpy+0x2>
   d6712:	4770      	bx	lr

000d6714 <strdup>:
   d6714:	4b02      	ldr	r3, [pc, #8]	; (d6720 <strdup+0xc>)
   d6716:	4601      	mov	r1, r0
   d6718:	6818      	ldr	r0, [r3, #0]
   d671a:	f000 b803 	b.w	d6724 <_strdup_r>
   d671e:	bf00      	nop
   d6720:	2003e3b8 	.word	0x2003e3b8

000d6724 <_strdup_r>:
   d6724:	b570      	push	{r4, r5, r6, lr}
   d6726:	4606      	mov	r6, r0
   d6728:	4608      	mov	r0, r1
   d672a:	460c      	mov	r4, r1
   d672c:	f000 f80d 	bl	d674a <strlen>
   d6730:	1c45      	adds	r5, r0, #1
   d6732:	4629      	mov	r1, r5
   d6734:	4630      	mov	r0, r6
   d6736:	f7fe f851 	bl	d47dc <_malloc_r>
   d673a:	4606      	mov	r6, r0
   d673c:	b118      	cbz	r0, d6746 <_strdup_r+0x22>
   d673e:	462a      	mov	r2, r5
   d6740:	4621      	mov	r1, r4
   d6742:	f7ff ffcc 	bl	d66de <memcpy>
   d6746:	4630      	mov	r0, r6
   d6748:	bd70      	pop	{r4, r5, r6, pc}

000d674a <strlen>:
   d674a:	4603      	mov	r3, r0
   d674c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6750:	2a00      	cmp	r2, #0
   d6752:	d1fb      	bne.n	d674c <strlen+0x2>
   d6754:	1a18      	subs	r0, r3, r0
   d6756:	3801      	subs	r0, #1
   d6758:	4770      	bx	lr

000d675a <strncmp>:
   d675a:	b530      	push	{r4, r5, lr}
   d675c:	b182      	cbz	r2, d6780 <strncmp+0x26>
   d675e:	1e45      	subs	r5, r0, #1
   d6760:	3901      	subs	r1, #1
   d6762:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6766:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d676a:	42a3      	cmp	r3, r4
   d676c:	d106      	bne.n	d677c <strncmp+0x22>
   d676e:	43ec      	mvns	r4, r5
   d6770:	4414      	add	r4, r2
   d6772:	42e0      	cmn	r0, r4
   d6774:	d001      	beq.n	d677a <strncmp+0x20>
   d6776:	2b00      	cmp	r3, #0
   d6778:	d1f3      	bne.n	d6762 <strncmp+0x8>
   d677a:	461c      	mov	r4, r3
   d677c:	1b18      	subs	r0, r3, r4
   d677e:	bd30      	pop	{r4, r5, pc}
   d6780:	4610      	mov	r0, r2
   d6782:	bd30      	pop	{r4, r5, pc}

000d6784 <strnlen>:
   d6784:	b510      	push	{r4, lr}
   d6786:	4603      	mov	r3, r0
   d6788:	4401      	add	r1, r0
   d678a:	428b      	cmp	r3, r1
   d678c:	d004      	beq.n	d6798 <strnlen+0x14>
   d678e:	781a      	ldrb	r2, [r3, #0]
   d6790:	1c5c      	adds	r4, r3, #1
   d6792:	b10a      	cbz	r2, d6798 <strnlen+0x14>
   d6794:	4623      	mov	r3, r4
   d6796:	e7f8      	b.n	d678a <strnlen+0x6>
   d6798:	1a18      	subs	r0, r3, r0
   d679a:	bd10      	pop	{r4, pc}

000d679c <dynalib_user>:
   d679c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d67ac:	0000 0000 7773 7261 2d6d 6f66 6c6c 776f     ....swarm-follow
   d67bc:	7265 6f2d 6c6e 6e69 0065 7766 762d 7265     er-online.fw-ver
   d67cc:	6973 6e6f 6700 466f 726f 6177 6472 6700     sion.goForward.g
   d67dc:	426f 6361 006b 3076 382e 0000               oBack.v0.8..

000d67e8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d67f0:	4819 000d 481f 000d 4847 000d 482b 000d     .H...H..GH..+H..
   d6800:	481b 000d                                   .H..

000d6804 <_ZTVN5spark13EthernetClassE>:
	...
   d680c:	4de7 000d 4ddd 000d 4dd3 000d 4dc9 000d     .M...M...M...M..
   d681c:	4dbd 000d 4db1 000d 4da5 000d 4d9d 000d     .M...M...M...M..
   d682c:	4d93 000d 4d89 000d 557d 000d               .M...M..}U..

000d6838 <_ZTV7TwoWire>:
	...
   d6840:	4e05 000d 4e4f 000d 4e27 000d 4e07 000d     .N..ON..'N...N..
   d6850:	4e2f 000d 4e37 000d 4e3f 000d 4e47 000d     /N..7N..?N..GN..

000d6860 <_ZTV9IPAddress>:
	...
   d6868:	4e97 000d 4e89 000d 4e8b 000d 0066 6e6c     .N...N...N..f.ln
   d6878:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6888:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d6898:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d68a8:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d68b8:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d68c8:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d68d8:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d68e8:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d68f8:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d6908:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d6918:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d6928:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d6938:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6948:	6170 696e 0063 6c61 006c 0000               panic.all...

000d6954 <_ZTVN5spark9MeshClassE>:
	...
   d695c:	5031 000d 5027 000d 501d 000d 5013 000d     1P..'P...P...P..
   d696c:	5007 000d 4ffb 000d 4fef 000d 4fe7 000d     .P...O...O...O..
   d697c:	4fdd 000d 4fd3 000d 557d 000d 6666 3330     .O...O..}U..ff03
   d698c:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d699c:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d69ac:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d69b8 <_ZTVN5spark12NetworkClassE>:
	...
   d69c0:	5515 000d 551f 000d 5529 000d 5533 000d     .U...U..)U..3U..
   d69d0:	553d 000d 5549 000d 5555 000d 5561 000d     =U..IU..UU..aU..
   d69e0:	5569 000d 5573 000d 557d 000d               iU..sU..}U..

000d69ec <_ZTV8SPIClass>:
	...
   d69f4:	56ed 000d 56ef 000d                         .V...V..

000d69fc <_ZTV21StringPrintableHelper>:
	...
   d6a04:	572b 000d 572d 000d 5849 000d 581b 000d     +W..-W..IX...X..
   d6a14:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d6a24:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d6a34:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   d6a44:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   d6a54:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   d6a64:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   d6a74:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   d6a84:	6425 0000                                   %d..

000d6a88 <_ZTV3UDP>:
	...
   d6a90:	5fa9 000d 5fcd 000d 58d9 000d 5a03 000d     ._..._...X...Z..
   d6aa0:	58d1 000d 58ef 000d 590d 000d 5927 000d     .X...X...Y..'Y..
   d6ab0:	594b 000d 59e7 000d 5d25 000d 5a89 000d     KY...Y..%]...Z..
   d6ac0:	5c09 000d 58b9 000d 5f41 000d 5b8d 000d     .\...X..A_...[..
   d6ad0:	5ac1 000d 5f07 000d 5a2d 000d 58c7 000d     .Z..._..-Z...X..
   d6ae0:	5a69 000d 58cd 000d 5929 000d fff0 ffff     iZ...X..)Y......
   d6af0:	0000 0000 5943 000d                         ....CY..

000d6af8 <_ZTV11USARTSerial>:
	...
   d6b00:	5ff7 000d 601b 000d 6027 000d 5615 000d     ._...`..'`...V..
   d6b10:	6003 000d 600f 000d 6009 000d 6015 000d     .`...`...`...`..
   d6b20:	5ff9 000d 5ffd 000d                         ._..._..

000d6b28 <_ZTV9USBSerial>:
	...
   d6b30:	60d1 000d 6115 000d 60ef 000d 5615 000d     .`...a...`...V..
   d6b40:	60e9 000d 60d3 000d 60db 000d 610f 000d     .`...`...`...a..
   d6b50:	60e3 000d 60cd 000d                         .`...`..

000d6b58 <_ZSt7nothrow>:
   d6b58:	0000 0000                                   ....

000d6b5c <__sf_fake_stdin>:
	...

000d6b7c <__sf_fake_stdout>:
	...

000d6b9c <__sf_fake_stderr>:
	...
   d6bbc:	0043                                        C.

000d6bbe <link_const_variable_data_end>:
	...

000d6bc0 <link_constructors_location>:
   d6bc0:	000d4259 	.word	0x000d4259
   d6bc4:	000d4df1 	.word	0x000d4df1
   d6bc8:	000d4f99 	.word	0x000d4f99
   d6bcc:	000d54c9 	.word	0x000d54c9
   d6bd0:	000d5601 	.word	0x000d5601
   d6bd4:	000d56d1 	.word	0x000d56d1
   d6bd8:	000d5889 	.word	0x000d5889
   d6bdc:	000d58a5 	.word	0x000d58a5
   d6be0:	000d638d 	.word	0x000d638d
   d6be4:	000d6415 	.word	0x000d6415
   d6be8:	000d64d9 	.word	0x000d64d9
   d6bec:	000d655d 	.word	0x000d655d
   d6bf0:	000d65e1 	.word	0x000d65e1

000d6bf4 <link_constructors_end>:
	...
