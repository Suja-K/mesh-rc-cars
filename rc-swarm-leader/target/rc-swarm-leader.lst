
/Users/bsatrom/Development/particle/rc-mesh/rc-swarm-leader/target/rc-swarm-leader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016a44  2**0
                  CONTENTS
  3 .data         00000078  2003e338  000d69a0  0000e338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000440  2003e3b0  2003e3b0  0001e3b0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6a18  000d6a18  00016a18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6a40  000d6a40  00016a40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a4826  00000000  00000000  00016a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f1b6  00000000  00000000  000bb26a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014dd9  00000000  00000000  000ca420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020a0  00000000  00000000  000df1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003550  00000000  00000000  000e1299  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000300fa  00000000  00000000  000e47e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000230fd  00000000  00000000  001148e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d37a1  00000000  00000000  001379e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bbf0  00000000  00000000  0020b184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	34 65 0d 00                                         4e..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa41 	bl	d64b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa46 	bl	d64ca <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e338 	.word	0x2003e338
   d4048:	000d69a0 	.word	0x000d69a0
   d404c:	2003e3b0 	.word	0x2003e3b0
   d4050:	2003e3b0 	.word	0x2003e3b0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f81b 	bl	d6094 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6998 	.word	0x000d6998
   d4080:	000d6964 	.word	0x000d6964

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81a 	b.w	d40bc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f897 	bl	d41bc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bfcd 	b.w	d6030 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb2d 	b.w	d46f4 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bb2b 	b.w	d46f4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb31 	b.w	d4704 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb2f 	b.w	d4704 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <setup>:
int32_t lastRightFVal = 0;

String version = "v1.0";

void setup()
{
   d40bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   d40be:	f001 ff33 	bl	d5f28 <_Z16_fetch_usbserialv>
   d40c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c6:	f001 ff23 	bl	d5f10 <_ZN9USBSerial5beginEl>

  pinMode(leftReverse, INPUT);
   d40ca:	4b1f      	ldr	r3, [pc, #124]	; (d4148 <setup+0x8c>)
   d40cc:	2100      	movs	r1, #0
   d40ce:	8818      	ldrh	r0, [r3, #0]
   d40d0:	f002 f814 	bl	d60fc <pinMode>
  pinMode(leftForward, INPUT);
   d40d4:	4b1d      	ldr	r3, [pc, #116]	; (d414c <setup+0x90>)
   d40d6:	2100      	movs	r1, #0
   d40d8:	8818      	ldrh	r0, [r3, #0]
   d40da:	f002 f80f 	bl	d60fc <pinMode>
  pinMode(rightForward, INPUT);
   d40de:	4b1c      	ldr	r3, [pc, #112]	; (d4150 <setup+0x94>)
   d40e0:	2100      	movs	r1, #0
   d40e2:	8818      	ldrh	r0, [r3, #0]
   d40e4:	f002 f80a 	bl	d60fc <pinMode>
  pinMode(rightReverse, INPUT);
   d40e8:	4b1a      	ldr	r3, [pc, #104]	; (d4154 <setup+0x98>)
   d40ea:	2100      	movs	r1, #0
   d40ec:	8818      	ldrh	r0, [r3, #0]
   d40ee:	f002 f805 	bl	d60fc <pinMode>
   d40f2:	4b19      	ldr	r3, [pc, #100]	; (d4158 <setup+0x9c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f4:	4919      	ldr	r1, [pc, #100]	; (d415c <setup+0xa0>)
   d40f6:	681a      	ldr	r2, [r3, #0]
   d40f8:	4b19      	ldr	r3, [pc, #100]	; (d4160 <setup+0xa4>)
   d40fa:	781b      	ldrb	r3, [r3, #0]
   d40fc:	f88d 3000 	strb.w	r3, [sp]
   d4100:	a802      	add	r0, sp, #8
   d4102:	233c      	movs	r3, #60	; 0x3c
   d4104:	f000 fc8e 	bl	d4a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4108:	9c03      	ldr	r4, [sp, #12]
   d410a:	b17c      	cbz	r4, d412c <setup+0x70>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d410c:	6863      	ldr	r3, [r4, #4]
   d410e:	3b01      	subs	r3, #1
   d4110:	6063      	str	r3, [r4, #4]
   d4112:	b95b      	cbnz	r3, d412c <setup+0x70>
        {
          _M_dispose();
   d4114:	6823      	ldr	r3, [r4, #0]
   d4116:	4620      	mov	r0, r4
   d4118:	689b      	ldr	r3, [r3, #8]
   d411a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d411c:	68a3      	ldr	r3, [r4, #8]
   d411e:	3b01      	subs	r3, #1
   d4120:	60a3      	str	r3, [r4, #8]
   d4122:	b91b      	cbnz	r3, d412c <setup+0x70>
            _M_destroy();
   d4124:	6823      	ldr	r3, [r4, #0]
   d4126:	4620      	mov	r0, r4
   d4128:	68db      	ldr	r3, [r3, #12]
   d412a:	4798      	blx	r3

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d412c:	2308      	movs	r3, #8
   d412e:	f8ad 3008 	strh.w	r3, [sp, #8]
        extra.update = update_string_variable;
   d4132:	4b0c      	ldr	r3, [pc, #48]	; (d4164 <setup+0xa8>)
   d4134:	9303      	str	r3, [sp, #12]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d4136:	2204      	movs	r2, #4
   d4138:	ab02      	add	r3, sp, #8
   d413a:	4907      	ldr	r1, [pc, #28]	; (d4158 <setup+0x9c>)
   d413c:	480a      	ldr	r0, [pc, #40]	; (d4168 <setup+0xac>)
   d413e:	f000 fa71 	bl	d4624 <spark_variable>

  Particle.publish("swarm-leader-online", version);
  Particle.variable("fw-version", version);
}
   d4142:	b004      	add	sp, #16
   d4144:	bd10      	pop	{r4, pc}
   d4146:	bf00      	nop
   d4148:	2003e344 	.word	0x2003e344
   d414c:	2003e340 	.word	0x2003e340
   d4150:	2003e338 	.word	0x2003e338
   d4154:	2003e33c 	.word	0x2003e33c
   d4158:	2003e3bc 	.word	0x2003e3bc
   d415c:	000d6548 	.word	0x000d6548
   d4160:	2003e3b8 	.word	0x2003e3b8
   d4164:	000d40b7 	.word	0x000d40b7
   d4168:	000d655c 	.word	0x000d655c

000d416c <_Z8checkPiniPlPKc>:
  checkPin(rightReverse, &lastRightRVal, "rightR");
  checkPin(rightForward, &lastRightFVal, "rightF");
}

void checkPin(int pin, int32_t *lastVal, const char *event)
{
   d416c:	b570      	push	{r4, r5, r6, lr}
  int32_t pinVal = analogRead(pin);
   d416e:	b280      	uxth	r0, r0
  checkPin(rightReverse, &lastRightRVal, "rightR");
  checkPin(rightForward, &lastRightFVal, "rightF");
}

void checkPin(int pin, int32_t *lastVal, const char *event)
{
   d4170:	460e      	mov	r6, r1
   d4172:	b086      	sub	sp, #24
   d4174:	4615      	mov	r5, r2
  int32_t pinVal = analogRead(pin);
   d4176:	f001 ffd2 	bl	d611e <analogRead>

  if (pinVal != *lastVal)
   d417a:	6833      	ldr	r3, [r6, #0]
   d417c:	4298      	cmp	r0, r3
  checkPin(rightForward, &lastRightFVal, "rightF");
}

void checkPin(int pin, int32_t *lastVal, const char *event)
{
  int32_t pinVal = analogRead(pin);
   d417e:	4604      	mov	r4, r0

  if (pinVal != *lastVal)
   d4180:	d015      	beq.n	d41ae <_Z8checkPiniPlPKc+0x42>
  {
    *lastVal = pinVal;

    Mesh.publish(event, String(pinVal));
   d4182:	4601      	mov	r1, r0
{
  int32_t pinVal = analogRead(pin);

  if (pinVal != *lastVal)
  {
    *lastVal = pinVal;
   d4184:	6030      	str	r0, [r6, #0]

    Mesh.publish(event, String(pinVal));
   d4186:	220a      	movs	r2, #10
   d4188:	a802      	add	r0, sp, #8
   d418a:	f001 fa00 	bl	d558e <_ZN6StringC1Elh>
   d418e:	9a02      	ldr	r2, [sp, #8]
   d4190:	4808      	ldr	r0, [pc, #32]	; (d41b4 <_Z8checkPiniPlPKc+0x48>)
   d4192:	4629      	mov	r1, r5
   d4194:	f000 ff9a 	bl	d50cc <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4198:	a802      	add	r0, sp, #8
   d419a:	f001 f98d 	bl	d54b8 <_ZN6StringD1Ev>
    Serial.printlnf("%s Val: %i", event, pinVal);
   d419e:	f001 fec3 	bl	d5f28 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41a2:	9400      	str	r4, [sp, #0]
   d41a4:	462b      	mov	r3, r5
   d41a6:	4a04      	ldr	r2, [pc, #16]	; (d41b8 <_Z8checkPiniPlPKc+0x4c>)
   d41a8:	2101      	movs	r1, #1
   d41aa:	f001 f911 	bl	d53d0 <_ZN5Print11printf_implEbPKcz>
  }
   d41ae:	b006      	add	sp, #24
   d41b0:	bd70      	pop	{r4, r5, r6, pc}
   d41b2:	bf00      	nop
   d41b4:	2003e3ec 	.word	0x2003e3ec
   d41b8:	000d6567 	.word	0x000d6567

000d41bc <loop>:
  Particle.publish("swarm-leader-online", version);
  Particle.variable("fw-version", version);
}

void loop()
{
   d41bc:	b508      	push	{r3, lr}
  checkPin(leftReverse, &lastLeftRVal, "leftR");
   d41be:	4b0d      	ldr	r3, [pc, #52]	; (d41f4 <loop+0x38>)
   d41c0:	4a0d      	ldr	r2, [pc, #52]	; (d41f8 <loop+0x3c>)
   d41c2:	6818      	ldr	r0, [r3, #0]
   d41c4:	490d      	ldr	r1, [pc, #52]	; (d41fc <loop+0x40>)
   d41c6:	f7ff ffd1 	bl	d416c <_Z8checkPiniPlPKc>
  checkPin(leftForward, &lastLeftFVal, "leftF");
   d41ca:	4b0d      	ldr	r3, [pc, #52]	; (d4200 <loop+0x44>)
   d41cc:	4a0d      	ldr	r2, [pc, #52]	; (d4204 <loop+0x48>)
   d41ce:	6818      	ldr	r0, [r3, #0]
   d41d0:	490d      	ldr	r1, [pc, #52]	; (d4208 <loop+0x4c>)
   d41d2:	f7ff ffcb 	bl	d416c <_Z8checkPiniPlPKc>
  checkPin(rightReverse, &lastRightRVal, "rightR");
   d41d6:	4b0d      	ldr	r3, [pc, #52]	; (d420c <loop+0x50>)
   d41d8:	4a0d      	ldr	r2, [pc, #52]	; (d4210 <loop+0x54>)
   d41da:	6818      	ldr	r0, [r3, #0]
   d41dc:	490d      	ldr	r1, [pc, #52]	; (d4214 <loop+0x58>)
   d41de:	f7ff ffc5 	bl	d416c <_Z8checkPiniPlPKc>
  checkPin(rightForward, &lastRightFVal, "rightF");
   d41e2:	4b0d      	ldr	r3, [pc, #52]	; (d4218 <loop+0x5c>)
   d41e4:	4a0d      	ldr	r2, [pc, #52]	; (d421c <loop+0x60>)
   d41e6:	6818      	ldr	r0, [r3, #0]
   d41e8:	490d      	ldr	r1, [pc, #52]	; (d4220 <loop+0x64>)
}
   d41ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void loop()
{
  checkPin(leftReverse, &lastLeftRVal, "leftR");
  checkPin(leftForward, &lastLeftFVal, "leftF");
  checkPin(rightReverse, &lastRightRVal, "rightR");
  checkPin(rightForward, &lastRightFVal, "rightF");
   d41ee:	f7ff bfbd 	b.w	d416c <_Z8checkPiniPlPKc>
   d41f2:	bf00      	nop
   d41f4:	2003e344 	.word	0x2003e344
   d41f8:	000d6572 	.word	0x000d6572
   d41fc:	2003e3b4 	.word	0x2003e3b4
   d4200:	2003e340 	.word	0x2003e340
   d4204:	000d6578 	.word	0x000d6578
   d4208:	2003e3d0 	.word	0x2003e3d0
   d420c:	2003e33c 	.word	0x2003e33c
   d4210:	000d657e 	.word	0x000d657e
   d4214:	2003e3cc 	.word	0x2003e3cc
   d4218:	2003e338 	.word	0x2003e338
   d421c:	000d6585 	.word	0x000d6585
   d4220:	2003e3d4 	.word	0x2003e3d4

000d4224 <_GLOBAL__sub_I_leftReverse>:
    *lastVal = pinVal;

    Mesh.publish(event, String(pinVal));
    Serial.printlnf("%s Val: %i", event, pinVal);
  }
   d4224:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4226:	4b08      	ldr	r3, [pc, #32]	; (d4248 <_GLOBAL__sub_I_leftReverse+0x24>)
int32_t lastLeftRVal = 0;
int32_t lastLeftFVal = 0;
int32_t lastRightRVal = 0;
int32_t lastRightFVal = 0;

String version = "v1.0";
   d4228:	4c08      	ldr	r4, [pc, #32]	; (d424c <_GLOBAL__sub_I_leftReverse+0x28>)
   d422a:	2200      	movs	r2, #0
   d422c:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d422e:	f000 f855 	bl	d42dc <HAL_Pin_Map>
   d4232:	4907      	ldr	r1, [pc, #28]	; (d4250 <_GLOBAL__sub_I_leftReverse+0x2c>)
   d4234:	4620      	mov	r0, r4
   d4236:	f001 f986 	bl	d5546 <_ZN6StringC1EPK19__FlashStringHelper>
   d423a:	4620      	mov	r0, r4
   d423c:	4a05      	ldr	r2, [pc, #20]	; (d4254 <_GLOBAL__sub_I_leftReverse+0x30>)
   d423e:	4906      	ldr	r1, [pc, #24]	; (d4258 <_GLOBAL__sub_I_leftReverse+0x34>)
    *lastVal = pinVal;

    Mesh.publish(event, String(pinVal));
    Serial.printlnf("%s Val: %i", event, pinVal);
  }
   d4240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int32_t lastLeftRVal = 0;
int32_t lastLeftFVal = 0;
int32_t lastRightRVal = 0;
int32_t lastRightFVal = 0;

String version = "v1.0";
   d4244:	f001 bfc4 	b.w	d61d0 <__aeabi_atexit>
   d4248:	2003e3b8 	.word	0x2003e3b8
   d424c:	2003e3bc 	.word	0x2003e3bc
   d4250:	000d658c 	.word	0x000d658c
   d4254:	2003e3b0 	.word	0x2003e3b0
   d4258:	000d54b9 	.word	0x000d54b9

000d425c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <os_thread_is_current+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	689b      	ldr	r3, [r3, #8]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030248 	.word	0x00030248

000d426c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <os_thread_join+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	691b      	ldr	r3, [r3, #16]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030248 	.word	0x00030248

000d427c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <os_thread_cleanup+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	695b      	ldr	r3, [r3, #20]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030248 	.word	0x00030248

000d428c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <os_mutex_create+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030248 	.word	0x00030248

000d429c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <os_mutex_recursive_create+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030248 	.word	0x00030248

000d42ac <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <os_mutex_recursive_lock+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030248 	.word	0x00030248

000d42bc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <os_mutex_recursive_unlock+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030248 	.word	0x00030248

000d42cc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	695b      	ldr	r3, [r3, #20]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030218 	.word	0x00030218

000d42dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <HAL_Pin_Map+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	681b      	ldr	r3, [r3, #0]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	0003022c 	.word	0x0003022c

000d42ec <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_Validate_Pin_Function+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	685b      	ldr	r3, [r3, #4]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003022c 	.word	0x0003022c

000d42fc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_Pin_Mode+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	689b      	ldr	r3, [r3, #8]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003022c 	.word	0x0003022c

000d430c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_ADC_Read+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	0003022c 	.word	0x0003022c

000d431c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_I2C_Write_Data+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	6a1b      	ldr	r3, [r3, #32]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030228 	.word	0x00030228

000d432c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_I2C_Available_Data+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030228 	.word	0x00030228

000d433c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_I2C_Read_Data+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030228 	.word	0x00030228

000d434c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_I2C_Peek_Data+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030228 	.word	0x00030228

000d435c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_I2C_Flush_Data+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030228 	.word	0x00030228

000d436c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_I2C_Is_Enabled+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030228 	.word	0x00030228

000d437c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_I2C_Init+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030228 	.word	0x00030228

000d438c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <if_name_to_index+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	691b      	ldr	r3, [r3, #16]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003026c 	.word	0x0003026c

000d439c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <if_index_to_name+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	695b      	ldr	r3, [r3, #20]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003026c 	.word	0x0003026c

000d43ac <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <if_get_by_index+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	699b      	ldr	r3, [r3, #24]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003026c 	.word	0x0003026c

000d43bc <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <if_get_addrs+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003026c 	.word	0x0003026c

000d43cc <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <if_free_if_addrs+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003026c 	.word	0x0003026c

000d43dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <inet_inet_ntop+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	695b      	ldr	r3, [r3, #20]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030264 	.word	0x00030264

000d43ec <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <inet_inet_pton+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	699b      	ldr	r3, [r3, #24]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030264 	.word	0x00030264

000d43fc <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <inet_htonl+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	6a1b      	ldr	r3, [r3, #32]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030264 	.word	0x00030264

000d440c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <inet_ntohs+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030264 	.word	0x00030264

000d441c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <inet_htons+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030264 	.word	0x00030264

000d442c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <netdb_freeaddrinfo+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	689b      	ldr	r3, [r3, #8]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030268 	.word	0x00030268

000d443c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <netdb_getaddrinfo+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	68db      	ldr	r3, [r3, #12]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030268 	.word	0x00030268

000d444c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <sock_bind+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	685b      	ldr	r3, [r3, #4]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030238 	.word	0x00030238

000d445c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <sock_setsockopt+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	699b      	ldr	r3, [r3, #24]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030238 	.word	0x00030238

000d446c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <sock_close+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	69db      	ldr	r3, [r3, #28]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030238 	.word	0x00030238

000d447c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <sock_recvfrom+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030238 	.word	0x00030238

000d448c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <sock_sendto+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030238 	.word	0x00030238

000d449c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <sock_socket+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030238 	.word	0x00030238

000d44ac <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_SPI_Init+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	69db      	ldr	r3, [r3, #28]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030230 	.word	0x00030230

000d44bc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_SPI_Is_Enabled+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6a1b      	ldr	r3, [r3, #32]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030230 	.word	0x00030230

000d44cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_USART_Init+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	681b      	ldr	r3, [r3, #0]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003023c 	.word	0x0003023c

000d44dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_USART_Write_Data+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	68db      	ldr	r3, [r3, #12]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	0003023c 	.word	0x0003023c

000d44ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_USART_Available_Data+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	691b      	ldr	r3, [r3, #16]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003023c 	.word	0x0003023c

000d44fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_USART_Read_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	695b      	ldr	r3, [r3, #20]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003023c 	.word	0x0003023c

000d450c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_USART_Peek_Data+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	699b      	ldr	r3, [r3, #24]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003023c 	.word	0x0003023c

000d451c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_USART_Flush_Data+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	69db      	ldr	r3, [r3, #28]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003023c 	.word	0x0003023c

000d452c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_USART_Is_Enabled+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6a1b      	ldr	r3, [r3, #32]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003023c 	.word	0x0003023c

000d453c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_USART_Available_Data_For_Write+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003023c 	.word	0x0003023c

000d454c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <HAL_USB_USART_Init+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	681b      	ldr	r3, [r3, #0]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003024c 	.word	0x0003024c

000d455c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_USB_USART_Begin+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	685b      	ldr	r3, [r3, #4]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003024c 	.word	0x0003024c

000d456c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_USB_USART_Available_Data+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	691b      	ldr	r3, [r3, #16]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003024c 	.word	0x0003024c

000d457c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	695b      	ldr	r3, [r3, #20]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003024c 	.word	0x0003024c

000d458c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_USB_USART_Receive_Data+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	699b      	ldr	r3, [r3, #24]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	0003024c 	.word	0x0003024c

000d459c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USB_USART_Send_Data+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	69db      	ldr	r3, [r3, #28]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003024c 	.word	0x0003024c

000d45ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USB_USART_Flush_Data+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6a1b      	ldr	r3, [r3, #32]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003024c 	.word	0x0003024c

000d45bc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <log_message+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030260 	.word	0x00030260

000d45cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <set_system_mode+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	685b      	ldr	r3, [r3, #4]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030220 	.word	0x00030220

000d45dc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <application_thread_current+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030220 	.word	0x00030220

000d45ec <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <application_thread_invoke+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030220 	.word	0x00030220

000d45fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b03      	ldr	r3, [pc, #12]	; (d460c <system_ctrl_set_app_request_handler+0x10>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4606:	9301      	str	r3, [sp, #4]
   d4608:	bd08      	pop	{r3, pc}
   d460a:	0000      	.short	0x0000
   d460c:	00030220 	.word	0x00030220

000d4610 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b03      	ldr	r3, [pc, #12]	; (d4620 <system_ctrl_set_result+0x10>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d461a:	9301      	str	r3, [sp, #4]
   d461c:	bd08      	pop	{r3, pc}
   d461e:	0000      	.short	0x0000
   d4620:	00030220 	.word	0x00030220

000d4624 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <spark_variable+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030244 	.word	0x00030244

000d4634 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <spark_send_event+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6a1b      	ldr	r3, [r3, #32]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030244 	.word	0x00030244

000d4644 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030244 	.word	0x00030244

000d4654 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_connect+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	685b      	ldr	r3, [r3, #4]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <network_connecting+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	689b      	ldr	r3, [r3, #8]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030240 	.word	0x00030240

000d4674 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <network_disconnect+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	68db      	ldr	r3, [r3, #12]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030240 	.word	0x00030240

000d4684 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <network_ready+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	691b      	ldr	r3, [r3, #16]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030240 	.word	0x00030240

000d4694 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <network_on+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030240 	.word	0x00030240

000d46a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <network_off+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	699b      	ldr	r3, [r3, #24]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030240 	.word	0x00030240

000d46b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <network_listen+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	69db      	ldr	r3, [r3, #28]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030240 	.word	0x00030240

000d46c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <network_listening+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6a1b      	ldr	r3, [r3, #32]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030240 	.word	0x00030240

000d46d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <network_set_listen_timeout+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030240 	.word	0x00030240

000d46e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <network_get_listen_timeout+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030240 	.word	0x00030240

000d46f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <malloc+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	681b      	ldr	r3, [r3, #0]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003021c 	.word	0x0003021c

000d4704 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <free+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003021c 	.word	0x0003021c

000d4714 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <realloc+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	689b      	ldr	r3, [r3, #8]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003021c 	.word	0x0003021c

000d4724 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <vsnprintf+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003021c 	.word	0x0003021c

000d4734 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <abort+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003021c 	.word	0x0003021c

000d4744 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <_malloc_r+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003021c 	.word	0x0003021c

000d4754 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4754:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4756:	6883      	ldr	r3, [r0, #8]
   d4758:	4604      	mov	r4, r0
   d475a:	b90b      	cbnz	r3, d4760 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d475c:	f001 fd3d 	bl	d61da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4760:	68c3      	ldr	r3, [r0, #12]
   d4762:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4764:	68a3      	ldr	r3, [r4, #8]
   d4766:	b11b      	cbz	r3, d4770 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4768:	2203      	movs	r2, #3
   d476a:	4621      	mov	r1, r4
   d476c:	4620      	mov	r0, r4
   d476e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4770:	4620      	mov	r0, r4
}
   d4772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4776:	f7ff bc92 	b.w	d409e <_ZdlPv>

000d477a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d477a:	4770      	bx	lr

000d477c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d477c:	2000      	movs	r0, #0
   d477e:	4770      	bx	lr

000d4780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
   d4784:	f7ff fc8b 	bl	d409e <_ZdlPv>
   d4788:	4620      	mov	r0, r4
   d478a:	bd10      	pop	{r4, pc}

000d478c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d478c:	b508      	push	{r3, lr}
      { delete this; }
   d478e:	b108      	cbz	r0, d4794 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4790:	f7ff fff6 	bl	d4780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4794:	bd08      	pop	{r3, pc}

000d4796 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4796:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4798:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d479a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d479c:	b113      	cbz	r3, d47a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d479e:	2203      	movs	r2, #3
   d47a0:	4601      	mov	r1, r0
   d47a2:	4798      	blx	r3
    }
   d47a4:	4620      	mov	r0, r4
   d47a6:	bd10      	pop	{r4, pc}

000d47a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d47a8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d47aa:	68c4      	ldr	r4, [r0, #12]
   d47ac:	b1d4      	cbz	r4, d47e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d47ae:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d47b0:	2b02      	cmp	r3, #2
   d47b2:	d102      	bne.n	d47ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d47b4:	68e0      	ldr	r0, [r4, #12]
   d47b6:	f7ff ffa5 	bl	d4704 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d47ba:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d47bc:	b12d      	cbz	r5, d47ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d47be:	4628      	mov	r0, r5
   d47c0:	f7ff ffe9 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
   d47c4:	4628      	mov	r0, r5
   d47c6:	f7ff fc6a 	bl	d409e <_ZdlPv>
   d47ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d47cc:	b12d      	cbz	r5, d47da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d47ce:	4628      	mov	r0, r5
   d47d0:	f7ff ffe1 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
   d47d4:	4628      	mov	r0, r5
   d47d6:	f7ff fc62 	bl	d409e <_ZdlPv>
   d47da:	4620      	mov	r0, r4
   d47dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d47e0:	f7ff bc5d 	b.w	d409e <_ZdlPv>
   d47e4:	bd38      	pop	{r3, r4, r5, pc}

000d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47e6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47e8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47ea:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d47ec:	b17c      	cbz	r4, d480e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47ee:	6863      	ldr	r3, [r4, #4]
   d47f0:	3b01      	subs	r3, #1
   d47f2:	6063      	str	r3, [r4, #4]
   d47f4:	b95b      	cbnz	r3, d480e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d47f6:	6823      	ldr	r3, [r4, #0]
   d47f8:	4620      	mov	r0, r4
   d47fa:	689b      	ldr	r3, [r3, #8]
   d47fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47fe:	68a3      	ldr	r3, [r4, #8]
   d4800:	3b01      	subs	r3, #1
   d4802:	60a3      	str	r3, [r4, #8]
   d4804:	b91b      	cbnz	r3, d480e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4806:	6823      	ldr	r3, [r4, #0]
   d4808:	4620      	mov	r0, r4
   d480a:	68db      	ldr	r3, [r3, #12]
   d480c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d480e:	4628      	mov	r0, r5
   d4810:	bd38      	pop	{r3, r4, r5, pc}

000d4812 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4812:	b513      	push	{r0, r1, r4, lr}
   d4814:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4816:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d481a:	2300      	movs	r3, #0
   d481c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d481e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4820:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4822:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4824:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4826:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4828:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d482a:	f7ff ffdc 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d482e:	4620      	mov	r0, r4
   d4830:	b002      	add	sp, #8
   d4832:	bd10      	pop	{r4, pc}

000d4834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4834:	680b      	ldr	r3, [r1, #0]
   d4836:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4838:	b113      	cbz	r3, d4840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d483a:	685a      	ldr	r2, [r3, #4]
   d483c:	3201      	adds	r2, #1
   d483e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4840:	4770      	bx	lr

000d4842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4844:	460c      	mov	r4, r1
   d4846:	ad02      	add	r5, sp, #8
   d4848:	f854 3b04 	ldr.w	r3, [r4], #4
   d484c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4850:	4606      	mov	r6, r0
   d4852:	460f      	mov	r7, r1
   d4854:	a801      	add	r0, sp, #4
   d4856:	4621      	mov	r1, r4
   d4858:	f7ff ffec 	bl	d4834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d485c:	4629      	mov	r1, r5
   d485e:	4630      	mov	r0, r6
   d4860:	f7ff ffd7 	bl	d4812 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4864:	a801      	add	r0, sp, #4
   d4866:	f7ff ffbe 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d486a:	4620      	mov	r0, r4
   d486c:	f7ff ffbb 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4870:	4638      	mov	r0, r7
   d4872:	f7ff fc14 	bl	d409e <_ZdlPv>
        return p;
    }
   d4876:	4630      	mov	r0, r6
   d4878:	b003      	add	sp, #12
   d487a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d487c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d487c:	b513      	push	{r0, r1, r4, lr}
   d487e:	460b      	mov	r3, r1
   d4880:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4882:	c803      	ldmia	r0, {r0, r1}
   d4884:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4888:	e893 0003 	ldmia.w	r3, {r0, r1}
   d488c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4890:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4894:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4898:	b002      	add	sp, #8
   d489a:	bd10      	pop	{r4, pc}

000d489c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d489c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d489e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d48a0:	b90a      	cbnz	r2, d48a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d48a2:	f001 fc9a 	bl	d61da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48a6:	68c3      	ldr	r3, [r0, #12]
    }
   d48a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48ac:	4718      	bx	r3

000d48ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d48ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d48b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d48b2:	f100 0110 	add.w	r1, r0, #16
   d48b6:	f7ff fff1 	bl	d489c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d48ba:	bd08      	pop	{r3, pc}

000d48bc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d48bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d48be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d48c0:	b90a      	cbnz	r2, d48c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d48c2:	f001 fc8a 	bl	d61da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48c6:	68c3      	ldr	r3, [r0, #12]
    }
   d48c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48cc:	4718      	bx	r3

000d48ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d48ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d48d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d48d2:	f100 0110 	add.w	r1, r0, #16
   d48d6:	f7ff fff1 	bl	d48bc <_ZNKSt8functionIFvRKbEEclES1_>
   d48da:	bd08      	pop	{r3, pc}

000d48dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d48dc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48de:	2300      	movs	r3, #0
   d48e0:	6083      	str	r3, [r0, #8]
   d48e2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d48e4:	4604      	mov	r4, r0
   d48e6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d48e8:	b12b      	cbz	r3, d48f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d48ea:	2202      	movs	r2, #2
   d48ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d48ee:	68eb      	ldr	r3, [r5, #12]
   d48f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d48f2:	68ab      	ldr	r3, [r5, #8]
   d48f4:	60a3      	str	r3, [r4, #8]
	}
    }
   d48f6:	4620      	mov	r0, r4
   d48f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d48fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d48fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4900:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4904:	b086      	sub	sp, #24
   d4906:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4908:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d490c:	808b      	strh	r3, [r1, #4]
   d490e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4910:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4912:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4916:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4918:	f04f 0002 	mov.w	r0, #2
   d491c:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4920:	4299      	cmp	r1, r3
   d4922:	d103      	bne.n	d492c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4924:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4928:	2d00      	cmp	r5, #0
   d492a:	d1f7      	bne.n	d491c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d492c:	d002      	beq.n	d4934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d492e:	f88d 1000 	strb.w	r1, [sp]
   d4932:	e06a      	b.n	d4a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4934:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4938:	bf1e      	ittt	ne
   d493a:	60e7      	strne	r7, [r4, #12]
   d493c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d493e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4940:	2301      	movs	r3, #1
   d4942:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4946:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4948:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d494a:	f104 0308 	add.w	r3, r4, #8
   d494e:	f3bf 8f5f 	dmb	sy
   d4952:	e853 6f00 	ldrex	r6, [r3]
   d4956:	e843 0200 	strex	r2, r0, [r3]
   d495a:	2a00      	cmp	r2, #0
   d495c:	d1f9      	bne.n	d4952 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d495e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4962:	2e00      	cmp	r6, #0
   d4964:	d051      	beq.n	d4a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4966:	f7ff fe39 	bl	d45dc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d496a:	b120      	cbz	r0, d4976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d496c:	4629      	mov	r1, r5
   d496e:	4630      	mov	r0, r6
   d4970:	f7ff ff94 	bl	d489c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4974:	e043      	b.n	d49fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4976:	4631      	mov	r1, r6
   d4978:	4668      	mov	r0, sp
   d497a:	f7ff ffaf 	bl	d48dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d497e:	68e0      	ldr	r0, [r4, #12]
   d4980:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4984:	b108      	cbz	r0, d498a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4986:	f001 fdb1 	bl	d64ec <strdup>
   d498a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d498c:	2010      	movs	r0, #16
   d498e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4992:	f7ff fb80 	bl	d4096 <_Znwj>
   d4996:	4605      	mov	r5, r0
   d4998:	b330      	cbz	r0, d49e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d499a:	f04f 0800 	mov.w	r8, #0
   d499e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d49a2:	2018      	movs	r0, #24
   d49a4:	f7ff fb77 	bl	d4096 <_Znwj>
   d49a8:	4604      	mov	r4, r0
   d49aa:	b1c0      	cbz	r0, d49de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49ac:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d49b0:	4601      	mov	r1, r0
   d49b2:	4668      	mov	r0, sp
   d49b4:	f7ff ff62 	bl	d487c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49b8:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d49ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d49bc:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d49c0:	9202      	str	r2, [sp, #8]
   d49c2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d49c4:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d49ca:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d49cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d49d0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d49d4:	9b04      	ldr	r3, [sp, #16]
   d49d6:	9203      	str	r2, [sp, #12]
   d49d8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d49da:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d49de:	4b0e      	ldr	r3, [pc, #56]	; (d4a18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d49e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d49e2:	4b0e      	ldr	r3, [pc, #56]	; (d4a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d49e4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d49e6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d49e8:	9804      	ldr	r0, [sp, #16]
   d49ea:	f7ff fe8b 	bl	d4704 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49ee:	4668      	mov	r0, sp
   d49f0:	f7ff fed1 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d49f4:	2200      	movs	r2, #0
   d49f6:	4629      	mov	r1, r5
   d49f8:	4809      	ldr	r0, [pc, #36]	; (d4a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d49fa:	f7ff fdf7 	bl	d45ec <application_thread_invoke>
   d49fe:	4630      	mov	r0, r6
   d4a00:	f7ff fec9 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4a04:	4630      	mov	r0, r6
   d4a06:	f7ff fb4a 	bl	d409e <_ZdlPv>
   d4a0a:	4638      	mov	r0, r7
   d4a0c:	f7ff fe7a 	bl	d4704 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4a10:	b006      	add	sp, #24
   d4a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a16:	bf00      	nop
   d4a18:	000d48af 	.word	0x000d48af
   d4a1c:	000d4b0d 	.word	0x000d4b0d
   d4a20:	000d4755 	.word	0x000d4755

000d4a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a28:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a2a:	ad07      	add	r5, sp, #28
   d4a2c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4a30:	4606      	mov	r6, r0
   d4a32:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4a34:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a36:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4a38:	460f      	mov	r7, r1
   d4a3a:	4690      	mov	r8, r2
   d4a3c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a40:	f8c5 b004 	str.w	fp, [r5, #4]
   d4a44:	f8c5 b008 	str.w	fp, [r5, #8]
   d4a48:	9307      	str	r3, [sp, #28]
   d4a4a:	f7ff fb24 	bl	d4096 <_Znwj>
   d4a4e:	4604      	mov	r4, r0
   d4a50:	b138      	cbz	r0, d4a62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4a52:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a56:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4a5a:	f8c0 b004 	str.w	fp, [r0, #4]
   d4a5e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a62:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a64:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4a66:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a68:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a6a:	f7ff fb14 	bl	d4096 <_Znwj>
   d4a6e:	b128      	cbz	r0, d4a7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4a70:	2301      	movs	r3, #1
   d4a72:	6043      	str	r3, [r0, #4]
   d4a74:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4a76:	4b23      	ldr	r3, [pc, #140]	; (d4b04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4a78:	6003      	str	r3, [r0, #0]
   d4a7a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a7c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4a7e:	4b22      	ldr	r3, [pc, #136]	; (d4b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4a80:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4a82:	2008      	movs	r0, #8
   d4a84:	f7ff fb07 	bl	d4096 <_Znwj>
   d4a88:	4604      	mov	r4, r0
   d4a8a:	b128      	cbz	r0, d4a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a8c:	9b03      	ldr	r3, [sp, #12]
   d4a8e:	f840 3b04 	str.w	r3, [r0], #4
   d4a92:	a904      	add	r1, sp, #16
   d4a94:	f7ff fece 	bl	d4834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4a98:	9500      	str	r5, [sp, #0]
   d4a9a:	fa5f f38a 	uxtb.w	r3, sl
   d4a9e:	464a      	mov	r2, r9
   d4aa0:	4641      	mov	r1, r8
   d4aa2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4aa4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4aa6:	f7ff fdc5 	bl	d4634 <spark_send_event>
   d4aaa:	b9b8      	cbnz	r0, d4adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4aac:	9b03      	ldr	r3, [sp, #12]
   d4aae:	785b      	ldrb	r3, [r3, #1]
   d4ab0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4ab4:	b993      	cbnz	r3, d4adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ab6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4aba:	a905      	add	r1, sp, #20
   d4abc:	a803      	add	r0, sp, #12
   d4abe:	9205      	str	r2, [sp, #20]
   d4ac0:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ac4:	f7ff ff1a 	bl	d48fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ac8:	9805      	ldr	r0, [sp, #20]
   d4aca:	f7ff fe1b 	bl	d4704 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4ace:	a805      	add	r0, sp, #20
   d4ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ad2:	f7ff feb6 	bl	d4842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ad6:	a806      	add	r0, sp, #24
   d4ad8:	f7ff fe85 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4adc:	9b03      	ldr	r3, [sp, #12]
   d4ade:	9305      	str	r3, [sp, #20]
   d4ae0:	a904      	add	r1, sp, #16
   d4ae2:	a806      	add	r0, sp, #24
   d4ae4:	f7ff fea6 	bl	d4834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4ae8:	a905      	add	r1, sp, #20
   d4aea:	4630      	mov	r0, r6
   d4aec:	f7ff fe91 	bl	d4812 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4af0:	a806      	add	r0, sp, #24
   d4af2:	f7ff fe78 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4af6:	a804      	add	r0, sp, #16
   d4af8:	f7ff fe75 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4afc:	4630      	mov	r0, r6
   d4afe:	b00b      	add	sp, #44	; 0x2c
   d4b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b04:	000d659c 	.word	0x000d659c
   d4b08:	000d4c75 	.word	0x000d4c75

000d4b0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4b0c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b10:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4b12:	d006      	beq.n	d4b22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4b14:	2a03      	cmp	r2, #3
   d4b16:	d017      	beq.n	d4b48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4b18:	2a01      	cmp	r2, #1
   d4b1a:	d120      	bne.n	d4b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b1c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b1e:	6003      	str	r3, [r0, #0]
	      break;
   d4b20:	e01d      	b.n	d4b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4b22:	2018      	movs	r0, #24
   d4b24:	680e      	ldr	r6, [r1, #0]
   d4b26:	f7ff fab6 	bl	d4096 <_Znwj>
   d4b2a:	4605      	mov	r5, r0
   d4b2c:	b150      	cbz	r0, d4b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4b2e:	4631      	mov	r1, r6
   d4b30:	f7ff fed4 	bl	d48dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4b34:	6930      	ldr	r0, [r6, #16]
   d4b36:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4b3a:	b108      	cbz	r0, d4b40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4b3c:	f001 fcd6 	bl	d64ec <strdup>
   d4b40:	6128      	str	r0, [r5, #16]
   d4b42:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4b44:	6025      	str	r5, [r4, #0]
   d4b46:	e00a      	b.n	d4b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4b48:	6804      	ldr	r4, [r0, #0]
   d4b4a:	b144      	cbz	r4, d4b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4b4c:	6920      	ldr	r0, [r4, #16]
   d4b4e:	f7ff fdd9 	bl	d4704 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b52:	4620      	mov	r0, r4
   d4b54:	f7ff fe1f 	bl	d4796 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4b58:	4620      	mov	r0, r4
   d4b5a:	f7ff faa0 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4b5e:	2000      	movs	r0, #0
   d4b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b62 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b62:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b64:	2300      	movs	r3, #0
   d4b66:	6083      	str	r3, [r0, #8]
   d4b68:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b6a:	4604      	mov	r4, r0
   d4b6c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b6e:	b12b      	cbz	r3, d4b7c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b70:	2202      	movs	r2, #2
   d4b72:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b74:	68eb      	ldr	r3, [r5, #12]
   d4b76:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b78:	68ab      	ldr	r3, [r5, #8]
   d4b7a:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	bd38      	pop	{r3, r4, r5, pc}

000d4b80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4b80:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b82:	b570      	push	{r4, r5, r6, lr}
   d4b84:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4b86:	d006      	beq.n	d4b96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4b88:	2a03      	cmp	r2, #3
   d4b8a:	d011      	beq.n	d4bb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4b8c:	2a01      	cmp	r2, #1
   d4b8e:	d117      	bne.n	d4bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b90:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b92:	6003      	str	r3, [r0, #0]
	      break;
   d4b94:	e014      	b.n	d4bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4b96:	2014      	movs	r0, #20
   d4b98:	680e      	ldr	r6, [r1, #0]
   d4b9a:	f7ff fa7c 	bl	d4096 <_Znwj>
   d4b9e:	4605      	mov	r5, r0
   d4ba0:	b120      	cbz	r0, d4bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4ba2:	4631      	mov	r1, r6
   d4ba4:	f7ff ffdd 	bl	d4b62 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4ba8:	7c33      	ldrb	r3, [r6, #16]
   d4baa:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4bac:	6025      	str	r5, [r4, #0]
   d4bae:	e007      	b.n	d4bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4bb0:	6804      	ldr	r4, [r0, #0]
   d4bb2:	b12c      	cbz	r4, d4bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	f7ff fdee 	bl	d4796 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4bba:	4620      	mov	r0, r4
   d4bbc:	f7ff fa6f 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4bc0:	2000      	movs	r0, #0
   d4bc2:	bd70      	pop	{r4, r5, r6, pc}

000d4bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4bc4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4bc6:	2300      	movs	r3, #0
   d4bc8:	b087      	sub	sp, #28
   d4bca:	460c      	mov	r4, r1
   d4bcc:	f3bf 8f5f 	dmb	sy
   d4bd0:	e850 6f00 	ldrex	r6, [r0]
   d4bd4:	e840 3200 	strex	r2, r3, [r0]
   d4bd8:	2a00      	cmp	r2, #0
   d4bda:	d1f9      	bne.n	d4bd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4bdc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4be0:	2e00      	cmp	r6, #0
   d4be2:	d03e      	beq.n	d4c62 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4be4:	4618      	mov	r0, r3
   d4be6:	f7ff fcf9 	bl	d45dc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4bea:	4607      	mov	r7, r0
   d4bec:	b120      	cbz	r0, d4bf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4bee:	4621      	mov	r1, r4
   d4bf0:	4630      	mov	r0, r6
   d4bf2:	f7ff fe63 	bl	d48bc <_ZNKSt8functionIFvRKbEEclES1_>
   d4bf6:	e02e      	b.n	d4c56 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4bf8:	4631      	mov	r1, r6
   d4bfa:	a801      	add	r0, sp, #4
   d4bfc:	f7ff ffb1 	bl	d4b62 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c00:	7823      	ldrb	r3, [r4, #0]
   d4c02:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4c06:	2010      	movs	r0, #16
   d4c08:	f7ff fa45 	bl	d4096 <_Znwj>
   d4c0c:	4605      	mov	r5, r0
   d4c0e:	b1d0      	cbz	r0, d4c46 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c10:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c12:	2014      	movs	r0, #20
   d4c14:	f7ff fa3f 	bl	d4096 <_Znwj>
   d4c18:	4604      	mov	r4, r0
   d4c1a:	b178      	cbz	r0, d4c3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c1c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4c1e:	4601      	mov	r1, r0
   d4c20:	a801      	add	r0, sp, #4
   d4c22:	f7ff fe2b 	bl	d487c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c26:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4c28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c2c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4c2e:	9203      	str	r2, [sp, #12]
   d4c30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c32:	60e3      	str	r3, [r4, #12]
   d4c34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c38:	9204      	str	r2, [sp, #16]
   d4c3a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c3c:	4b0a      	ldr	r3, [pc, #40]	; (d4c68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4c3e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c40:	4b0a      	ldr	r3, [pc, #40]	; (d4c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c42:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c44:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c46:	a801      	add	r0, sp, #4
   d4c48:	f7ff fda5 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c4c:	2200      	movs	r2, #0
   d4c4e:	4629      	mov	r1, r5
   d4c50:	4807      	ldr	r0, [pc, #28]	; (d4c70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4c52:	f7ff fccb 	bl	d45ec <application_thread_invoke>
   d4c56:	4630      	mov	r0, r6
   d4c58:	f7ff fd9d 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c5c:	4630      	mov	r0, r6
   d4c5e:	f7ff fa1e 	bl	d409e <_ZdlPv>
        }
    }
   d4c62:	b007      	add	sp, #28
   d4c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c66:	bf00      	nop
   d4c68:	000d48cf 	.word	0x000d48cf
   d4c6c:	000d4b81 	.word	0x000d4b81
   d4c70:	000d4755 	.word	0x000d4755

000d4c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4c74:	b530      	push	{r4, r5, lr}
   d4c76:	b085      	sub	sp, #20
   d4c78:	4604      	mov	r4, r0
   d4c7a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4c7c:	4668      	mov	r0, sp
   d4c7e:	4611      	mov	r1, r2
   d4c80:	f7ff fddf 	bl	d4842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4c84:	b17c      	cbz	r4, d4ca6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4c86:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4c88:	4628      	mov	r0, r5
   d4c8a:	b10d      	cbz	r5, d4c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4c8c:	f001 fc2e 	bl	d64ec <strdup>
   d4c90:	9002      	str	r0, [sp, #8]
   d4c92:	a902      	add	r1, sp, #8
   d4c94:	4668      	mov	r0, sp
   d4c96:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4c9a:	f7ff fe2f 	bl	d48fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4c9e:	9802      	ldr	r0, [sp, #8]
   d4ca0:	f7ff fd30 	bl	d4704 <free>
   d4ca4:	e01d      	b.n	d4ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4ca6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ca8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4cac:	f04f 0201 	mov.w	r2, #1
   d4cb0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4cb4:	42a3      	cmp	r3, r4
   d4cb6:	d103      	bne.n	d4cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4cb8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4cbc:	2900      	cmp	r1, #0
   d4cbe:	d1f7      	bne.n	d4cb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4cc0:	d002      	beq.n	d4cc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4cc2:	f88d 3008 	strb.w	r3, [sp, #8]
   d4cc6:	e00c      	b.n	d4ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4cc8:	f110 010c 	adds.w	r1, r0, #12
   d4ccc:	f04f 0301 	mov.w	r3, #1
   d4cd0:	bf18      	it	ne
   d4cd2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4cd4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4cd8:	3004      	adds	r0, #4
   d4cda:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4cde:	f7ff ff71 	bl	d4bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4ce2:	a801      	add	r0, sp, #4
   d4ce4:	f7ff fd7f 	bl	d47e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4ce8:	b005      	add	sp, #20
   d4cea:	bd30      	pop	{r4, r5, pc}

000d4cec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cec:	2200      	movs	r2, #0
   d4cee:	4611      	mov	r1, r2
   d4cf0:	6840      	ldr	r0, [r0, #4]
   d4cf2:	f7ff bce7 	b.w	d46c4 <network_listening>

000d4cf6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4cf6:	2200      	movs	r2, #0
   d4cf8:	4611      	mov	r1, r2
   d4cfa:	6840      	ldr	r0, [r0, #4]
   d4cfc:	f7ff bcf2 	b.w	d46e4 <network_get_listen_timeout>

000d4d00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d00:	2200      	movs	r2, #0
   d4d02:	6840      	ldr	r0, [r0, #4]
   d4d04:	f7ff bce6 	b.w	d46d4 <network_set_listen_timeout>

000d4d08 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d08:	2200      	movs	r2, #0
   d4d0a:	f081 0101 	eor.w	r1, r1, #1
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	f7ff bcd0 	b.w	d46b4 <network_listen>

000d4d14 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d14:	2300      	movs	r3, #0
   d4d16:	461a      	mov	r2, r3
   d4d18:	4619      	mov	r1, r3
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	f7ff bcc2 	b.w	d46a4 <network_off>

000d4d20 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d20:	2300      	movs	r3, #0
   d4d22:	461a      	mov	r2, r3
   d4d24:	4619      	mov	r1, r3
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	f7ff bcb4 	b.w	d4694 <network_on>

000d4d2c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	4611      	mov	r1, r2
   d4d30:	6840      	ldr	r0, [r0, #4]
   d4d32:	f7ff bca7 	b.w	d4684 <network_ready>

000d4d36 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d36:	2200      	movs	r2, #0
   d4d38:	4611      	mov	r1, r2
   d4d3a:	6840      	ldr	r0, [r0, #4]
   d4d3c:	f7ff bc92 	b.w	d4664 <network_connecting>

000d4d40 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d40:	2200      	movs	r2, #0
   d4d42:	2102      	movs	r1, #2
   d4d44:	6840      	ldr	r0, [r0, #4]
   d4d46:	f7ff bc95 	b.w	d4674 <network_disconnect>

000d4d4a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d4a:	2300      	movs	r3, #0
   d4d4c:	461a      	mov	r2, r3
   d4d4e:	6840      	ldr	r0, [r0, #4]
   d4d50:	f7ff bc80 	b.w	d4654 <network_connect>

000d4d54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d54:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d56:	2203      	movs	r2, #3
   d4d58:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d5a:	4a02      	ldr	r2, [pc, #8]	; (d4d64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d5c:	601a      	str	r2, [r3, #0]
   d4d5e:	4770      	bx	lr
   d4d60:	2003e3d8 	.word	0x2003e3d8
   d4d64:	000d65b8 	.word	0x000d65b8

000d4d68 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4d68:	4770      	bx	lr

000d4d6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d6c:	4606      	mov	r6, r0
   d4d6e:	4615      	mov	r5, r2
   d4d70:	460c      	mov	r4, r1
   d4d72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d74:	42bc      	cmp	r4, r7
   d4d76:	d006      	beq.n	d4d86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d78:	6833      	ldr	r3, [r6, #0]
   d4d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d7e:	689b      	ldr	r3, [r3, #8]
   d4d80:	4630      	mov	r0, r6
   d4d82:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d84:	e7f6      	b.n	d4d74 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4d86:	4628      	mov	r0, r5
   d4d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d8a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4d8a:	2200      	movs	r2, #0
   d4d8c:	7c00      	ldrb	r0, [r0, #16]
   d4d8e:	f7ff bac5 	b.w	d431c <HAL_I2C_Write_Data>

000d4d92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4d92:	2100      	movs	r1, #0
   d4d94:	7c00      	ldrb	r0, [r0, #16]
   d4d96:	f7ff bac9 	b.w	d432c <HAL_I2C_Available_Data>

000d4d9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4d9a:	2100      	movs	r1, #0
   d4d9c:	7c00      	ldrb	r0, [r0, #16]
   d4d9e:	f7ff bacd 	b.w	d433c <HAL_I2C_Read_Data>

000d4da2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4da2:	2100      	movs	r1, #0
   d4da4:	7c00      	ldrb	r0, [r0, #16]
   d4da6:	f7ff bad1 	b.w	d434c <HAL_I2C_Peek_Data>

000d4daa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4daa:	2100      	movs	r1, #0
   d4dac:	7c00      	ldrb	r0, [r0, #16]
   d4dae:	f7ff bad5 	b.w	d435c <HAL_I2C_Flush_Data>

000d4db2 <_ZN7TwoWireD0Ev>:
   d4db2:	b510      	push	{r4, lr}
   d4db4:	4604      	mov	r4, r0
   d4db6:	f7ff f972 	bl	d409e <_ZdlPv>
   d4dba:	4620      	mov	r0, r4
   d4dbc:	bd10      	pop	{r4, pc}
	...

000d4dc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4dc0:	b510      	push	{r4, lr}
   d4dc2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4dc8:	4608      	mov	r0, r1
   d4dca:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4dcc:	2100      	movs	r1, #0
   d4dce:	4b04      	ldr	r3, [pc, #16]	; (d4de0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4dd0:	7420      	strb	r0, [r4, #16]
   d4dd2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4dd4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4dd6:	f7ff fad1 	bl	d437c <HAL_I2C_Init>

}
   d4dda:	4620      	mov	r0, r4
   d4ddc:	bd10      	pop	{r4, pc}
   d4dde:	bf00      	nop
   d4de0:	000d65ec 	.word	0x000d65ec

000d4de4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4de4:	2100      	movs	r1, #0
   d4de6:	7c00      	ldrb	r0, [r0, #16]
   d4de8:	f7ff bac0 	b.w	d436c <HAL_I2C_Is_Enabled>

000d4dec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4dec:	4770      	bx	lr

000d4dee <_ZN9IPAddressD0Ev>:
   d4dee:	b510      	push	{r4, lr}
   d4df0:	4604      	mov	r4, r0
   d4df2:	f7ff f954 	bl	d409e <_ZdlPv>
   d4df6:	4620      	mov	r0, r4
   d4df8:	bd10      	pop	{r4, pc}

000d4dfa <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4dfc:	7d03      	ldrb	r3, [r0, #20]
   d4dfe:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e00:	b08d      	sub	sp, #52	; 0x34
   d4e02:	460e      	mov	r6, r1
   d4e04:	f100 0704 	add.w	r7, r0, #4
   d4e08:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4e0c:	d002      	beq.n	d4e14 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4e0e:	f100 0508 	add.w	r5, r0, #8
   d4e12:	e018      	b.n	d4e46 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e14:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e16:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e18:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e1c:	232f      	movs	r3, #47	; 0x2f
   d4e1e:	462a      	mov	r2, r5
   d4e20:	200a      	movs	r0, #10
   d4e22:	f7ff fadb 	bl	d43dc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e26:	4628      	mov	r0, r5
   d4e28:	f001 fb7b 	bl	d6522 <strlen>
   d4e2c:	6833      	ldr	r3, [r6, #0]
   d4e2e:	4602      	mov	r2, r0
   d4e30:	68db      	ldr	r3, [r3, #12]
   d4e32:	4629      	mov	r1, r5
   d4e34:	4630      	mov	r0, r6
   d4e36:	4798      	blx	r3
   d4e38:	e00f      	b.n	d4e5a <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4e3a:	b124      	cbz	r4, d4e46 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4e3c:	212e      	movs	r1, #46	; 0x2e
   d4e3e:	4630      	mov	r0, r6
   d4e40:	f000 fa88 	bl	d5354 <_ZN5Print5printEc>
   d4e44:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4e46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e4a:	220a      	movs	r2, #10
   d4e4c:	4630      	mov	r0, r6
   d4e4e:	f000 fabd 	bl	d53cc <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e52:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e54:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e56:	d1f0      	bne.n	d4e3a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e58:	4620      	mov	r0, r4
    }
    return n;
}
   d4e5a:	b00d      	add	sp, #52	; 0x34
   d4e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4e60 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4e60:	b510      	push	{r4, lr}
   d4e62:	4b05      	ldr	r3, [pc, #20]	; (d4e78 <_ZN9IPAddressC1Ev+0x18>)
   d4e64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e66:	2211      	movs	r2, #17
   d4e68:	f840 3b04 	str.w	r3, [r0], #4
   d4e6c:	2100      	movs	r1, #0
   d4e6e:	f001 fb2c 	bl	d64ca <memset>
{
    clear();
}
   d4e72:	4620      	mov	r0, r4
   d4e74:	bd10      	pop	{r4, pc}
   d4e76:	bf00      	nop
   d4e78:	000d6614 	.word	0x000d6614

000d4e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e7c:	4603      	mov	r3, r0
   d4e7e:	4a07      	ldr	r2, [pc, #28]	; (d4e9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e80:	b510      	push	{r4, lr}
   d4e82:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4e86:	f101 0210 	add.w	r2, r1, #16
   d4e8a:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e8e:	f843 4b04 	str.w	r4, [r3], #4
   d4e92:	4291      	cmp	r1, r2
   d4e94:	d1f9      	bne.n	d4e8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e96:	780a      	ldrb	r2, [r1, #0]
   d4e98:	701a      	strb	r2, [r3, #0]
}
   d4e9a:	bd10      	pop	{r4, pc}
   d4e9c:	000d6614 	.word	0x000d6614

000d4ea0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4ea0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4ea2:	2b04      	cmp	r3, #4
   d4ea4:	d101      	bne.n	d4eaa <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4ea6:	6840      	ldr	r0, [r0, #4]
   d4ea8:	e008      	b.n	d4ebc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4eaa:	2b06      	cmp	r3, #6
   d4eac:	d10a      	bne.n	d4ec4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4eae:	6843      	ldr	r3, [r0, #4]
   d4eb0:	b153      	cbz	r3, d4ec8 <_ZNK9IPAddresscvbEv+0x28>
   d4eb2:	6883      	ldr	r3, [r0, #8]
   d4eb4:	b143      	cbz	r3, d4ec8 <_ZNK9IPAddresscvbEv+0x28>
   d4eb6:	68c3      	ldr	r3, [r0, #12]
   d4eb8:	b133      	cbz	r3, d4ec8 <_ZNK9IPAddresscvbEv+0x28>
   d4eba:	6900      	ldr	r0, [r0, #16]
   d4ebc:	3000      	adds	r0, #0
   d4ebe:	bf18      	it	ne
   d4ec0:	2001      	movne	r0, #1
   d4ec2:	4770      	bx	lr
   d4ec4:	2000      	movs	r0, #0
   d4ec6:	4770      	bx	lr
   d4ec8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4eca:	4770      	bx	lr

000d4ecc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ecc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ece:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ed2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ed6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4eda:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4ede:	2304      	movs	r3, #4
   d4ee0:	6041      	str	r1, [r0, #4]
   d4ee2:	7503      	strb	r3, [r0, #20]
   d4ee4:	bd10      	pop	{r4, pc}

000d4ee6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ee8:	780d      	ldrb	r5, [r1, #0]
   d4eea:	788b      	ldrb	r3, [r1, #2]
   d4eec:	784a      	ldrb	r2, [r1, #1]
   d4eee:	78c9      	ldrb	r1, [r1, #3]
   d4ef0:	9100      	str	r1, [sp, #0]
   d4ef2:	4629      	mov	r1, r5
   d4ef4:	f7ff ffea 	bl	d4ecc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4ef8:	b003      	add	sp, #12
   d4efa:	bd30      	pop	{r4, r5, pc}

000d4efc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4efc:	4b01      	ldr	r3, [pc, #4]	; (d4f04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4efe:	4a02      	ldr	r2, [pc, #8]	; (d4f08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f00:	601a      	str	r2, [r3, #0]
   d4f02:	4770      	bx	lr
   d4f04:	2003e3e0 	.word	0x2003e3e0
   d4f08:	000d66d2 	.word	0x000d66d2

000d4f0c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	4611      	mov	r1, r2
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff bbd7 	b.w	d46c4 <network_listening>

000d4f16 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f16:	2200      	movs	r2, #0
   d4f18:	4611      	mov	r1, r2
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff bbe2 	b.w	d46e4 <network_get_listen_timeout>

000d4f20 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f20:	2200      	movs	r2, #0
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bbd6 	b.w	d46d4 <network_set_listen_timeout>

000d4f28 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	f081 0101 	eor.w	r1, r1, #1
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	f7ff bbc0 	b.w	d46b4 <network_listen>

000d4f34 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f34:	2300      	movs	r3, #0
   d4f36:	461a      	mov	r2, r3
   d4f38:	4619      	mov	r1, r3
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	f7ff bbb2 	b.w	d46a4 <network_off>

000d4f40 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f40:	2300      	movs	r3, #0
   d4f42:	461a      	mov	r2, r3
   d4f44:	4619      	mov	r1, r3
   d4f46:	6840      	ldr	r0, [r0, #4]
   d4f48:	f7ff bba4 	b.w	d4694 <network_on>

000d4f4c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f4c:	2200      	movs	r2, #0
   d4f4e:	4611      	mov	r1, r2
   d4f50:	6840      	ldr	r0, [r0, #4]
   d4f52:	f7ff bb97 	b.w	d4684 <network_ready>

000d4f56 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f56:	2200      	movs	r2, #0
   d4f58:	4611      	mov	r1, r2
   d4f5a:	6840      	ldr	r0, [r0, #4]
   d4f5c:	f7ff bb82 	b.w	d4664 <network_connecting>

000d4f60 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f60:	2200      	movs	r2, #0
   d4f62:	2102      	movs	r1, #2
   d4f64:	6840      	ldr	r0, [r0, #4]
   d4f66:	f7ff bb85 	b.w	d4674 <network_disconnect>

000d4f6a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f6a:	2300      	movs	r3, #0
   d4f6c:	461a      	mov	r2, r3
   d4f6e:	6840      	ldr	r0, [r0, #4]
   d4f70:	f7ff bb70 	b.w	d4654 <network_connect>

000d4f74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f74:	b110      	cbz	r0, d4f7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4f76:	6803      	ldr	r3, [r0, #0]
   d4f78:	685b      	ldr	r3, [r3, #4]
   d4f7a:	4718      	bx	r3
   d4f7c:	4770      	bx	lr

000d4f7e <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4f7e:	b538      	push	{r3, r4, r5, lr}
   d4f80:	4604      	mov	r4, r0
   d4f82:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d4f84:	b1d0      	cbz	r0, d4fbc <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4f86:	f7ff f969 	bl	d425c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4f8a:	b9b8      	cbnz	r0, d4fbc <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4f8c:	7c23      	ldrb	r3, [r4, #16]
   d4f8e:	b91b      	cbnz	r3, d4f98 <_ZN6Thread7disposeEv+0x1a>
   d4f90:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4f92:	b108      	cbz	r0, d4f98 <_ZN6Thread7disposeEv+0x1a>
   d4f94:	f7ff f96a 	bl	d426c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4f98:	6865      	ldr	r5, [r4, #4]
   d4f9a:	b155      	cbz	r5, d4fb2 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4f9c:	68ab      	ldr	r3, [r5, #8]
   d4f9e:	b11b      	cbz	r3, d4fa8 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fa0:	2203      	movs	r2, #3
   d4fa2:	4629      	mov	r1, r5
   d4fa4:	4628      	mov	r0, r5
   d4fa6:	4798      	blx	r3
            delete wrapper;
   d4fa8:	4628      	mov	r0, r5
   d4faa:	f7ff f878 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d4fae:	2300      	movs	r3, #0
   d4fb0:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d4fb2:	6820      	ldr	r0, [r4, #0]
   d4fb4:	f7ff f962 	bl	d427c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4fb8:	2300      	movs	r3, #0
   d4fba:	6023      	str	r3, [r4, #0]
   d4fbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fc0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4fc0:	b538      	push	{r3, r4, r5, lr}
   d4fc2:	4b0b      	ldr	r3, [pc, #44]	; (d4ff0 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4fc4:	6003      	str	r3, [r0, #0]
   d4fc6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fc8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4fcc:	b108      	cbz	r0, d4fd2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4fce:	f7ff f868 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fd2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4fd6:	b12d      	cbz	r5, d4fe4 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4fd8:	4628      	mov	r0, r5
   d4fda:	f7ff ffd0 	bl	d4f7e <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fde:	4628      	mov	r0, r5
   d4fe0:	f7ff f85d 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fe4:	68a0      	ldr	r0, [r4, #8]
   d4fe6:	b108      	cbz	r0, d4fec <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4fe8:	f7ff ffc4 	bl	d4f74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4fec:	4620      	mov	r0, r4
   d4fee:	bd38      	pop	{r3, r4, r5, pc}
   d4ff0:	000d6704 	.word	0x000d6704

000d4ff4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4ff4:	6800      	ldr	r0, [r0, #0]
   d4ff6:	f7ff b959 	b.w	d42ac <os_mutex_recursive_lock>
	...

000d4ffc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d4ffc:	b530      	push	{r4, r5, lr}
   d4ffe:	b08d      	sub	sp, #52	; 0x34
   d5000:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5002:	2211      	movs	r2, #17
   d5004:	2100      	movs	r1, #0
   d5006:	a801      	add	r0, sp, #4
   d5008:	f001 fa5f 	bl	d64ca <memset>
    addr.v = 6;
   d500c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d500e:	aa01      	add	r2, sp, #4
   d5010:	4909      	ldr	r1, [pc, #36]	; (d5038 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5012:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5016:	200a      	movs	r0, #10
   d5018:	f7ff f9e8 	bl	d43ec <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d501c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d501e:	a901      	add	r1, sp, #4
   d5020:	a806      	add	r0, sp, #24
   d5022:	f7ff ff2b 	bl	d4e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5028:	3404      	adds	r4, #4
   d502a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d502c:	682b      	ldr	r3, [r5, #0]
   d502e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5030:	2000      	movs	r0, #0
   d5032:	b00d      	add	sp, #52	; 0x34
   d5034:	bd30      	pop	{r4, r5, pc}
   d5036:	bf00      	nop
   d5038:	000d6730 	.word	0x000d6730

000d503c <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d503c:	b530      	push	{r4, r5, lr}
   d503e:	4604      	mov	r4, r0
   d5040:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5042:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5046:	f7ff ffd5 	bl	d4ff4 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d504a:	6823      	ldr	r3, [r4, #0]
   d504c:	bb83      	cbnz	r3, d50b0 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d504e:	204c      	movs	r0, #76	; 0x4c
   d5050:	f7ff f821 	bl	d4096 <_Znwj>
   d5054:	4605      	mov	r5, r0
   d5056:	b108      	cbz	r0, d505c <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5058:	f000 fdf0 	bl	d5c3c <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d505c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d505e:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5060:	b108      	cbz	r0, d5066 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5062:	f7ff ff87 	bl	d4f74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5066:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d5068:	b320      	cbz	r0, d50b4 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d506a:	2200      	movs	r2, #0
   d506c:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5070:	f000 fe13 	bl	d5c9a <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5074:	a908      	add	r1, sp, #32
   d5076:	2500      	movs	r5, #0
   d5078:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d507c:	4811      	ldr	r0, [pc, #68]	; (d50c4 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d507e:	f7ff f985 	bl	d438c <if_name_to_index>
   d5082:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5084:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5088:	6803      	ldr	r3, [r0, #0]
   d508a:	f249 0169 	movw	r1, #36969	; 0x9069
   d508e:	6a1b      	ldr	r3, [r3, #32]
   d5090:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5092:	a802      	add	r0, sp, #8
   d5094:	f7ff fee4 	bl	d4e60 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5098:	a802      	add	r0, sp, #8
   d509a:	f7ff ffaf 	bl	d4ffc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d509e:	2800      	cmp	r0, #0
   d50a0:	db04      	blt.n	d50ac <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d50a2:	a902      	add	r1, sp, #8
   d50a4:	6820      	ldr	r0, [r4, #0]
   d50a6:	f000 fe7e 	bl	d5da6 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d50aa:	e004      	b.n	d50b6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d50ac:	4605      	mov	r5, r0
   d50ae:	e002      	b.n	d50b6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d50b0:	2500      	movs	r5, #0
   d50b2:	e000      	b.n	d50b6 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d50b4:	4d04      	ldr	r5, [pc, #16]	; (d50c8 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d50b6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d50ba:	f7ff f8ff 	bl	d42bc <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d50be:	4628      	mov	r0, r5
   d50c0:	b009      	add	sp, #36	; 0x24
   d50c2:	bd30      	pop	{r4, r5, pc}
   d50c4:	000d673d 	.word	0x000d673d
   d50c8:	fffffefc 	.word	0xfffffefc

000d50cc <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d50cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d50d0:	4605      	mov	r5, r0
   d50d2:	b08c      	sub	sp, #48	; 0x30
   d50d4:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d50d6:	460f      	mov	r7, r1
   d50d8:	b109      	cbz	r1, d50de <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d50da:	780b      	ldrb	r3, [r1, #0]
   d50dc:	b90b      	cbnz	r3, d50e2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d50de:	4c35      	ldr	r4, [pc, #212]	; (d51b4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d50e0:	e064      	b.n	d51ac <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d50e2:	4608      	mov	r0, r1
   d50e4:	f001 fa1d 	bl	d6522 <strlen>
   d50e8:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d50ea:	2e00      	cmp	r6, #0
   d50ec:	d05c      	beq.n	d51a8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d50ee:	4630      	mov	r0, r6
   d50f0:	f001 fa17 	bl	d6522 <strlen>
   d50f4:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d50f6:	f108 0302 	add.w	r3, r8, #2
   d50fa:	4423      	add	r3, r4
   d50fc:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d5100:	d84f      	bhi.n	d51a2 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d5102:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d5106:	f7ff ff75 	bl	d4ff4 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d510a:	4628      	mov	r0, r5
   d510c:	f7ff ff96 	bl	d503c <_ZN5spark11MeshPublish14initialize_udpEv>
   d5110:	2800      	cmp	r0, #0
   d5112:	db40      	blt.n	d5196 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5114:	4668      	mov	r0, sp
   d5116:	f7ff fea3 	bl	d4e60 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d511a:	4668      	mov	r0, sp
   d511c:	f7ff ff6e 	bl	d4ffc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5120:	2800      	cmp	r0, #0
   d5122:	db38      	blt.n	d5196 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5124:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d5128:	f8da 3000 	ldr.w	r3, [sl]
   d512c:	f10d 0c04 	add.w	ip, sp, #4
   d5130:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5134:	4b20      	ldr	r3, [pc, #128]	; (d51b8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d5136:	9306      	str	r3, [sp, #24]
   d5138:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d513c:	f10d 0e1c 	add.w	lr, sp, #28
   d5140:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5144:	f8dc 3000 	ldr.w	r3, [ip]
   d5148:	f88e 3000 	strb.w	r3, [lr]
   d514c:	f249 0269 	movw	r2, #36969	; 0x9069
   d5150:	a906      	add	r1, sp, #24
   d5152:	4650      	mov	r0, sl
   d5154:	47c8      	blx	r9
   d5156:	2800      	cmp	r0, #0
   d5158:	db1d      	blt.n	d5196 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d515a:	2300      	movs	r3, #0
   d515c:	6828      	ldr	r0, [r5, #0]
   d515e:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5162:	6803      	ldr	r3, [r0, #0]
   d5164:	2201      	movs	r2, #1
   d5166:	68db      	ldr	r3, [r3, #12]
   d5168:	a906      	add	r1, sp, #24
   d516a:	4798      	blx	r3
   d516c:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d516e:	6803      	ldr	r3, [r0, #0]
   d5170:	f108 0201 	add.w	r2, r8, #1
   d5174:	68db      	ldr	r3, [r3, #12]
   d5176:	4639      	mov	r1, r7
   d5178:	4798      	blx	r3
    if (dataLen > 0) {
   d517a:	b12c      	cbz	r4, d5188 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d517c:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d517e:	6803      	ldr	r3, [r0, #0]
   d5180:	4622      	mov	r2, r4
   d5182:	68db      	ldr	r3, [r3, #12]
   d5184:	4631      	mov	r1, r6
   d5186:	4798      	blx	r3
   d5188:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d518a:	6803      	ldr	r3, [r0, #0]
   d518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d518e:	4798      	blx	r3
   d5190:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5194:	e000      	b.n	d5198 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d5196:	4604      	mov	r4, r0
   d5198:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d519c:	f7ff f88e 	bl	d42bc <os_mutex_recursive_unlock>
   d51a0:	e004      	b.n	d51ac <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d51a2:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d51a6:	e001      	b.n	d51ac <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d51a8:	4634      	mov	r4, r6
   d51aa:	e7a4      	b.n	d50f6 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d51ac:	4620      	mov	r0, r4
   d51ae:	b00c      	add	sp, #48	; 0x30
   d51b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d51b4:	fffffef2 	.word	0xfffffef2
   d51b8:	000d6614 	.word	0x000d6614

000d51bc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d51bc:	b538      	push	{r3, r4, r5, lr}
   d51be:	4c0d      	ldr	r4, [pc, #52]	; (d51f4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d51c0:	4b0d      	ldr	r3, [pc, #52]	; (d51f8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d51c2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d51c4:	2500      	movs	r5, #0
   d51c6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d51c8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d51cc:	6063      	str	r3, [r4, #4]
   d51ce:	60a5      	str	r5, [r4, #8]
   d51d0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51d4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d51d8:	f7ff f860 	bl	d429c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d51dc:	4b07      	ldr	r3, [pc, #28]	; (d51fc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d51de:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d51e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d51e4:	4620      	mov	r0, r4
   d51e6:	4a06      	ldr	r2, [pc, #24]	; (d5200 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d51e8:	4906      	ldr	r1, [pc, #24]	; (d5204 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d51ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d51ee:	f000 bfef 	b.w	d61d0 <__aeabi_atexit>
   d51f2:	bf00      	nop
   d51f4:	2003e3e4 	.word	0x2003e3e4
   d51f8:	000d6768 	.word	0x000d6768
   d51fc:	000d6704 	.word	0x000d6704
   d5200:	2003e3b0 	.word	0x2003e3b0
   d5204:	000d4fc1 	.word	0x000d4fc1

000d5208 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5208:	2300      	movs	r3, #0
   d520a:	461a      	mov	r2, r3
   d520c:	6840      	ldr	r0, [r0, #4]
   d520e:	f7ff ba21 	b.w	d4654 <network_connect>

000d5212 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5212:	2200      	movs	r2, #0
   d5214:	2102      	movs	r1, #2
   d5216:	6840      	ldr	r0, [r0, #4]
   d5218:	f7ff ba2c 	b.w	d4674 <network_disconnect>

000d521c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d521c:	2200      	movs	r2, #0
   d521e:	4611      	mov	r1, r2
   d5220:	6840      	ldr	r0, [r0, #4]
   d5222:	f7ff ba1f 	b.w	d4664 <network_connecting>

000d5226 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5226:	2200      	movs	r2, #0
   d5228:	4611      	mov	r1, r2
   d522a:	6840      	ldr	r0, [r0, #4]
   d522c:	f7ff ba2a 	b.w	d4684 <network_ready>

000d5230 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5230:	2300      	movs	r3, #0
   d5232:	461a      	mov	r2, r3
   d5234:	4619      	mov	r1, r3
   d5236:	6840      	ldr	r0, [r0, #4]
   d5238:	f7ff ba2c 	b.w	d4694 <network_on>

000d523c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d523c:	2300      	movs	r3, #0
   d523e:	461a      	mov	r2, r3
   d5240:	4619      	mov	r1, r3
   d5242:	6840      	ldr	r0, [r0, #4]
   d5244:	f7ff ba2e 	b.w	d46a4 <network_off>

000d5248 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5248:	2200      	movs	r2, #0
   d524a:	f081 0101 	eor.w	r1, r1, #1
   d524e:	6840      	ldr	r0, [r0, #4]
   d5250:	f7ff ba30 	b.w	d46b4 <network_listen>

000d5254 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5254:	2200      	movs	r2, #0
   d5256:	6840      	ldr	r0, [r0, #4]
   d5258:	f7ff ba3c 	b.w	d46d4 <network_set_listen_timeout>

000d525c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d525c:	2200      	movs	r2, #0
   d525e:	4611      	mov	r1, r2
   d5260:	6840      	ldr	r0, [r0, #4]
   d5262:	f7ff ba3f 	b.w	d46e4 <network_get_listen_timeout>

000d5266 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5266:	2200      	movs	r2, #0
   d5268:	4611      	mov	r1, r2
   d526a:	6840      	ldr	r0, [r0, #4]
   d526c:	f7ff ba2a 	b.w	d46c4 <network_listening>

000d5270 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5270:	b570      	push	{r4, r5, r6, lr}
   d5272:	b08c      	sub	sp, #48	; 0x30
   d5274:	4614      	mov	r4, r2
   d5276:	4606      	mov	r6, r0
    IPAddress addr;
   d5278:	f7ff fdf2 	bl	d4e60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d527c:	ab0c      	add	r3, sp, #48	; 0x30
   d527e:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5280:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5282:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5286:	4620      	mov	r0, r4
   d5288:	f7ff f8d8 	bl	d443c <netdb_getaddrinfo>
    if (!r && ai) {
   d528c:	4601      	mov	r1, r0
   d528e:	bb58      	cbnz	r0, d52e8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5290:	9b00      	ldr	r3, [sp, #0]
   d5292:	b34b      	cbz	r3, d52e8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5294:	685a      	ldr	r2, [r3, #4]
   d5296:	2a02      	cmp	r2, #2
   d5298:	d00e      	beq.n	d52b8 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d529a:	2a0a      	cmp	r2, #10
   d529c:	d124      	bne.n	d52e8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d529e:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d52a0:	2211      	movs	r2, #17
   d52a2:	a801      	add	r0, sp, #4
   d52a4:	f001 f911 	bl	d64ca <memset>
                a.v = 6;
   d52a8:	2306      	movs	r3, #6
   d52aa:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d52ae:	ad01      	add	r5, sp, #4
   d52b0:	f104 0308 	add.w	r3, r4, #8
   d52b4:	3418      	adds	r4, #24
   d52b6:	e005      	b.n	d52c4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d52b8:	6959      	ldr	r1, [r3, #20]
   d52ba:	4630      	mov	r0, r6
   d52bc:	3104      	adds	r1, #4
   d52be:	f7ff fe12 	bl	d4ee6 <_ZN9IPAddressaSEPKh>
                break;
   d52c2:	e011      	b.n	d52e8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d52c4:	6818      	ldr	r0, [r3, #0]
   d52c6:	6859      	ldr	r1, [r3, #4]
   d52c8:	462a      	mov	r2, r5
   d52ca:	c203      	stmia	r2!, {r0, r1}
   d52cc:	3308      	adds	r3, #8
   d52ce:	42a3      	cmp	r3, r4
   d52d0:	4615      	mov	r5, r2
   d52d2:	d1f7      	bne.n	d52c4 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d52d4:	a901      	add	r1, sp, #4
   d52d6:	a806      	add	r0, sp, #24
   d52d8:	ad07      	add	r5, sp, #28
   d52da:	f7ff fdcf 	bl	d4e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d52de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d52e0:	1d34      	adds	r4, r6, #4
   d52e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52e4:	682b      	ldr	r3, [r5, #0]
   d52e6:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d52e8:	9800      	ldr	r0, [sp, #0]
   d52ea:	f7ff f89f 	bl	d442c <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d52ee:	4630      	mov	r0, r6
   d52f0:	b00c      	add	sp, #48	; 0x30
   d52f2:	bd70      	pop	{r4, r5, r6, pc}

000d52f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d52f4:	4b02      	ldr	r3, [pc, #8]	; (d5300 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d52f6:	4a03      	ldr	r2, [pc, #12]	; (d5304 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d52f8:	601a      	str	r2, [r3, #0]
   d52fa:	2200      	movs	r2, #0
   d52fc:	605a      	str	r2, [r3, #4]
   d52fe:	4770      	bx	lr
   d5300:	2003e5b4 	.word	0x2003e5b4
   d5304:	000d6768 	.word	0x000d6768

000d5308 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d530a:	4606      	mov	r6, r0
   d530c:	460d      	mov	r5, r1
   d530e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5310:	2400      	movs	r4, #0
  while (size--) {
   d5312:	42bd      	cmp	r5, r7
   d5314:	d00c      	beq.n	d5330 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5316:	6833      	ldr	r3, [r6, #0]
   d5318:	f815 1b01 	ldrb.w	r1, [r5], #1
   d531c:	689b      	ldr	r3, [r3, #8]
   d531e:	4630      	mov	r0, r6
   d5320:	4798      	blx	r3
     if (chunk>=0)
   d5322:	2800      	cmp	r0, #0
   d5324:	db01      	blt.n	d532a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5326:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5328:	e7f3      	b.n	d5312 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d532a:	2c00      	cmp	r4, #0
   d532c:	bf08      	it	eq
   d532e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5330:	4620      	mov	r0, r4
   d5332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5334 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5334:	b570      	push	{r4, r5, r6, lr}
   d5336:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5338:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d533a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d533c:	b149      	cbz	r1, d5352 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d533e:	f001 f8f0 	bl	d6522 <strlen>
   d5342:	682b      	ldr	r3, [r5, #0]
   d5344:	4602      	mov	r2, r0
   d5346:	4621      	mov	r1, r4
   d5348:	4628      	mov	r0, r5
   d534a:	68db      	ldr	r3, [r3, #12]
    }
   d534c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5350:	4718      	bx	r3
    }
   d5352:	bd70      	pop	{r4, r5, r6, pc}

000d5354 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5354:	6803      	ldr	r3, [r0, #0]
   d5356:	689b      	ldr	r3, [r3, #8]
   d5358:	4718      	bx	r3

000d535a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d535a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d535c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d535e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5360:	f7ff fff8 	bl	d5354 <_ZN5Print5printEc>
  n += print('\n');
   d5364:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5366:	4604      	mov	r4, r0
  n += print('\n');
   d5368:	4628      	mov	r0, r5
   d536a:	f7ff fff3 	bl	d5354 <_ZN5Print5printEc>
  return n;
}
   d536e:	4420      	add	r0, r4
   d5370:	bd38      	pop	{r3, r4, r5, pc}

000d5372 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5372:	b530      	push	{r4, r5, lr}
   d5374:	b08b      	sub	sp, #44	; 0x2c
   d5376:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5378:	2100      	movs	r1, #0
   d537a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d537e:	2a01      	cmp	r2, #1
   d5380:	bf98      	it	ls
   d5382:	220a      	movls	r2, #10
   d5384:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5388:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d538c:	fb05 3312 	mls	r3, r5, r2, r3
   d5390:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5394:	2b09      	cmp	r3, #9
   d5396:	bf94      	ite	ls
   d5398:	3330      	addls	r3, #48	; 0x30
   d539a:	3337      	addhi	r3, #55	; 0x37
   d539c:	b2db      	uxtb	r3, r3
   d539e:	4621      	mov	r1, r4
   d53a0:	f804 3901 	strb.w	r3, [r4], #-1
   d53a4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53a6:	2d00      	cmp	r5, #0
   d53a8:	d1ee      	bne.n	d5388 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d53aa:	f7ff ffc3 	bl	d5334 <_ZN5Print5writeEPKc>
}
   d53ae:	b00b      	add	sp, #44	; 0x2c
   d53b0:	bd30      	pop	{r4, r5, pc}

000d53b2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d53b2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d53b4:	b92a      	cbnz	r2, d53c2 <_ZN5Print5printEmi+0x10>
   d53b6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d53b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d53bc:	689b      	ldr	r3, [r3, #8]
   d53be:	b2c9      	uxtb	r1, r1
   d53c0:	4718      	bx	r3
  else return printNumber(n, base);
   d53c2:	b2d2      	uxtb	r2, r2
}
   d53c4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d53c8:	f7ff bfd3 	b.w	d5372 <_ZN5Print11printNumberEmh>

000d53cc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d53cc:	f7ff bff1 	b.w	d53b2 <_ZN5Print5printEmi>

000d53d0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d53d0:	b40c      	push	{r2, r3}
   d53d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53d6:	b087      	sub	sp, #28
   d53d8:	af00      	add	r7, sp, #0
   d53da:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d53de:	4605      	mov	r5, r0
   d53e0:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d53e4:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d53e6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d53e8:	4623      	mov	r3, r4
   d53ea:	464a      	mov	r2, r9
   d53ec:	2114      	movs	r1, #20
   d53ee:	1d38      	adds	r0, r7, #4
   d53f0:	f7ff f998 	bl	d4724 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d53f4:	2813      	cmp	r0, #19
   d53f6:	d805      	bhi.n	d5404 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53f8:	1d39      	adds	r1, r7, #4
   d53fa:	4628      	mov	r0, r5
   d53fc:	f7ff ff9a 	bl	d5334 <_ZN5Print5writeEPKc>
   d5400:	4604      	mov	r4, r0
   d5402:	e013      	b.n	d542c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5404:	f100 0308 	add.w	r3, r0, #8
   d5408:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d540c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d540e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5412:	1c41      	adds	r1, r0, #1
   d5414:	4623      	mov	r3, r4
   d5416:	464a      	mov	r2, r9
   d5418:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d541a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d541c:	f7ff f982 	bl	d4724 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5420:	4669      	mov	r1, sp
   d5422:	4628      	mov	r0, r5
   d5424:	f7ff ff86 	bl	d5334 <_ZN5Print5writeEPKc>
   d5428:	4604      	mov	r4, r0
   d542a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d542c:	b11e      	cbz	r6, d5436 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d542e:	4628      	mov	r0, r5
   d5430:	f7ff ff93 	bl	d535a <_ZN5Print7printlnEv>
   d5434:	4404      	add	r4, r0
    return n;
}
   d5436:	4620      	mov	r0, r4
   d5438:	371c      	adds	r7, #28
   d543a:	46bd      	mov	sp, r7
   d543c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5440:	b002      	add	sp, #8
   d5442:	4770      	bx	lr

000d5444 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5448:	f7ff f9a5 	bl	d4796 <_ZNSt14_Function_baseD1Ev>
   d544c:	4620      	mov	r0, r4
   d544e:	bd10      	pop	{r4, pc}

000d5450 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5450:	4803      	ldr	r0, [pc, #12]	; (d5460 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5452:	4a04      	ldr	r2, [pc, #16]	; (d5464 <_GLOBAL__sub_I_RGB+0x14>)
   d5454:	4904      	ldr	r1, [pc, #16]	; (d5468 <_GLOBAL__sub_I_RGB+0x18>)
   d5456:	2300      	movs	r3, #0
   d5458:	6083      	str	r3, [r0, #8]
   d545a:	f000 beb9 	b.w	d61d0 <__aeabi_atexit>
   d545e:	bf00      	nop
   d5460:	2003e5bc 	.word	0x2003e5bc
   d5464:	2003e3b0 	.word	0x2003e3b0
   d5468:	000d5445 	.word	0x000d5445

000d546c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d546c:	4770      	bx	lr

000d546e <_ZN8SPIClassD0Ev>:
   d546e:	b510      	push	{r4, lr}
   d5470:	4604      	mov	r4, r0
   d5472:	f7fe fe14 	bl	d409e <_ZdlPv>
   d5476:	4620      	mov	r0, r4
   d5478:	bd10      	pop	{r4, pc}
	...

000d547c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d547c:	b570      	push	{r4, r5, r6, lr}
   d547e:	4b08      	ldr	r3, [pc, #32]	; (d54a0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5480:	6003      	str	r3, [r0, #0]
   d5482:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5484:	2500      	movs	r5, #0
   d5486:	460e      	mov	r6, r1
   d5488:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d548c:	f7fe fefe 	bl	d428c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5490:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5492:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5494:	f7ff f80a 	bl	d44ac <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5498:	60a5      	str	r5, [r4, #8]
}
   d549a:	4620      	mov	r0, r4
   d549c:	bd70      	pop	{r4, r5, r6, pc}
   d549e:	bf00      	nop
   d54a0:	000d679c 	.word	0x000d679c

000d54a4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d54a4:	7900      	ldrb	r0, [r0, #4]
   d54a6:	f7ff b809 	b.w	d44bc <HAL_SPI_Is_Enabled>

000d54aa <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d54aa:	4770      	bx	lr

000d54ac <_ZN21StringPrintableHelperD0Ev>:
   d54ac:	b510      	push	{r4, lr}
   d54ae:	4604      	mov	r4, r0
   d54b0:	f7fe fdf5 	bl	d409e <_ZdlPv>
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd10      	pop	{r4, pc}

000d54b8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d54b8:	b510      	push	{r4, lr}
   d54ba:	4604      	mov	r4, r0
{
	free(buffer);
   d54bc:	6800      	ldr	r0, [r0, #0]
   d54be:	f7ff f921 	bl	d4704 <free>
}
   d54c2:	4620      	mov	r0, r4
   d54c4:	bd10      	pop	{r4, pc}

000d54c6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d54c6:	b510      	push	{r4, lr}
   d54c8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d54ca:	6800      	ldr	r0, [r0, #0]
   d54cc:	b108      	cbz	r0, d54d2 <_ZN6String10invalidateEv+0xc>
   d54ce:	f7ff f919 	bl	d4704 <free>
	buffer = NULL;
   d54d2:	2300      	movs	r3, #0
   d54d4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d54d6:	60a3      	str	r3, [r4, #8]
   d54d8:	6063      	str	r3, [r4, #4]
   d54da:	bd10      	pop	{r4, pc}

000d54dc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d54dc:	b538      	push	{r3, r4, r5, lr}
   d54de:	4604      	mov	r4, r0
   d54e0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d54e2:	6800      	ldr	r0, [r0, #0]
   d54e4:	3101      	adds	r1, #1
   d54e6:	f7ff f915 	bl	d4714 <realloc>
	if (newbuffer) {
   d54ea:	b110      	cbz	r0, d54f2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d54ec:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d54f0:	2001      	movs	r0, #1
	}
	return 0;
}
   d54f2:	bd38      	pop	{r3, r4, r5, pc}

000d54f4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d54f4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d54f6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d54f8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d54fa:	b113      	cbz	r3, d5502 <_ZN6String7reserveEj+0xe>
   d54fc:	6843      	ldr	r3, [r0, #4]
   d54fe:	428b      	cmp	r3, r1
   d5500:	d207      	bcs.n	d5512 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5502:	4620      	mov	r0, r4
   d5504:	f7ff ffea 	bl	d54dc <_ZN6String12changeBufferEj>
   d5508:	b120      	cbz	r0, d5514 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d550a:	68a3      	ldr	r3, [r4, #8]
   d550c:	b90b      	cbnz	r3, d5512 <_ZN6String7reserveEj+0x1e>
   d550e:	6822      	ldr	r2, [r4, #0]
   d5510:	7013      	strb	r3, [r2, #0]
   d5512:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5514:	bd10      	pop	{r4, pc}

000d5516 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5516:	b570      	push	{r4, r5, r6, lr}
   d5518:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d551a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d551c:	4604      	mov	r4, r0
   d551e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5520:	f7ff ffe8 	bl	d54f4 <_ZN6String7reserveEj>
   d5524:	b918      	cbnz	r0, d552e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5526:	4620      	mov	r0, r4
   d5528:	f7ff ffcd 	bl	d54c6 <_ZN6String10invalidateEv>
		return *this;
   d552c:	e009      	b.n	d5542 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d552e:	462a      	mov	r2, r5
   d5530:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5532:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5534:	6820      	ldr	r0, [r4, #0]
   d5536:	f000 ffbd 	bl	d64b4 <memcpy>
	buffer[len] = 0;
   d553a:	6822      	ldr	r2, [r4, #0]
   d553c:	68a3      	ldr	r3, [r4, #8]
   d553e:	2100      	movs	r1, #0
   d5540:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5542:	4620      	mov	r0, r4
   d5544:	bd70      	pop	{r4, r5, r6, pc}

000d5546 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5546:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5548:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d554a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d554c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d554e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5550:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5552:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5554:	460d      	mov	r5, r1
   d5556:	b139      	cbz	r1, d5568 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5558:	4608      	mov	r0, r1
   d555a:	f000 ffe2 	bl	d6522 <strlen>
   d555e:	4629      	mov	r1, r5
   d5560:	4602      	mov	r2, r0
   d5562:	4620      	mov	r0, r4
   d5564:	f7ff ffd7 	bl	d5516 <_ZN6String4copyEPKcj>
}
   d5568:	4620      	mov	r0, r4
   d556a:	bd38      	pop	{r3, r4, r5, pc}

000d556c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d556c:	b538      	push	{r3, r4, r5, lr}
   d556e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5570:	460c      	mov	r4, r1
   d5572:	b141      	cbz	r1, d5586 <_ZN6StringaSEPKc+0x1a>
   d5574:	4608      	mov	r0, r1
   d5576:	f000 ffd4 	bl	d6522 <strlen>
   d557a:	4621      	mov	r1, r4
   d557c:	4602      	mov	r2, r0
   d557e:	4628      	mov	r0, r5
   d5580:	f7ff ffc9 	bl	d5516 <_ZN6String4copyEPKcj>
   d5584:	e001      	b.n	d558a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5586:	f7ff ff9e 	bl	d54c6 <_ZN6String10invalidateEv>

	return *this;
}
   d558a:	4628      	mov	r0, r5
   d558c:	bd38      	pop	{r3, r4, r5, pc}

000d558e <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d558e:	b510      	push	{r4, lr}
   d5590:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5592:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5594:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5596:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5598:	6063      	str	r3, [r4, #4]
	len = 0;
   d559a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d559c:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d559e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d55a0:	a901      	add	r1, sp, #4
   d55a2:	f000 fce7 	bl	d5f74 <ltoa>
	*this = buf;
   d55a6:	a901      	add	r1, sp, #4
   d55a8:	4620      	mov	r0, r4
   d55aa:	f7ff ffdf 	bl	d556c <_ZN6StringaSEPKc>
}
   d55ae:	4620      	mov	r0, r4
   d55b0:	b00a      	add	sp, #40	; 0x28
   d55b2:	bd10      	pop	{r4, pc}

000d55b4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d55b4:	b570      	push	{r4, r5, r6, lr}
   d55b6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d55b8:	460e      	mov	r6, r1
   d55ba:	b909      	cbnz	r1, d55c0 <_ZN6String6concatEPKcj+0xc>
   d55bc:	2000      	movs	r0, #0
   d55be:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d55c0:	b16a      	cbz	r2, d55de <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d55c2:	6883      	ldr	r3, [r0, #8]
   d55c4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d55c6:	4629      	mov	r1, r5
   d55c8:	f7ff ff94 	bl	d54f4 <_ZN6String7reserveEj>
   d55cc:	2800      	cmp	r0, #0
   d55ce:	d0f5      	beq.n	d55bc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d55d0:	6820      	ldr	r0, [r4, #0]
   d55d2:	68a3      	ldr	r3, [r4, #8]
   d55d4:	4631      	mov	r1, r6
   d55d6:	4418      	add	r0, r3
   d55d8:	f000 ff7f 	bl	d64da <strcpy>
	len = newlen;
   d55dc:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d55de:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d55e0:	bd70      	pop	{r4, r5, r6, pc}

000d55e2 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d55e2:	b538      	push	{r3, r4, r5, lr}
   d55e4:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d55e6:	6880      	ldr	r0, [r0, #8]
   d55e8:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d55ea:	f7ff ffe3 	bl	d55b4 <_ZN6String6concatEPKcj>
   d55ee:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d55f0:	6898      	ldr	r0, [r3, #8]
    }
   d55f2:	1b40      	subs	r0, r0, r5
   d55f4:	bd38      	pop	{r3, r4, r5, pc}

000d55f6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d55f6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d55f8:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d55fa:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d55fe:	2201      	movs	r2, #1
   d5600:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5602:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5606:	f7ff ffd5 	bl	d55b4 <_ZN6String6concatEPKcj>
}
   d560a:	b003      	add	sp, #12
   d560c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5610 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d5610:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d5612:	6880      	ldr	r0, [r0, #8]
   d5614:	f7ff ffef 	bl	d55f6 <_ZN6String6concatEc>
    }
   d5618:	bd08      	pop	{r3, pc}
	...

000d561c <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   d561c:	b530      	push	{r4, r5, lr}
   d561e:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5620:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5622:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5624:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5626:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5628:	6043      	str	r3, [r0, #4]
	len = 0;
   d562a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d562c:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d562e:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5630:	4b06      	ldr	r3, [pc, #24]	; (d564c <_ZN6StringC1ERK9Printable+0x30>)
   d5632:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5634:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5636:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d5638:	f7ff ff5c 	bl	d54f4 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d563c:	682b      	ldr	r3, [r5, #0]
   d563e:	a901      	add	r1, sp, #4
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	4628      	mov	r0, r5
   d5644:	4798      	blx	r3
}
   d5646:	4620      	mov	r0, r4
   d5648:	b005      	add	sp, #20
   d564a:	bd30      	pop	{r4, r5, pc}
   d564c:	000d67ac 	.word	0x000d67ac

000d5650 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5650:	4b05      	ldr	r3, [pc, #20]	; (d5668 <_GLOBAL__sub_I_System+0x18>)
   d5652:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5656:	2000      	movs	r0, #0
   d5658:	805a      	strh	r2, [r3, #2]
   d565a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d565e:	7018      	strb	r0, [r3, #0]
   d5660:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5662:	f7fe bfb3 	b.w	d45cc <set_system_mode>
   d5666:	bf00      	nop
   d5668:	2003e5cc 	.word	0x2003e5cc

000d566c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d566c:	4b02      	ldr	r3, [pc, #8]	; (d5678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d566e:	681a      	ldr	r2, [r3, #0]
   d5670:	4b02      	ldr	r3, [pc, #8]	; (d567c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5672:	601a      	str	r2, [r3, #0]
   d5674:	4770      	bx	lr
   d5676:	bf00      	nop
   d5678:	2003e348 	.word	0x2003e348
   d567c:	2003e5d4 	.word	0x2003e5d4

000d5680 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5680:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5682:	6804      	ldr	r4, [r0, #0]
   d5684:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5686:	46a4      	mov	ip, r4
    }
   d5688:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d568c:	4760      	bx	ip

000d568e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d568e:	6803      	ldr	r3, [r0, #0]
   d5690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5692:	4718      	bx	r3

000d5694 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5694:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5696:	4770      	bx	lr

000d5698 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5698:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d569a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d569c:	1a10      	subs	r0, r2, r0
   d569e:	4770      	bx	lr

000d56a0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d56a0:	b513      	push	{r0, r1, r4, lr}
   d56a2:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d56a4:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d56a6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d56aa:	68d4      	ldr	r4, [r2, #12]
   d56ac:	4619      	mov	r1, r3
   d56ae:	2201      	movs	r2, #1
   d56b0:	47a0      	blx	r4
}
   d56b2:	b002      	add	sp, #8
   d56b4:	bd10      	pop	{r4, pc}

000d56b6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d56b6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d56b8:	6803      	ldr	r3, [r0, #0]
   d56ba:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d56bc:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d56be:	4798      	blx	r3
   d56c0:	b128      	cbz	r0, d56ce <_ZN3UDP4readEv+0x18>
   d56c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d56c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d56c6:	1c59      	adds	r1, r3, #1
   d56c8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d56ca:	5cd0      	ldrb	r0, [r2, r3]
   d56cc:	bd10      	pop	{r4, pc}
   d56ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d56d2:	bd10      	pop	{r4, pc}

000d56d4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d56d4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d56d6:	6803      	ldr	r3, [r0, #0]
   d56d8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d56da:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d56dc:	4798      	blx	r3
   d56de:	b118      	cbz	r0, d56e8 <_ZN3UDP4peekEv+0x14>
   d56e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d56e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d56e4:	5cd0      	ldrb	r0, [r2, r3]
   d56e6:	bd10      	pop	{r4, pc}
   d56e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d56ec:	bd10      	pop	{r4, pc}

000d56ee <_ZN3UDP5flushEv>:

void UDP::flush() {
   d56ee:	4770      	bx	lr

000d56f0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d56f0:	b410      	push	{r4}
   d56f2:	4603      	mov	r3, r0
   d56f4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d56f6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d56f8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d56fa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d56fc:	6803      	ldr	r3, [r0, #0]
   d56fe:	1a52      	subs	r2, r2, r1
   d5700:	68db      	ldr	r3, [r3, #12]
   d5702:	4421      	add	r1, r4
}
   d5704:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5708:	4718      	bx	r3

000d570a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d570a:	f1a0 0010 	sub.w	r0, r0, #16
   d570e:	f7ff bfef 	b.w	d56f0 <_ZNK3UDP7printToER5Print>

000d5712 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5712:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5714:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5716:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5718:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d571c:	4604      	mov	r4, r0
   d571e:	460f      	mov	r7, r1
   d5720:	4615      	mov	r5, r2
    stop();
   d5722:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5724:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5726:	4632      	mov	r2, r6
   d5728:	2100      	movs	r1, #0
   d572a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d572c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d572e:	f000 fecc 	bl	d64ca <memset>
    saddr.sin6_len = sizeof(saddr);
   d5732:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5736:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5738:	260a      	movs	r6, #10
   d573a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d573e:	f7fe fe6d 	bl	d441c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5742:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5744:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5748:	2102      	movs	r1, #2
   d574a:	4630      	mov	r0, r6
   d574c:	f7fe fea6 	bl	d449c <sock_socket>

    if (_sock < 0) {
   d5750:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5752:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5754:	db24      	blt.n	d57a0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5756:	2204      	movs	r2, #4
   d5758:	9200      	str	r2, [sp, #0]
   d575a:	ab02      	add	r3, sp, #8
   d575c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5760:	f7fe fe7c 	bl	d445c <sock_setsockopt>
   d5764:	b9e0      	cbnz	r0, d57a0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5766:	b195      	cbz	r5, d578e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5768:	9003      	str	r0, [sp, #12]
   d576a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d576e:	a903      	add	r1, sp, #12
   d5770:	b2e8      	uxtb	r0, r5
   d5772:	f7fe fe13 	bl	d439c <if_index_to_name>
   d5776:	b998      	cbnz	r0, d57a0 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5778:	2306      	movs	r3, #6
   d577a:	9300      	str	r3, [sp, #0]
   d577c:	f241 020b 	movw	r2, #4107	; 0x100b
   d5780:	ab03      	add	r3, sp, #12
   d5782:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5786:	6960      	ldr	r0, [r4, #20]
   d5788:	f7fe fe68 	bl	d445c <sock_setsockopt>
   d578c:	b940      	cbnz	r0, d57a0 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d578e:	221c      	movs	r2, #28
   d5790:	a905      	add	r1, sp, #20
   d5792:	6960      	ldr	r0, [r4, #20]
   d5794:	f7fe fe5a 	bl	d444c <sock_bind>
   d5798:	b910      	cbnz	r0, d57a0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d579a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d579c:	2001      	movs	r0, #1
   d579e:	e004      	b.n	d57aa <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d57a0:	6823      	ldr	r3, [r4, #0]
   d57a2:	4620      	mov	r0, r4
   d57a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57a6:	4798      	blx	r3
   d57a8:	2000      	movs	r0, #0
    }
    return bound;
}
   d57aa:	b00d      	add	sp, #52	; 0x34
   d57ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d57ae <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d57ae:	b510      	push	{r4, lr}
   d57b0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d57b2:	6940      	ldr	r0, [r0, #20]
   d57b4:	2800      	cmp	r0, #0
   d57b6:	db01      	blt.n	d57bc <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d57b8:	f7fe fe58 	bl	d446c <sock_close>
    }

    _sock = -1;
   d57bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d57c0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d57c2:	2300      	movs	r3, #0
   d57c4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d57c6:	8723      	strh	r3, [r4, #56]	; 0x38
   d57c8:	bd10      	pop	{r4, pc}

000d57ca <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d57ca:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d57cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d57ce:	4605      	mov	r5, r0
   d57d0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d57d2:	b113      	cbz	r3, d57da <_ZN3UDP5writeEPKhj+0x10>
   d57d4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d57d6:	1a24      	subs	r4, r4, r0
   d57d8:	e000      	b.n	d57dc <_ZN3UDP5writeEPKhj+0x12>
   d57da:	461c      	mov	r4, r3
   d57dc:	4294      	cmp	r4, r2
   d57de:	bf28      	it	cs
   d57e0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d57e2:	4622      	mov	r2, r4
   d57e4:	4418      	add	r0, r3
   d57e6:	f000 fe65 	bl	d64b4 <memcpy>
    _offset += size;
   d57ea:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d57ec:	4423      	add	r3, r4
   d57ee:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d57f0:	4620      	mov	r0, r4
   d57f2:	bd38      	pop	{r3, r4, r5, pc}

000d57f4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d57f4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d57f6:	6803      	ldr	r3, [r0, #0]
   d57f8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d57fa:	4604      	mov	r4, r0
   d57fc:	460e      	mov	r6, r1
   d57fe:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d5800:	4798      	blx	r3
   d5802:	b188      	cbz	r0, d5828 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d5804:	6823      	ldr	r3, [r4, #0]
   d5806:	4620      	mov	r0, r4
   d5808:	691b      	ldr	r3, [r3, #16]
   d580a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d580c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d580e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5810:	4285      	cmp	r5, r0
   d5812:	bfa8      	it	ge
   d5814:	4605      	movge	r5, r0
   d5816:	4419      	add	r1, r3
   d5818:	462a      	mov	r2, r5
   d581a:	4630      	mov	r0, r6
   d581c:	f000 fe4a 	bl	d64b4 <memcpy>
        _offset += read;
   d5820:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5822:	442b      	add	r3, r5
   d5824:	86e3      	strh	r3, [r4, #54]	; 0x36
   d5826:	e001      	b.n	d582c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d582c:	4628      	mov	r0, r5
   d582e:	bd70      	pop	{r4, r5, r6, pc}

000d5830 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5830:	b570      	push	{r4, r5, r6, lr}
   d5832:	4604      	mov	r4, r0
   d5834:	4b05      	ldr	r3, [pc, #20]	; (d584c <_ZN3UDP8remoteIPEv+0x1c>)
   d5836:	f844 3b04 	str.w	r3, [r4], #4
   d583a:	f101 0520 	add.w	r5, r1, #32
   d583e:	4606      	mov	r6, r0
   d5840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5844:	682b      	ldr	r3, [r5, #0]
   d5846:	7023      	strb	r3, [r4, #0]
   d5848:	4630      	mov	r0, r6
   d584a:	bd70      	pop	{r4, r5, r6, pc}
   d584c:	000d6614 	.word	0x000d6614

000d5850 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5850:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5852:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5854:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5856:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5858:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d585a:	4a0a      	ldr	r2, [pc, #40]	; (d5884 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d585c:	9202      	str	r2, [sp, #8]
   d585e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5860:	468e      	mov	lr, r1
   d5862:	4606      	mov	r6, r0
   d5864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5866:	ac03      	add	r4, sp, #12
   d5868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d586a:	682b      	ldr	r3, [r5, #0]
   d586c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d586e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5872:	9300      	str	r3, [sp, #0]
   d5874:	4662      	mov	r2, ip
   d5876:	ab02      	add	r3, sp, #8
   d5878:	4671      	mov	r1, lr
   d587a:	4630      	mov	r0, r6
   d587c:	47b8      	blx	r7
    }
   d587e:	b009      	add	sp, #36	; 0x24
   d5880:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5882:	bf00      	nop
   d5884:	000d6614 	.word	0x000d6614

000d5888 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5888:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d588a:	6803      	ldr	r3, [r0, #0]
   d588c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5890:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5892:	4b0d      	ldr	r3, [pc, #52]	; (d58c8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5894:	b089      	sub	sp, #36	; 0x24
   d5896:	f100 0620 	add.w	r6, r0, #32
   d589a:	4604      	mov	r4, r0
   d589c:	9302      	str	r3, [sp, #8]
   d589e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d58a0:	ad03      	add	r5, sp, #12
   d58a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d58a4:	6833      	ldr	r3, [r6, #0]
   d58a6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d58a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d58aa:	9300      	str	r3, [sp, #0]
   d58ac:	4672      	mov	r2, lr
   d58ae:	ab02      	add	r3, sp, #8
   d58b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d58b2:	4620      	mov	r0, r4
   d58b4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d58b6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d58b8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d58ba:	69db      	ldr	r3, [r3, #28]
   d58bc:	4620      	mov	r0, r4
   d58be:	4798      	blx	r3
    return result;
}
   d58c0:	4628      	mov	r0, r5
   d58c2:	b009      	add	sp, #36	; 0x24
   d58c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58c6:	bf00      	nop
   d58c8:	000d6614 	.word	0x000d6614

000d58cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d58cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d58ce:	7843      	ldrb	r3, [r0, #1]
   d58d0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d58d2:	b08d      	sub	sp, #52	; 0x34
   d58d4:	4605      	mov	r5, r0
   d58d6:	460c      	mov	r4, r1
   d58d8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d58da:	d101      	bne.n	d58e0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d58dc:	1d01      	adds	r1, r0, #4
   d58de:	e033      	b.n	d5948 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d58e0:	2b0a      	cmp	r3, #10
   d58e2:	d135      	bne.n	d5950 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d58e4:	2211      	movs	r2, #17
   d58e6:	2100      	movs	r1, #0
   d58e8:	a801      	add	r0, sp, #4
   d58ea:	f000 fdee 	bl	d64ca <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d58ee:	68ab      	ldr	r3, [r5, #8]
   d58f0:	b943      	cbnz	r3, d5904 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d58f2:	68eb      	ldr	r3, [r5, #12]
   d58f4:	b933      	cbnz	r3, d5904 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d58f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d58fa:	692e      	ldr	r6, [r5, #16]
   d58fc:	f7fe fd7e 	bl	d43fc <inet_htonl>
   d5900:	4286      	cmp	r6, r0
   d5902:	d01f      	beq.n	d5944 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5904:	f105 0308 	add.w	r3, r5, #8
   d5908:	ae01      	add	r6, sp, #4
   d590a:	f105 0e18 	add.w	lr, r5, #24
   d590e:	6818      	ldr	r0, [r3, #0]
   d5910:	6859      	ldr	r1, [r3, #4]
   d5912:	4632      	mov	r2, r6
   d5914:	c203      	stmia	r2!, {r0, r1}
   d5916:	3308      	adds	r3, #8
   d5918:	4573      	cmp	r3, lr
   d591a:	4616      	mov	r6, r2
   d591c:	d1f7      	bne.n	d590e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d591e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5920:	a901      	add	r1, sp, #4
   d5922:	a806      	add	r0, sp, #24
   d5924:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5926:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d592a:	f7ff faa7 	bl	d4e7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d592e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5930:	3404      	adds	r4, #4
   d5932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5934:	6833      	ldr	r3, [r6, #0]
   d5936:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5938:	b157      	cbz	r7, d5950 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d593a:	8868      	ldrh	r0, [r5, #2]
   d593c:	f7fe fd66 	bl	d440c <inet_ntohs>
   d5940:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5942:	e005      	b.n	d5950 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5944:	f105 0114 	add.w	r1, r5, #20
   d5948:	4620      	mov	r0, r4
   d594a:	f7ff facc 	bl	d4ee6 <_ZN9IPAddressaSEPKh>
   d594e:	e7f3      	b.n	d5938 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5950:	b00d      	add	sp, #52	; 0x34
   d5952:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5954 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5958:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d595a:	ab0e      	add	r3, sp, #56	; 0x38
   d595c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d595e:	4606      	mov	r6, r0
   d5960:	4617      	mov	r7, r2
   d5962:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5964:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5968:	462a      	mov	r2, r5
   d596a:	4629      	mov	r1, r5
   d596c:	f7fe fd66 	bl	d443c <netdb_getaddrinfo>
   d5970:	2800      	cmp	r0, #0
   d5972:	db1f      	blt.n	d59b4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5974:	9b01      	ldr	r3, [sp, #4]
   d5976:	b1fb      	cbz	r3, d59b8 <_ZN3UDP11beginPacketEPKct+0x64>
   d5978:	695b      	ldr	r3, [r3, #20]
   d597a:	b1eb      	cbz	r3, d59b8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d597c:	a802      	add	r0, sp, #8
   d597e:	f7ff fa6f 	bl	d4e60 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5982:	9b01      	ldr	r3, [sp, #4]
   d5984:	462a      	mov	r2, r5
   d5986:	6958      	ldr	r0, [r3, #20]
   d5988:	a902      	add	r1, sp, #8
   d598a:	f7ff ff9f 	bl	d58cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d598e:	a802      	add	r0, sp, #8
   d5990:	f7ff fa86 	bl	d4ea0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5994:	b180      	cbz	r0, d59b8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5996:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5998:	ad03      	add	r5, sp, #12
   d599a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d599e:	4b0b      	ldr	r3, [pc, #44]	; (d59cc <_ZN3UDP11beginPacketEPKct+0x78>)
   d59a0:	9308      	str	r3, [sp, #32]
   d59a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59a4:	ac09      	add	r4, sp, #36	; 0x24
   d59a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59a8:	682b      	ldr	r3, [r5, #0]
   d59aa:	7023      	strb	r3, [r4, #0]
   d59ac:	463a      	mov	r2, r7
   d59ae:	a908      	add	r1, sp, #32
   d59b0:	4630      	mov	r0, r6
   d59b2:	47c0      	blx	r8
   d59b4:	4604      	mov	r4, r0
   d59b6:	e001      	b.n	d59bc <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d59b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d59bc:	9801      	ldr	r0, [sp, #4]
   d59be:	f7fe fd35 	bl	d442c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d59c2:	4620      	mov	r0, r4
   d59c4:	b00e      	add	sp, #56	; 0x38
   d59c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d59ca:	bf00      	nop
   d59cc:	000d6614 	.word	0x000d6614

000d59d0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d59d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d59d4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d59d8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d59dc:	b098      	sub	sp, #96	; 0x60
   d59de:	4605      	mov	r5, r0
   d59e0:	460c      	mov	r4, r1
   d59e2:	4617      	mov	r7, r2
   d59e4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d59e6:	db00      	blt.n	d59ea <_ZN3UDP13receivePacketEPhjm+0x1a>
   d59e8:	b911      	cbnz	r1, d59f0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d59ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d59ee:	e04e      	b.n	d5a8e <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d59f0:	f04f 0a1c 	mov.w	sl, #28
   d59f4:	ae09      	add	r6, sp, #36	; 0x24
   d59f6:	4652      	mov	r2, sl
   d59f8:	2100      	movs	r1, #0
   d59fa:	4630      	mov	r0, r6
   d59fc:	f000 fd65 	bl	d64ca <memset>
        socklen_t slen = sizeof(saddr);
   d5a00:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d5a04:	f1b9 0f00 	cmp.w	r9, #0
   d5a08:	d014      	beq.n	d5a34 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a0e:	fbb9 f1f2 	udiv	r1, r9, r2
   d5a12:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d5a14:	fb02 9111 	mls	r1, r2, r1, r9
   d5a18:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5a1a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5a1c:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5a1e:	9300      	str	r3, [sp, #0]
   d5a20:	f241 0206 	movw	r2, #4102	; 0x1006
   d5a24:	ab10      	add	r3, sp, #64	; 0x40
   d5a26:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5a2a:	4640      	mov	r0, r8
   d5a2c:	f7fe fd16 	bl	d445c <sock_setsockopt>
            if (ret) {
   d5a30:	b108      	cbz	r0, d5a36 <_ZN3UDP13receivePacketEPhjm+0x66>
   d5a32:	e02c      	b.n	d5a8e <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5a34:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5a36:	ab04      	add	r3, sp, #16
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	4621      	mov	r1, r4
   d5a3c:	4603      	mov	r3, r0
   d5a3e:	9600      	str	r6, [sp, #0]
   d5a40:	463a      	mov	r2, r7
   d5a42:	6968      	ldr	r0, [r5, #20]
   d5a44:	f7fe fd1a 	bl	d447c <sock_recvfrom>
        if (ret >= 0) {
   d5a48:	1e04      	subs	r4, r0, #0
   d5a4a:	db1f      	blt.n	d5a8c <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5a4c:	f105 071c 	add.w	r7, r5, #28
   d5a50:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5a54:	4630      	mov	r0, r6
   d5a56:	4639      	mov	r1, r7
   d5a58:	f7ff ff38 	bl	d58cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5a5c:	2600      	movs	r6, #0
   d5a5e:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d5a60:	4639      	mov	r1, r7
   d5a62:	a805      	add	r0, sp, #20
   d5a64:	9310      	str	r3, [sp, #64]	; 0x40
   d5a66:	9611      	str	r6, [sp, #68]	; 0x44
   d5a68:	f7ff fdd8 	bl	d561c <_ZN6StringC1ERK9Printable>
   d5a6c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d5a6e:	9303      	str	r3, [sp, #12]
   d5a70:	9b05      	ldr	r3, [sp, #20]
   d5a72:	9302      	str	r3, [sp, #8]
   d5a74:	4b07      	ldr	r3, [pc, #28]	; (d5a94 <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d5a76:	9300      	str	r3, [sp, #0]
   d5a78:	2001      	movs	r0, #1
   d5a7a:	9401      	str	r4, [sp, #4]
   d5a7c:	4633      	mov	r3, r6
   d5a7e:	aa10      	add	r2, sp, #64	; 0x40
   d5a80:	4905      	ldr	r1, [pc, #20]	; (d5a98 <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d5a82:	f7fe fd9b 	bl	d45bc <log_message>
   d5a86:	a805      	add	r0, sp, #20
   d5a88:	f7ff fd16 	bl	d54b8 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5a8c:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5a8e:	b018      	add	sp, #96	; 0x60
   d5a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a94:	000d67e5 	.word	0x000d67e5
   d5a98:	000d6749 	.word	0x000d6749

000d5a9c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5a9c:	b538      	push	{r3, r4, r5, lr}
   d5a9e:	4605      	mov	r5, r0
   d5aa0:	4614      	mov	r4, r2
   d5aa2:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5aa4:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5aa6:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5aa8:	d111      	bne.n	d5ace <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5aaa:	231c      	movs	r3, #28
   d5aac:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5aae:	230a      	movs	r3, #10
   d5ab0:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5ab2:	f7fe fcb3 	bl	d441c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5ab6:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5ab8:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5abc:	1d2b      	adds	r3, r5, #4
   d5abe:	3514      	adds	r5, #20
   d5ac0:	f853 2b04 	ldr.w	r2, [r3], #4
   d5ac4:	f844 2b04 	str.w	r2, [r4], #4
   d5ac8:	42ab      	cmp	r3, r5
   d5aca:	d1f9      	bne.n	d5ac0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5acc:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5ace:	2b04      	cmp	r3, #4
   d5ad0:	d10a      	bne.n	d5ae8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5ad2:	2310      	movs	r3, #16
   d5ad4:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5ad6:	2302      	movs	r3, #2
   d5ad8:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5ada:	f7fe fc9f 	bl	d441c <inet_htons>
   d5ade:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5ae0:	6868      	ldr	r0, [r5, #4]
   d5ae2:	f7fe fc8b 	bl	d43fc <inet_htonl>
   d5ae6:	6060      	str	r0, [r4, #4]
   d5ae8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5aec <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5af0:	4698      	mov	r8, r3
   d5af2:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5af4:	2320      	movs	r3, #32
   d5af6:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5af8:	4682      	mov	sl, r0
   d5afa:	468b      	mov	fp, r1
   d5afc:	a804      	add	r0, sp, #16
   d5afe:	4641      	mov	r1, r8
   d5b00:	4616      	mov	r6, r2
   d5b02:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5b06:	9308      	str	r3, [sp, #32]
   d5b08:	9409      	str	r4, [sp, #36]	; 0x24
   d5b0a:	f7ff fd87 	bl	d561c <_ZN6StringC1ERK9Printable>
   d5b0e:	9b04      	ldr	r3, [sp, #16]
   d5b10:	9302      	str	r3, [sp, #8]
   d5b12:	ad08      	add	r5, sp, #32
   d5b14:	4b15      	ldr	r3, [pc, #84]	; (d5b6c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d5b16:	4916      	ldr	r1, [pc, #88]	; (d5b70 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d5b18:	9300      	str	r3, [sp, #0]
   d5b1a:	462a      	mov	r2, r5
   d5b1c:	4623      	mov	r3, r4
   d5b1e:	2001      	movs	r0, #1
   d5b20:	f8cd 900c 	str.w	r9, [sp, #12]
   d5b24:	9601      	str	r6, [sp, #4]
   d5b26:	f7fe fd49 	bl	d45bc <log_message>
	sockaddr_storage s = {};
   d5b2a:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5b2c:	a804      	add	r0, sp, #16
   d5b2e:	f7ff fcc3 	bl	d54b8 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d5b32:	463a      	mov	r2, r7
   d5b34:	4621      	mov	r1, r4
   d5b36:	4628      	mov	r0, r5
   d5b38:	f000 fcc7 	bl	d64ca <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5b3c:	462a      	mov	r2, r5
   d5b3e:	4649      	mov	r1, r9
   d5b40:	4640      	mov	r0, r8
   d5b42:	f7ff ffab 	bl	d5a9c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5b46:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d5b4a:	b14b      	cbz	r3, d5b60 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5b4c:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d5b50:	4623      	mov	r3, r4
   d5b52:	4632      	mov	r2, r6
   d5b54:	4659      	mov	r1, fp
   d5b56:	f8da 0014 	ldr.w	r0, [sl, #20]
   d5b5a:	f7fe fc97 	bl	d448c <sock_sendto>
   d5b5e:	e001      	b.n	d5b64 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5b64:	b011      	add	sp, #68	; 0x44
   d5b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b6a:	bf00      	nop
   d5b6c:	000d6802 	.word	0x000d6802
   d5b70:	000d6749 	.word	0x000d6749

000d5b74 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b76:	b091      	sub	sp, #68	; 0x44
   d5b78:	460c      	mov	r4, r1
   d5b7a:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5b7c:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5b7e:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5b80:	a809      	add	r0, sp, #36	; 0x24
   d5b82:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5b84:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5b86:	f000 fca0 	bl	d64ca <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5b8a:	aa09      	add	r2, sp, #36	; 0x24
   d5b8c:	2100      	movs	r1, #0
   d5b8e:	4620      	mov	r0, r4
   d5b90:	f7ff ff84 	bl	d5a9c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5b94:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5b98:	2b02      	cmp	r3, #2
   d5b9a:	d12e      	bne.n	d5bfa <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d5b9c:	2300      	movs	r3, #0
   d5b9e:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5ba2:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5ba4:	b1dd      	cbz	r5, d5bde <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5ba6:	a902      	add	r1, sp, #8
   d5ba8:	4628      	mov	r0, r5
   d5baa:	f7fe fbff 	bl	d43ac <if_get_by_index>
   d5bae:	b9b0      	cbnz	r0, d5bde <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d5bb0:	a910      	add	r1, sp, #64	; 0x40
   d5bb2:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5bb6:	9802      	ldr	r0, [sp, #8]
   d5bb8:	f7fe fc00 	bl	d43bc <if_get_addrs>
   d5bbc:	b960      	cbnz	r0, d5bd8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5bbe:	9b03      	ldr	r3, [sp, #12]
   d5bc0:	b153      	cbz	r3, d5bd8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5bc2:	68da      	ldr	r2, [r3, #12]
   d5bc4:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5bc6:	7851      	ldrb	r1, [r2, #1]
   d5bc8:	2902      	cmp	r1, #2
   d5bca:	d103      	bne.n	d5bd4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5bcc:	6852      	ldr	r2, [r2, #4]
   d5bce:	b10a      	cbz	r2, d5bd4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5bd0:	9205      	str	r2, [sp, #20]
   d5bd2:	e001      	b.n	d5bd8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	e7f3      	b.n	d5bc0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5bd8:	9803      	ldr	r0, [sp, #12]
   d5bda:	f7fe fbf7 	bl	d43cc <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5bde:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5be0:	f04f 0308 	mov.w	r3, #8
   d5be4:	9300      	str	r3, [sp, #0]
   d5be6:	bf18      	it	ne
   d5be8:	2203      	movne	r2, #3
   d5bea:	ab04      	add	r3, sp, #16
   d5bec:	bf08      	it	eq
   d5bee:	2204      	moveq	r2, #4
   d5bf0:	2100      	movs	r1, #0
   d5bf2:	4630      	mov	r0, r6
   d5bf4:	f7fe fc32 	bl	d445c <sock_setsockopt>
   d5bf8:	e01e      	b.n	d5c38 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5bfa:	2b0a      	cmp	r3, #10
   d5bfc:	d11a      	bne.n	d5c34 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d5bfe:	ac04      	add	r4, sp, #16
   d5c00:	2214      	movs	r2, #20
   d5c02:	2100      	movs	r1, #0
   d5c04:	4620      	mov	r0, r4
   d5c06:	f000 fc60 	bl	d64ca <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5c0a:	ab0b      	add	r3, sp, #44	; 0x2c
   d5c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5c0e:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5c14:	f04f 0314 	mov.w	r3, #20
   d5c18:	9300      	str	r3, [sp, #0]
   d5c1a:	bf18      	it	ne
   d5c1c:	220c      	movne	r2, #12
   d5c1e:	4623      	mov	r3, r4
   d5c20:	bf08      	it	eq
   d5c22:	220d      	moveq	r2, #13
   d5c24:	2129      	movs	r1, #41	; 0x29
   d5c26:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5c28:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5c2a:	f7fe fc17 	bl	d445c <sock_setsockopt>
   d5c2e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5c32:	e001      	b.n	d5c38 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5c38:	b011      	add	sp, #68	; 0x44
   d5c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c3c <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5c3c:	b538      	push	{r3, r4, r5, lr}
   d5c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c42:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5c44:	4b0b      	ldr	r3, [pc, #44]	; (d5c74 <_ZN3UDPC1Ev+0x38>)
   d5c46:	f103 0208 	add.w	r2, r3, #8
   d5c4a:	336c      	adds	r3, #108	; 0x6c
   d5c4c:	2500      	movs	r5, #0
   d5c4e:	6103      	str	r3, [r0, #16]
   d5c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d5c54:	4604      	mov	r4, r0
   d5c56:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5c58:	6002      	str	r2, [r0, #0]
   d5c5a:	6143      	str	r3, [r0, #20]
   d5c5c:	301c      	adds	r0, #28
   d5c5e:	f7ff f8ff 	bl	d4e60 <_ZN9IPAddressC1Ev>
   d5c62:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5c66:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5c68:	8725      	strh	r5, [r4, #56]	; 0x38
   d5c6a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5c6c:	6423      	str	r3, [r4, #64]	; 0x40
   d5c6e:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5c70:	4620      	mov	r0, r4
   d5c72:	bd38      	pop	{r3, r4, r5, pc}
   d5c74:	000d6830 	.word	0x000d6830

000d5c78 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5c78:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5c7a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5c7e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5c80:	b11b      	cbz	r3, d5c8a <_ZN3UDP13releaseBufferEv+0x12>
   d5c82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5c84:	b108      	cbz	r0, d5c8a <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5c86:	f7fe fa0a 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5c8a:	2300      	movs	r3, #0
   d5c8c:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5c8e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5c92:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5c94:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5c96:	8723      	strh	r3, [r4, #56]	; 0x38
   d5c98:	bd10      	pop	{r4, pc}

000d5c9a <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5c9a:	b570      	push	{r4, r5, r6, lr}
   d5c9c:	4604      	mov	r4, r0
   d5c9e:	4616      	mov	r6, r2
   d5ca0:	460d      	mov	r5, r1
    releaseBuffer();
   d5ca2:	f7ff ffe9 	bl	d5c78 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5ca6:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5ca8:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5caa:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5cac:	b93e      	cbnz	r6, d5cbe <_ZN3UDP9setBufferEjPh+0x24>
   d5cae:	b135      	cbz	r5, d5cbe <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5cb0:	4628      	mov	r0, r5
   d5cb2:	f7fe f9f2 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5cb6:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5cb8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5cba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5cc0:	b103      	cbz	r3, d5cc4 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5cc2:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5cc4:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5cc6:	3000      	adds	r0, #0
   d5cc8:	bf18      	it	ne
   d5cca:	2001      	movne	r0, #1
   d5ccc:	bd70      	pop	{r4, r5, r6, pc}

000d5cce <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5cce:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5cd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5cd2:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d5cd4:	b91a      	cbnz	r2, d5cde <_ZN3UDP11parsePacketEm+0x10>
   d5cd6:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5cd8:	b109      	cbz	r1, d5cde <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d5cda:	f7ff ffde 	bl	d5c9a <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5cde:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5ce0:	2300      	movs	r3, #0
   d5ce2:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5ce4:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5ce6:	b141      	cbz	r1, d5cfa <_ZN3UDP11parsePacketEm+0x2c>
   d5ce8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5cea:	b132      	cbz	r2, d5cfa <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d5cec:	6820      	ldr	r0, [r4, #0]
   d5cee:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	47a8      	blx	r5
        if (result > 0) {
   d5cf4:	2800      	cmp	r0, #0
            _total = result;
   d5cf6:	bfc8      	it	gt
   d5cf8:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5cfa:	6823      	ldr	r3, [r4, #0]
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	691b      	ldr	r3, [r3, #16]
}
   d5d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5d04:	4718      	bx	r3
	...

000d5d08 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d0a:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5d0c:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5d0e:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5d10:	2600      	movs	r6, #0
   d5d12:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5d14:	4617      	mov	r7, r2
   d5d16:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5d18:	9308      	str	r3, [sp, #32]
   d5d1a:	9609      	str	r6, [sp, #36]	; 0x24
   d5d1c:	f7ff fc7e 	bl	d561c <_ZN6StringC1ERK9Printable>
   d5d20:	9b04      	ldr	r3, [sp, #16]
   d5d22:	9301      	str	r3, [sp, #4]
   d5d24:	4b10      	ldr	r3, [pc, #64]	; (d5d68 <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d5d26:	9300      	str	r3, [sp, #0]
   d5d28:	aa08      	add	r2, sp, #32
   d5d2a:	4633      	mov	r3, r6
   d5d2c:	490f      	ldr	r1, [pc, #60]	; (d5d6c <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d5d2e:	9702      	str	r7, [sp, #8]
   d5d30:	2001      	movs	r0, #1
   d5d32:	f7fe fc43 	bl	d45bc <log_message>
   d5d36:	a804      	add	r0, sp, #16
   d5d38:	f7ff fbbe 	bl	d54b8 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5d3c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d5d3e:	b922      	cbnz	r2, d5d4a <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d5d40:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d5d42:	b111      	cbz	r1, d5d4a <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d5d44:	4628      	mov	r0, r5
   d5d46:	f7ff ffa8 	bl	d5c9a <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5d4a:	3404      	adds	r4, #4
   d5d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5d4e:	f105 0620 	add.w	r6, r5, #32
   d5d52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5d54:	6823      	ldr	r3, [r4, #0]
   d5d56:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5d58:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5d5a:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5d5c:	2300      	movs	r3, #0
   d5d5e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5d60:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5d62:	b011      	add	sp, #68	; 0x44
   d5d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d66:	bf00      	nop
   d5d68:	000d681c 	.word	0x000d681c
   d5d6c:	000d6749 	.word	0x000d6749

000d5d70 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5d70:	b510      	push	{r4, lr}
   d5d72:	4b07      	ldr	r3, [pc, #28]	; (d5d90 <_ZN3UDPD1Ev+0x20>)
   d5d74:	f103 0208 	add.w	r2, r3, #8
   d5d78:	336c      	adds	r3, #108	; 0x6c
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	6002      	str	r2, [r0, #0]
   d5d7e:	6103      	str	r3, [r0, #16]
   d5d80:	f7ff fd15 	bl	d57ae <_ZN3UDP4stopEv>
   d5d84:	4620      	mov	r0, r4
   d5d86:	f7ff ff77 	bl	d5c78 <_ZN3UDP13releaseBufferEv>
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	bd10      	pop	{r4, pc}
   d5d8e:	bf00      	nop
   d5d90:	000d6830 	.word	0x000d6830

000d5d94 <_ZN3UDPD0Ev>:
   d5d94:	b510      	push	{r4, lr}
   d5d96:	4604      	mov	r4, r0
   d5d98:	f7ff ffea 	bl	d5d70 <_ZN3UDPD1Ev>
   d5d9c:	4620      	mov	r0, r4
   d5d9e:	f7fe f97e 	bl	d409e <_ZdlPv>
   d5da2:	4620      	mov	r0, r4
   d5da4:	bd10      	pop	{r4, pc}

000d5da6 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5da6:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5da8:	6940      	ldr	r0, [r0, #20]
   d5daa:	2800      	cmp	r0, #0
   d5dac:	db04      	blt.n	d5db8 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5dae:	2301      	movs	r3, #1
   d5db0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5db4:	f7ff bede 	b.w	d5b74 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d5db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5dbc:	4770      	bx	lr

000d5dbe <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5dbe:	4770      	bx	lr

000d5dc0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dc0:	7441      	strb	r1, [r0, #17]
   d5dc2:	4770      	bx	lr

000d5dc4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5dc4:	7c00      	ldrb	r0, [r0, #16]
   d5dc6:	f7fe bbb9 	b.w	d453c <HAL_USART_Available_Data_For_Write>

000d5dca <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5dca:	7c00      	ldrb	r0, [r0, #16]
   d5dcc:	f7fe bb8e 	b.w	d44ec <HAL_USART_Available_Data>

000d5dd0 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5dd0:	7c00      	ldrb	r0, [r0, #16]
   d5dd2:	f7fe bb9b 	b.w	d450c <HAL_USART_Peek_Data>

000d5dd6 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5dd6:	7c00      	ldrb	r0, [r0, #16]
   d5dd8:	f7fe bb90 	b.w	d44fc <HAL_USART_Read_Data>

000d5ddc <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ddc:	7c00      	ldrb	r0, [r0, #16]
   d5dde:	f7fe bb9d 	b.w	d451c <HAL_USART_Flush_Data>

000d5de2 <_ZN11USARTSerialD0Ev>:
   d5de2:	b510      	push	{r4, lr}
   d5de4:	4604      	mov	r4, r0
   d5de6:	f7fe f95a 	bl	d409e <_ZdlPv>
   d5dea:	4620      	mov	r0, r4
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5dee:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5df0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5df2:	4604      	mov	r4, r0
   d5df4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5df6:	b925      	cbnz	r5, d5e02 <_ZN11USARTSerial5writeEh+0x14>
   d5df8:	7c00      	ldrb	r0, [r0, #16]
   d5dfa:	f7fe fb9f 	bl	d453c <HAL_USART_Available_Data_For_Write>
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	dd05      	ble.n	d5e0e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e02:	4631      	mov	r1, r6
   d5e04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e0a:	f7fe bb67 	b.w	d44dc <HAL_USART_Write_Data>
  }
  return 0;
}
   d5e0e:	4628      	mov	r0, r5
   d5e10:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5e14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5e14:	b510      	push	{r4, lr}
   d5e16:	4604      	mov	r4, r0
   d5e18:	4608      	mov	r0, r1
   d5e1a:	4611      	mov	r1, r2
   d5e1c:	2200      	movs	r2, #0
   d5e1e:	6062      	str	r2, [r4, #4]
   d5e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e24:	60a2      	str	r2, [r4, #8]
   d5e26:	4a05      	ldr	r2, [pc, #20]	; (d5e3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5e28:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5e2a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5e2c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5e2e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5e30:	461a      	mov	r2, r3
   d5e32:	f7fe fb4b 	bl	d44cc <HAL_USART_Init>
}
   d5e36:	4620      	mov	r0, r4
   d5e38:	bd10      	pop	{r4, pc}
   d5e3a:	bf00      	nop
   d5e3c:	000d68a8 	.word	0x000d68a8

000d5e40 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5e40:	7c00      	ldrb	r0, [r0, #16]
   d5e42:	f7fe bb73 	b.w	d452c <HAL_USART_Is_Enabled>
	...

000d5e48 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e48:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e4a:	4d0c      	ldr	r5, [pc, #48]	; (d5e7c <_Z22__fetch_global_Serial1v+0x34>)
   d5e4c:	6829      	ldr	r1, [r5, #0]
   d5e4e:	f011 0401 	ands.w	r4, r1, #1
   d5e52:	d111      	bne.n	d5e78 <_Z22__fetch_global_Serial1v+0x30>
   d5e54:	4628      	mov	r0, r5
   d5e56:	f7fe f926 	bl	d40a6 <__cxa_guard_acquire>
   d5e5a:	b168      	cbz	r0, d5e78 <_Z22__fetch_global_Serial1v+0x30>
   d5e5c:	4a08      	ldr	r2, [pc, #32]	; (d5e80 <_Z22__fetch_global_Serial1v+0x38>)
   d5e5e:	4b09      	ldr	r3, [pc, #36]	; (d5e84 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e60:	4809      	ldr	r0, [pc, #36]	; (d5e88 <_Z22__fetch_global_Serial1v+0x40>)
   d5e62:	4621      	mov	r1, r4
   d5e64:	f7ff ffd6 	bl	d5e14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5e68:	4628      	mov	r0, r5
   d5e6a:	f7fe f921 	bl	d40b0 <__cxa_guard_release>
   d5e6e:	4a07      	ldr	r2, [pc, #28]	; (d5e8c <_Z22__fetch_global_Serial1v+0x44>)
   d5e70:	4907      	ldr	r1, [pc, #28]	; (d5e90 <_Z22__fetch_global_Serial1v+0x48>)
   d5e72:	4805      	ldr	r0, [pc, #20]	; (d5e88 <_Z22__fetch_global_Serial1v+0x40>)
   d5e74:	f000 f9ac 	bl	d61d0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e78:	4803      	ldr	r0, [pc, #12]	; (d5e88 <_Z22__fetch_global_Serial1v+0x40>)
   d5e7a:	bd38      	pop	{r3, r4, r5, pc}
   d5e7c:	2003e670 	.word	0x2003e670
   d5e80:	2003e674 	.word	0x2003e674
   d5e84:	2003e5ec 	.word	0x2003e5ec
   d5e88:	2003e5d8 	.word	0x2003e5d8
   d5e8c:	2003e3b0 	.word	0x2003e3b0
   d5e90:	000d5dbf 	.word	0x000d5dbf

000d5e94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e94:	7441      	strb	r1, [r0, #17]
   d5e96:	4770      	bx	lr

000d5e98 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5e98:	4770      	bx	lr

000d5e9a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5e9a:	2100      	movs	r1, #0
   d5e9c:	7c00      	ldrb	r0, [r0, #16]
   d5e9e:	f7fe bb75 	b.w	d458c <HAL_USB_USART_Receive_Data>

000d5ea2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5ea2:	2101      	movs	r1, #1
   d5ea4:	7c00      	ldrb	r0, [r0, #16]
   d5ea6:	f7fe bb71 	b.w	d458c <HAL_USB_USART_Receive_Data>

000d5eaa <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5eaa:	7c00      	ldrb	r0, [r0, #16]
   d5eac:	f7fe bb66 	b.w	d457c <HAL_USB_USART_Available_Data_For_Write>

000d5eb0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5eb0:	7c00      	ldrb	r0, [r0, #16]
   d5eb2:	f7fe bb5b 	b.w	d456c <HAL_USB_USART_Available_Data>

000d5eb6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5eb6:	b538      	push	{r3, r4, r5, lr}
   d5eb8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eba:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5ebc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ebe:	f7fe fb5d 	bl	d457c <HAL_USB_USART_Available_Data_For_Write>
   d5ec2:	2800      	cmp	r0, #0
   d5ec4:	dc01      	bgt.n	d5eca <_ZN9USBSerial5writeEh+0x14>
   d5ec6:	7c60      	ldrb	r0, [r4, #17]
   d5ec8:	b120      	cbz	r0, d5ed4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5eca:	4629      	mov	r1, r5
   d5ecc:	7c20      	ldrb	r0, [r4, #16]
   d5ece:	f7fe fb65 	bl	d459c <HAL_USB_USART_Send_Data>
    return 1;
   d5ed2:	2001      	movs	r0, #1
  }
  return 0;
}
   d5ed4:	bd38      	pop	{r3, r4, r5, pc}

000d5ed6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5ed6:	7c00      	ldrb	r0, [r0, #16]
   d5ed8:	f7fe bb68 	b.w	d45ac <HAL_USB_USART_Flush_Data>

000d5edc <_ZN9USBSerialD0Ev>:
   d5edc:	b510      	push	{r4, lr}
   d5ede:	4604      	mov	r4, r0
   d5ee0:	f7fe f8dd 	bl	d409e <_ZdlPv>
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	bd10      	pop	{r4, pc}

000d5ee8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ee8:	b510      	push	{r4, lr}
   d5eea:	4604      	mov	r4, r0
   d5eec:	2300      	movs	r3, #0
   d5eee:	6063      	str	r3, [r4, #4]
   d5ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ef4:	60a3      	str	r3, [r4, #8]
   d5ef6:	4b05      	ldr	r3, [pc, #20]	; (d5f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ef8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5efa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5efc:	4608      	mov	r0, r1
{
  _serial = serial;
   d5efe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5f00:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5f02:	4611      	mov	r1, r2
   d5f04:	f7fe fb22 	bl	d454c <HAL_USB_USART_Init>
}
   d5f08:	4620      	mov	r0, r4
   d5f0a:	bd10      	pop	{r4, pc}
   d5f0c:	000d68d8 	.word	0x000d68d8

000d5f10 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f10:	2200      	movs	r2, #0
   d5f12:	7c00      	ldrb	r0, [r0, #16]
   d5f14:	f7fe bb22 	b.w	d455c <HAL_USB_USART_Begin>

000d5f18 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f1a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f1c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f1e:	2100      	movs	r1, #0
   d5f20:	f000 fad3 	bl	d64ca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f24:	4620      	mov	r0, r4
   d5f26:	bd10      	pop	{r4, pc}

000d5f28 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f28:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f2a:	4d0e      	ldr	r5, [pc, #56]	; (d5f64 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f2c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f2e:	a801      	add	r0, sp, #4
   d5f30:	f7ff fff2 	bl	d5f18 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f34:	6829      	ldr	r1, [r5, #0]
   d5f36:	f011 0401 	ands.w	r4, r1, #1
   d5f3a:	d110      	bne.n	d5f5e <_Z16_fetch_usbserialv+0x36>
   d5f3c:	4628      	mov	r0, r5
   d5f3e:	f7fe f8b2 	bl	d40a6 <__cxa_guard_acquire>
   d5f42:	b160      	cbz	r0, d5f5e <_Z16_fetch_usbserialv+0x36>
   d5f44:	aa01      	add	r2, sp, #4
   d5f46:	4621      	mov	r1, r4
   d5f48:	4807      	ldr	r0, [pc, #28]	; (d5f68 <_Z16_fetch_usbserialv+0x40>)
   d5f4a:	f7ff ffcd 	bl	d5ee8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f4e:	4628      	mov	r0, r5
   d5f50:	f7fe f8ae 	bl	d40b0 <__cxa_guard_release>
   d5f54:	4a05      	ldr	r2, [pc, #20]	; (d5f6c <_Z16_fetch_usbserialv+0x44>)
   d5f56:	4906      	ldr	r1, [pc, #24]	; (d5f70 <_Z16_fetch_usbserialv+0x48>)
   d5f58:	4803      	ldr	r0, [pc, #12]	; (d5f68 <_Z16_fetch_usbserialv+0x40>)
   d5f5a:	f000 f939 	bl	d61d0 <__aeabi_atexit>
	return _usbserial;
}
   d5f5e:	4802      	ldr	r0, [pc, #8]	; (d5f68 <_Z16_fetch_usbserialv+0x40>)
   d5f60:	b007      	add	sp, #28
   d5f62:	bd30      	pop	{r4, r5, pc}
   d5f64:	2003e6f8 	.word	0x2003e6f8
   d5f68:	2003e6fc 	.word	0x2003e6fc
   d5f6c:	2003e3b0 	.word	0x2003e3b0
   d5f70:	000d5e99 	.word	0x000d5e99

000d5f74 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d5f78:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d5f7a:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5f7c:	4615      	mov	r5, r2
   d5f7e:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d5f80:	bf34      	ite	cc
   d5f82:	4615      	movcc	r5, r2
   d5f84:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5f86:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d5f88:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5f8a:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5f8c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d5f90:	d107      	bne.n	d5fa2 <ltoa+0x2e>
   d5f92:	4298      	cmp	r0, r3
   d5f94:	da05      	bge.n	d5fa2 <ltoa+0x2e>
      {
            *head++ = '-';
   d5f96:	232d      	movs	r3, #45	; 0x2d
   d5f98:	f101 0801 	add.w	r8, r1, #1
   d5f9c:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d5f9e:	4240      	negs	r0, r0
   d5fa0:	e001      	b.n	d5fa6 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d5fa2:	b1b0      	cbz	r0, d5fd2 <ltoa+0x5e>
   d5fa4:	46a0      	mov	r8, r4
   d5fa6:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d5faa:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5fac:	462a      	mov	r2, r5
   d5fae:	4601      	mov	r1, r0
   d5fb0:	a801      	add	r0, sp, #4
   d5fb2:	f000 fa6b 	bl	d648c <ldiv>
   d5fb6:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d5fb8:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d5fba:	2b09      	cmp	r3, #9
   d5fbc:	bfcc      	ite	gt
   d5fbe:	2237      	movgt	r2, #55	; 0x37
   d5fc0:	2230      	movle	r2, #48	; 0x30
   d5fc2:	fa52 f383 	uxtab	r3, r2, r3
   d5fc6:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5fca:	3701      	adds	r7, #1
   d5fcc:	2800      	cmp	r0, #0
   d5fce:	d1ed      	bne.n	d5fac <ltoa+0x38>
   d5fd0:	e006      	b.n	d5fe0 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5fd2:	2330      	movs	r3, #48	; 0x30
   d5fd4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5fd8:	46a0      	mov	r8, r4
   d5fda:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5fde:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5fe0:	463a      	mov	r2, r7
   d5fe2:	1c71      	adds	r1, r6, #1
   d5fe4:	4640      	mov	r0, r8
   d5fe6:	f000 fa65 	bl	d64b4 <memcpy>
      return str;
}
   d5fea:	4620      	mov	r0, r4
   d5fec:	b00c      	add	sp, #48	; 0x30
   d5fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5ff4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5ff4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ff6:	4b0c      	ldr	r3, [pc, #48]	; (d6028 <serialEventRun+0x34>)
   d5ff8:	b133      	cbz	r3, d6008 <serialEventRun+0x14>
   d5ffa:	f7ff ff95 	bl	d5f28 <_Z16_fetch_usbserialv>
   d5ffe:	6803      	ldr	r3, [r0, #0]
   d6000:	691b      	ldr	r3, [r3, #16]
   d6002:	4798      	blx	r3
   d6004:	2800      	cmp	r0, #0
   d6006:	dc09      	bgt.n	d601c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6008:	4b08      	ldr	r3, [pc, #32]	; (d602c <serialEventRun+0x38>)
   d600a:	b163      	cbz	r3, d6026 <serialEventRun+0x32>
   d600c:	f7ff ff1c 	bl	d5e48 <_Z22__fetch_global_Serial1v>
   d6010:	6803      	ldr	r3, [r0, #0]
   d6012:	691b      	ldr	r3, [r3, #16]
   d6014:	4798      	blx	r3
   d6016:	2800      	cmp	r0, #0
   d6018:	dc03      	bgt.n	d6022 <serialEventRun+0x2e>
   d601a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d601c:	f3af 8000 	nop.w
   d6020:	e7f2      	b.n	d6008 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6022:	f3af 8000 	nop.w
   d6026:	bd08      	pop	{r3, pc}
	...

000d6030 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6030:	b508      	push	{r3, lr}
	serialEventRun();
   d6032:	f7ff ffdf 	bl	d5ff4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6036:	f7fe f949 	bl	d42cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d603a:	4b01      	ldr	r3, [pc, #4]	; (d6040 <_post_loop+0x10>)
   d603c:	6018      	str	r0, [r3, #0]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	2003e714 	.word	0x2003e714

000d6044 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6044:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6046:	2300      	movs	r3, #0
   d6048:	9300      	str	r3, [sp, #0]
   d604a:	461a      	mov	r2, r3
   d604c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6050:	f7fe fade 	bl	d4610 <system_ctrl_set_result>
}
   d6054:	b003      	add	sp, #12
   d6056:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d605c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d605c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d605e:	8843      	ldrh	r3, [r0, #2]
   d6060:	2b0a      	cmp	r3, #10
   d6062:	d008      	beq.n	d6076 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6064:	2b50      	cmp	r3, #80	; 0x50
   d6066:	d109      	bne.n	d607c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6068:	4b09      	ldr	r3, [pc, #36]	; (d6090 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d606a:	681b      	ldr	r3, [r3, #0]
   d606c:	b13b      	cbz	r3, d607e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d606e:	b003      	add	sp, #12
   d6070:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6074:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6076:	f7ff ffe5 	bl	d6044 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d607a:	e006      	b.n	d608a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d607c:	2300      	movs	r3, #0
   d607e:	9300      	str	r3, [sp, #0]
   d6080:	461a      	mov	r2, r3
   d6082:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6086:	f7fe fac3 	bl	d4610 <system_ctrl_set_result>
        break;
    }
}
   d608a:	b003      	add	sp, #12
   d608c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6090:	2003e710 	.word	0x2003e710

000d6094 <module_user_init_hook>:

void module_user_init_hook()
{
   d6094:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6096:	2100      	movs	r1, #0
   d6098:	4804      	ldr	r0, [pc, #16]	; (d60ac <module_user_init_hook+0x18>)
   d609a:	f7fe fad3 	bl	d4644 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d609e:	2100      	movs	r1, #0
   d60a0:	4803      	ldr	r0, [pc, #12]	; (d60b0 <module_user_init_hook+0x1c>)
}
   d60a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60a6:	f7fe baa9 	b.w	d45fc <system_ctrl_set_app_request_handler>
   d60aa:	bf00      	nop
   d60ac:	00000000 	.word	0x00000000
   d60b0:	000d605d 	.word	0x000d605d

000d60b4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d60b4:	b510      	push	{r4, lr}
   d60b6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d60b8:	480f      	ldr	r0, [pc, #60]	; (d60f8 <pinAvailable+0x44>)
   d60ba:	f7ff f9f3 	bl	d54a4 <_ZN8SPIClass9isEnabledEv>
   d60be:	b128      	cbz	r0, d60cc <pinAvailable+0x18>
   d60c0:	f1a4 030b 	sub.w	r3, r4, #11
   d60c4:	2b02      	cmp	r3, #2
   d60c6:	d801      	bhi.n	d60cc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d60c8:	2000      	movs	r0, #0
   d60ca:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d60cc:	f000 f83e 	bl	d614c <_Z19__fetch_global_Wirev>
   d60d0:	f7fe fe88 	bl	d4de4 <_ZN7TwoWire9isEnabledEv>
   d60d4:	b108      	cbz	r0, d60da <pinAvailable+0x26>
   d60d6:	2c01      	cmp	r4, #1
   d60d8:	d9f6      	bls.n	d60c8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d60da:	f7ff feb5 	bl	d5e48 <_Z22__fetch_global_Serial1v>
   d60de:	f7ff feaf 	bl	d5e40 <_ZN11USARTSerial9isEnabledEv>
   d60e2:	b118      	cbz	r0, d60ec <pinAvailable+0x38>
   d60e4:	f1a4 0309 	sub.w	r3, r4, #9
   d60e8:	2b01      	cmp	r3, #1
   d60ea:	d9ed      	bls.n	d60c8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d60ec:	2c1e      	cmp	r4, #30
   d60ee:	bf8c      	ite	hi
   d60f0:	2000      	movhi	r0, #0
   d60f2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d60f4:	bd10      	pop	{r4, pc}
   d60f6:	bf00      	nop
   d60f8:	2003e730 	.word	0x2003e730

000d60fc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d60fc:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d60fe:	b538      	push	{r3, r4, r5, lr}
   d6100:	4604      	mov	r4, r0
   d6102:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6104:	d80a      	bhi.n	d611c <pinMode+0x20>
   d6106:	29ff      	cmp	r1, #255	; 0xff
   d6108:	d008      	beq.n	d611c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d610a:	f7ff ffd3 	bl	d60b4 <pinAvailable>
   d610e:	b128      	cbz	r0, d611c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6110:	4629      	mov	r1, r5
   d6112:	4620      	mov	r0, r4
}
   d6114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6118:	f7fe b8f0 	b.w	d42fc <HAL_Pin_Mode>
   d611c:	bd38      	pop	{r3, r4, r5, pc}

000d611e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d611e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6120:	b510      	push	{r4, lr}
   d6122:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6124:	bf9c      	itt	ls
   d6126:	340e      	addls	r4, #14
   d6128:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d612a:	4620      	mov	r0, r4
   d612c:	f7ff ffc2 	bl	d60b4 <pinAvailable>
   d6130:	b150      	cbz	r0, d6148 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6132:	2103      	movs	r1, #3
   d6134:	4620      	mov	r0, r4
   d6136:	f7fe f8d9 	bl	d42ec <HAL_Validate_Pin_Function>
   d613a:	2803      	cmp	r0, #3
   d613c:	d104      	bne.n	d6148 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d613e:	4620      	mov	r0, r4
}
   d6140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6144:	f7fe b8e2 	b.w	d430c <HAL_ADC_Read>
}
   d6148:	2000      	movs	r0, #0
   d614a:	bd10      	pop	{r4, pc}

000d614c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d614c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d614e:	4d0b      	ldr	r5, [pc, #44]	; (d617c <_Z19__fetch_global_Wirev+0x30>)
   d6150:	6829      	ldr	r1, [r5, #0]
   d6152:	f011 0401 	ands.w	r4, r1, #1
   d6156:	d10f      	bne.n	d6178 <_Z19__fetch_global_Wirev+0x2c>
   d6158:	4628      	mov	r0, r5
   d615a:	f7fd ffa4 	bl	d40a6 <__cxa_guard_acquire>
   d615e:	b158      	cbz	r0, d6178 <_Z19__fetch_global_Wirev+0x2c>
   d6160:	4621      	mov	r1, r4
   d6162:	4807      	ldr	r0, [pc, #28]	; (d6180 <_Z19__fetch_global_Wirev+0x34>)
   d6164:	f7fe fe2c 	bl	d4dc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6168:	4628      	mov	r0, r5
   d616a:	f7fd ffa1 	bl	d40b0 <__cxa_guard_release>
   d616e:	4a05      	ldr	r2, [pc, #20]	; (d6184 <_Z19__fetch_global_Wirev+0x38>)
   d6170:	4905      	ldr	r1, [pc, #20]	; (d6188 <_Z19__fetch_global_Wirev+0x3c>)
   d6172:	4803      	ldr	r0, [pc, #12]	; (d6180 <_Z19__fetch_global_Wirev+0x34>)
   d6174:	f000 f82c 	bl	d61d0 <__aeabi_atexit>
	return wire;
}
   d6178:	4801      	ldr	r0, [pc, #4]	; (d6180 <_Z19__fetch_global_Wirev+0x34>)
   d617a:	bd38      	pop	{r3, r4, r5, pc}
   d617c:	2003e718 	.word	0x2003e718
   d6180:	2003e71c 	.word	0x2003e71c
   d6184:	2003e3b0 	.word	0x2003e3b0
   d6188:	000d4d69 	.word	0x000d4d69

000d618c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d618c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d618e:	4c0c      	ldr	r4, [pc, #48]	; (d61c0 <_GLOBAL__sub_I_SPI+0x34>)
   d6190:	4e0c      	ldr	r6, [pc, #48]	; (d61c4 <_GLOBAL__sub_I_SPI+0x38>)
   d6192:	4d0d      	ldr	r5, [pc, #52]	; (d61c8 <_GLOBAL__sub_I_SPI+0x3c>)
   d6194:	2100      	movs	r1, #0
   d6196:	4620      	mov	r0, r4
   d6198:	f7ff f970 	bl	d547c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d619c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d619e:	4c0b      	ldr	r4, [pc, #44]	; (d61cc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d61a0:	4632      	mov	r2, r6
   d61a2:	4629      	mov	r1, r5
   d61a4:	f000 f814 	bl	d61d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61a8:	2101      	movs	r1, #1
   d61aa:	4620      	mov	r0, r4
   d61ac:	f7ff f966 	bl	d547c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61b0:	4632      	mov	r2, r6
   d61b2:	4629      	mov	r1, r5
   d61b4:	4620      	mov	r0, r4
   d61b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d61ba:	f000 b809 	b.w	d61d0 <__aeabi_atexit>
   d61be:	bf00      	nop
   d61c0:	2003e730 	.word	0x2003e730
   d61c4:	2003e3b0 	.word	0x2003e3b0
   d61c8:	000d546d 	.word	0x000d546d
   d61cc:	2003e740 	.word	0x2003e740

000d61d0 <__aeabi_atexit>:
   d61d0:	460b      	mov	r3, r1
   d61d2:	4601      	mov	r1, r0
   d61d4:	4618      	mov	r0, r3
   d61d6:	f000 b94b 	b.w	d6470 <__cxa_atexit>

000d61da <_ZSt25__throw_bad_function_callv>:
   d61da:	b508      	push	{r3, lr}
   d61dc:	f7fe faaa 	bl	d4734 <abort>

000d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d61e0:	4b24      	ldr	r3, [pc, #144]	; (d6274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d0      	lsls	r0, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b22      	ldr	r3, [pc, #136]	; (d6278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d1      	lsls	r1, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b20      	ldr	r3, [pc, #128]	; (d627c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d2      	lsls	r2, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b1e      	ldr	r3, [pc, #120]	; (d6280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d0      	lsls	r0, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b1c      	ldr	r3, [pc, #112]	; (d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d1      	lsls	r1, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b1a      	ldr	r3, [pc, #104]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d2      	lsls	r2, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b18      	ldr	r3, [pc, #96]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d0      	lsls	r0, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b16      	ldr	r3, [pc, #88]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d1      	lsls	r1, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4b14      	ldr	r3, [pc, #80]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	07d2      	lsls	r2, r2, #31
   d6246:	bf5c      	itt	pl
   d6248:	2201      	movpl	r2, #1
   d624a:	601a      	strpl	r2, [r3, #0]
   d624c:	4b12      	ldr	r3, [pc, #72]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d624e:	681a      	ldr	r2, [r3, #0]
   d6250:	07d0      	lsls	r0, r2, #31
   d6252:	bf5c      	itt	pl
   d6254:	2201      	movpl	r2, #1
   d6256:	601a      	strpl	r2, [r3, #0]
   d6258:	4b10      	ldr	r3, [pc, #64]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d1      	lsls	r1, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b0e      	ldr	r3, [pc, #56]	; (d62a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d2      	lsls	r2, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4770      	bx	lr
   d6272:	bf00      	nop
   d6274:	2003e77c 	.word	0x2003e77c
   d6278:	2003e778 	.word	0x2003e778
   d627c:	2003e774 	.word	0x2003e774
   d6280:	2003e770 	.word	0x2003e770
   d6284:	2003e76c 	.word	0x2003e76c
   d6288:	2003e768 	.word	0x2003e768
   d628c:	2003e764 	.word	0x2003e764
   d6290:	2003e760 	.word	0x2003e760
   d6294:	2003e75c 	.word	0x2003e75c
   d6298:	2003e758 	.word	0x2003e758
   d629c:	2003e754 	.word	0x2003e754
   d62a0:	2003e750 	.word	0x2003e750

000d62a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d62a4:	4b18      	ldr	r3, [pc, #96]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b16      	ldr	r3, [pc, #88]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b14      	ldr	r3, [pc, #80]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d0      	lsls	r0, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b12      	ldr	r3, [pc, #72]	; (d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d1      	lsls	r1, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b10      	ldr	r3, [pc, #64]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d2      	lsls	r2, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b0e      	ldr	r3, [pc, #56]	; (d631c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d0      	lsls	r0, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4b0c      	ldr	r3, [pc, #48]	; (d6320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62ee:	681a      	ldr	r2, [r3, #0]
   d62f0:	07d1      	lsls	r1, r2, #31
   d62f2:	bf5c      	itt	pl
   d62f4:	2201      	movpl	r2, #1
   d62f6:	601a      	strpl	r2, [r3, #0]
   d62f8:	4b0a      	ldr	r3, [pc, #40]	; (d6324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d62fa:	681a      	ldr	r2, [r3, #0]
   d62fc:	07d2      	lsls	r2, r2, #31
   d62fe:	bf5c      	itt	pl
   d6300:	2201      	movpl	r2, #1
   d6302:	601a      	strpl	r2, [r3, #0]
   d6304:	4770      	bx	lr
   d6306:	bf00      	nop
   d6308:	2003e79c 	.word	0x2003e79c
   d630c:	2003e798 	.word	0x2003e798
   d6310:	2003e794 	.word	0x2003e794
   d6314:	2003e790 	.word	0x2003e790
   d6318:	2003e78c 	.word	0x2003e78c
   d631c:	2003e788 	.word	0x2003e788
   d6320:	2003e784 	.word	0x2003e784
   d6324:	2003e780 	.word	0x2003e780

000d6328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6328:	4b18      	ldr	r3, [pc, #96]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d632a:	681a      	ldr	r2, [r3, #0]
   d632c:	07d1      	lsls	r1, r2, #31
   d632e:	bf5c      	itt	pl
   d6330:	2201      	movpl	r2, #1
   d6332:	601a      	strpl	r2, [r3, #0]
   d6334:	4b16      	ldr	r3, [pc, #88]	; (d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6336:	681a      	ldr	r2, [r3, #0]
   d6338:	07d2      	lsls	r2, r2, #31
   d633a:	bf5c      	itt	pl
   d633c:	2201      	movpl	r2, #1
   d633e:	601a      	strpl	r2, [r3, #0]
   d6340:	4b14      	ldr	r3, [pc, #80]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6342:	681a      	ldr	r2, [r3, #0]
   d6344:	07d0      	lsls	r0, r2, #31
   d6346:	bf5c      	itt	pl
   d6348:	2201      	movpl	r2, #1
   d634a:	601a      	strpl	r2, [r3, #0]
   d634c:	4b12      	ldr	r3, [pc, #72]	; (d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d1      	lsls	r1, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b10      	ldr	r3, [pc, #64]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d2      	lsls	r2, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4b0e      	ldr	r3, [pc, #56]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d0      	lsls	r0, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4b0c      	ldr	r3, [pc, #48]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	07d1      	lsls	r1, r2, #31
   d6376:	bf5c      	itt	pl
   d6378:	2201      	movpl	r2, #1
   d637a:	601a      	strpl	r2, [r3, #0]
   d637c:	4b0a      	ldr	r3, [pc, #40]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d2      	lsls	r2, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4770      	bx	lr
   d638a:	bf00      	nop
   d638c:	2003e7bc 	.word	0x2003e7bc
   d6390:	2003e7b8 	.word	0x2003e7b8
   d6394:	2003e7b4 	.word	0x2003e7b4
   d6398:	2003e7b0 	.word	0x2003e7b0
   d639c:	2003e7ac 	.word	0x2003e7ac
   d63a0:	2003e7a8 	.word	0x2003e7a8
   d63a4:	2003e7a4 	.word	0x2003e7a4
   d63a8:	2003e7a0 	.word	0x2003e7a0

000d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63ac:	4b24      	ldr	r3, [pc, #144]	; (d6440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63ae:	681a      	ldr	r2, [r3, #0]
   d63b0:	07d0      	lsls	r0, r2, #31
   d63b2:	bf5c      	itt	pl
   d63b4:	2201      	movpl	r2, #1
   d63b6:	601a      	strpl	r2, [r3, #0]
   d63b8:	4b22      	ldr	r3, [pc, #136]	; (d6444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d63ba:	681a      	ldr	r2, [r3, #0]
   d63bc:	07d1      	lsls	r1, r2, #31
   d63be:	bf5c      	itt	pl
   d63c0:	2201      	movpl	r2, #1
   d63c2:	601a      	strpl	r2, [r3, #0]
   d63c4:	4b20      	ldr	r3, [pc, #128]	; (d6448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d2      	lsls	r2, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b1e      	ldr	r3, [pc, #120]	; (d644c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d0      	lsls	r0, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4b1c      	ldr	r3, [pc, #112]	; (d6450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d63de:	681a      	ldr	r2, [r3, #0]
   d63e0:	07d1      	lsls	r1, r2, #31
   d63e2:	bf5c      	itt	pl
   d63e4:	2201      	movpl	r2, #1
   d63e6:	601a      	strpl	r2, [r3, #0]
   d63e8:	4b1a      	ldr	r3, [pc, #104]	; (d6454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d63ea:	681a      	ldr	r2, [r3, #0]
   d63ec:	07d2      	lsls	r2, r2, #31
   d63ee:	bf5c      	itt	pl
   d63f0:	2201      	movpl	r2, #1
   d63f2:	601a      	strpl	r2, [r3, #0]
   d63f4:	4b18      	ldr	r3, [pc, #96]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d0      	lsls	r0, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b16      	ldr	r3, [pc, #88]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d1      	lsls	r1, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b14      	ldr	r3, [pc, #80]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d2      	lsls	r2, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4b12      	ldr	r3, [pc, #72]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d0      	lsls	r0, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4b10      	ldr	r3, [pc, #64]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6426:	681a      	ldr	r2, [r3, #0]
   d6428:	07d1      	lsls	r1, r2, #31
   d642a:	bf5c      	itt	pl
   d642c:	2201      	movpl	r2, #1
   d642e:	601a      	strpl	r2, [r3, #0]
   d6430:	4b0e      	ldr	r3, [pc, #56]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6432:	681a      	ldr	r2, [r3, #0]
   d6434:	07d2      	lsls	r2, r2, #31
   d6436:	bf5c      	itt	pl
   d6438:	2201      	movpl	r2, #1
   d643a:	601a      	strpl	r2, [r3, #0]
   d643c:	4770      	bx	lr
   d643e:	bf00      	nop
   d6440:	2003e7ec 	.word	0x2003e7ec
   d6444:	2003e7e8 	.word	0x2003e7e8
   d6448:	2003e7e4 	.word	0x2003e7e4
   d644c:	2003e7e0 	.word	0x2003e7e0
   d6450:	2003e7dc 	.word	0x2003e7dc
   d6454:	2003e7d8 	.word	0x2003e7d8
   d6458:	2003e7d4 	.word	0x2003e7d4
   d645c:	2003e7d0 	.word	0x2003e7d0
   d6460:	2003e7cc 	.word	0x2003e7cc
   d6464:	2003e7c8 	.word	0x2003e7c8
   d6468:	2003e7c4 	.word	0x2003e7c4
   d646c:	2003e7c0 	.word	0x2003e7c0

000d6470 <__cxa_atexit>:
   d6470:	b510      	push	{r4, lr}
   d6472:	4c05      	ldr	r4, [pc, #20]	; (d6488 <__cxa_atexit+0x18>)
   d6474:	4613      	mov	r3, r2
   d6476:	b12c      	cbz	r4, d6484 <__cxa_atexit+0x14>
   d6478:	460a      	mov	r2, r1
   d647a:	4601      	mov	r1, r0
   d647c:	2002      	movs	r0, #2
   d647e:	f3af 8000 	nop.w
   d6482:	bd10      	pop	{r4, pc}
   d6484:	4620      	mov	r0, r4
   d6486:	bd10      	pop	{r4, pc}
   d6488:	00000000 	.word	0x00000000

000d648c <ldiv>:
   d648c:	2900      	cmp	r1, #0
   d648e:	b510      	push	{r4, lr}
   d6490:	fb91 f4f2 	sdiv	r4, r1, r2
   d6494:	fb02 1314 	mls	r3, r2, r4, r1
   d6498:	db04      	blt.n	d64a4 <ldiv+0x18>
   d649a:	2b00      	cmp	r3, #0
   d649c:	da07      	bge.n	d64ae <ldiv+0x22>
   d649e:	3401      	adds	r4, #1
   d64a0:	1a9b      	subs	r3, r3, r2
   d64a2:	e004      	b.n	d64ae <ldiv+0x22>
   d64a4:	2b00      	cmp	r3, #0
   d64a6:	bfc4      	itt	gt
   d64a8:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   d64ac:	189b      	addgt	r3, r3, r2
   d64ae:	6004      	str	r4, [r0, #0]
   d64b0:	6043      	str	r3, [r0, #4]
   d64b2:	bd10      	pop	{r4, pc}

000d64b4 <memcpy>:
   d64b4:	b510      	push	{r4, lr}
   d64b6:	1e43      	subs	r3, r0, #1
   d64b8:	440a      	add	r2, r1
   d64ba:	4291      	cmp	r1, r2
   d64bc:	d004      	beq.n	d64c8 <memcpy+0x14>
   d64be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d64c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d64c6:	e7f8      	b.n	d64ba <memcpy+0x6>
   d64c8:	bd10      	pop	{r4, pc}

000d64ca <memset>:
   d64ca:	4402      	add	r2, r0
   d64cc:	4603      	mov	r3, r0
   d64ce:	4293      	cmp	r3, r2
   d64d0:	d002      	beq.n	d64d8 <memset+0xe>
   d64d2:	f803 1b01 	strb.w	r1, [r3], #1
   d64d6:	e7fa      	b.n	d64ce <memset+0x4>
   d64d8:	4770      	bx	lr

000d64da <strcpy>:
   d64da:	4603      	mov	r3, r0
   d64dc:	f811 2b01 	ldrb.w	r2, [r1], #1
   d64e0:	f803 2b01 	strb.w	r2, [r3], #1
   d64e4:	2a00      	cmp	r2, #0
   d64e6:	d1f9      	bne.n	d64dc <strcpy+0x2>
   d64e8:	4770      	bx	lr
	...

000d64ec <strdup>:
   d64ec:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <strdup+0xc>)
   d64ee:	4601      	mov	r1, r0
   d64f0:	6818      	ldr	r0, [r3, #0]
   d64f2:	f000 b803 	b.w	d64fc <_strdup_r>
   d64f6:	bf00      	nop
   d64f8:	2003e3ac 	.word	0x2003e3ac

000d64fc <_strdup_r>:
   d64fc:	b570      	push	{r4, r5, r6, lr}
   d64fe:	4606      	mov	r6, r0
   d6500:	4608      	mov	r0, r1
   d6502:	460c      	mov	r4, r1
   d6504:	f000 f80d 	bl	d6522 <strlen>
   d6508:	1c45      	adds	r5, r0, #1
   d650a:	4629      	mov	r1, r5
   d650c:	4630      	mov	r0, r6
   d650e:	f7fe f919 	bl	d4744 <_malloc_r>
   d6512:	4606      	mov	r6, r0
   d6514:	b118      	cbz	r0, d651e <_strdup_r+0x22>
   d6516:	462a      	mov	r2, r5
   d6518:	4621      	mov	r1, r4
   d651a:	f7ff ffcb 	bl	d64b4 <memcpy>
   d651e:	4630      	mov	r0, r6
   d6520:	bd70      	pop	{r4, r5, r6, pc}

000d6522 <strlen>:
   d6522:	4603      	mov	r3, r0
   d6524:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6528:	2a00      	cmp	r2, #0
   d652a:	d1fb      	bne.n	d6524 <strlen+0x2>
   d652c:	1a18      	subs	r0, r3, r0
   d652e:	3801      	subs	r0, #1
   d6530:	4770      	bx	lr

000d6532 <link_code_end>:
	...

000d6534 <dynalib_user>:
   d6534:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6544:	0000 0000 7773 7261 2d6d 656c 6461 7265     ....swarm-leader
   d6554:	6f2d 6c6e 6e69 0065 7766 762d 7265 6973     -online.fw-versi
   d6564:	6e6f 2500 2073 6156 3a6c 2520 0069 656c     on.%s Val: %i.le
   d6574:	7466 0052 656c 7466 0046 6972 6867 5274     ftR.leftF.rightR
   d6584:	7200 6769 7468 0046 3176 302e 0000 0000     .rightF.v1.0....

000d6594 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d659c:	477b 000d 4781 000d 47a9 000d 478d 000d     {G...G...G...G..
   d65ac:	477d 000d                                   }G..

000d65b0 <_ZTVN5spark13EthernetClassE>:
	...
   d65b8:	4d4b 000d 4d41 000d 4d37 000d 4d2d 000d     KM..AM..7M..-M..
   d65c8:	4d21 000d 4d15 000d 4d09 000d 4d01 000d     !M...M...M...M..
   d65d8:	4cf7 000d 4ced 000d 5271 000d               .L...L..qR..

000d65e4 <_ZTV7TwoWire>:
	...
   d65ec:	4d69 000d 4db3 000d 4d8b 000d 4d6b 000d     iM...M...M..kM..
   d65fc:	4d93 000d 4d9b 000d 4da3 000d 4dab 000d     .M...M...M...M..

000d660c <_ZTV9IPAddress>:
	...
   d6614:	4dfb 000d 4ded 000d 4def 000d 0066 6e6c     .M...M...M..f.ln
   d6624:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d6634:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d6644:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d6654:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
   d6664:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   d6674:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   d6684:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   d6694:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   d66a4:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   d66b4:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   d66c4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d66d4:	0070 6f6e 656e 7400 6172 6563 6900 666e     p.none.trace.inf
   d66e4:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d66f4:	6369 6100 6c6c 0000                         ic.all..

000d66fc <_ZTVN5spark9MeshClassE>:
	...
   d6704:	4f6b 000d 4f61 000d 4f57 000d 4f4d 000d     kO..aO..WO..MO..
   d6714:	4f41 000d 4f35 000d 4f29 000d 4f21 000d     AO..5O..)O..!O..
   d6724:	4f17 000d 4f0d 000d 5271 000d 6666 3330     .O...O..qR..ff03
   d6734:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d6744:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d6754:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d6760 <_ZTVN5spark12NetworkClassE>:
	...
   d6768:	5209 000d 5213 000d 521d 000d 5227 000d     .R...R...R..'R..
   d6778:	5231 000d 523d 000d 5249 000d 5255 000d     1R..=R..IR..UR..
   d6788:	525d 000d 5267 000d 5271 000d               ]R..gR..qR..

000d6794 <_ZTV8SPIClass>:
	...
   d679c:	546d 000d 546f 000d                         mT..oT..

000d67a4 <_ZTV21StringPrintableHelper>:
	...
   d67ac:	54ab 000d 54ad 000d 5611 000d 55e3 000d     .T...T...V...U..
   d67bc:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d67cc:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d67dc:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   d67ec:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   d67fc:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   d680c:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   d681c:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   d682c:	6425 0000                                   %d..

000d6830 <_ZTV3UDP>:
	...
   d6838:	5d71 000d 5d95 000d 56a1 000d 57cb 000d     q]...]...V...W..
   d6848:	5699 000d 56b7 000d 56d5 000d 56ef 000d     .V...V...V...V..
   d6858:	5713 000d 57af 000d 5aed 000d 5851 000d     .W...W...Z..QX..
   d6868:	59d1 000d 5681 000d 5d09 000d 5955 000d     .Y...V...]..UY..
   d6878:	5889 000d 5ccf 000d 57f5 000d 568f 000d     .X...\...W...V..
   d6888:	5831 000d 5695 000d 56f1 000d fff0 ffff     1X...V...V......
   d6898:	0000 0000 570b 000d                         .....W..

000d68a0 <_ZTV11USARTSerial>:
	...
   d68a8:	5dbf 000d 5de3 000d 5def 000d 5309 000d     .]...]...]...S..
   d68b8:	5dcb 000d 5dd7 000d 5dd1 000d 5ddd 000d     .]...]...]...]..
   d68c8:	5dc1 000d 5dc5 000d                         .]...]..

000d68d0 <_ZTV9USBSerial>:
	...
   d68d8:	5e99 000d 5edd 000d 5eb7 000d 5309 000d     .^...^...^...S..
   d68e8:	5eb1 000d 5e9b 000d 5ea3 000d 5ed7 000d     .^...^...^...^..
   d68f8:	5eab 000d 5e95 000d                         .^...^..

000d6900 <__sf_fake_stdin>:
	...

000d6920 <__sf_fake_stdout>:
	...

000d6940 <__sf_fake_stderr>:
	...
   d6960:	0043                                        C.

000d6962 <link_const_variable_data_end>:
	...

000d6964 <link_constructors_location>:
   d6964:	000d4225 	.word	0x000d4225
   d6968:	000d4d55 	.word	0x000d4d55
   d696c:	000d4efd 	.word	0x000d4efd
   d6970:	000d51bd 	.word	0x000d51bd
   d6974:	000d52f5 	.word	0x000d52f5
   d6978:	000d5451 	.word	0x000d5451
   d697c:	000d5651 	.word	0x000d5651
   d6980:	000d566d 	.word	0x000d566d
   d6984:	000d618d 	.word	0x000d618d
   d6988:	000d61e1 	.word	0x000d61e1
   d698c:	000d62a5 	.word	0x000d62a5
   d6990:	000d6329 	.word	0x000d6329
   d6994:	000d63ad 	.word	0x000d63ad

000d6998 <link_constructors_end>:
	...
