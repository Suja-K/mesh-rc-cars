
/Users/bsatrom/Development/particle/rc-mesh/rc-swarm-leader/target/rc-swarm-leader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000178bc  2**0
                  CONTENTS
  3 .data         00000080  2003e328  000d7810  0000e328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000448  2003e3a8  2003e3a8  0001e3a8  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7890  000d7890  00017890  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d78b8  000d78b8  000178b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ae89f  00000000  00000000  000178bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001043b  00000000  00000000  000c615b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015caf  00000000  00000000  000d6596  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002210  00000000  00000000  000ec245  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000036e8  00000000  00000000  000ee455  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00032697  00000000  00000000  000f1b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026e8f  00000000  00000000  001241d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3fdb  00000000  00000000  0014b063  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c0c8  00000000  00000000  0021f040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	28 72 0d 00                                         (r..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f807 	bl	d7040 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f80c 	bl	d7056 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e328 	.word	0x2003e328
   d4048:	000d7810 	.word	0x000d7810
   d404c:	2003e3a8 	.word	0x2003e3a8
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fdb7 	bl	d6bcc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7808 	.word	0x000d7808
   d4080:	000d77d0 	.word	0x000d77d0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc4e 	b.w	d4924 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb53 	bl	d4734 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd69 	b.w	d6b68 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bfb7 	b.w	d5008 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bfb5 	b.w	d5008 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bfbb 	b.w	d5018 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bfb9 	b.w	d5018 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z9stopDemos6String>:
  return 1;
}

int stopDemos(String args)
{
  sentryModeEnabled = false;
   d40bc:	4b01      	ldr	r3, [pc, #4]	; (d40c4 <_Z9stopDemos6String+0x8>)
   d40be:	2200      	movs	r2, #0
   d40c0:	701a      	strb	r2, [r3, #0]
}
   d40c2:	4770      	bx	lr
   d40c4:	2003e3cc 	.word	0x2003e3cc

000d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.8>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c8:	b513      	push	{r0, r1, r4, lr}
   d40ca:	4b05      	ldr	r3, [pc, #20]	; (d40e0 <_ZN10CloudClass7publishEPKcS1_.isra.8+0x18>)
   d40cc:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ce:	f88d 3000 	strb.w	r3, [sp]
   d40d2:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d4:	4604      	mov	r4, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d6:	f001 f949 	bl	d536c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d40da:	4620      	mov	r0, r4
   d40dc:	b002      	add	sp, #8
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	2003e3ac 	.word	0x2003e3ac

000d40e4 <_Z6allOffv>:

  delay(del);
}

void allOff()
{
   d40e4:	b508      	push	{r3, lr}
  analogWrite(leftReverse, 0);
   d40e6:	4b0b      	ldr	r3, [pc, #44]	; (d4114 <_Z6allOffv+0x30>)
   d40e8:	2100      	movs	r1, #0
   d40ea:	8818      	ldrh	r0, [r3, #0]
   d40ec:	f002 fdca 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(leftForward, 0);
   d40f0:	4b09      	ldr	r3, [pc, #36]	; (d4118 <_Z6allOffv+0x34>)
   d40f2:	2100      	movs	r1, #0
   d40f4:	8818      	ldrh	r0, [r3, #0]
   d40f6:	f002 fdc5 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightReverse, 0);
   d40fa:	4b08      	ldr	r3, [pc, #32]	; (d411c <_Z6allOffv+0x38>)
   d40fc:	2100      	movs	r1, #0
   d40fe:	8818      	ldrh	r0, [r3, #0]
   d4100:	f002 fdc0 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, 0);
   d4104:	4b06      	ldr	r3, [pc, #24]	; (d4120 <_Z6allOffv+0x3c>)
   d4106:	2100      	movs	r1, #0
   d4108:	8818      	ldrh	r0, [r3, #0]
}
   d410a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void allOff()
{
  analogWrite(leftReverse, 0);
  analogWrite(leftForward, 0);
  analogWrite(rightReverse, 0);
  analogWrite(rightForward, 0);
   d410e:	f002 bdb9 	b.w	d6c84 <_Z11analogWritetm>
   d4112:	bf00      	nop
   d4114:	2003e328 	.word	0x2003e328
   d4118:	2003e330 	.word	0x2003e330
   d411c:	2003e32c 	.word	0x2003e32c
   d4120:	2003e338 	.word	0x2003e338

000d4124 <_Z9motorsOffl>:

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
}

void motorsOff(int32_t del)
{
   d4124:	b510      	push	{r4, lr}
  Mesh.publish("allOff", NULL);
   d4126:	2200      	movs	r2, #0

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
}

void motorsOff(int32_t del)
{
   d4128:	4604      	mov	r4, r0
  Mesh.publish("allOff", NULL);
   d412a:	4905      	ldr	r1, [pc, #20]	; (d4140 <_Z9motorsOffl+0x1c>)
   d412c:	4805      	ldr	r0, [pc, #20]	; (d4144 <_Z9motorsOffl+0x20>)
   d412e:	f001 fc71 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
  allOff();
   d4132:	f7ff ffd7 	bl	d40e4 <_Z6allOffv>

  delay(del);
   d4136:	4620      	mov	r0, r4
}
   d4138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void motorsOff(int32_t del)
{
  Mesh.publish("allOff", NULL);
  allOff();

  delay(del);
   d413c:	f000 bf94 	b.w	d5068 <delay>
   d4140:	000d723c 	.word	0x000d723c
   d4144:	2003e3ec 	.word	0x2003e3ec

000d4148 <_Z5orbitv>:
  // Stop all cars
  motorsOff(200);
}

void orbit()
{
   d4148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // leader car spins 360 slowly over and over
  analogWrite(leftReverse, 255);
   d414a:	4b10      	ldr	r3, [pc, #64]	; (d418c <_Z5orbitv+0x44>)
   d414c:	21ff      	movs	r1, #255	; 0xff
   d414e:	8818      	ldrh	r0, [r3, #0]
   d4150:	f002 fd98 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, 255);
   d4154:	4b0e      	ldr	r3, [pc, #56]	; (d4190 <_Z5orbitv+0x48>)
   d4156:	21ff      	movs	r1, #255	; 0xff
   d4158:	8818      	ldrh	r0, [r3, #0]
   d415a:	f002 fd93 	bl	d6c84 <_Z11analogWritetm>

  // follower cars orbit around the leader
  Mesh.publish("leftF", String(ORBIT_VAL));
   d415e:	220a      	movs	r2, #10
   d4160:	2164      	movs	r1, #100	; 0x64
   d4162:	4668      	mov	r0, sp
   d4164:	f001 fef6 	bl	d5f54 <_ZN6StringC1Eih>
   d4168:	9a00      	ldr	r2, [sp, #0]
   d416a:	490a      	ldr	r1, [pc, #40]	; (d4194 <_Z5orbitv+0x4c>)
   d416c:	480a      	ldr	r0, [pc, #40]	; (d4198 <_Z5orbitv+0x50>)
   d416e:	f001 fc51 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4172:	4668      	mov	r0, sp
   d4174:	f001 fe44 	bl	d5e00 <_ZN6StringD1Ev>

  delay(5000);
   d4178:	f241 3088 	movw	r0, #5000	; 0x1388
   d417c:	f000 ff74 	bl	d5068 <delay>

  motorsOff(20);
   d4180:	2014      	movs	r0, #20
   d4182:	f7ff ffcf 	bl	d4124 <_Z9motorsOffl>
}
   d4186:	b005      	add	sp, #20
   d4188:	f85d fb04 	ldr.w	pc, [sp], #4
   d418c:	2003e328 	.word	0x2003e328
   d4190:	2003e338 	.word	0x2003e338
   d4194:	000d7243 	.word	0x000d7243
   d4198:	2003e3ec 	.word	0x2003e3ec

000d419c <_Z11moveForwardlll>:

/* PRIMITIVES */

void moveForward(int32_t val, int32_t del, int32_t offDel)
{
   d419c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Mesh.publish("leftF", String(val));
   d419e:	4d18      	ldr	r5, [pc, #96]	; (d4200 <_Z11moveForwardlll+0x64>)
}

/* PRIMITIVES */

void moveForward(int32_t val, int32_t del, int32_t offDel)
{
   d41a0:	b085      	sub	sp, #20
   d41a2:	4604      	mov	r4, r0
   d41a4:	460f      	mov	r7, r1
   d41a6:	4616      	mov	r6, r2
  Mesh.publish("leftF", String(val));
   d41a8:	4601      	mov	r1, r0
   d41aa:	220a      	movs	r2, #10
   d41ac:	4668      	mov	r0, sp
   d41ae:	f001 fee4 	bl	d5f7a <_ZN6StringC1Elh>
   d41b2:	9a00      	ldr	r2, [sp, #0]
   d41b4:	4913      	ldr	r1, [pc, #76]	; (d4204 <_Z11moveForwardlll+0x68>)
   d41b6:	4628      	mov	r0, r5
   d41b8:	f001 fc2c 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d41bc:	4668      	mov	r0, sp
   d41be:	f001 fe1f 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(val));
   d41c2:	4621      	mov	r1, r4
   d41c4:	220a      	movs	r2, #10
   d41c6:	4668      	mov	r0, sp
   d41c8:	f001 fed7 	bl	d5f7a <_ZN6StringC1Elh>
   d41cc:	9a00      	ldr	r2, [sp, #0]
   d41ce:	490e      	ldr	r1, [pc, #56]	; (d4208 <_Z11moveForwardlll+0x6c>)
   d41d0:	4628      	mov	r0, r5
   d41d2:	f001 fc1f 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d41d6:	4668      	mov	r0, sp
   d41d8:	f001 fe12 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(leftForward, val);
   d41dc:	4b0b      	ldr	r3, [pc, #44]	; (d420c <_Z11moveForwardlll+0x70>)
   d41de:	4621      	mov	r1, r4
   d41e0:	8818      	ldrh	r0, [r3, #0]
   d41e2:	f002 fd4f 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, val);
   d41e6:	4b0a      	ldr	r3, [pc, #40]	; (d4210 <_Z11moveForwardlll+0x74>)
   d41e8:	4621      	mov	r1, r4
   d41ea:	8818      	ldrh	r0, [r3, #0]
   d41ec:	f002 fd4a 	bl	d6c84 <_Z11analogWritetm>

  delay(del);
   d41f0:	4638      	mov	r0, r7
   d41f2:	f000 ff39 	bl	d5068 <delay>

  motorsOff(offDel);
   d41f6:	4630      	mov	r0, r6
   d41f8:	f7ff ff94 	bl	d4124 <_Z9motorsOffl>
}
   d41fc:	b005      	add	sp, #20
   d41fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4200:	2003e3ec 	.word	0x2003e3ec
   d4204:	000d7243 	.word	0x000d7243
   d4208:	000d7249 	.word	0x000d7249
   d420c:	2003e330 	.word	0x2003e330
   d4210:	2003e338 	.word	0x2003e338

000d4214 <_Z11spinLeft360v>:

  motorsOff(offDel);
}

void spinLeft360()
{
   d4214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  moveForward(255, 400, 200);
   d4216:	22c8      	movs	r2, #200	; 0xc8
   d4218:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d421c:	20ff      	movs	r0, #255	; 0xff
   d421e:	f7ff ffbd 	bl	d419c <_Z11moveForwardlll>

  Mesh.publish("leftR", String(255));
   d4222:	220a      	movs	r2, #10
   d4224:	21ff      	movs	r1, #255	; 0xff
   d4226:	4668      	mov	r0, sp
   d4228:	f001 fe94 	bl	d5f54 <_ZN6StringC1Eih>
   d422c:	9a00      	ldr	r2, [sp, #0]
   d422e:	4914      	ldr	r1, [pc, #80]	; (d4280 <_Z11spinLeft360v+0x6c>)
   d4230:	4814      	ldr	r0, [pc, #80]	; (d4284 <_Z11spinLeft360v+0x70>)
   d4232:	f001 fbef 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4236:	4668      	mov	r0, sp
   d4238:	f001 fde2 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(255));
   d423c:	220a      	movs	r2, #10
   d423e:	21ff      	movs	r1, #255	; 0xff
   d4240:	4668      	mov	r0, sp
   d4242:	f001 fe87 	bl	d5f54 <_ZN6StringC1Eih>
   d4246:	9a00      	ldr	r2, [sp, #0]
   d4248:	490f      	ldr	r1, [pc, #60]	; (d4288 <_Z11spinLeft360v+0x74>)
   d424a:	480e      	ldr	r0, [pc, #56]	; (d4284 <_Z11spinLeft360v+0x70>)
   d424c:	f001 fbe2 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4250:	4668      	mov	r0, sp
   d4252:	f001 fdd5 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(leftReverse, 255);
   d4256:	4b0d      	ldr	r3, [pc, #52]	; (d428c <_Z11spinLeft360v+0x78>)
   d4258:	21ff      	movs	r1, #255	; 0xff
   d425a:	8818      	ldrh	r0, [r3, #0]
   d425c:	f002 fd12 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, 255);
   d4260:	4b0b      	ldr	r3, [pc, #44]	; (d4290 <_Z11spinLeft360v+0x7c>)
   d4262:	21ff      	movs	r1, #255	; 0xff
   d4264:	8818      	ldrh	r0, [r3, #0]
   d4266:	f002 fd0d 	bl	d6c84 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
   d426a:	4b0a      	ldr	r3, [pc, #40]	; (d4294 <_Z11spinLeft360v+0x80>)
   d426c:	6818      	ldr	r0, [r3, #0]
   d426e:	2800      	cmp	r0, #0
   d4270:	bf08      	it	eq
   d4272:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   d4276:	f000 fef7 	bl	d5068 <delay>
}
   d427a:	b005      	add	sp, #20
   d427c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4280:	000d7250 	.word	0x000d7250
   d4284:	2003e3ec 	.word	0x2003e3ec
   d4288:	000d7249 	.word	0x000d7249
   d428c:	2003e328 	.word	0x2003e328
   d4290:	2003e338 	.word	0x2003e338
   d4294:	2003e3b0 	.word	0x2003e3b0

000d4298 <_Z12spinRight360v>:

void spinRight360()
{
   d4298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  moveForward(255, 400, 200);
   d429a:	22c8      	movs	r2, #200	; 0xc8
   d429c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d42a0:	20ff      	movs	r0, #255	; 0xff
   d42a2:	f7ff ff7b 	bl	d419c <_Z11moveForwardlll>

  Mesh.publish("leftF", String(255));
   d42a6:	220a      	movs	r2, #10
   d42a8:	21ff      	movs	r1, #255	; 0xff
   d42aa:	4668      	mov	r0, sp
   d42ac:	f001 fe52 	bl	d5f54 <_ZN6StringC1Eih>
   d42b0:	9a00      	ldr	r2, [sp, #0]
   d42b2:	4914      	ldr	r1, [pc, #80]	; (d4304 <_Z12spinRight360v+0x6c>)
   d42b4:	4814      	ldr	r0, [pc, #80]	; (d4308 <_Z12spinRight360v+0x70>)
   d42b6:	f001 fbad 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42ba:	4668      	mov	r0, sp
   d42bc:	f001 fda0 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightR", String(255));
   d42c0:	220a      	movs	r2, #10
   d42c2:	21ff      	movs	r1, #255	; 0xff
   d42c4:	4668      	mov	r0, sp
   d42c6:	f001 fe45 	bl	d5f54 <_ZN6StringC1Eih>
   d42ca:	9a00      	ldr	r2, [sp, #0]
   d42cc:	490f      	ldr	r1, [pc, #60]	; (d430c <_Z12spinRight360v+0x74>)
   d42ce:	480e      	ldr	r0, [pc, #56]	; (d4308 <_Z12spinRight360v+0x70>)
   d42d0:	f001 fba0 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42d4:	4668      	mov	r0, sp
   d42d6:	f001 fd93 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(leftForward, 255);
   d42da:	4b0d      	ldr	r3, [pc, #52]	; (d4310 <_Z12spinRight360v+0x78>)
   d42dc:	21ff      	movs	r1, #255	; 0xff
   d42de:	8818      	ldrh	r0, [r3, #0]
   d42e0:	f002 fcd0 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightReverse, 255);
   d42e4:	4b0b      	ldr	r3, [pc, #44]	; (d4314 <_Z12spinRight360v+0x7c>)
   d42e6:	21ff      	movs	r1, #255	; 0xff
   d42e8:	8818      	ldrh	r0, [r3, #0]
   d42ea:	f002 fccb 	bl	d6c84 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
   d42ee:	4b0a      	ldr	r3, [pc, #40]	; (d4318 <_Z12spinRight360v+0x80>)
   d42f0:	6818      	ldr	r0, [r3, #0]
   d42f2:	2800      	cmp	r0, #0
   d42f4:	bf08      	it	eq
   d42f6:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   d42fa:	f000 feb5 	bl	d5068 <delay>
}
   d42fe:	b005      	add	sp, #20
   d4300:	f85d fb04 	ldr.w	pc, [sp], #4
   d4304:	000d7243 	.word	0x000d7243
   d4308:	2003e3ec 	.word	0x2003e3ec
   d430c:	000d7256 	.word	0x000d7256
   d4310:	2003e330 	.word	0x2003e330
   d4314:	2003e32c 	.word	0x2003e32c
   d4318:	2003e3b0 	.word	0x2003e3b0

000d431c <_Z8spinCarsv>:
  turnRight90(500);
  turnLeft90(10);
}

void spinCars()
{
   d431c:	b508      	push	{r3, lr}
  spinLeft360();
   d431e:	f7ff ff79 	bl	d4214 <_Z11spinLeft360v>
  motorsOff(200);
   d4322:	20c8      	movs	r0, #200	; 0xc8
   d4324:	f7ff fefe 	bl	d4124 <_Z9motorsOffl>

  spinRight360();
   d4328:	f7ff ffb6 	bl	d4298 <_Z12spinRight360v>
  motorsOff(200);
   d432c:	20c8      	movs	r0, #200	; 0xc8
}
   d432e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  spinLeft360();
  motorsOff(200);

  spinRight360();
  motorsOff(200);
   d4332:	f7ff bef7 	b.w	d4124 <_Z9motorsOffl>
	...

000d4338 <_Z8moveBacklll>:

  motorsOff(offDel);
}

void moveBack(int32_t val, int32_t del, int32_t offDel)
{
   d4338:	b5f0      	push	{r4, r5, r6, r7, lr}
  Mesh.publish("leftR", String(val));
   d433a:	4d18      	ldr	r5, [pc, #96]	; (d439c <_Z8moveBacklll+0x64>)

  motorsOff(offDel);
}

void moveBack(int32_t val, int32_t del, int32_t offDel)
{
   d433c:	b085      	sub	sp, #20
   d433e:	4604      	mov	r4, r0
   d4340:	460f      	mov	r7, r1
   d4342:	4616      	mov	r6, r2
  Mesh.publish("leftR", String(val));
   d4344:	4601      	mov	r1, r0
   d4346:	220a      	movs	r2, #10
   d4348:	4668      	mov	r0, sp
   d434a:	f001 fe16 	bl	d5f7a <_ZN6StringC1Elh>
   d434e:	9a00      	ldr	r2, [sp, #0]
   d4350:	4913      	ldr	r1, [pc, #76]	; (d43a0 <_Z8moveBacklll+0x68>)
   d4352:	4628      	mov	r0, r5
   d4354:	f001 fb5e 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4358:	4668      	mov	r0, sp
   d435a:	f001 fd51 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightR", String(val));
   d435e:	4621      	mov	r1, r4
   d4360:	220a      	movs	r2, #10
   d4362:	4668      	mov	r0, sp
   d4364:	f001 fe09 	bl	d5f7a <_ZN6StringC1Elh>
   d4368:	9a00      	ldr	r2, [sp, #0]
   d436a:	490e      	ldr	r1, [pc, #56]	; (d43a4 <_Z8moveBacklll+0x6c>)
   d436c:	4628      	mov	r0, r5
   d436e:	f001 fb51 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4372:	4668      	mov	r0, sp
   d4374:	f001 fd44 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(leftReverse, val);
   d4378:	4b0b      	ldr	r3, [pc, #44]	; (d43a8 <_Z8moveBacklll+0x70>)
   d437a:	4621      	mov	r1, r4
   d437c:	8818      	ldrh	r0, [r3, #0]
   d437e:	f002 fc81 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightReverse, val);
   d4382:	4b0a      	ldr	r3, [pc, #40]	; (d43ac <_Z8moveBacklll+0x74>)
   d4384:	4621      	mov	r1, r4
   d4386:	8818      	ldrh	r0, [r3, #0]
   d4388:	f002 fc7c 	bl	d6c84 <_Z11analogWritetm>

  delay(del);
   d438c:	4638      	mov	r0, r7
   d438e:	f000 fe6b 	bl	d5068 <delay>

  motorsOff(offDel);
   d4392:	4630      	mov	r0, r6
   d4394:	f7ff fec6 	bl	d4124 <_Z9motorsOffl>
}
   d4398:	b005      	add	sp, #20
   d439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d439c:	2003e3ec 	.word	0x2003e3ec
   d43a0:	000d7250 	.word	0x000d7250
   d43a4:	000d7256 	.word	0x000d7256
   d43a8:	2003e328 	.word	0x2003e328
   d43ac:	2003e32c 	.word	0x2003e32c

000d43b0 <_Z10turnLeft90l>:

void turnLeft90(int32_t offDel)
{
   d43b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d43b2:	4604      	mov	r4, r0
  Mesh.publish("leftR", String(255));
   d43b4:	220a      	movs	r2, #10
   d43b6:	21ff      	movs	r1, #255	; 0xff
   d43b8:	4668      	mov	r0, sp
   d43ba:	f001 fdcb 	bl	d5f54 <_ZN6StringC1Eih>
   d43be:	9a00      	ldr	r2, [sp, #0]
   d43c0:	4915      	ldr	r1, [pc, #84]	; (d4418 <_Z10turnLeft90l+0x68>)
   d43c2:	4816      	ldr	r0, [pc, #88]	; (d441c <_Z10turnLeft90l+0x6c>)
   d43c4:	f001 fb26 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d43c8:	4668      	mov	r0, sp
   d43ca:	f001 fd19 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(255));
   d43ce:	220a      	movs	r2, #10
   d43d0:	21ff      	movs	r1, #255	; 0xff
   d43d2:	4668      	mov	r0, sp
   d43d4:	f001 fdbe 	bl	d5f54 <_ZN6StringC1Eih>
   d43d8:	9a00      	ldr	r2, [sp, #0]
   d43da:	4911      	ldr	r1, [pc, #68]	; (d4420 <_Z10turnLeft90l+0x70>)
   d43dc:	480f      	ldr	r0, [pc, #60]	; (d441c <_Z10turnLeft90l+0x6c>)
   d43de:	f001 fb19 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d43e2:	4668      	mov	r0, sp
   d43e4:	f001 fd0c 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(leftReverse, 255);
   d43e8:	4b0e      	ldr	r3, [pc, #56]	; (d4424 <_Z10turnLeft90l+0x74>)
   d43ea:	21ff      	movs	r1, #255	; 0xff
   d43ec:	8818      	ldrh	r0, [r3, #0]
   d43ee:	f002 fc49 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, 255);
   d43f2:	4b0d      	ldr	r3, [pc, #52]	; (d4428 <_Z10turnLeft90l+0x78>)
   d43f4:	21ff      	movs	r1, #255	; 0xff
   d43f6:	8818      	ldrh	r0, [r3, #0]
   d43f8:	f002 fc44 	bl	d6c84 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : NINETY_DEG_TURN_DELAY);
   d43fc:	4b0b      	ldr	r3, [pc, #44]	; (d442c <_Z10turnLeft90l+0x7c>)
   d43fe:	6818      	ldr	r0, [r3, #0]
   d4400:	f240 2349 	movw	r3, #585	; 0x249
   d4404:	2800      	cmp	r0, #0
   d4406:	bf08      	it	eq
   d4408:	4618      	moveq	r0, r3
   d440a:	f000 fe2d 	bl	d5068 <delay>

  motorsOff(offDel);
   d440e:	4620      	mov	r0, r4
   d4410:	f7ff fe88 	bl	d4124 <_Z9motorsOffl>
}
   d4414:	b004      	add	sp, #16
   d4416:	bd10      	pop	{r4, pc}
   d4418:	000d7250 	.word	0x000d7250
   d441c:	2003e3ec 	.word	0x2003e3ec
   d4420:	000d7249 	.word	0x000d7249
   d4424:	2003e328 	.word	0x2003e328
   d4428:	2003e338 	.word	0x2003e338
   d442c:	2003e3b0 	.word	0x2003e3b0

000d4430 <_Z6sentryv>:
  spinRight360();
  motorsOff(200);
}

void sentry()
{
   d4430:	b510      	push	{r4, lr}
   d4432:	2404      	movs	r4, #4
  for (size_t i = 0; i < 4; i++)
  {
    // move forward 1 sec
    moveForward(SENTRY_MODE_SPEED, SENTRY_MODE_DELAY, 100);
   d4434:	2264      	movs	r2, #100	; 0x64
   d4436:	4610      	mov	r0, r2
   d4438:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   d443c:	f7ff feae 	bl	d419c <_Z11moveForwardlll>

    // turn left
    turnLeft90(100);
   d4440:	2064      	movs	r0, #100	; 0x64
   d4442:	f7ff ffb5 	bl	d43b0 <_Z10turnLeft90l>
  motorsOff(200);
}

void sentry()
{
  for (size_t i = 0; i < 4; i++)
   d4446:	3c01      	subs	r4, #1
   d4448:	d1f4      	bne.n	d4434 <_Z6sentryv+0x4>
    moveForward(SENTRY_MODE_SPEED, SENTRY_MODE_DELAY, 100);

    // turn left
    turnLeft90(100);
  } // repeat
}
   d444a:	bd10      	pop	{r4, pc}

000d444c <_Z13followAndPushv>:
  // Drive forward for 2 sec
  moveForward(SPLINTER_MODE_SPEED, SPLINTER_MODE_DELAY, 200);
}

void followAndPush()
{
   d444c:	b530      	push	{r4, r5, lr}
  // follow the leader for one sec and stop
  moveForward(DRIVE_VAL, 1000, 200);

  // leader car moves forward for one sec
  analogWrite(leftForward, DRIVE_VAL);
   d444e:	4d25      	ldr	r5, [pc, #148]	; (d44e4 <_Z13followAndPushv+0x98>)
  analogWrite(rightForward, DRIVE_VAL);
   d4450:	4c25      	ldr	r4, [pc, #148]	; (d44e8 <_Z13followAndPushv+0x9c>)
  // Drive forward for 2 sec
  moveForward(SPLINTER_MODE_SPEED, SPLINTER_MODE_DELAY, 200);
}

void followAndPush()
{
   d4452:	b085      	sub	sp, #20
  // follow the leader for one sec and stop
  moveForward(DRIVE_VAL, 1000, 200);
   d4454:	22c8      	movs	r2, #200	; 0xc8
   d4456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d445a:	207d      	movs	r0, #125	; 0x7d
   d445c:	f7ff fe9e 	bl	d419c <_Z11moveForwardlll>

  // leader car moves forward for one sec
  analogWrite(leftForward, DRIVE_VAL);
   d4460:	8828      	ldrh	r0, [r5, #0]
   d4462:	217d      	movs	r1, #125	; 0x7d
   d4464:	f002 fc0e 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, DRIVE_VAL);
   d4468:	217d      	movs	r1, #125	; 0x7d
   d446a:	8820      	ldrh	r0, [r4, #0]
   d446c:	f002 fc0a 	bl	d6c84 <_Z11analogWritetm>

  delay(1000);
   d4470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4474:	f000 fdf8 	bl	d5068 <delay>

  // leader car turns 180
  turnLeft90(0);
   d4478:	2000      	movs	r0, #0
   d447a:	f7ff ff99 	bl	d43b0 <_Z10turnLeft90l>
  turnLeft90(200);
   d447e:	20c8      	movs	r0, #200	; 0xc8
   d4480:	f7ff ff96 	bl	d43b0 <_Z10turnLeft90l>

  // leader car moves back one sec
  analogWrite(leftForward, DRIVE_VAL);
   d4484:	8828      	ldrh	r0, [r5, #0]
   d4486:	217d      	movs	r1, #125	; 0x7d
   d4488:	f002 fbfc 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, DRIVE_VAL);
   d448c:	217d      	movs	r1, #125	; 0x7d
   d448e:	8820      	ldrh	r0, [r4, #0]

  delay(1000);

  // leader car continues to move forward, follower cars move backwards
  Mesh.publish("leftR", String(DRIVE_VAL));
   d4490:	4c16      	ldr	r4, [pc, #88]	; (d44ec <_Z13followAndPushv+0xa0>)
  turnLeft90(0);
  turnLeft90(200);

  // leader car moves back one sec
  analogWrite(leftForward, DRIVE_VAL);
  analogWrite(rightForward, DRIVE_VAL);
   d4492:	f002 fbf7 	bl	d6c84 <_Z11analogWritetm>

  delay(1000);
   d4496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d449a:	f000 fde5 	bl	d5068 <delay>

  // leader car continues to move forward, follower cars move backwards
  Mesh.publish("leftR", String(DRIVE_VAL));
   d449e:	220a      	movs	r2, #10
   d44a0:	217d      	movs	r1, #125	; 0x7d
   d44a2:	4668      	mov	r0, sp
   d44a4:	f001 fd56 	bl	d5f54 <_ZN6StringC1Eih>
   d44a8:	9a00      	ldr	r2, [sp, #0]
   d44aa:	4911      	ldr	r1, [pc, #68]	; (d44f0 <_Z13followAndPushv+0xa4>)
   d44ac:	4620      	mov	r0, r4
   d44ae:	f001 fab1 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d44b2:	4668      	mov	r0, sp
   d44b4:	f001 fca4 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightR", String(DRIVE_VAL));
   d44b8:	220a      	movs	r2, #10
   d44ba:	217d      	movs	r1, #125	; 0x7d
   d44bc:	4668      	mov	r0, sp
   d44be:	f001 fd49 	bl	d5f54 <_ZN6StringC1Eih>
   d44c2:	9a00      	ldr	r2, [sp, #0]
   d44c4:	490b      	ldr	r1, [pc, #44]	; (d44f4 <_Z13followAndPushv+0xa8>)
   d44c6:	4620      	mov	r0, r4
   d44c8:	f001 faa4 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d44cc:	4668      	mov	r0, sp
   d44ce:	f001 fc97 	bl	d5e00 <_ZN6StringD1Ev>

  delay(1000);
   d44d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d44d6:	f000 fdc7 	bl	d5068 <delay>

  // Stop all cars
  motorsOff(200);
   d44da:	20c8      	movs	r0, #200	; 0xc8
   d44dc:	f7ff fe22 	bl	d4124 <_Z9motorsOffl>
}
   d44e0:	b005      	add	sp, #20
   d44e2:	bd30      	pop	{r4, r5, pc}
   d44e4:	2003e330 	.word	0x2003e330
   d44e8:	2003e338 	.word	0x2003e338
   d44ec:	2003e3ec 	.word	0x2003e3ec
   d44f0:	000d7250 	.word	0x000d7250
   d44f4:	000d7256 	.word	0x000d7256

000d44f8 <_Z11turnRight90l>:

  motorsOff(offDel);
}

void turnRight90(int32_t offDel)
{
   d44f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d44fa:	4604      	mov	r4, r0
  Mesh.publish("rightR", String(255));
   d44fc:	220a      	movs	r2, #10
   d44fe:	21ff      	movs	r1, #255	; 0xff
   d4500:	4668      	mov	r0, sp
   d4502:	f001 fd27 	bl	d5f54 <_ZN6StringC1Eih>
   d4506:	9a00      	ldr	r2, [sp, #0]
   d4508:	4915      	ldr	r1, [pc, #84]	; (d4560 <_Z11turnRight90l+0x68>)
   d450a:	4816      	ldr	r0, [pc, #88]	; (d4564 <_Z11turnRight90l+0x6c>)
   d450c:	f001 fa82 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4510:	4668      	mov	r0, sp
   d4512:	f001 fc75 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("leftF", String(255));
   d4516:	220a      	movs	r2, #10
   d4518:	21ff      	movs	r1, #255	; 0xff
   d451a:	4668      	mov	r0, sp
   d451c:	f001 fd1a 	bl	d5f54 <_ZN6StringC1Eih>
   d4520:	9a00      	ldr	r2, [sp, #0]
   d4522:	4911      	ldr	r1, [pc, #68]	; (d4568 <_Z11turnRight90l+0x70>)
   d4524:	480f      	ldr	r0, [pc, #60]	; (d4564 <_Z11turnRight90l+0x6c>)
   d4526:	f001 fa75 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d452a:	4668      	mov	r0, sp
   d452c:	f001 fc68 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(rightReverse, 255);
   d4530:	4b0e      	ldr	r3, [pc, #56]	; (d456c <_Z11turnRight90l+0x74>)
   d4532:	21ff      	movs	r1, #255	; 0xff
   d4534:	8818      	ldrh	r0, [r3, #0]
   d4536:	f002 fba5 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(leftForward, 255);
   d453a:	4b0d      	ldr	r3, [pc, #52]	; (d4570 <_Z11turnRight90l+0x78>)
   d453c:	21ff      	movs	r1, #255	; 0xff
   d453e:	8818      	ldrh	r0, [r3, #0]
   d4540:	f002 fba0 	bl	d6c84 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : NINETY_DEG_TURN_DELAY);
   d4544:	4b0b      	ldr	r3, [pc, #44]	; (d4574 <_Z11turnRight90l+0x7c>)
   d4546:	6818      	ldr	r0, [r3, #0]
   d4548:	f240 2349 	movw	r3, #585	; 0x249
   d454c:	2800      	cmp	r0, #0
   d454e:	bf08      	it	eq
   d4550:	4618      	moveq	r0, r3
   d4552:	f000 fd89 	bl	d5068 <delay>

  motorsOff(offDel);
   d4556:	4620      	mov	r0, r4
   d4558:	f7ff fde4 	bl	d4124 <_Z9motorsOffl>
}
   d455c:	b004      	add	sp, #16
   d455e:	bd10      	pop	{r4, pc}
   d4560:	000d7256 	.word	0x000d7256
   d4564:	2003e3ec 	.word	0x2003e3ec
   d4568:	000d7243 	.word	0x000d7243
   d456c:	2003e32c 	.word	0x2003e32c
   d4570:	2003e330 	.word	0x2003e330
   d4574:	2003e3b0 	.word	0x2003e3b0

000d4578 <_Z15followTheLeaderv>:
}

/* SEQUENCES */

void followTheLeader()
{
   d4578:	b508      	push	{r3, lr}
  //Move forward,
  moveForward(DRIVE_VAL, 800, 100);
   d457a:	2264      	movs	r2, #100	; 0x64
   d457c:	f44f 7148 	mov.w	r1, #800	; 0x320
   d4580:	207d      	movs	r0, #125	; 0x7d
   d4582:	f7ff fe0b 	bl	d419c <_Z11moveForwardlll>

  //Move back to start
  moveBack(DRIVE_VAL, 800, 1000);
   d4586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d458a:	f44f 7148 	mov.w	r1, #800	; 0x320
   d458e:	207d      	movs	r0, #125	; 0x7d
   d4590:	f7ff fed2 	bl	d4338 <_Z8moveBacklll>

  turnRight90(500);
   d4594:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4598:	f7ff ffae 	bl	d44f8 <_Z11turnRight90l>
  turnLeft90(10);
   d459c:	200a      	movs	r0, #10
}
   d459e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  //Move back to start
  moveBack(DRIVE_VAL, 800, 1000);

  turnRight90(500);
  turnLeft90(10);
   d45a2:	f7ff bf05 	b.w	d43b0 <_Z10turnLeft90l>
	...

000d45a8 <_Z11turnLeft135l>:

  motorsOff(offDel);
}

void turnLeft135(int32_t offDel)
{
   d45a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d45aa:	4604      	mov	r4, r0
  Mesh.publish("leftR", String(255));
   d45ac:	220a      	movs	r2, #10
   d45ae:	21ff      	movs	r1, #255	; 0xff
   d45b0:	4668      	mov	r0, sp
   d45b2:	f001 fccf 	bl	d5f54 <_ZN6StringC1Eih>
   d45b6:	9a00      	ldr	r2, [sp, #0]
   d45b8:	4915      	ldr	r1, [pc, #84]	; (d4610 <_Z11turnLeft135l+0x68>)
   d45ba:	4816      	ldr	r0, [pc, #88]	; (d4614 <_Z11turnLeft135l+0x6c>)
   d45bc:	f001 fa2a 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d45c0:	4668      	mov	r0, sp
   d45c2:	f001 fc1d 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(255));
   d45c6:	220a      	movs	r2, #10
   d45c8:	21ff      	movs	r1, #255	; 0xff
   d45ca:	4668      	mov	r0, sp
   d45cc:	f001 fcc2 	bl	d5f54 <_ZN6StringC1Eih>
   d45d0:	9a00      	ldr	r2, [sp, #0]
   d45d2:	4911      	ldr	r1, [pc, #68]	; (d4618 <_Z11turnLeft135l+0x70>)
   d45d4:	480f      	ldr	r0, [pc, #60]	; (d4614 <_Z11turnLeft135l+0x6c>)
   d45d6:	f001 fa1d 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d45da:	4668      	mov	r0, sp
   d45dc:	f001 fc10 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(leftReverse, 255);
   d45e0:	4b0e      	ldr	r3, [pc, #56]	; (d461c <_Z11turnLeft135l+0x74>)
   d45e2:	21ff      	movs	r1, #255	; 0xff
   d45e4:	8818      	ldrh	r0, [r3, #0]
   d45e6:	f002 fb4d 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(rightForward, 255);
   d45ea:	4b0d      	ldr	r3, [pc, #52]	; (d4620 <_Z11turnLeft135l+0x78>)
   d45ec:	21ff      	movs	r1, #255	; 0xff
   d45ee:	8818      	ldrh	r0, [r3, #0]
   d45f0:	f002 fb48 	bl	d6c84 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : ONE_THIRTY_FIVE_DEG_TURN_DELAY);
   d45f4:	4b0b      	ldr	r3, [pc, #44]	; (d4624 <_Z11turnLeft135l+0x7c>)
   d45f6:	6818      	ldr	r0, [r3, #0]
   d45f8:	f240 336e 	movw	r3, #878	; 0x36e
   d45fc:	2800      	cmp	r0, #0
   d45fe:	bf08      	it	eq
   d4600:	4618      	moveq	r0, r3
   d4602:	f000 fd31 	bl	d5068 <delay>

  motorsOff(offDel);
   d4606:	4620      	mov	r0, r4
   d4608:	f7ff fd8c 	bl	d4124 <_Z9motorsOffl>
}
   d460c:	b004      	add	sp, #16
   d460e:	bd10      	pop	{r4, pc}
   d4610:	000d7250 	.word	0x000d7250
   d4614:	2003e3ec 	.word	0x2003e3ec
   d4618:	000d7249 	.word	0x000d7249
   d461c:	2003e328 	.word	0x2003e328
   d4620:	2003e338 	.word	0x2003e338
   d4624:	2003e3b0 	.word	0x2003e3b0

000d4628 <_Z12turnRight135l>:

void turnRight135(int32_t offDel)
{
   d4628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d462a:	4604      	mov	r4, r0
  Mesh.publish("rightR", String(255));
   d462c:	220a      	movs	r2, #10
   d462e:	21ff      	movs	r1, #255	; 0xff
   d4630:	4668      	mov	r0, sp
   d4632:	f001 fc8f 	bl	d5f54 <_ZN6StringC1Eih>
   d4636:	9a00      	ldr	r2, [sp, #0]
   d4638:	4915      	ldr	r1, [pc, #84]	; (d4690 <_Z12turnRight135l+0x68>)
   d463a:	4816      	ldr	r0, [pc, #88]	; (d4694 <_Z12turnRight135l+0x6c>)
   d463c:	f001 f9ea 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4640:	4668      	mov	r0, sp
   d4642:	f001 fbdd 	bl	d5e00 <_ZN6StringD1Ev>
  Mesh.publish("leftF", String(255));
   d4646:	220a      	movs	r2, #10
   d4648:	21ff      	movs	r1, #255	; 0xff
   d464a:	4668      	mov	r0, sp
   d464c:	f001 fc82 	bl	d5f54 <_ZN6StringC1Eih>
   d4650:	9a00      	ldr	r2, [sp, #0]
   d4652:	4911      	ldr	r1, [pc, #68]	; (d4698 <_Z12turnRight135l+0x70>)
   d4654:	480f      	ldr	r0, [pc, #60]	; (d4694 <_Z12turnRight135l+0x6c>)
   d4656:	f001 f9dd 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d465a:	4668      	mov	r0, sp
   d465c:	f001 fbd0 	bl	d5e00 <_ZN6StringD1Ev>

  analogWrite(rightReverse, 255);
   d4660:	4b0e      	ldr	r3, [pc, #56]	; (d469c <_Z12turnRight135l+0x74>)
   d4662:	21ff      	movs	r1, #255	; 0xff
   d4664:	8818      	ldrh	r0, [r3, #0]
   d4666:	f002 fb0d 	bl	d6c84 <_Z11analogWritetm>
  analogWrite(leftForward, 255);
   d466a:	4b0d      	ldr	r3, [pc, #52]	; (d46a0 <_Z12turnRight135l+0x78>)
   d466c:	21ff      	movs	r1, #255	; 0xff
   d466e:	8818      	ldrh	r0, [r3, #0]
   d4670:	f002 fb08 	bl	d6c84 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : ONE_THIRTY_FIVE_DEG_TURN_DELAY);
   d4674:	4b0b      	ldr	r3, [pc, #44]	; (d46a4 <_Z12turnRight135l+0x7c>)
   d4676:	6818      	ldr	r0, [r3, #0]
   d4678:	f240 336e 	movw	r3, #878	; 0x36e
   d467c:	2800      	cmp	r0, #0
   d467e:	bf08      	it	eq
   d4680:	4618      	moveq	r0, r3
   d4682:	f000 fcf1 	bl	d5068 <delay>

  motorsOff(offDel);
   d4686:	4620      	mov	r0, r4
   d4688:	f7ff fd4c 	bl	d4124 <_Z9motorsOffl>
}
   d468c:	b004      	add	sp, #16
   d468e:	bd10      	pop	{r4, pc}
   d4690:	000d7256 	.word	0x000d7256
   d4694:	2003e3ec 	.word	0x2003e3ec
   d4698:	000d7243 	.word	0x000d7243
   d469c:	2003e32c 	.word	0x2003e32c
   d46a0:	2003e330 	.word	0x2003e330
   d46a4:	2003e3b0 	.word	0x2003e3b0

000d46a8 <_Z8splinterv>:
    turnLeft90(100);
  } // repeat
}

void splinter()
{
   d46a8:	b508      	push	{r3, lr}
  // Turn 135 Left
  turnLeft135(200);
   d46aa:	20c8      	movs	r0, #200	; 0xc8
   d46ac:	f7ff ff7c 	bl	d45a8 <_Z11turnLeft135l>
  // Drive forward for 2 seconds
  moveForward(SPLINTER_MODE_SPEED, SPLINTER_MODE_DELAY, 200);
   d46b0:	22c8      	movs	r2, #200	; 0xc8
   d46b2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d46b6:	20ff      	movs	r0, #255	; 0xff
   d46b8:	f7ff fd70 	bl	d419c <_Z11moveForwardlll>
  // Turn 135 right
  turnRight135(200);
   d46bc:	20c8      	movs	r0, #200	; 0xc8
   d46be:	f7ff ffb3 	bl	d4628 <_Z12turnRight135l>
  // Drive forward for 2 sec
  moveForward(SPLINTER_MODE_SPEED, SPLINTER_MODE_DELAY, 200);
   d46c2:	22c8      	movs	r2, #200	; 0xc8
   d46c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d46c8:	20ff      	movs	r0, #255	; 0xff
}
   d46ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Drive forward for 2 seconds
  moveForward(SPLINTER_MODE_SPEED, SPLINTER_MODE_DELAY, 200);
  // Turn 135 right
  turnRight135(200);
  // Drive forward for 2 sec
  moveForward(SPLINTER_MODE_SPEED, SPLINTER_MODE_DELAY, 200);
   d46ce:	f7ff bd65 	b.w	d419c <_Z11moveForwardlll>
	...

000d46d4 <_Z8checkPiniPlPKc>:
/* UTILITIES */

// Check and control when in RC mode where leader is controlling
// followers via th RC remote.
void checkPin(int pin, int32_t *lastVal, const char *event)
{
   d46d4:	b570      	push	{r4, r5, r6, lr}
  int32_t pinVal = analogRead(pin) / 16;
   d46d6:	b280      	uxth	r0, r0
/* UTILITIES */

// Check and control when in RC mode where leader is controlling
// followers via th RC remote.
void checkPin(int pin, int32_t *lastVal, const char *event)
{
   d46d8:	b086      	sub	sp, #24
   d46da:	460e      	mov	r6, r1
   d46dc:	4615      	mov	r5, r2
  int32_t pinVal = analogRead(pin) / 16;
   d46de:	f002 faba 	bl	d6c56 <analogRead>
  if (pinVal > MIN_PIN_VAL)
    pinVal = DRIVE_VAL;
  else
    pinVal = 0;

  if (pinVal != *lastVal && pinVal == DRIVE_VAL)
   d46e2:	6833      	ldr	r3, [r6, #0]
  int32_t pinVal = analogRead(pin) / 16;

  if (pinVal > MIN_PIN_VAL)
    pinVal = DRIVE_VAL;
  else
    pinVal = 0;
   d46e4:	f5b0 6f17 	cmp.w	r0, #2416	; 0x970
   d46e8:	bfac      	ite	ge
   d46ea:	247d      	movge	r4, #125	; 0x7d
   d46ec:	2400      	movlt	r4, #0

  if (pinVal != *lastVal && pinVal == DRIVE_VAL)
   d46ee:	429c      	cmp	r4, r3
   d46f0:	d001      	beq.n	d46f6 <_Z8checkPiniPlPKc+0x22>
   d46f2:	2c7d      	cmp	r4, #125	; 0x7d
   d46f4:	d001      	beq.n	d46fa <_Z8checkPiniPlPKc+0x26>
    *lastVal = pinVal;

    Mesh.publish(event, String(DRIVE_VAL));
    Serial.printlnf("%s val: %i", event, DRIVE_VAL);
  }
  else if (pinVal == 0 && *lastVal != 0)
   d46f6:	b9b4      	cbnz	r4, d4726 <_Z8checkPiniPlPKc+0x52>
   d46f8:	b1ab      	cbz	r3, d4726 <_Z8checkPiniPlPKc+0x52>
  {
    *lastVal = 0;

    Mesh.publish(event, String(0));
   d46fa:	220a      	movs	r2, #10
   d46fc:	4621      	mov	r1, r4
    Mesh.publish(event, String(DRIVE_VAL));
    Serial.printlnf("%s val: %i", event, DRIVE_VAL);
  }
  else if (pinVal == 0 && *lastVal != 0)
  {
    *lastVal = 0;
   d46fe:	6034      	str	r4, [r6, #0]

    Mesh.publish(event, String(0));
   d4700:	a802      	add	r0, sp, #8
   d4702:	f001 fc27 	bl	d5f54 <_ZN6StringC1Eih>
   d4706:	9a02      	ldr	r2, [sp, #8]
   d4708:	4808      	ldr	r0, [pc, #32]	; (d472c <_Z8checkPiniPlPKc+0x58>)
   d470a:	4629      	mov	r1, r5
   d470c:	f001 f982 	bl	d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4710:	a802      	add	r0, sp, #8
   d4712:	f001 fb75 	bl	d5e00 <_ZN6StringD1Ev>
    Serial.printlnf("%s val: %i", event, 0);
   d4716:	f002 f955 	bl	d69c4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d471a:	9400      	str	r4, [sp, #0]
   d471c:	462b      	mov	r3, r5
   d471e:	4a04      	ldr	r2, [pc, #16]	; (d4730 <_Z8checkPiniPlPKc+0x5c>)
   d4720:	2101      	movs	r1, #1
   d4722:	f001 faf9 	bl	d5d18 <_ZN5Print11printf_implEbPKcz>
  }
}
   d4726:	b006      	add	sp, #24
   d4728:	bd70      	pop	{r4, r5, r6, pc}
   d472a:	bf00      	nop
   d472c:	2003e3ec 	.word	0x2003e3ec
   d4730:	000d725d 	.word	0x000d725d

000d4734 <loop>:
  Particle.function("swarmDemo", swarmDemo);
  Particle.function("stopDemos", stopDemos);
}

void loop()
{
   d4734:	b508      	push	{r3, lr}
  if (mode == RC_MODE)
   d4736:	4b0f      	ldr	r3, [pc, #60]	; (d4774 <loop+0x40>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	2b01      	cmp	r3, #1
   d473c:	d119      	bne.n	d4772 <loop+0x3e>
  {
    checkPin(leftReverse, &lastLeftRVal, "leftR");
   d473e:	4b0e      	ldr	r3, [pc, #56]	; (d4778 <loop+0x44>)
   d4740:	4a0e      	ldr	r2, [pc, #56]	; (d477c <loop+0x48>)
   d4742:	6818      	ldr	r0, [r3, #0]
   d4744:	490e      	ldr	r1, [pc, #56]	; (d4780 <loop+0x4c>)
   d4746:	f7ff ffc5 	bl	d46d4 <_Z8checkPiniPlPKc>
    checkPin(leftForward, &lastLeftFVal, "leftF");
   d474a:	4b0e      	ldr	r3, [pc, #56]	; (d4784 <loop+0x50>)
   d474c:	4a0e      	ldr	r2, [pc, #56]	; (d4788 <loop+0x54>)
   d474e:	6818      	ldr	r0, [r3, #0]
   d4750:	490e      	ldr	r1, [pc, #56]	; (d478c <loop+0x58>)
   d4752:	f7ff ffbf 	bl	d46d4 <_Z8checkPiniPlPKc>
    checkPin(rightReverse, &lastRightRVal, "rightR");
   d4756:	4b0e      	ldr	r3, [pc, #56]	; (d4790 <loop+0x5c>)
   d4758:	4a0e      	ldr	r2, [pc, #56]	; (d4794 <loop+0x60>)
   d475a:	6818      	ldr	r0, [r3, #0]
   d475c:	490e      	ldr	r1, [pc, #56]	; (d4798 <loop+0x64>)
   d475e:	f7ff ffb9 	bl	d46d4 <_Z8checkPiniPlPKc>
    checkPin(rightForward, &lastRightFVal, "rightF");
   d4762:	4b0e      	ldr	r3, [pc, #56]	; (d479c <loop+0x68>)
   d4764:	4a0e      	ldr	r2, [pc, #56]	; (d47a0 <loop+0x6c>)
   d4766:	6818      	ldr	r0, [r3, #0]
   d4768:	490e      	ldr	r1, [pc, #56]	; (d47a4 <loop+0x70>)
  }
}
   d476a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (mode == RC_MODE)
  {
    checkPin(leftReverse, &lastLeftRVal, "leftR");
    checkPin(leftForward, &lastLeftFVal, "leftF");
    checkPin(rightReverse, &lastRightRVal, "rightR");
    checkPin(rightForward, &lastRightFVal, "rightF");
   d476e:	f7ff bfb1 	b.w	d46d4 <_Z8checkPiniPlPKc>
   d4772:	bd08      	pop	{r3, pc}
   d4774:	2003e334 	.word	0x2003e334
   d4778:	2003e328 	.word	0x2003e328
   d477c:	000d7250 	.word	0x000d7250
   d4780:	2003e3d4 	.word	0x2003e3d4
   d4784:	2003e330 	.word	0x2003e330
   d4788:	000d7243 	.word	0x000d7243
   d478c:	2003e3b8 	.word	0x2003e3b8
   d4790:	2003e32c 	.word	0x2003e32c
   d4794:	000d7256 	.word	0x000d7256
   d4798:	2003e3b4 	.word	0x2003e3b4
   d479c:	2003e338 	.word	0x2003e338
   d47a0:	000d7249 	.word	0x000d7249
   d47a4:	2003e3d0 	.word	0x2003e3d0

000d47a8 <_Z7getArgs6String>:
  }
}

// Utility function to split a Particle function args string into component parts
String *getArgs(String args)
{
   d47a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d47aa:	4605      	mov	r5, r0
  String *vals = new String[2];
   d47ac:	2028      	movs	r0, #40	; 0x28
   d47ae:	f7ff fc74 	bl	d409a <_Znaj>
   d47b2:	4604      	mov	r4, r0
   d47b4:	b178      	cbz	r0, d47d6 <_Z7getArgs6String+0x2e>
   d47b6:	2210      	movs	r2, #16
   d47b8:	2302      	movs	r3, #2
   d47ba:	f100 0608 	add.w	r6, r0, #8
   d47be:	e880 000c 	stmia.w	r0, {r2, r3}
   d47c2:	491d      	ldr	r1, [pc, #116]	; (d4838 <_Z7getArgs6String+0x90>)
   d47c4:	4630      	mov	r0, r6
   d47c6:	f001 fb62 	bl	d5e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d47ca:	f104 0018 	add.w	r0, r4, #24
   d47ce:	491a      	ldr	r1, [pc, #104]	; (d4838 <_Z7getArgs6String+0x90>)
   d47d0:	f001 fb5d 	bl	d5e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d47d4:	4634      	mov	r4, r6
  int separatorIndex = args.indexOf(",");
   d47d6:	4919      	ldr	r1, [pc, #100]	; (d483c <_Z7getArgs6String+0x94>)
   d47d8:	4668      	mov	r0, sp
   d47da:	f001 fb58 	bl	d5e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d47de:	4669      	mov	r1, sp
   d47e0:	4628      	mov	r0, r5
   d47e2:	f001 fc31 	bl	d6048 <_ZNK6String7indexOfERKS_>
   d47e6:	4606      	mov	r6, r0
   d47e8:	4668      	mov	r0, sp
   d47ea:	f001 fb09 	bl	d5e00 <_ZN6StringD1Ev>

  if (separatorIndex == -1)
   d47ee:	1c73      	adds	r3, r6, #1
   d47f0:	d104      	bne.n	d47fc <_Z7getArgs6String+0x54>
  {
    vals[0] = args;
   d47f2:	4629      	mov	r1, r5
   d47f4:	4620      	mov	r0, r4
   d47f6:	f001 fb7a 	bl	d5eee <_ZN6StringaSERKS_>
   d47fa:	e019      	b.n	d4830 <_Z7getArgs6String+0x88>
  }
  else
  {
    vals[0] = args.substring(0, separatorIndex);
   d47fc:	4633      	mov	r3, r6
   d47fe:	2200      	movs	r2, #0
   d4800:	4629      	mov	r1, r5
   d4802:	4668      	mov	r0, sp
   d4804:	f001 fc24 	bl	d6050 <_ZNK6String9substringEjj>
   d4808:	4669      	mov	r1, sp
   d480a:	4620      	mov	r0, r4
   d480c:	f001 fb89 	bl	d5f22 <_ZN6StringaSEOS_>
   d4810:	4668      	mov	r0, sp
   d4812:	f001 faf5 	bl	d5e00 <_ZN6StringD1Ev>
    vals[1] = args.substring(separatorIndex + 1);
   d4816:	1c72      	adds	r2, r6, #1
   d4818:	4629      	mov	r1, r5
   d481a:	4668      	mov	r0, sp
   d481c:	f001 fc40 	bl	d60a0 <_ZNK6String9substringEj>
   d4820:	4669      	mov	r1, sp
   d4822:	f104 0010 	add.w	r0, r4, #16
   d4826:	f001 fb7c 	bl	d5f22 <_ZN6StringaSEOS_>
   d482a:	4668      	mov	r0, sp
   d482c:	f001 fae8 	bl	d5e00 <_ZN6StringD1Ev>
  }

  return vals;
   d4830:	4620      	mov	r0, r4
   d4832:	b004      	add	sp, #16
   d4834:	bd70      	pop	{r4, r5, r6, pc}
   d4836:	bf00      	nop
   d4838:	000d739c 	.word	0x000d739c
   d483c:	000d7268 	.word	0x000d7268

000d4840 <_Z9swarmDemo6String>:
}

/* MODE CONTROL */

int swarmDemo(String args)
{
   d4840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (mode == RC_MODE)
   d4842:	4b25      	ldr	r3, [pc, #148]	; (d48d8 <_Z9swarmDemo6String+0x98>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	2b01      	cmp	r3, #1
}

/* MODE CONTROL */

int swarmDemo(String args)
{
   d4848:	4601      	mov	r1, r0
  if (mode == RC_MODE)
   d484a:	d03f      	beq.n	d48cc <_Z9swarmDemo6String+0x8c>
    return 0;

  String *argVals = getArgs(args);
   d484c:	4668      	mov	r0, sp
   d484e:	f001 fb5d 	bl	d5f0c <_ZN6StringC1ERKS_>
   d4852:	4668      	mov	r0, sp
   d4854:	f7ff ffa8 	bl	d47a8 <_Z7getArgs6String>
   d4858:	4604      	mov	r4, r0
   d485a:	4668      	mov	r0, sp
   d485c:	f001 fad0 	bl	d5e00 <_ZN6StringD1Ev>

  // Can be run with adjustable delays to test without recompiling
  overrideDelay = argVals[1].toInt();
   d4860:	f104 0010 	add.w	r0, r4, #16
   d4864:	f001 fc23 	bl	d60ae <_ZNK6String5toIntEv>
   d4868:	4b1c      	ldr	r3, [pc, #112]	; (d48dc <_Z9swarmDemo6String+0x9c>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d486a:	491d      	ldr	r1, [pc, #116]	; (d48e0 <_Z9swarmDemo6String+0xa0>)
   d486c:	6018      	str	r0, [r3, #0]
   d486e:	4620      	mov	r0, r4
   d4870:	f001 fbc9 	bl	d6006 <_ZNK6String6equalsEPKc>

  if (argVals[0] == "follow")
   d4874:	b110      	cbz	r0, d487c <_Z9swarmDemo6String+0x3c>
  {
    // Run follow the leader demo
    followTheLeader();
   d4876:	f7ff fe7f 	bl	d4578 <_Z15followTheLeaderv>
   d487a:	e029      	b.n	d48d0 <_Z9swarmDemo6String+0x90>
   d487c:	4919      	ldr	r1, [pc, #100]	; (d48e4 <_Z9swarmDemo6String+0xa4>)
   d487e:	4620      	mov	r0, r4
   d4880:	f001 fbc1 	bl	d6006 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "spin")
   d4884:	b110      	cbz	r0, d488c <_Z9swarmDemo6String+0x4c>
  {
    spinCars();
   d4886:	f7ff fd49 	bl	d431c <_Z8spinCarsv>
   d488a:	e021      	b.n	d48d0 <_Z9swarmDemo6String+0x90>
   d488c:	4916      	ldr	r1, [pc, #88]	; (d48e8 <_Z9swarmDemo6String+0xa8>)
   d488e:	4620      	mov	r0, r4
   d4890:	f001 fbb9 	bl	d6006 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "sentry")
   d4894:	b110      	cbz	r0, d489c <_Z9swarmDemo6String+0x5c>
  {
    sentry();
   d4896:	f7ff fdcb 	bl	d4430 <_Z6sentryv>
   d489a:	e019      	b.n	d48d0 <_Z9swarmDemo6String+0x90>
   d489c:	4913      	ldr	r1, [pc, #76]	; (d48ec <_Z9swarmDemo6String+0xac>)
   d489e:	4620      	mov	r0, r4
   d48a0:	f001 fbb1 	bl	d6006 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "splinter")
   d48a4:	b110      	cbz	r0, d48ac <_Z9swarmDemo6String+0x6c>
  {
    splinter();
   d48a6:	f7ff feff 	bl	d46a8 <_Z8splinterv>
   d48aa:	e011      	b.n	d48d0 <_Z9swarmDemo6String+0x90>
   d48ac:	4910      	ldr	r1, [pc, #64]	; (d48f0 <_Z9swarmDemo6String+0xb0>)
   d48ae:	4620      	mov	r0, r4
   d48b0:	f001 fba9 	bl	d6006 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "push")
   d48b4:	b110      	cbz	r0, d48bc <_Z9swarmDemo6String+0x7c>
  {
    followAndPush();
   d48b6:	f7ff fdc9 	bl	d444c <_Z13followAndPushv>
   d48ba:	e009      	b.n	d48d0 <_Z9swarmDemo6String+0x90>
   d48bc:	490d      	ldr	r1, [pc, #52]	; (d48f4 <_Z9swarmDemo6String+0xb4>)
   d48be:	4620      	mov	r0, r4
   d48c0:	f001 fba1 	bl	d6006 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "orbit")
   d48c4:	b120      	cbz	r0, d48d0 <_Z9swarmDemo6String+0x90>
  {
    orbit();
   d48c6:	f7ff fc3f 	bl	d4148 <_Z5orbitv>
   d48ca:	e001      	b.n	d48d0 <_Z9swarmDemo6String+0x90>
/* MODE CONTROL */

int swarmDemo(String args)
{
  if (mode == RC_MODE)
    return 0;
   d48cc:	2000      	movs	r0, #0
   d48ce:	e000      	b.n	d48d2 <_Z9swarmDemo6String+0x92>
  }
  else if (argVals[0] == "push")
  {
    followAndPush();
  }
  else if (argVals[0] == "orbit")
   d48d0:	2001      	movs	r0, #1
  {
    orbit();
  }

  return 1;
}
   d48d2:	b004      	add	sp, #16
   d48d4:	bd10      	pop	{r4, pc}
   d48d6:	bf00      	nop
   d48d8:	2003e334 	.word	0x2003e334
   d48dc:	2003e3b0 	.word	0x2003e3b0
   d48e0:	000d726a 	.word	0x000d726a
   d48e4:	000d7271 	.word	0x000d7271
   d48e8:	000d7276 	.word	0x000d7276
   d48ec:	000d727d 	.word	0x000d727d
   d48f0:	000d7286 	.word	0x000d7286
   d48f4:	000d728b 	.word	0x000d728b

000d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d48fa:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48fc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d48fe:	b17c      	cbz	r4, d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4900:	6863      	ldr	r3, [r4, #4]
   d4902:	3b01      	subs	r3, #1
   d4904:	6063      	str	r3, [r4, #4]
   d4906:	b95b      	cbnz	r3, d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4908:	6823      	ldr	r3, [r4, #0]
   d490a:	4620      	mov	r0, r4
   d490c:	689b      	ldr	r3, [r3, #8]
   d490e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4910:	68a3      	ldr	r3, [r4, #8]
   d4912:	3b01      	subs	r3, #1
   d4914:	60a3      	str	r3, [r4, #8]
   d4916:	b91b      	cbnz	r3, d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4918:	6823      	ldr	r3, [r4, #0]
   d491a:	4620      	mov	r0, r4
   d491c:	68db      	ldr	r3, [r3, #12]
   d491e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4920:	4628      	mov	r0, r5
   d4922:	bd38      	pop	{r3, r4, r5, pc}

000d4924 <setup>:
int32_t overrideDelay = 0;

/* MAIN Firmware Functions */

void setup()
{
   d4924:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(9600);
   d4926:	f002 f84d 	bl	d69c4 <_Z16_fetch_usbserialv>
   d492a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d492e:	f002 f83d 	bl	d69ac <_ZN9USBSerial5beginEl>

  pinMode(leftReverse, INPUT);
   d4932:	4b26      	ldr	r3, [pc, #152]	; (d49cc <setup+0xa8>)
   d4934:	4d26      	ldr	r5, [pc, #152]	; (d49d0 <setup+0xac>)
   d4936:	8818      	ldrh	r0, [r3, #0]
  pinMode(leftForward, INPUT);
  pinMode(rightForward, INPUT);
  pinMode(rightReverse, INPUT);

  Particle.publish("swarm-leader-online", version);
  Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d4938:	4c26      	ldr	r4, [pc, #152]	; (d49d4 <setup+0xb0>)

void setup()
{
  Serial.begin(9600);

  pinMode(leftReverse, INPUT);
   d493a:	2100      	movs	r1, #0
   d493c:	f002 f97a 	bl	d6c34 <pinMode>
  pinMode(leftForward, INPUT);
   d4940:	4b25      	ldr	r3, [pc, #148]	; (d49d8 <setup+0xb4>)
   d4942:	2100      	movs	r1, #0
   d4944:	8818      	ldrh	r0, [r3, #0]
   d4946:	f002 f975 	bl	d6c34 <pinMode>
  pinMode(rightForward, INPUT);
   d494a:	4b24      	ldr	r3, [pc, #144]	; (d49dc <setup+0xb8>)
   d494c:	2100      	movs	r1, #0
   d494e:	8818      	ldrh	r0, [r3, #0]
   d4950:	f002 f970 	bl	d6c34 <pinMode>
  pinMode(rightReverse, INPUT);
   d4954:	4b22      	ldr	r3, [pc, #136]	; (d49e0 <setup+0xbc>)
   d4956:	2100      	movs	r1, #0
   d4958:	8818      	ldrh	r0, [r3, #0]
   d495a:	f002 f96b 	bl	d6c34 <pinMode>

  Particle.publish("swarm-leader-online", version);
   d495e:	682a      	ldr	r2, [r5, #0]
   d4960:	4920      	ldr	r1, [pc, #128]	; (d49e4 <setup+0xc0>)
   d4962:	4668      	mov	r0, sp
   d4964:	f7ff fbb0 	bl	d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.8>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4968:	a801      	add	r0, sp, #4
   d496a:	f7ff ffc5 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d496e:	6821      	ldr	r1, [r4, #0]
   d4970:	4b1d      	ldr	r3, [pc, #116]	; (d49e8 <setup+0xc4>)
   d4972:	4a1e      	ldr	r2, [pc, #120]	; (d49ec <setup+0xc8>)
   d4974:	4668      	mov	r0, sp
   d4976:	2901      	cmp	r1, #1
   d4978:	bf18      	it	ne
   d497a:	461a      	movne	r2, r3
   d497c:	491c      	ldr	r1, [pc, #112]	; (d49f0 <setup+0xcc>)
   d497e:	f7ff fba3 	bl	d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d4982:	a801      	add	r0, sp, #4
   d4984:	f7ff ffb8 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d4988:	2308      	movs	r3, #8
   d498a:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d498e:	4b19      	ldr	r3, [pc, #100]	; (d49f4 <setup+0xd0>)
   d4990:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d4992:	4629      	mov	r1, r5
   d4994:	466b      	mov	r3, sp
   d4996:	2204      	movs	r2, #4
   d4998:	4817      	ldr	r0, [pc, #92]	; (d49f8 <setup+0xd4>)
   d499a:	f000 fac5 	bl	d4f28 <spark_variable>
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
    }

    static inline bool _variable(const char *varKey, const int32_t* userVar, const CloudVariableTypeInt& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::value(), NULL), false);
   d499e:	2300      	movs	r3, #0
   d49a0:	4621      	mov	r1, r4
   d49a2:	2202      	movs	r2, #2
   d49a4:	4812      	ldr	r0, [pc, #72]	; (d49f0 <setup+0xcc>)
   d49a6:	f000 fabf 	bl	d4f28 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d49aa:	4a14      	ldr	r2, [pc, #80]	; (d49fc <setup+0xd8>)
   d49ac:	4914      	ldr	r1, [pc, #80]	; (d4a00 <setup+0xdc>)
   d49ae:	4815      	ldr	r0, [pc, #84]	; (d4a04 <setup+0xe0>)
   d49b0:	f000 fbbc 	bl	d512c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49b4:	4a14      	ldr	r2, [pc, #80]	; (d4a08 <setup+0xe4>)
   d49b6:	4915      	ldr	r1, [pc, #84]	; (d4a0c <setup+0xe8>)
   d49b8:	4812      	ldr	r0, [pc, #72]	; (d4a04 <setup+0xe0>)
   d49ba:	f000 fbb7 	bl	d512c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d49be:	4a14      	ldr	r2, [pc, #80]	; (d4a10 <setup+0xec>)
   d49c0:	4914      	ldr	r1, [pc, #80]	; (d4a14 <setup+0xf0>)
   d49c2:	4810      	ldr	r0, [pc, #64]	; (d4a04 <setup+0xe0>)
   d49c4:	f000 fbb2 	bl	d512c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("swarm-mode", mode);

  Particle.function("switchMode", switchSwarmMode);
  Particle.function("swarmDemo", swarmDemo);
  Particle.function("stopDemos", stopDemos);
}
   d49c8:	b003      	add	sp, #12
   d49ca:	bd30      	pop	{r4, r5, pc}
   d49cc:	2003e328 	.word	0x2003e328
   d49d0:	2003e3bc 	.word	0x2003e3bc
   d49d4:	2003e334 	.word	0x2003e334
   d49d8:	2003e330 	.word	0x2003e330
   d49dc:	2003e338 	.word	0x2003e338
   d49e0:	2003e32c 	.word	0x2003e32c
   d49e4:	000d72a3 	.word	0x000d72a3
   d49e8:	000d7299 	.word	0x000d7299
   d49ec:	000d7291 	.word	0x000d7291
   d49f0:	000d72b7 	.word	0x000d72b7
   d49f4:	000d40b7 	.word	0x000d40b7
   d49f8:	000d72c2 	.word	0x000d72c2
   d49fc:	000d72cd 	.word	0x000d72cd
   d4a00:	000d4a19 	.word	0x000d4a19
   d4a04:	000d5101 	.word	0x000d5101
   d4a08:	000d72d8 	.word	0x000d72d8
   d4a0c:	000d4841 	.word	0x000d4841
   d4a10:	000d72e2 	.word	0x000d72e2
   d4a14:	000d40bd 	.word	0x000d40bd

000d4a18 <_Z15switchSwarmMode6String>:

  return 1;
}

int switchSwarmMode(String args)
{
   d4a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a1a:	4606      	mov	r6, r0
  int32_t newMode = args.toInt();
   d4a1c:	f001 fb47 	bl	d60ae <_ZNK6String5toIntEv>
   d4a20:	4d26      	ldr	r5, [pc, #152]	; (d4abc <_Z15switchSwarmMode6String+0xa4>)

  if (newMode == 0) // It's a String
   d4a22:	4604      	mov	r4, r0
   d4a24:	2800      	cmp	r0, #0
   d4a26:	d139      	bne.n	d4a9c <_Z15switchSwarmMode6String+0x84>
   d4a28:	4925      	ldr	r1, [pc, #148]	; (d4ac0 <_Z15switchSwarmMode6String+0xa8>)
   d4a2a:	4630      	mov	r0, r6
   d4a2c:	f001 faeb 	bl	d6006 <_ZNK6String6equalsEPKc>
  {
    if (args == "rc")
   d4a30:	b190      	cbz	r0, d4a58 <_Z15switchSwarmMode6String+0x40>
    {
      mode = RC_MODE;
   d4a32:	2301      	movs	r3, #1
   d4a34:	602b      	str	r3, [r5, #0]

      pinMode(leftReverse, INPUT);
   d4a36:	4b23      	ldr	r3, [pc, #140]	; (d4ac4 <_Z15switchSwarmMode6String+0xac>)
   d4a38:	4621      	mov	r1, r4
   d4a3a:	8818      	ldrh	r0, [r3, #0]
   d4a3c:	f002 f8fa 	bl	d6c34 <pinMode>
      pinMode(leftForward, INPUT);
   d4a40:	4b21      	ldr	r3, [pc, #132]	; (d4ac8 <_Z15switchSwarmMode6String+0xb0>)
   d4a42:	4621      	mov	r1, r4
   d4a44:	8818      	ldrh	r0, [r3, #0]
   d4a46:	f002 f8f5 	bl	d6c34 <pinMode>
      pinMode(rightForward, INPUT);
   d4a4a:	4b20      	ldr	r3, [pc, #128]	; (d4acc <_Z15switchSwarmMode6String+0xb4>)
   d4a4c:	4621      	mov	r1, r4
   d4a4e:	8818      	ldrh	r0, [r3, #0]
   d4a50:	f002 f8f0 	bl	d6c34 <pinMode>
      pinMode(rightReverse, INPUT);
   d4a54:	4621      	mov	r1, r4
   d4a56:	e016      	b.n	d4a86 <_Z15switchSwarmMode6String+0x6e>
   d4a58:	491d      	ldr	r1, [pc, #116]	; (d4ad0 <_Z15switchSwarmMode6String+0xb8>)
   d4a5a:	4630      	mov	r0, r6
   d4a5c:	f001 fad3 	bl	d6006 <_ZNK6String6equalsEPKc>
    }
    else if (args == "demo")
   d4a60:	b1a8      	cbz	r0, d4a8e <_Z15switchSwarmMode6String+0x76>
    {
      mode = DEMO_MODE;
   d4a62:	2302      	movs	r3, #2
   d4a64:	602b      	str	r3, [r5, #0]

      pinMode(leftReverse, OUTPUT);
   d4a66:	4b17      	ldr	r3, [pc, #92]	; (d4ac4 <_Z15switchSwarmMode6String+0xac>)
   d4a68:	2101      	movs	r1, #1
   d4a6a:	8818      	ldrh	r0, [r3, #0]
   d4a6c:	f002 f8e2 	bl	d6c34 <pinMode>
      pinMode(leftForward, OUTPUT);
   d4a70:	4b15      	ldr	r3, [pc, #84]	; (d4ac8 <_Z15switchSwarmMode6String+0xb0>)
   d4a72:	2101      	movs	r1, #1
   d4a74:	8818      	ldrh	r0, [r3, #0]
   d4a76:	f002 f8dd 	bl	d6c34 <pinMode>
      pinMode(rightForward, OUTPUT);
   d4a7a:	4b14      	ldr	r3, [pc, #80]	; (d4acc <_Z15switchSwarmMode6String+0xb4>)
   d4a7c:	2101      	movs	r1, #1
   d4a7e:	8818      	ldrh	r0, [r3, #0]
   d4a80:	f002 f8d8 	bl	d6c34 <pinMode>
      pinMode(rightReverse, OUTPUT);
   d4a84:	2101      	movs	r1, #1
   d4a86:	4b13      	ldr	r3, [pc, #76]	; (d4ad4 <_Z15switchSwarmMode6String+0xbc>)
   d4a88:	8818      	ldrh	r0, [r3, #0]
   d4a8a:	f002 f8d3 	bl	d6c34 <pinMode>
    }

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d4a8e:	6829      	ldr	r1, [r5, #0]
   d4a90:	4b11      	ldr	r3, [pc, #68]	; (d4ad8 <_Z15switchSwarmMode6String+0xc0>)
   d4a92:	4a12      	ldr	r2, [pc, #72]	; (d4adc <_Z15switchSwarmMode6String+0xc4>)
   d4a94:	2901      	cmp	r1, #1
   d4a96:	bf18      	it	ne
   d4a98:	461a      	movne	r2, r3
   d4a9a:	e005      	b.n	d4aa8 <_Z15switchSwarmMode6String+0x90>
  }
  else
  {
    mode = newMode;

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d4a9c:	4b0e      	ldr	r3, [pc, #56]	; (d4ad8 <_Z15switchSwarmMode6String+0xc0>)
   d4a9e:	4a0f      	ldr	r2, [pc, #60]	; (d4adc <_Z15switchSwarmMode6String+0xc4>)

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
  }
  else
  {
    mode = newMode;
   d4aa0:	6028      	str	r0, [r5, #0]

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d4aa2:	2801      	cmp	r0, #1
   d4aa4:	bf18      	it	ne
   d4aa6:	461a      	movne	r2, r3
   d4aa8:	490d      	ldr	r1, [pc, #52]	; (d4ae0 <_Z15switchSwarmMode6String+0xc8>)
   d4aaa:	4668      	mov	r0, sp
   d4aac:	f7ff fb0c 	bl	d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d4ab0:	a801      	add	r0, sp, #4
   d4ab2:	f7ff ff21 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  return 1;
}
   d4ab6:	2001      	movs	r0, #1
   d4ab8:	b002      	add	sp, #8
   d4aba:	bd70      	pop	{r4, r5, r6, pc}
   d4abc:	2003e334 	.word	0x2003e334
   d4ac0:	000d72ec 	.word	0x000d72ec
   d4ac4:	2003e328 	.word	0x2003e328
   d4ac8:	2003e330 	.word	0x2003e330
   d4acc:	2003e338 	.word	0x2003e338
   d4ad0:	000d72ef 	.word	0x000d72ef
   d4ad4:	2003e32c 	.word	0x2003e32c
   d4ad8:	000d7299 	.word	0x000d7299
   d4adc:	000d7291 	.word	0x000d7291
   d4ae0:	000d72b7 	.word	0x000d72b7

000d4ae4 <_GLOBAL__sub_I_leftReverse>:
    vals[0] = args.substring(0, separatorIndex);
    vals[1] = args.substring(separatorIndex + 1);
  }

  return vals;
   d4ae4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ae6:	4b08      	ldr	r3, [pc, #32]	; (d4b08 <_GLOBAL__sub_I_leftReverse+0x24>)
#define PUSH_MODE_DELAY 1000

// Orbin Mode
#define ORBIT_VAL 100

String version = "v1.3";
   d4ae8:	4c08      	ldr	r4, [pc, #32]	; (d4b0c <_GLOBAL__sub_I_leftReverse+0x28>)
   d4aea:	2200      	movs	r2, #0
   d4aec:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4aee:	f000 f857 	bl	d4ba0 <HAL_Pin_Map>
   d4af2:	4907      	ldr	r1, [pc, #28]	; (d4b10 <_GLOBAL__sub_I_leftReverse+0x2c>)
   d4af4:	4620      	mov	r0, r4
   d4af6:	f001 f9ca 	bl	d5e8e <_ZN6StringC1EPK19__FlashStringHelper>
   d4afa:	4620      	mov	r0, r4
   d4afc:	4a05      	ldr	r2, [pc, #20]	; (d4b14 <_GLOBAL__sub_I_leftReverse+0x30>)
   d4afe:	4906      	ldr	r1, [pc, #24]	; (d4b18 <_GLOBAL__sub_I_leftReverse+0x34>)
    vals[0] = args.substring(0, separatorIndex);
    vals[1] = args.substring(separatorIndex + 1);
  }

  return vals;
   d4b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define PUSH_MODE_DELAY 1000

// Orbin Mode
#define ORBIT_VAL 100

String version = "v1.3";
   d4b04:	f002 b926 	b.w	d6d54 <__aeabi_atexit>
   d4b08:	2003e3ac 	.word	0x2003e3ac
   d4b0c:	2003e3bc 	.word	0x2003e3bc
   d4b10:	000d72f4 	.word	0x000d72f4
   d4b14:	2003e3a8 	.word	0x2003e3a8
   d4b18:	000d5e01 	.word	0x000d5e01

000d4b1c <_GLOBAL__sub_I__ZN5StateC2EPFvvE>:
   d4b1c:	f000 b840 	b.w	d4ba0 <HAL_Pin_Map>

000d4b20 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <os_thread_is_current+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	689b      	ldr	r3, [r3, #8]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030248 	.word	0x00030248

000d4b30 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <os_thread_join+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	691b      	ldr	r3, [r3, #16]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030248 	.word	0x00030248

000d4b40 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <os_thread_cleanup+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	695b      	ldr	r3, [r3, #20]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030248 	.word	0x00030248

000d4b50 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <os_mutex_create+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030248 	.word	0x00030248

000d4b60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <os_mutex_recursive_create+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030248 	.word	0x00030248

000d4b70 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <os_mutex_recursive_lock+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030248 	.word	0x00030248

000d4b80 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <os_mutex_recursive_unlock+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030248 	.word	0x00030248

000d4b90 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	695b      	ldr	r3, [r3, #20]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030218 	.word	0x00030218

000d4ba0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <HAL_Pin_Map+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	681b      	ldr	r3, [r3, #0]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003022c 	.word	0x0003022c

000d4bb0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <HAL_Validate_Pin_Function+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	685b      	ldr	r3, [r3, #4]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003022c 	.word	0x0003022c

000d4bc0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <HAL_Pin_Mode+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	689b      	ldr	r3, [r3, #8]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	0003022c 	.word	0x0003022c

000d4bd0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <HAL_Get_Pin_Mode+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	68db      	ldr	r3, [r3, #12]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	0003022c 	.word	0x0003022c

000d4be0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <HAL_DAC_Write+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	0003022c 	.word	0x0003022c

000d4bf0 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <HAL_ADC_Read+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	0003022c 	.word	0x0003022c

000d4c00 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <HAL_PWM_Write_Ext+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	0003022c 	.word	0x0003022c

000d4c10 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <HAL_I2C_Write_Data+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6a1b      	ldr	r3, [r3, #32]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030228 	.word	0x00030228

000d4c20 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <HAL_I2C_Available_Data+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030228 	.word	0x00030228

000d4c30 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <HAL_I2C_Read_Data+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030228 	.word	0x00030228

000d4c40 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <HAL_I2C_Peek_Data+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030228 	.word	0x00030228

000d4c50 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <HAL_I2C_Flush_Data+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030228 	.word	0x00030228

000d4c60 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <HAL_I2C_Is_Enabled+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030228 	.word	0x00030228

000d4c70 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <HAL_I2C_Init+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030228 	.word	0x00030228

000d4c80 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <if_name_to_index+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	691b      	ldr	r3, [r3, #16]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	0003026c 	.word	0x0003026c

000d4c90 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <if_index_to_name+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	695b      	ldr	r3, [r3, #20]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	0003026c 	.word	0x0003026c

000d4ca0 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <if_get_by_index+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	699b      	ldr	r3, [r3, #24]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	0003026c 	.word	0x0003026c

000d4cb0 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <if_get_addrs+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	0003026c 	.word	0x0003026c

000d4cc0 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <if_free_if_addrs+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	0003026c 	.word	0x0003026c

000d4cd0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <inet_inet_ntop+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	695b      	ldr	r3, [r3, #20]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030264 	.word	0x00030264

000d4ce0 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <inet_inet_pton+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	699b      	ldr	r3, [r3, #24]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030264 	.word	0x00030264

000d4cf0 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <inet_htonl+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6a1b      	ldr	r3, [r3, #32]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030264 	.word	0x00030264

000d4d00 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <inet_ntohs+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030264 	.word	0x00030264

000d4d10 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <inet_htons+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030264 	.word	0x00030264

000d4d20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <netdb_freeaddrinfo+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	689b      	ldr	r3, [r3, #8]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030268 	.word	0x00030268

000d4d30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <netdb_getaddrinfo+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	68db      	ldr	r3, [r3, #12]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030268 	.word	0x00030268

000d4d40 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <sock_bind+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	685b      	ldr	r3, [r3, #4]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030238 	.word	0x00030238

000d4d50 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <sock_setsockopt+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	699b      	ldr	r3, [r3, #24]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030238 	.word	0x00030238

000d4d60 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <sock_close+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	69db      	ldr	r3, [r3, #28]
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030238 	.word	0x00030238

000d4d70 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <sock_recvfrom+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030238 	.word	0x00030238

000d4d80 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <sock_sendto+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030238 	.word	0x00030238

000d4d90 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <sock_socket+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	00030238 	.word	0x00030238

000d4da0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <HAL_SPI_Init+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	69db      	ldr	r3, [r3, #28]
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	00030230 	.word	0x00030230

000d4db0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <HAL_SPI_Is_Enabled+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	6a1b      	ldr	r3, [r3, #32]
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	00030230 	.word	0x00030230

000d4dc0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <HAL_USART_Init+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	681b      	ldr	r3, [r3, #0]
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	0003023c 	.word	0x0003023c

000d4dd0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <HAL_USART_Write_Data+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	68db      	ldr	r3, [r3, #12]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	0003023c 	.word	0x0003023c

000d4de0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <HAL_USART_Available_Data+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	691b      	ldr	r3, [r3, #16]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	0003023c 	.word	0x0003023c

000d4df0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <HAL_USART_Read_Data+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	695b      	ldr	r3, [r3, #20]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	0003023c 	.word	0x0003023c

000d4e00 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <HAL_USART_Peek_Data+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	699b      	ldr	r3, [r3, #24]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	0003023c 	.word	0x0003023c

000d4e10 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <HAL_USART_Flush_Data+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	69db      	ldr	r3, [r3, #28]
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	0003023c 	.word	0x0003023c

000d4e20 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <HAL_USART_Is_Enabled+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	6a1b      	ldr	r3, [r3, #32]
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	0003023c 	.word	0x0003023c

000d4e30 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <HAL_USART_Available_Data_For_Write+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	0003023c 	.word	0x0003023c

000d4e40 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <HAL_USB_USART_Init+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	681b      	ldr	r3, [r3, #0]
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	0003024c 	.word	0x0003024c

000d4e50 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <HAL_USB_USART_Begin+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	685b      	ldr	r3, [r3, #4]
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	0003024c 	.word	0x0003024c

000d4e60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <HAL_USB_USART_Available_Data+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	691b      	ldr	r3, [r3, #16]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	0003024c 	.word	0x0003024c

000d4e70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	695b      	ldr	r3, [r3, #20]
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	0003024c 	.word	0x0003024c

000d4e80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <HAL_USB_USART_Receive_Data+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	699b      	ldr	r3, [r3, #24]
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	0003024c 	.word	0x0003024c

000d4e90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <HAL_USB_USART_Send_Data+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	69db      	ldr	r3, [r3, #28]
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	0003024c 	.word	0x0003024c

000d4ea0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <HAL_USB_USART_Flush_Data+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	6a1b      	ldr	r3, [r3, #32]
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	0003024c 	.word	0x0003024c

000d4eb0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <log_message+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	00030260 	.word	0x00030260

000d4ec0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <set_system_mode+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	685b      	ldr	r3, [r3, #4]
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030220 	.word	0x00030220

000d4ed0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <system_delay_ms+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	695b      	ldr	r3, [r3, #20]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	00030220 	.word	0x00030220

000d4ee0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <application_thread_current+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030220 	.word	0x00030220

000d4ef0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <application_thread_invoke+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030220 	.word	0x00030220

000d4f00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b03      	ldr	r3, [pc, #12]	; (d4f10 <system_ctrl_set_app_request_handler+0x10>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f0a:	9301      	str	r3, [sp, #4]
   d4f0c:	bd08      	pop	{r3, pc}
   d4f0e:	0000      	.short	0x0000
   d4f10:	00030220 	.word	0x00030220

000d4f14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b03      	ldr	r3, [pc, #12]	; (d4f24 <system_ctrl_set_result+0x10>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f1e:	9301      	str	r3, [sp, #4]
   d4f20:	bd08      	pop	{r3, pc}
   d4f22:	0000      	.short	0x0000
   d4f24:	00030220 	.word	0x00030220

000d4f28 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <spark_variable+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	681b      	ldr	r3, [r3, #0]
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	00030244 	.word	0x00030244

000d4f38 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <spark_function+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	685b      	ldr	r3, [r3, #4]
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	00030244 	.word	0x00030244

000d4f48 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <spark_send_event+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	6a1b      	ldr	r3, [r3, #32]
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030244 	.word	0x00030244

000d4f58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b02      	ldr	r3, [pc, #8]	; (d4f64 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f60:	9301      	str	r3, [sp, #4]
   d4f62:	bd08      	pop	{r3, pc}
   d4f64:	00030244 	.word	0x00030244

000d4f68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f68:	b508      	push	{r3, lr}
   d4f6a:	4b02      	ldr	r3, [pc, #8]	; (d4f74 <network_connect+0xc>)
   d4f6c:	681b      	ldr	r3, [r3, #0]
   d4f6e:	685b      	ldr	r3, [r3, #4]
   d4f70:	9301      	str	r3, [sp, #4]
   d4f72:	bd08      	pop	{r3, pc}
   d4f74:	00030240 	.word	0x00030240

000d4f78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <network_connecting+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	689b      	ldr	r3, [r3, #8]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030240 	.word	0x00030240

000d4f88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <network_disconnect+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	68db      	ldr	r3, [r3, #12]
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030240 	.word	0x00030240

000d4f98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <network_ready+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	691b      	ldr	r3, [r3, #16]
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	00030240 	.word	0x00030240

000d4fa8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <network_on+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	695b      	ldr	r3, [r3, #20]
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	00030240 	.word	0x00030240

000d4fb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b02      	ldr	r3, [pc, #8]	; (d4fc4 <network_off+0xc>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	699b      	ldr	r3, [r3, #24]
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	00030240 	.word	0x00030240

000d4fc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b02      	ldr	r3, [pc, #8]	; (d4fd4 <network_listen+0xc>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	69db      	ldr	r3, [r3, #28]
   d4fd0:	9301      	str	r3, [sp, #4]
   d4fd2:	bd08      	pop	{r3, pc}
   d4fd4:	00030240 	.word	0x00030240

000d4fd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <network_listening+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	6a1b      	ldr	r3, [r3, #32]
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	00030240 	.word	0x00030240

000d4fe8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <network_set_listen_timeout+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030240 	.word	0x00030240

000d4ff8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <network_get_listen_timeout+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030240 	.word	0x00030240

000d5008 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <malloc+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	681b      	ldr	r3, [r3, #0]
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	0003021c 	.word	0x0003021c

000d5018 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <free+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	685b      	ldr	r3, [r3, #4]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	0003021c 	.word	0x0003021c

000d5028 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <realloc+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	689b      	ldr	r3, [r3, #8]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	0003021c 	.word	0x0003021c

000d5038 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <vsnprintf+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	0003021c 	.word	0x0003021c

000d5048 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <abort+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	0003021c 	.word	0x0003021c

000d5058 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <_malloc_r+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	0003021c 	.word	0x0003021c

000d5068 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5068:	2100      	movs	r1, #0
   d506a:	f7ff bf31 	b.w	d4ed0 <system_delay_ms>

000d506e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d506e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5070:	6883      	ldr	r3, [r0, #8]
   d5072:	4604      	mov	r4, r0
   d5074:	b90b      	cbnz	r3, d507a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5076:	f001 fe72 	bl	d6d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d507a:	68c3      	ldr	r3, [r0, #12]
   d507c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d507e:	68a3      	ldr	r3, [r4, #8]
   d5080:	b11b      	cbz	r3, d508a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5082:	2203      	movs	r2, #3
   d5084:	4621      	mov	r1, r4
   d5086:	4620      	mov	r0, r4
   d5088:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d508a:	4620      	mov	r0, r4
}
   d508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5090:	f7ff b805 	b.w	d409e <_ZdlPv>

000d5094 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5094:	4770      	bx	lr

000d5096 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5096:	2000      	movs	r0, #0
   d5098:	4770      	bx	lr

000d509a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d509a:	b510      	push	{r4, lr}
   d509c:	4604      	mov	r4, r0
   d509e:	f7fe fffe 	bl	d409e <_ZdlPv>
   d50a2:	4620      	mov	r0, r4
   d50a4:	bd10      	pop	{r4, pc}

000d50a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d50a6:	b508      	push	{r3, lr}
      { delete this; }
   d50a8:	b108      	cbz	r0, d50ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d50aa:	f7ff fff6 	bl	d509a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d50ae:	bd08      	pop	{r3, pc}

000d50b0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50b0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d50b2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50b4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d50b6:	b113      	cbz	r3, d50be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50b8:	2203      	movs	r2, #3
   d50ba:	4601      	mov	r1, r0
   d50bc:	4798      	blx	r3
    }
   d50be:	4620      	mov	r0, r4
   d50c0:	bd10      	pop	{r4, pc}

000d50c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d50c2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d50c4:	68c4      	ldr	r4, [r0, #12]
   d50c6:	b1d4      	cbz	r4, d50fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d50c8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d50ca:	2b02      	cmp	r3, #2
   d50cc:	d102      	bne.n	d50d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d50ce:	68e0      	ldr	r0, [r4, #12]
   d50d0:	f7ff ffa2 	bl	d5018 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d50d4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d50d6:	b12d      	cbz	r5, d50e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50d8:	4628      	mov	r0, r5
   d50da:	f7ff ffe9 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
   d50de:	4628      	mov	r0, r5
   d50e0:	f7fe ffdd 	bl	d409e <_ZdlPv>
   d50e4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d50e6:	b12d      	cbz	r5, d50f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d50e8:	4628      	mov	r0, r5
   d50ea:	f7ff ffe1 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
   d50ee:	4628      	mov	r0, r5
   d50f0:	f7fe ffd5 	bl	d409e <_ZdlPv>
   d50f4:	4620      	mov	r0, r4
   d50f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d50fa:	f7fe bfd0 	b.w	d409e <_ZdlPv>
   d50fe:	bd38      	pop	{r3, r4, r5, pc}

000d5100 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5100:	b510      	push	{r4, lr}
   d5102:	b088      	sub	sp, #32
   d5104:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5106:	4668      	mov	r0, sp
   d5108:	f000 fec1 	bl	d5e8e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d510c:	4669      	mov	r1, sp
   d510e:	a804      	add	r0, sp, #16
   d5110:	f000 fefc 	bl	d5f0c <_ZN6StringC1ERKS_>
   d5114:	a804      	add	r0, sp, #16
   d5116:	47a0      	blx	r4
   d5118:	4604      	mov	r4, r0
   d511a:	a804      	add	r0, sp, #16
   d511c:	f000 fe70 	bl	d5e00 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5120:	4668      	mov	r0, sp
   d5122:	f000 fe6d 	bl	d5e00 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5126:	4620      	mov	r0, r4
   d5128:	b008      	add	sp, #32
   d512a:	bd10      	pop	{r4, pc}

000d512c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d512c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d512e:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5130:	b085      	sub	sp, #20
   d5132:	4607      	mov	r7, r0
   d5134:	460e      	mov	r6, r1
   d5136:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d5138:	2100      	movs	r1, #0
   d513a:	4622      	mov	r2, r4
   d513c:	4668      	mov	r0, sp
   d513e:	f001 ff8a 	bl	d7056 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5142:	2200      	movs	r2, #0
   d5144:	4669      	mov	r1, sp
   d5146:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d5148:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d514c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d514e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5150:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5152:	f7ff fef1 	bl	d4f38 <spark_function>
}
   d5156:	b005      	add	sp, #20
   d5158:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d515a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d515a:	b513      	push	{r0, r1, r4, lr}
   d515c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d515e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5162:	2300      	movs	r3, #0
   d5164:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5166:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5168:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d516a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d516c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d516e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5170:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5172:	f7ff fbc1 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5176:	4620      	mov	r0, r4
   d5178:	b002      	add	sp, #8
   d517a:	bd10      	pop	{r4, pc}

000d517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d517c:	680b      	ldr	r3, [r1, #0]
   d517e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5180:	b113      	cbz	r3, d5188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5182:	685a      	ldr	r2, [r3, #4]
   d5184:	3201      	adds	r2, #1
   d5186:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5188:	4770      	bx	lr

000d518a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d518a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d518c:	460c      	mov	r4, r1
   d518e:	ad02      	add	r5, sp, #8
   d5190:	f854 3b04 	ldr.w	r3, [r4], #4
   d5194:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5198:	4606      	mov	r6, r0
   d519a:	460f      	mov	r7, r1
   d519c:	a801      	add	r0, sp, #4
   d519e:	4621      	mov	r1, r4
   d51a0:	f7ff ffec 	bl	d517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d51a4:	4629      	mov	r1, r5
   d51a6:	4630      	mov	r0, r6
   d51a8:	f7ff ffd7 	bl	d515a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51ac:	a801      	add	r0, sp, #4
   d51ae:	f7ff fba3 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51b2:	4620      	mov	r0, r4
   d51b4:	f7ff fba0 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d51b8:	4638      	mov	r0, r7
   d51ba:	f7fe ff70 	bl	d409e <_ZdlPv>
        return p;
    }
   d51be:	4630      	mov	r0, r6
   d51c0:	b003      	add	sp, #12
   d51c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d51c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d51c4:	b513      	push	{r0, r1, r4, lr}
   d51c6:	460b      	mov	r3, r1
   d51c8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51ca:	c803      	ldmia	r0, {r0, r1}
   d51cc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d51d0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d51d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d51d8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d51dc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d51e0:	b002      	add	sp, #8
   d51e2:	bd10      	pop	{r4, pc}

000d51e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51e4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d51e6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51e8:	b90a      	cbnz	r2, d51ee <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d51ea:	f001 fdb8 	bl	d6d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51ee:	68c3      	ldr	r3, [r0, #12]
    }
   d51f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51f4:	4718      	bx	r3

000d51f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d51f6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51f8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d51fa:	f100 0110 	add.w	r1, r0, #16
   d51fe:	f7ff fff1 	bl	d51e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5202:	bd08      	pop	{r3, pc}

000d5204 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5204:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5206:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5208:	b90a      	cbnz	r2, d520e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d520a:	f001 fda8 	bl	d6d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d520e:	68c3      	ldr	r3, [r0, #12]
    }
   d5210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5214:	4718      	bx	r3

000d5216 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5216:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5218:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d521a:	f100 0110 	add.w	r1, r0, #16
   d521e:	f7ff fff1 	bl	d5204 <_ZNKSt8functionIFvRKbEEclES1_>
   d5222:	bd08      	pop	{r3, pc}

000d5224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5224:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5226:	2300      	movs	r3, #0
   d5228:	6083      	str	r3, [r0, #8]
   d522a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d522c:	4604      	mov	r4, r0
   d522e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5230:	b12b      	cbz	r3, d523e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5232:	2202      	movs	r2, #2
   d5234:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5236:	68eb      	ldr	r3, [r5, #12]
   d5238:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d523a:	68ab      	ldr	r3, [r5, #8]
   d523c:	60a3      	str	r3, [r4, #8]
	}
    }
   d523e:	4620      	mov	r0, r4
   d5240:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5248:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d524c:	b086      	sub	sp, #24
   d524e:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5250:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5254:	808b      	strh	r3, [r1, #4]
   d5256:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5258:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d525a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d525e:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5260:	f04f 0002 	mov.w	r0, #2
   d5264:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5268:	4299      	cmp	r1, r3
   d526a:	d103      	bne.n	d5274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d526c:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5270:	2d00      	cmp	r5, #0
   d5272:	d1f7      	bne.n	d5264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5274:	d002      	beq.n	d527c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5276:	f88d 1000 	strb.w	r1, [sp]
   d527a:	e06a      	b.n	d5352 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d527c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5280:	bf1e      	ittt	ne
   d5282:	60e7      	strne	r7, [r4, #12]
   d5284:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5286:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5288:	2301      	movs	r3, #1
   d528a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d528e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5290:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5292:	f104 0308 	add.w	r3, r4, #8
   d5296:	f3bf 8f5f 	dmb	sy
   d529a:	e853 6f00 	ldrex	r6, [r3]
   d529e:	e843 0200 	strex	r2, r0, [r3]
   d52a2:	2a00      	cmp	r2, #0
   d52a4:	d1f9      	bne.n	d529a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d52a6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d52aa:	2e00      	cmp	r6, #0
   d52ac:	d051      	beq.n	d5352 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52ae:	f7ff fe17 	bl	d4ee0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52b2:	b120      	cbz	r0, d52be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52b4:	4629      	mov	r1, r5
   d52b6:	4630      	mov	r0, r6
   d52b8:	f7ff ff94 	bl	d51e4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d52bc:	e043      	b.n	d5346 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d52be:	4631      	mov	r1, r6
   d52c0:	4668      	mov	r0, sp
   d52c2:	f7ff ffaf 	bl	d5224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52c6:	68e0      	ldr	r0, [r4, #12]
   d52c8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52cc:	b108      	cbz	r0, d52d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d52ce:	f001 fedd 	bl	d708c <strdup>
   d52d2:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d52d4:	2010      	movs	r0, #16
   d52d6:	f8ad 5014 	strh.w	r5, [sp, #20]
   d52da:	f7fe fedc 	bl	d4096 <_Znwj>
   d52de:	4605      	mov	r5, r0
   d52e0:	b330      	cbz	r0, d5330 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52e2:	f04f 0800 	mov.w	r8, #0
   d52e6:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52ea:	2018      	movs	r0, #24
   d52ec:	f7fe fed3 	bl	d4096 <_Znwj>
   d52f0:	4604      	mov	r4, r0
   d52f2:	b1c0      	cbz	r0, d5326 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52f4:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52f8:	4601      	mov	r1, r0
   d52fa:	4668      	mov	r0, sp
   d52fc:	f7ff ff62 	bl	d51c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5300:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5302:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5304:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5306:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5308:	9202      	str	r2, [sp, #8]
   d530a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d530c:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d530e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5312:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5314:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5318:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d531c:	9b04      	ldr	r3, [sp, #16]
   d531e:	9203      	str	r2, [sp, #12]
   d5320:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5322:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5326:	4b0e      	ldr	r3, [pc, #56]	; (d5360 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5328:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d532a:	4b0e      	ldr	r3, [pc, #56]	; (d5364 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d532c:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d532e:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5330:	9804      	ldr	r0, [sp, #16]
   d5332:	f7ff fe71 	bl	d5018 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5336:	4668      	mov	r0, sp
   d5338:	f7ff feba 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d533c:	2200      	movs	r2, #0
   d533e:	4629      	mov	r1, r5
   d5340:	4809      	ldr	r0, [pc, #36]	; (d5368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5342:	f7ff fdd5 	bl	d4ef0 <application_thread_invoke>
   d5346:	4630      	mov	r0, r6
   d5348:	f7ff feb2 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d534c:	4630      	mov	r0, r6
   d534e:	f7fe fea6 	bl	d409e <_ZdlPv>
   d5352:	4638      	mov	r0, r7
   d5354:	f7ff fe60 	bl	d5018 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5358:	b006      	add	sp, #24
   d535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d535e:	bf00      	nop
   d5360:	000d51f7 	.word	0x000d51f7
   d5364:	000d5455 	.word	0x000d5455
   d5368:	000d506f 	.word	0x000d506f

000d536c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5370:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5372:	ad07      	add	r5, sp, #28
   d5374:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5378:	4606      	mov	r6, r0
   d537a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d537c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d537e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5380:	460f      	mov	r7, r1
   d5382:	4690      	mov	r8, r2
   d5384:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5388:	f8c5 b004 	str.w	fp, [r5, #4]
   d538c:	f8c5 b008 	str.w	fp, [r5, #8]
   d5390:	9307      	str	r3, [sp, #28]
   d5392:	f7fe fe80 	bl	d4096 <_Znwj>
   d5396:	4604      	mov	r4, r0
   d5398:	b138      	cbz	r0, d53aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d539a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d539e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d53a2:	f8c0 b004 	str.w	fp, [r0, #4]
   d53a6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d53aa:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d53ac:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d53ae:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d53b0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d53b2:	f7fe fe70 	bl	d4096 <_Znwj>
   d53b6:	b128      	cbz	r0, d53c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d53b8:	2301      	movs	r3, #1
   d53ba:	6043      	str	r3, [r0, #4]
   d53bc:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d53be:	4b23      	ldr	r3, [pc, #140]	; (d544c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d53c0:	6003      	str	r3, [r0, #0]
   d53c2:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d53c4:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d53c6:	4b22      	ldr	r3, [pc, #136]	; (d5450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d53c8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d53ca:	2008      	movs	r0, #8
   d53cc:	f7fe fe63 	bl	d4096 <_Znwj>
   d53d0:	4604      	mov	r4, r0
   d53d2:	b128      	cbz	r0, d53e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53d4:	9b03      	ldr	r3, [sp, #12]
   d53d6:	f840 3b04 	str.w	r3, [r0], #4
   d53da:	a904      	add	r1, sp, #16
   d53dc:	f7ff fece 	bl	d517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53e0:	9500      	str	r5, [sp, #0]
   d53e2:	fa5f f38a 	uxtb.w	r3, sl
   d53e6:	464a      	mov	r2, r9
   d53e8:	4641      	mov	r1, r8
   d53ea:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d53ec:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53ee:	f7ff fdab 	bl	d4f48 <spark_send_event>
   d53f2:	b9b8      	cbnz	r0, d5424 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d53f4:	9b03      	ldr	r3, [sp, #12]
   d53f6:	785b      	ldrb	r3, [r3, #1]
   d53f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d53fc:	b993      	cbnz	r3, d5424 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d53fe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5402:	a905      	add	r1, sp, #20
   d5404:	a803      	add	r0, sp, #12
   d5406:	9205      	str	r2, [sp, #20]
   d5408:	f8ad 3018 	strh.w	r3, [sp, #24]
   d540c:	f7ff ff1a 	bl	d5244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5410:	9805      	ldr	r0, [sp, #20]
   d5412:	f7ff fe01 	bl	d5018 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5416:	a805      	add	r0, sp, #20
   d5418:	9909      	ldr	r1, [sp, #36]	; 0x24
   d541a:	f7ff feb6 	bl	d518a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d541e:	a806      	add	r0, sp, #24
   d5420:	f7ff fa6a 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5424:	9b03      	ldr	r3, [sp, #12]
   d5426:	9305      	str	r3, [sp, #20]
   d5428:	a904      	add	r1, sp, #16
   d542a:	a806      	add	r0, sp, #24
   d542c:	f7ff fea6 	bl	d517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5430:	a905      	add	r1, sp, #20
   d5432:	4630      	mov	r0, r6
   d5434:	f7ff fe91 	bl	d515a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5438:	a806      	add	r0, sp, #24
   d543a:	f7ff fa5d 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d543e:	a804      	add	r0, sp, #16
   d5440:	f7ff fa5a 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5444:	4630      	mov	r0, r6
   d5446:	b00b      	add	sp, #44	; 0x2c
   d5448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d544c:	000d7304 	.word	0x000d7304
   d5450:	000d55bd 	.word	0x000d55bd

000d5454 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5454:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5458:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d545a:	d006      	beq.n	d546a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d545c:	2a03      	cmp	r2, #3
   d545e:	d017      	beq.n	d5490 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5460:	2a01      	cmp	r2, #1
   d5462:	d120      	bne.n	d54a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5464:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5466:	6003      	str	r3, [r0, #0]
	      break;
   d5468:	e01d      	b.n	d54a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d546a:	2018      	movs	r0, #24
   d546c:	680e      	ldr	r6, [r1, #0]
   d546e:	f7fe fe12 	bl	d4096 <_Znwj>
   d5472:	4605      	mov	r5, r0
   d5474:	b150      	cbz	r0, d548c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5476:	4631      	mov	r1, r6
   d5478:	f7ff fed4 	bl	d5224 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d547c:	6930      	ldr	r0, [r6, #16]
   d547e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5482:	b108      	cbz	r0, d5488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5484:	f001 fe02 	bl	d708c <strdup>
   d5488:	6128      	str	r0, [r5, #16]
   d548a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d548c:	6025      	str	r5, [r4, #0]
   d548e:	e00a      	b.n	d54a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5490:	6804      	ldr	r4, [r0, #0]
   d5492:	b144      	cbz	r4, d54a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5494:	6920      	ldr	r0, [r4, #16]
   d5496:	f7ff fdbf 	bl	d5018 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d549a:	4620      	mov	r0, r4
   d549c:	f7ff fe08 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54a0:	4620      	mov	r0, r4
   d54a2:	f7fe fdfc 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d54a6:	2000      	movs	r0, #0
   d54a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54aa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54aa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54ac:	2300      	movs	r3, #0
   d54ae:	6083      	str	r3, [r0, #8]
   d54b0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54b2:	4604      	mov	r4, r0
   d54b4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54b6:	b12b      	cbz	r3, d54c4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54b8:	2202      	movs	r2, #2
   d54ba:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54bc:	68eb      	ldr	r3, [r5, #12]
   d54be:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54c0:	68ab      	ldr	r3, [r5, #8]
   d54c2:	60a3      	str	r3, [r4, #8]
	}
    }
   d54c4:	4620      	mov	r0, r4
   d54c6:	bd38      	pop	{r3, r4, r5, pc}

000d54c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d54c8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d54ca:	b570      	push	{r4, r5, r6, lr}
   d54cc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d54ce:	d006      	beq.n	d54de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d54d0:	2a03      	cmp	r2, #3
   d54d2:	d011      	beq.n	d54f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d54d4:	2a01      	cmp	r2, #1
   d54d6:	d117      	bne.n	d5508 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54d8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d54da:	6003      	str	r3, [r0, #0]
	      break;
   d54dc:	e014      	b.n	d5508 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54de:	2014      	movs	r0, #20
   d54e0:	680e      	ldr	r6, [r1, #0]
   d54e2:	f7fe fdd8 	bl	d4096 <_Znwj>
   d54e6:	4605      	mov	r5, r0
   d54e8:	b120      	cbz	r0, d54f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d54ea:	4631      	mov	r1, r6
   d54ec:	f7ff ffdd 	bl	d54aa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d54f0:	7c33      	ldrb	r3, [r6, #16]
   d54f2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54f4:	6025      	str	r5, [r4, #0]
   d54f6:	e007      	b.n	d5508 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54f8:	6804      	ldr	r4, [r0, #0]
   d54fa:	b12c      	cbz	r4, d5508 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54fc:	4620      	mov	r0, r4
   d54fe:	f7ff fdd7 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5502:	4620      	mov	r0, r4
   d5504:	f7fe fdcb 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5508:	2000      	movs	r0, #0
   d550a:	bd70      	pop	{r4, r5, r6, pc}

000d550c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d550c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d550e:	2300      	movs	r3, #0
   d5510:	b087      	sub	sp, #28
   d5512:	460c      	mov	r4, r1
   d5514:	f3bf 8f5f 	dmb	sy
   d5518:	e850 6f00 	ldrex	r6, [r0]
   d551c:	e840 3200 	strex	r2, r3, [r0]
   d5520:	2a00      	cmp	r2, #0
   d5522:	d1f9      	bne.n	d5518 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5524:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5528:	2e00      	cmp	r6, #0
   d552a:	d03e      	beq.n	d55aa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d552c:	4618      	mov	r0, r3
   d552e:	f7ff fcd7 	bl	d4ee0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5532:	4607      	mov	r7, r0
   d5534:	b120      	cbz	r0, d5540 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5536:	4621      	mov	r1, r4
   d5538:	4630      	mov	r0, r6
   d553a:	f7ff fe63 	bl	d5204 <_ZNKSt8functionIFvRKbEEclES1_>
   d553e:	e02e      	b.n	d559e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5540:	4631      	mov	r1, r6
   d5542:	a801      	add	r0, sp, #4
   d5544:	f7ff ffb1 	bl	d54aa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5548:	7823      	ldrb	r3, [r4, #0]
   d554a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d554e:	2010      	movs	r0, #16
   d5550:	f7fe fda1 	bl	d4096 <_Znwj>
   d5554:	4605      	mov	r5, r0
   d5556:	b1d0      	cbz	r0, d558e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5558:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d555a:	2014      	movs	r0, #20
   d555c:	f7fe fd9b 	bl	d4096 <_Znwj>
   d5560:	4604      	mov	r4, r0
   d5562:	b178      	cbz	r0, d5584 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5564:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5566:	4601      	mov	r1, r0
   d5568:	a801      	add	r0, sp, #4
   d556a:	f7ff fe2b 	bl	d51c4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d556e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5570:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5572:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5574:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5576:	9203      	str	r2, [sp, #12]
   d5578:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d557a:	60e3      	str	r3, [r4, #12]
   d557c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5580:	9204      	str	r2, [sp, #16]
   d5582:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5584:	4b0a      	ldr	r3, [pc, #40]	; (d55b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5586:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5588:	4b0a      	ldr	r3, [pc, #40]	; (d55b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d558a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d558c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d558e:	a801      	add	r0, sp, #4
   d5590:	f7ff fd8e 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5594:	2200      	movs	r2, #0
   d5596:	4629      	mov	r1, r5
   d5598:	4807      	ldr	r0, [pc, #28]	; (d55b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d559a:	f7ff fca9 	bl	d4ef0 <application_thread_invoke>
   d559e:	4630      	mov	r0, r6
   d55a0:	f7ff fd86 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55a4:	4630      	mov	r0, r6
   d55a6:	f7fe fd7a 	bl	d409e <_ZdlPv>
        }
    }
   d55aa:	b007      	add	sp, #28
   d55ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55ae:	bf00      	nop
   d55b0:	000d5217 	.word	0x000d5217
   d55b4:	000d54c9 	.word	0x000d54c9
   d55b8:	000d506f 	.word	0x000d506f

000d55bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d55bc:	b530      	push	{r4, r5, lr}
   d55be:	b085      	sub	sp, #20
   d55c0:	4604      	mov	r4, r0
   d55c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d55c4:	4668      	mov	r0, sp
   d55c6:	4611      	mov	r1, r2
   d55c8:	f7ff fddf 	bl	d518a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d55cc:	b17c      	cbz	r4, d55ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d55ce:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d55d0:	4628      	mov	r0, r5
   d55d2:	b10d      	cbz	r5, d55d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d55d4:	f001 fd5a 	bl	d708c <strdup>
   d55d8:	9002      	str	r0, [sp, #8]
   d55da:	a902      	add	r1, sp, #8
   d55dc:	4668      	mov	r0, sp
   d55de:	f8ad 400c 	strh.w	r4, [sp, #12]
   d55e2:	f7ff fe2f 	bl	d5244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d55e6:	9802      	ldr	r0, [sp, #8]
   d55e8:	f7ff fd16 	bl	d5018 <free>
   d55ec:	e01d      	b.n	d562a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d55ee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d55f0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d55f4:	f04f 0201 	mov.w	r2, #1
   d55f8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d55fc:	42a3      	cmp	r3, r4
   d55fe:	d103      	bne.n	d5608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5600:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5604:	2900      	cmp	r1, #0
   d5606:	d1f7      	bne.n	d55f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5608:	d002      	beq.n	d5610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d560a:	f88d 3008 	strb.w	r3, [sp, #8]
   d560e:	e00c      	b.n	d562a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5610:	f110 010c 	adds.w	r1, r0, #12
   d5614:	f04f 0301 	mov.w	r3, #1
   d5618:	bf18      	it	ne
   d561a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d561c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5620:	3004      	adds	r0, #4
   d5622:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5626:	f7ff ff71 	bl	d550c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d562a:	a801      	add	r0, sp, #4
   d562c:	f7ff f964 	bl	d48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5630:	b005      	add	sp, #20
   d5632:	bd30      	pop	{r4, r5, pc}

000d5634 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5634:	2200      	movs	r2, #0
   d5636:	4611      	mov	r1, r2
   d5638:	6840      	ldr	r0, [r0, #4]
   d563a:	f7ff bccd 	b.w	d4fd8 <network_listening>

000d563e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d563e:	2200      	movs	r2, #0
   d5640:	4611      	mov	r1, r2
   d5642:	6840      	ldr	r0, [r0, #4]
   d5644:	f7ff bcd8 	b.w	d4ff8 <network_get_listen_timeout>

000d5648 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5648:	2200      	movs	r2, #0
   d564a:	6840      	ldr	r0, [r0, #4]
   d564c:	f7ff bccc 	b.w	d4fe8 <network_set_listen_timeout>

000d5650 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5650:	2200      	movs	r2, #0
   d5652:	f081 0101 	eor.w	r1, r1, #1
   d5656:	6840      	ldr	r0, [r0, #4]
   d5658:	f7ff bcb6 	b.w	d4fc8 <network_listen>

000d565c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d565c:	2300      	movs	r3, #0
   d565e:	461a      	mov	r2, r3
   d5660:	4619      	mov	r1, r3
   d5662:	6840      	ldr	r0, [r0, #4]
   d5664:	f7ff bca8 	b.w	d4fb8 <network_off>

000d5668 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5668:	2300      	movs	r3, #0
   d566a:	461a      	mov	r2, r3
   d566c:	4619      	mov	r1, r3
   d566e:	6840      	ldr	r0, [r0, #4]
   d5670:	f7ff bc9a 	b.w	d4fa8 <network_on>

000d5674 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5674:	2200      	movs	r2, #0
   d5676:	4611      	mov	r1, r2
   d5678:	6840      	ldr	r0, [r0, #4]
   d567a:	f7ff bc8d 	b.w	d4f98 <network_ready>

000d567e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d567e:	2200      	movs	r2, #0
   d5680:	4611      	mov	r1, r2
   d5682:	6840      	ldr	r0, [r0, #4]
   d5684:	f7ff bc78 	b.w	d4f78 <network_connecting>

000d5688 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5688:	2200      	movs	r2, #0
   d568a:	2102      	movs	r1, #2
   d568c:	6840      	ldr	r0, [r0, #4]
   d568e:	f7ff bc7b 	b.w	d4f88 <network_disconnect>

000d5692 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5692:	2300      	movs	r3, #0
   d5694:	461a      	mov	r2, r3
   d5696:	6840      	ldr	r0, [r0, #4]
   d5698:	f7ff bc66 	b.w	d4f68 <network_connect>

000d569c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d569c:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d569e:	2203      	movs	r2, #3
   d56a0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d56a2:	4a02      	ldr	r2, [pc, #8]	; (d56ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d56a4:	601a      	str	r2, [r3, #0]
   d56a6:	4770      	bx	lr
   d56a8:	2003e3d8 	.word	0x2003e3d8
   d56ac:	000d7320 	.word	0x000d7320

000d56b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d56b0:	4770      	bx	lr

000d56b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d56b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56b4:	4606      	mov	r6, r0
   d56b6:	4615      	mov	r5, r2
   d56b8:	460c      	mov	r4, r1
   d56ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56bc:	42bc      	cmp	r4, r7
   d56be:	d006      	beq.n	d56ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d56c0:	6833      	ldr	r3, [r6, #0]
   d56c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56c6:	689b      	ldr	r3, [r3, #8]
   d56c8:	4630      	mov	r0, r6
   d56ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56cc:	e7f6      	b.n	d56bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d56ce:	4628      	mov	r0, r5
   d56d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d56d2:	2200      	movs	r2, #0
   d56d4:	7c00      	ldrb	r0, [r0, #16]
   d56d6:	f7ff ba9b 	b.w	d4c10 <HAL_I2C_Write_Data>

000d56da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d56da:	2100      	movs	r1, #0
   d56dc:	7c00      	ldrb	r0, [r0, #16]
   d56de:	f7ff ba9f 	b.w	d4c20 <HAL_I2C_Available_Data>

000d56e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d56e2:	2100      	movs	r1, #0
   d56e4:	7c00      	ldrb	r0, [r0, #16]
   d56e6:	f7ff baa3 	b.w	d4c30 <HAL_I2C_Read_Data>

000d56ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d56ea:	2100      	movs	r1, #0
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7ff baa7 	b.w	d4c40 <HAL_I2C_Peek_Data>

000d56f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d56f2:	2100      	movs	r1, #0
   d56f4:	7c00      	ldrb	r0, [r0, #16]
   d56f6:	f7ff baab 	b.w	d4c50 <HAL_I2C_Flush_Data>

000d56fa <_ZN7TwoWireD0Ev>:
   d56fa:	b510      	push	{r4, lr}
   d56fc:	4604      	mov	r4, r0
   d56fe:	f7fe fcce 	bl	d409e <_ZdlPv>
   d5702:	4620      	mov	r0, r4
   d5704:	bd10      	pop	{r4, pc}
	...

000d5708 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5708:	b510      	push	{r4, lr}
   d570a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d570c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5710:	4608      	mov	r0, r1
   d5712:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5714:	2100      	movs	r1, #0
   d5716:	4b04      	ldr	r3, [pc, #16]	; (d5728 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5718:	7420      	strb	r0, [r4, #16]
   d571a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d571c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d571e:	f7ff faa7 	bl	d4c70 <HAL_I2C_Init>

}
   d5722:	4620      	mov	r0, r4
   d5724:	bd10      	pop	{r4, pc}
   d5726:	bf00      	nop
   d5728:	000d7354 	.word	0x000d7354

000d572c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d572c:	2100      	movs	r1, #0
   d572e:	7c00      	ldrb	r0, [r0, #16]
   d5730:	f7ff ba96 	b.w	d4c60 <HAL_I2C_Is_Enabled>

000d5734 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5734:	4770      	bx	lr

000d5736 <_ZN9IPAddressD0Ev>:
   d5736:	b510      	push	{r4, lr}
   d5738:	4604      	mov	r4, r0
   d573a:	f7fe fcb0 	bl	d409e <_ZdlPv>
   d573e:	4620      	mov	r0, r4
   d5740:	bd10      	pop	{r4, pc}

000d5742 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5742:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5744:	7d03      	ldrb	r3, [r0, #20]
   d5746:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5748:	b08d      	sub	sp, #52	; 0x34
   d574a:	460e      	mov	r6, r1
   d574c:	f100 0704 	add.w	r7, r0, #4
   d5750:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5754:	d002      	beq.n	d575c <_ZNK9IPAddress7printToER5Print+0x1a>
   d5756:	f100 0508 	add.w	r5, r0, #8
   d575a:	e018      	b.n	d578e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d575c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d575e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5760:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5764:	232f      	movs	r3, #47	; 0x2f
   d5766:	462a      	mov	r2, r5
   d5768:	200a      	movs	r0, #10
   d576a:	f7ff fab1 	bl	d4cd0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d576e:	4628      	mov	r0, r5
   d5770:	f001 fca7 	bl	d70c2 <strlen>
   d5774:	6833      	ldr	r3, [r6, #0]
   d5776:	4602      	mov	r2, r0
   d5778:	68db      	ldr	r3, [r3, #12]
   d577a:	4629      	mov	r1, r5
   d577c:	4630      	mov	r0, r6
   d577e:	4798      	blx	r3
   d5780:	e00f      	b.n	d57a2 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5782:	b124      	cbz	r4, d578e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5784:	212e      	movs	r1, #46	; 0x2e
   d5786:	4630      	mov	r0, r6
   d5788:	f000 fa88 	bl	d5c9c <_ZN5Print5printEc>
   d578c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d578e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5792:	220a      	movs	r2, #10
   d5794:	4630      	mov	r0, r6
   d5796:	f000 fabd 	bl	d5d14 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d579a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d579c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d579e:	d1f0      	bne.n	d5782 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d57a0:	4620      	mov	r0, r4
    }
    return n;
}
   d57a2:	b00d      	add	sp, #52	; 0x34
   d57a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d57a8 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d57a8:	b510      	push	{r4, lr}
   d57aa:	4b05      	ldr	r3, [pc, #20]	; (d57c0 <_ZN9IPAddressC1Ev+0x18>)
   d57ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d57ae:	2211      	movs	r2, #17
   d57b0:	f840 3b04 	str.w	r3, [r0], #4
   d57b4:	2100      	movs	r1, #0
   d57b6:	f001 fc4e 	bl	d7056 <memset>
{
    clear();
}
   d57ba:	4620      	mov	r0, r4
   d57bc:	bd10      	pop	{r4, pc}
   d57be:	bf00      	nop
   d57c0:	000d737c 	.word	0x000d737c

000d57c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d57c4:	4603      	mov	r3, r0
   d57c6:	4a07      	ldr	r2, [pc, #28]	; (d57e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d57c8:	b510      	push	{r4, lr}
   d57ca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d57ce:	f101 0210 	add.w	r2, r1, #16
   d57d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d57d6:	f843 4b04 	str.w	r4, [r3], #4
   d57da:	4291      	cmp	r1, r2
   d57dc:	d1f9      	bne.n	d57d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d57de:	780a      	ldrb	r2, [r1, #0]
   d57e0:	701a      	strb	r2, [r3, #0]
}
   d57e2:	bd10      	pop	{r4, pc}
   d57e4:	000d737c 	.word	0x000d737c

000d57e8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d57e8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d57ea:	2b04      	cmp	r3, #4
   d57ec:	d101      	bne.n	d57f2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d57ee:	6840      	ldr	r0, [r0, #4]
   d57f0:	e008      	b.n	d5804 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d57f2:	2b06      	cmp	r3, #6
   d57f4:	d10a      	bne.n	d580c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d57f6:	6843      	ldr	r3, [r0, #4]
   d57f8:	b153      	cbz	r3, d5810 <_ZNK9IPAddresscvbEv+0x28>
   d57fa:	6883      	ldr	r3, [r0, #8]
   d57fc:	b143      	cbz	r3, d5810 <_ZNK9IPAddresscvbEv+0x28>
   d57fe:	68c3      	ldr	r3, [r0, #12]
   d5800:	b133      	cbz	r3, d5810 <_ZNK9IPAddresscvbEv+0x28>
   d5802:	6900      	ldr	r0, [r0, #16]
   d5804:	3000      	adds	r0, #0
   d5806:	bf18      	it	ne
   d5808:	2001      	movne	r0, #1
   d580a:	4770      	bx	lr
   d580c:	2000      	movs	r0, #0
   d580e:	4770      	bx	lr
   d5810:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5812:	4770      	bx	lr

000d5814 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5814:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5816:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d581a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d581e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5822:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5826:	2304      	movs	r3, #4
   d5828:	6041      	str	r1, [r0, #4]
   d582a:	7503      	strb	r3, [r0, #20]
   d582c:	bd10      	pop	{r4, pc}

000d582e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d582e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5830:	780d      	ldrb	r5, [r1, #0]
   d5832:	788b      	ldrb	r3, [r1, #2]
   d5834:	784a      	ldrb	r2, [r1, #1]
   d5836:	78c9      	ldrb	r1, [r1, #3]
   d5838:	9100      	str	r1, [sp, #0]
   d583a:	4629      	mov	r1, r5
   d583c:	f7ff ffea 	bl	d5814 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5840:	b003      	add	sp, #12
   d5842:	bd30      	pop	{r4, r5, pc}

000d5844 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5844:	4b01      	ldr	r3, [pc, #4]	; (d584c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5846:	4a02      	ldr	r2, [pc, #8]	; (d5850 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5848:	601a      	str	r2, [r3, #0]
   d584a:	4770      	bx	lr
   d584c:	2003e3e0 	.word	0x2003e3e0
   d5850:	000d7438 	.word	0x000d7438

000d5854 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5854:	2200      	movs	r2, #0
   d5856:	4611      	mov	r1, r2
   d5858:	6840      	ldr	r0, [r0, #4]
   d585a:	f7ff bbbd 	b.w	d4fd8 <network_listening>

000d585e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d585e:	2200      	movs	r2, #0
   d5860:	4611      	mov	r1, r2
   d5862:	6840      	ldr	r0, [r0, #4]
   d5864:	f7ff bbc8 	b.w	d4ff8 <network_get_listen_timeout>

000d5868 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5868:	2200      	movs	r2, #0
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	f7ff bbbc 	b.w	d4fe8 <network_set_listen_timeout>

000d5870 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5870:	2200      	movs	r2, #0
   d5872:	f081 0101 	eor.w	r1, r1, #1
   d5876:	6840      	ldr	r0, [r0, #4]
   d5878:	f7ff bba6 	b.w	d4fc8 <network_listen>

000d587c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d587c:	2300      	movs	r3, #0
   d587e:	461a      	mov	r2, r3
   d5880:	4619      	mov	r1, r3
   d5882:	6840      	ldr	r0, [r0, #4]
   d5884:	f7ff bb98 	b.w	d4fb8 <network_off>

000d5888 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5888:	2300      	movs	r3, #0
   d588a:	461a      	mov	r2, r3
   d588c:	4619      	mov	r1, r3
   d588e:	6840      	ldr	r0, [r0, #4]
   d5890:	f7ff bb8a 	b.w	d4fa8 <network_on>

000d5894 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5894:	2200      	movs	r2, #0
   d5896:	4611      	mov	r1, r2
   d5898:	6840      	ldr	r0, [r0, #4]
   d589a:	f7ff bb7d 	b.w	d4f98 <network_ready>

000d589e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d589e:	2200      	movs	r2, #0
   d58a0:	4611      	mov	r1, r2
   d58a2:	6840      	ldr	r0, [r0, #4]
   d58a4:	f7ff bb68 	b.w	d4f78 <network_connecting>

000d58a8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58a8:	2200      	movs	r2, #0
   d58aa:	2102      	movs	r1, #2
   d58ac:	6840      	ldr	r0, [r0, #4]
   d58ae:	f7ff bb6b 	b.w	d4f88 <network_disconnect>

000d58b2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58b2:	2300      	movs	r3, #0
   d58b4:	461a      	mov	r2, r3
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	f7ff bb56 	b.w	d4f68 <network_connect>

000d58bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58bc:	b110      	cbz	r0, d58c4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d58be:	6803      	ldr	r3, [r0, #0]
   d58c0:	685b      	ldr	r3, [r3, #4]
   d58c2:	4718      	bx	r3
   d58c4:	4770      	bx	lr

000d58c6 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d58c6:	b538      	push	{r3, r4, r5, lr}
   d58c8:	4604      	mov	r4, r0
   d58ca:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d58cc:	b1d0      	cbz	r0, d5904 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d58ce:	f7ff f927 	bl	d4b20 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d58d2:	b9b8      	cbnz	r0, d5904 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d58d4:	7c23      	ldrb	r3, [r4, #16]
   d58d6:	b91b      	cbnz	r3, d58e0 <_ZN6Thread7disposeEv+0x1a>
   d58d8:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d58da:	b108      	cbz	r0, d58e0 <_ZN6Thread7disposeEv+0x1a>
   d58dc:	f7ff f928 	bl	d4b30 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d58e0:	6865      	ldr	r5, [r4, #4]
   d58e2:	b155      	cbz	r5, d58fa <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d58e4:	68ab      	ldr	r3, [r5, #8]
   d58e6:	b11b      	cbz	r3, d58f0 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58e8:	2203      	movs	r2, #3
   d58ea:	4629      	mov	r1, r5
   d58ec:	4628      	mov	r0, r5
   d58ee:	4798      	blx	r3
            delete wrapper;
   d58f0:	4628      	mov	r0, r5
   d58f2:	f7fe fbd4 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d58f6:	2300      	movs	r3, #0
   d58f8:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d58fa:	6820      	ldr	r0, [r4, #0]
   d58fc:	f7ff f920 	bl	d4b40 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5900:	2300      	movs	r3, #0
   d5902:	6023      	str	r3, [r4, #0]
   d5904:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5908 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5908:	b538      	push	{r3, r4, r5, lr}
   d590a:	4b0b      	ldr	r3, [pc, #44]	; (d5938 <_ZN5spark9MeshClassD1Ev+0x30>)
   d590c:	6003      	str	r3, [r0, #0]
   d590e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5910:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5914:	b108      	cbz	r0, d591a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5916:	f7fe fbc4 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d591a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d591e:	b12d      	cbz	r5, d592c <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d5920:	4628      	mov	r0, r5
   d5922:	f7ff ffd0 	bl	d58c6 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5926:	4628      	mov	r0, r5
   d5928:	f7fe fbb9 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d592c:	68a0      	ldr	r0, [r4, #8]
   d592e:	b108      	cbz	r0, d5934 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5930:	f7ff ffc4 	bl	d58bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5934:	4620      	mov	r0, r4
   d5936:	bd38      	pop	{r3, r4, r5, pc}
   d5938:	000d746c 	.word	0x000d746c

000d593c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d593c:	6800      	ldr	r0, [r0, #0]
   d593e:	f7ff b917 	b.w	d4b70 <os_mutex_recursive_lock>
	...

000d5944 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5944:	b530      	push	{r4, r5, lr}
   d5946:	b08d      	sub	sp, #52	; 0x34
   d5948:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d594a:	2211      	movs	r2, #17
   d594c:	2100      	movs	r1, #0
   d594e:	a801      	add	r0, sp, #4
   d5950:	f001 fb81 	bl	d7056 <memset>
    addr.v = 6;
   d5954:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5956:	aa01      	add	r2, sp, #4
   d5958:	4909      	ldr	r1, [pc, #36]	; (d5980 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d595a:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d595e:	200a      	movs	r0, #10
   d5960:	f7ff f9be 	bl	d4ce0 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5964:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5966:	a901      	add	r1, sp, #4
   d5968:	a806      	add	r0, sp, #24
   d596a:	f7ff ff2b 	bl	d57c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d596e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5970:	3404      	adds	r4, #4
   d5972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5974:	682b      	ldr	r3, [r5, #0]
   d5976:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5978:	2000      	movs	r0, #0
   d597a:	b00d      	add	sp, #52	; 0x34
   d597c:	bd30      	pop	{r4, r5, pc}
   d597e:	bf00      	nop
   d5980:	000d7498 	.word	0x000d7498

000d5984 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5984:	b530      	push	{r4, r5, lr}
   d5986:	4604      	mov	r4, r0
   d5988:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d598a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d598e:	f7ff ffd5 	bl	d593c <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d5992:	6823      	ldr	r3, [r4, #0]
   d5994:	bb83      	cbnz	r3, d59f8 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5996:	204c      	movs	r0, #76	; 0x4c
   d5998:	f7fe fb7d 	bl	d4096 <_Znwj>
   d599c:	4605      	mov	r5, r0
   d599e:	b108      	cbz	r0, d59a4 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d59a0:	f000 fe9a 	bl	d66d8 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59a4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d59a6:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d59a8:	b108      	cbz	r0, d59ae <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d59aa:	f7ff ff87 	bl	d58bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d59ae:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d59b0:	b320      	cbz	r0, d59fc <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d59b2:	2200      	movs	r2, #0
   d59b4:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d59b8:	f000 febd 	bl	d6736 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d59bc:	a908      	add	r1, sp, #32
   d59be:	2500      	movs	r5, #0
   d59c0:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d59c4:	4811      	ldr	r0, [pc, #68]	; (d5a0c <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d59c6:	f7ff f95b 	bl	d4c80 <if_name_to_index>
   d59ca:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d59cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d59d0:	6803      	ldr	r3, [r0, #0]
   d59d2:	f249 0169 	movw	r1, #36969	; 0x9069
   d59d6:	6a1b      	ldr	r3, [r3, #32]
   d59d8:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d59da:	a802      	add	r0, sp, #8
   d59dc:	f7ff fee4 	bl	d57a8 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d59e0:	a802      	add	r0, sp, #8
   d59e2:	f7ff ffaf 	bl	d5944 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d59e6:	2800      	cmp	r0, #0
   d59e8:	db04      	blt.n	d59f4 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d59ea:	a902      	add	r1, sp, #8
   d59ec:	6820      	ldr	r0, [r4, #0]
   d59ee:	f000 ff28 	bl	d6842 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d59f2:	e004      	b.n	d59fe <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d59f4:	4605      	mov	r5, r0
   d59f6:	e002      	b.n	d59fe <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d59f8:	2500      	movs	r5, #0
   d59fa:	e000      	b.n	d59fe <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d59fc:	4d04      	ldr	r5, [pc, #16]	; (d5a10 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d59fe:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5a02:	f7ff f8bd 	bl	d4b80 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d5a06:	4628      	mov	r0, r5
   d5a08:	b009      	add	sp, #36	; 0x24
   d5a0a:	bd30      	pop	{r4, r5, pc}
   d5a0c:	000d74a5 	.word	0x000d74a5
   d5a10:	fffffefc 	.word	0xfffffefc

000d5a14 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d5a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a18:	4605      	mov	r5, r0
   d5a1a:	b08c      	sub	sp, #48	; 0x30
   d5a1c:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d5a1e:	460f      	mov	r7, r1
   d5a20:	b109      	cbz	r1, d5a26 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d5a22:	780b      	ldrb	r3, [r1, #0]
   d5a24:	b90b      	cbnz	r3, d5a2a <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d5a26:	4c35      	ldr	r4, [pc, #212]	; (d5afc <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d5a28:	e064      	b.n	d5af4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d5a2a:	4608      	mov	r0, r1
   d5a2c:	f001 fb49 	bl	d70c2 <strlen>
   d5a30:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5a32:	2e00      	cmp	r6, #0
   d5a34:	d05c      	beq.n	d5af0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d5a36:	4630      	mov	r0, r6
   d5a38:	f001 fb43 	bl	d70c2 <strlen>
   d5a3c:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5a3e:	f108 0302 	add.w	r3, r8, #2
   d5a42:	4423      	add	r3, r4
   d5a44:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d5a48:	d84f      	bhi.n	d5aea <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d5a4a:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d5a4e:	f7ff ff75 	bl	d593c <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d5a52:	4628      	mov	r0, r5
   d5a54:	f7ff ff96 	bl	d5984 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5a58:	2800      	cmp	r0, #0
   d5a5a:	db40      	blt.n	d5ade <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5a5c:	4668      	mov	r0, sp
   d5a5e:	f7ff fea3 	bl	d57a8 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5a62:	4668      	mov	r0, sp
   d5a64:	f7ff ff6e 	bl	d5944 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5a68:	2800      	cmp	r0, #0
   d5a6a:	db38      	blt.n	d5ade <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5a6c:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d5a70:	f8da 3000 	ldr.w	r3, [sl]
   d5a74:	f10d 0c04 	add.w	ip, sp, #4
   d5a78:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5a7c:	4b20      	ldr	r3, [pc, #128]	; (d5b00 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d5a7e:	9306      	str	r3, [sp, #24]
   d5a80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5a84:	f10d 0e1c 	add.w	lr, sp, #28
   d5a88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5a8c:	f8dc 3000 	ldr.w	r3, [ip]
   d5a90:	f88e 3000 	strb.w	r3, [lr]
   d5a94:	f249 0269 	movw	r2, #36969	; 0x9069
   d5a98:	a906      	add	r1, sp, #24
   d5a9a:	4650      	mov	r0, sl
   d5a9c:	47c8      	blx	r9
   d5a9e:	2800      	cmp	r0, #0
   d5aa0:	db1d      	blt.n	d5ade <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d5aa2:	2300      	movs	r3, #0
   d5aa4:	6828      	ldr	r0, [r5, #0]
   d5aa6:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5aaa:	6803      	ldr	r3, [r0, #0]
   d5aac:	2201      	movs	r2, #1
   d5aae:	68db      	ldr	r3, [r3, #12]
   d5ab0:	a906      	add	r1, sp, #24
   d5ab2:	4798      	blx	r3
   d5ab4:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d5ab6:	6803      	ldr	r3, [r0, #0]
   d5ab8:	f108 0201 	add.w	r2, r8, #1
   d5abc:	68db      	ldr	r3, [r3, #12]
   d5abe:	4639      	mov	r1, r7
   d5ac0:	4798      	blx	r3
    if (dataLen > 0) {
   d5ac2:	b12c      	cbz	r4, d5ad0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d5ac4:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d5ac6:	6803      	ldr	r3, [r0, #0]
   d5ac8:	4622      	mov	r2, r4
   d5aca:	68db      	ldr	r3, [r3, #12]
   d5acc:	4631      	mov	r1, r6
   d5ace:	4798      	blx	r3
   d5ad0:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d5ad2:	6803      	ldr	r3, [r0, #0]
   d5ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ad6:	4798      	blx	r3
   d5ad8:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5adc:	e000      	b.n	d5ae0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d5ade:	4604      	mov	r4, r0
   d5ae0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5ae4:	f7ff f84c 	bl	d4b80 <os_mutex_recursive_unlock>
   d5ae8:	e004      	b.n	d5af4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5aea:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d5aee:	e001      	b.n	d5af4 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5af0:	4634      	mov	r4, r6
   d5af2:	e7a4      	b.n	d5a3e <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d5af4:	4620      	mov	r0, r4
   d5af6:	b00c      	add	sp, #48	; 0x30
   d5af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5afc:	fffffef2 	.word	0xfffffef2
   d5b00:	000d737c 	.word	0x000d737c

000d5b04 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b04:	b538      	push	{r3, r4, r5, lr}
   d5b06:	4c0d      	ldr	r4, [pc, #52]	; (d5b3c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5b08:	4b0d      	ldr	r3, [pc, #52]	; (d5b40 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5b0a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b0c:	2500      	movs	r5, #0
   d5b0e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b10:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b14:	6063      	str	r3, [r4, #4]
   d5b16:	60a5      	str	r5, [r4, #8]
   d5b18:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b1c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5b20:	f7ff f81e 	bl	d4b60 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5b24:	4b07      	ldr	r3, [pc, #28]	; (d5b44 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5b26:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5b2a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	4a06      	ldr	r2, [pc, #24]	; (d5b48 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5b30:	4906      	ldr	r1, [pc, #24]	; (d5b4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5b36:	f001 b90d 	b.w	d6d54 <__aeabi_atexit>
   d5b3a:	bf00      	nop
   d5b3c:	2003e3e4 	.word	0x2003e3e4
   d5b40:	000d74d0 	.word	0x000d74d0
   d5b44:	000d746c 	.word	0x000d746c
   d5b48:	2003e3a8 	.word	0x2003e3a8
   d5b4c:	000d5909 	.word	0x000d5909

000d5b50 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5b50:	2300      	movs	r3, #0
   d5b52:	461a      	mov	r2, r3
   d5b54:	6840      	ldr	r0, [r0, #4]
   d5b56:	f7ff ba07 	b.w	d4f68 <network_connect>

000d5b5a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5b5a:	2200      	movs	r2, #0
   d5b5c:	2102      	movs	r1, #2
   d5b5e:	6840      	ldr	r0, [r0, #4]
   d5b60:	f7ff ba12 	b.w	d4f88 <network_disconnect>

000d5b64 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5b64:	2200      	movs	r2, #0
   d5b66:	4611      	mov	r1, r2
   d5b68:	6840      	ldr	r0, [r0, #4]
   d5b6a:	f7ff ba05 	b.w	d4f78 <network_connecting>

000d5b6e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5b6e:	2200      	movs	r2, #0
   d5b70:	4611      	mov	r1, r2
   d5b72:	6840      	ldr	r0, [r0, #4]
   d5b74:	f7ff ba10 	b.w	d4f98 <network_ready>

000d5b78 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5b78:	2300      	movs	r3, #0
   d5b7a:	461a      	mov	r2, r3
   d5b7c:	4619      	mov	r1, r3
   d5b7e:	6840      	ldr	r0, [r0, #4]
   d5b80:	f7ff ba12 	b.w	d4fa8 <network_on>

000d5b84 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5b84:	2300      	movs	r3, #0
   d5b86:	461a      	mov	r2, r3
   d5b88:	4619      	mov	r1, r3
   d5b8a:	6840      	ldr	r0, [r0, #4]
   d5b8c:	f7ff ba14 	b.w	d4fb8 <network_off>

000d5b90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5b90:	2200      	movs	r2, #0
   d5b92:	f081 0101 	eor.w	r1, r1, #1
   d5b96:	6840      	ldr	r0, [r0, #4]
   d5b98:	f7ff ba16 	b.w	d4fc8 <network_listen>

000d5b9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5b9c:	2200      	movs	r2, #0
   d5b9e:	6840      	ldr	r0, [r0, #4]
   d5ba0:	f7ff ba22 	b.w	d4fe8 <network_set_listen_timeout>

000d5ba4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ba4:	2200      	movs	r2, #0
   d5ba6:	4611      	mov	r1, r2
   d5ba8:	6840      	ldr	r0, [r0, #4]
   d5baa:	f7ff ba25 	b.w	d4ff8 <network_get_listen_timeout>

000d5bae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5bae:	2200      	movs	r2, #0
   d5bb0:	4611      	mov	r1, r2
   d5bb2:	6840      	ldr	r0, [r0, #4]
   d5bb4:	f7ff ba10 	b.w	d4fd8 <network_listening>

000d5bb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5bb8:	b570      	push	{r4, r5, r6, lr}
   d5bba:	b08c      	sub	sp, #48	; 0x30
   d5bbc:	4614      	mov	r4, r2
   d5bbe:	4606      	mov	r6, r0
    IPAddress addr;
   d5bc0:	f7ff fdf2 	bl	d57a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5bc4:	ab0c      	add	r3, sp, #48	; 0x30
   d5bc6:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5bc8:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5bca:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5bce:	4620      	mov	r0, r4
   d5bd0:	f7ff f8ae 	bl	d4d30 <netdb_getaddrinfo>
    if (!r && ai) {
   d5bd4:	4601      	mov	r1, r0
   d5bd6:	bb58      	cbnz	r0, d5c30 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5bd8:	9b00      	ldr	r3, [sp, #0]
   d5bda:	b34b      	cbz	r3, d5c30 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5bdc:	685a      	ldr	r2, [r3, #4]
   d5bde:	2a02      	cmp	r2, #2
   d5be0:	d00e      	beq.n	d5c00 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5be2:	2a0a      	cmp	r2, #10
   d5be4:	d124      	bne.n	d5c30 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5be6:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5be8:	2211      	movs	r2, #17
   d5bea:	a801      	add	r0, sp, #4
   d5bec:	f001 fa33 	bl	d7056 <memset>
                a.v = 6;
   d5bf0:	2306      	movs	r3, #6
   d5bf2:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5bf6:	ad01      	add	r5, sp, #4
   d5bf8:	f104 0308 	add.w	r3, r4, #8
   d5bfc:	3418      	adds	r4, #24
   d5bfe:	e005      	b.n	d5c0c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c00:	6959      	ldr	r1, [r3, #20]
   d5c02:	4630      	mov	r0, r6
   d5c04:	3104      	adds	r1, #4
   d5c06:	f7ff fe12 	bl	d582e <_ZN9IPAddressaSEPKh>
                break;
   d5c0a:	e011      	b.n	d5c30 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c0c:	6818      	ldr	r0, [r3, #0]
   d5c0e:	6859      	ldr	r1, [r3, #4]
   d5c10:	462a      	mov	r2, r5
   d5c12:	c203      	stmia	r2!, {r0, r1}
   d5c14:	3308      	adds	r3, #8
   d5c16:	42a3      	cmp	r3, r4
   d5c18:	4615      	mov	r5, r2
   d5c1a:	d1f7      	bne.n	d5c0c <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5c1c:	a901      	add	r1, sp, #4
   d5c1e:	a806      	add	r0, sp, #24
   d5c20:	ad07      	add	r5, sp, #28
   d5c22:	f7ff fdcf 	bl	d57c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c28:	1d34      	adds	r4, r6, #4
   d5c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c2c:	682b      	ldr	r3, [r5, #0]
   d5c2e:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5c30:	9800      	ldr	r0, [sp, #0]
   d5c32:	f7ff f875 	bl	d4d20 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5c36:	4630      	mov	r0, r6
   d5c38:	b00c      	add	sp, #48	; 0x30
   d5c3a:	bd70      	pop	{r4, r5, r6, pc}

000d5c3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5c3c:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5c3e:	4a03      	ldr	r2, [pc, #12]	; (d5c4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5c40:	601a      	str	r2, [r3, #0]
   d5c42:	2200      	movs	r2, #0
   d5c44:	605a      	str	r2, [r3, #4]
   d5c46:	4770      	bx	lr
   d5c48:	2003e5b4 	.word	0x2003e5b4
   d5c4c:	000d74d0 	.word	0x000d74d0

000d5c50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c52:	4606      	mov	r6, r0
   d5c54:	460d      	mov	r5, r1
   d5c56:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c58:	2400      	movs	r4, #0
  while (size--) {
   d5c5a:	42bd      	cmp	r5, r7
   d5c5c:	d00c      	beq.n	d5c78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c5e:	6833      	ldr	r3, [r6, #0]
   d5c60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c64:	689b      	ldr	r3, [r3, #8]
   d5c66:	4630      	mov	r0, r6
   d5c68:	4798      	blx	r3
     if (chunk>=0)
   d5c6a:	2800      	cmp	r0, #0
   d5c6c:	db01      	blt.n	d5c72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c70:	e7f3      	b.n	d5c5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c72:	2c00      	cmp	r4, #0
   d5c74:	bf08      	it	eq
   d5c76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c78:	4620      	mov	r0, r4
   d5c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c7c:	b570      	push	{r4, r5, r6, lr}
   d5c7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c84:	b149      	cbz	r1, d5c9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c86:	f001 fa1c 	bl	d70c2 <strlen>
   d5c8a:	682b      	ldr	r3, [r5, #0]
   d5c8c:	4602      	mov	r2, r0
   d5c8e:	4621      	mov	r1, r4
   d5c90:	4628      	mov	r0, r5
   d5c92:	68db      	ldr	r3, [r3, #12]
    }
   d5c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c98:	4718      	bx	r3
    }
   d5c9a:	bd70      	pop	{r4, r5, r6, pc}

000d5c9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c9c:	6803      	ldr	r3, [r0, #0]
   d5c9e:	689b      	ldr	r3, [r3, #8]
   d5ca0:	4718      	bx	r3

000d5ca2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ca2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ca4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ca6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ca8:	f7ff fff8 	bl	d5c9c <_ZN5Print5printEc>
  n += print('\n');
   d5cac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5cae:	4604      	mov	r4, r0
  n += print('\n');
   d5cb0:	4628      	mov	r0, r5
   d5cb2:	f7ff fff3 	bl	d5c9c <_ZN5Print5printEc>
  return n;
}
   d5cb6:	4420      	add	r0, r4
   d5cb8:	bd38      	pop	{r3, r4, r5, pc}

000d5cba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cba:	b530      	push	{r4, r5, lr}
   d5cbc:	b08b      	sub	sp, #44	; 0x2c
   d5cbe:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cc0:	2100      	movs	r1, #0
   d5cc2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cc6:	2a01      	cmp	r2, #1
   d5cc8:	bf98      	it	ls
   d5cca:	220a      	movls	r2, #10
   d5ccc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5cd0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5cd4:	fb05 3312 	mls	r3, r5, r2, r3
   d5cd8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cdc:	2b09      	cmp	r3, #9
   d5cde:	bf94      	ite	ls
   d5ce0:	3330      	addls	r3, #48	; 0x30
   d5ce2:	3337      	addhi	r3, #55	; 0x37
   d5ce4:	b2db      	uxtb	r3, r3
   d5ce6:	4621      	mov	r1, r4
   d5ce8:	f804 3901 	strb.w	r3, [r4], #-1
   d5cec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5cee:	2d00      	cmp	r5, #0
   d5cf0:	d1ee      	bne.n	d5cd0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5cf2:	f7ff ffc3 	bl	d5c7c <_ZN5Print5writeEPKc>
}
   d5cf6:	b00b      	add	sp, #44	; 0x2c
   d5cf8:	bd30      	pop	{r4, r5, pc}

000d5cfa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5cfa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5cfc:	b92a      	cbnz	r2, d5d0a <_ZN5Print5printEmi+0x10>
   d5cfe:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5d00:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5d04:	689b      	ldr	r3, [r3, #8]
   d5d06:	b2c9      	uxtb	r1, r1
   d5d08:	4718      	bx	r3
  else return printNumber(n, base);
   d5d0a:	b2d2      	uxtb	r2, r2
}
   d5d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5d10:	f7ff bfd3 	b.w	d5cba <_ZN5Print11printNumberEmh>

000d5d14 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5d14:	f7ff bff1 	b.w	d5cfa <_ZN5Print5printEmi>

000d5d18 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5d18:	b40c      	push	{r2, r3}
   d5d1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d1e:	b087      	sub	sp, #28
   d5d20:	af00      	add	r7, sp, #0
   d5d22:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5d26:	4605      	mov	r5, r0
   d5d28:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5d2c:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5d2e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5d30:	4623      	mov	r3, r4
   d5d32:	464a      	mov	r2, r9
   d5d34:	2114      	movs	r1, #20
   d5d36:	1d38      	adds	r0, r7, #4
   d5d38:	f7ff f97e 	bl	d5038 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5d3c:	2813      	cmp	r0, #19
   d5d3e:	d805      	bhi.n	d5d4c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d40:	1d39      	adds	r1, r7, #4
   d5d42:	4628      	mov	r0, r5
   d5d44:	f7ff ff9a 	bl	d5c7c <_ZN5Print5writeEPKc>
   d5d48:	4604      	mov	r4, r0
   d5d4a:	e013      	b.n	d5d74 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5d4c:	f100 0308 	add.w	r3, r0, #8
   d5d50:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5d54:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5d56:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5d5a:	1c41      	adds	r1, r0, #1
   d5d5c:	4623      	mov	r3, r4
   d5d5e:	464a      	mov	r2, r9
   d5d60:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5d62:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5d64:	f7ff f968 	bl	d5038 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d68:	4669      	mov	r1, sp
   d5d6a:	4628      	mov	r0, r5
   d5d6c:	f7ff ff86 	bl	d5c7c <_ZN5Print5writeEPKc>
   d5d70:	4604      	mov	r4, r0
   d5d72:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5d74:	b11e      	cbz	r6, d5d7e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5d76:	4628      	mov	r0, r5
   d5d78:	f7ff ff93 	bl	d5ca2 <_ZN5Print7printlnEv>
   d5d7c:	4404      	add	r4, r0
    return n;
}
   d5d7e:	4620      	mov	r0, r4
   d5d80:	371c      	adds	r7, #28
   d5d82:	46bd      	mov	sp, r7
   d5d84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d88:	b002      	add	sp, #8
   d5d8a:	4770      	bx	lr

000d5d8c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d8c:	b510      	push	{r4, lr}
   d5d8e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d90:	f7ff f98e 	bl	d50b0 <_ZNSt14_Function_baseD1Ev>
   d5d94:	4620      	mov	r0, r4
   d5d96:	bd10      	pop	{r4, pc}

000d5d98 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d98:	4803      	ldr	r0, [pc, #12]	; (d5da8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d9a:	4a04      	ldr	r2, [pc, #16]	; (d5dac <_GLOBAL__sub_I_RGB+0x14>)
   d5d9c:	4904      	ldr	r1, [pc, #16]	; (d5db0 <_GLOBAL__sub_I_RGB+0x18>)
   d5d9e:	2300      	movs	r3, #0
   d5da0:	6083      	str	r3, [r0, #8]
   d5da2:	f000 bfd7 	b.w	d6d54 <__aeabi_atexit>
   d5da6:	bf00      	nop
   d5da8:	2003e5bc 	.word	0x2003e5bc
   d5dac:	2003e3a8 	.word	0x2003e3a8
   d5db0:	000d5d8d 	.word	0x000d5d8d

000d5db4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5db4:	4770      	bx	lr

000d5db6 <_ZN8SPIClassD0Ev>:
   d5db6:	b510      	push	{r4, lr}
   d5db8:	4604      	mov	r4, r0
   d5dba:	f7fe f970 	bl	d409e <_ZdlPv>
   d5dbe:	4620      	mov	r0, r4
   d5dc0:	bd10      	pop	{r4, pc}
	...

000d5dc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5dc4:	b570      	push	{r4, r5, r6, lr}
   d5dc6:	4b08      	ldr	r3, [pc, #32]	; (d5de8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5dc8:	6003      	str	r3, [r0, #0]
   d5dca:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5dcc:	2500      	movs	r5, #0
   d5dce:	460e      	mov	r6, r1
   d5dd0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5dd4:	f7fe febc 	bl	d4b50 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5dd8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5dda:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5ddc:	f7fe ffe0 	bl	d4da0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5de0:	60a5      	str	r5, [r4, #8]
}
   d5de2:	4620      	mov	r0, r4
   d5de4:	bd70      	pop	{r4, r5, r6, pc}
   d5de6:	bf00      	nop
   d5de8:	000d7504 	.word	0x000d7504

000d5dec <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5dec:	7900      	ldrb	r0, [r0, #4]
   d5dee:	f7fe bfdf 	b.w	d4db0 <HAL_SPI_Is_Enabled>

000d5df2 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d5df2:	4770      	bx	lr

000d5df4 <_ZN21StringPrintableHelperD0Ev>:
   d5df4:	b510      	push	{r4, lr}
   d5df6:	4604      	mov	r4, r0
   d5df8:	f7fe f951 	bl	d409e <_ZdlPv>
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	bd10      	pop	{r4, pc}

000d5e00 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5e00:	b510      	push	{r4, lr}
   d5e02:	4604      	mov	r4, r0
{
	free(buffer);
   d5e04:	6800      	ldr	r0, [r0, #0]
   d5e06:	f7ff f907 	bl	d5018 <free>
}
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	bd10      	pop	{r4, pc}

000d5e0e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5e0e:	b510      	push	{r4, lr}
   d5e10:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e12:	6800      	ldr	r0, [r0, #0]
   d5e14:	b108      	cbz	r0, d5e1a <_ZN6String10invalidateEv+0xc>
   d5e16:	f7ff f8ff 	bl	d5018 <free>
	buffer = NULL;
   d5e1a:	2300      	movs	r3, #0
   d5e1c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5e1e:	60a3      	str	r3, [r4, #8]
   d5e20:	6063      	str	r3, [r4, #4]
   d5e22:	bd10      	pop	{r4, pc}

000d5e24 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5e24:	b538      	push	{r3, r4, r5, lr}
   d5e26:	4604      	mov	r4, r0
   d5e28:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5e2a:	6800      	ldr	r0, [r0, #0]
   d5e2c:	3101      	adds	r1, #1
   d5e2e:	f7ff f8fb 	bl	d5028 <realloc>
	if (newbuffer) {
   d5e32:	b110      	cbz	r0, d5e3a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e34:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5e38:	2001      	movs	r0, #1
	}
	return 0;
}
   d5e3a:	bd38      	pop	{r3, r4, r5, pc}

000d5e3c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5e3c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5e3e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5e40:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5e42:	b113      	cbz	r3, d5e4a <_ZN6String7reserveEj+0xe>
   d5e44:	6843      	ldr	r3, [r0, #4]
   d5e46:	428b      	cmp	r3, r1
   d5e48:	d207      	bcs.n	d5e5a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	f7ff ffea 	bl	d5e24 <_ZN6String12changeBufferEj>
   d5e50:	b120      	cbz	r0, d5e5c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5e52:	68a3      	ldr	r3, [r4, #8]
   d5e54:	b90b      	cbnz	r3, d5e5a <_ZN6String7reserveEj+0x1e>
   d5e56:	6822      	ldr	r2, [r4, #0]
   d5e58:	7013      	strb	r3, [r2, #0]
   d5e5a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5e5c:	bd10      	pop	{r4, pc}

000d5e5e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e5e:	b570      	push	{r4, r5, r6, lr}
   d5e60:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5e62:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e64:	4604      	mov	r4, r0
   d5e66:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5e68:	f7ff ffe8 	bl	d5e3c <_ZN6String7reserveEj>
   d5e6c:	b918      	cbnz	r0, d5e76 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5e6e:	4620      	mov	r0, r4
   d5e70:	f7ff ffcd 	bl	d5e0e <_ZN6String10invalidateEv>
		return *this;
   d5e74:	e009      	b.n	d5e8a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5e76:	462a      	mov	r2, r5
   d5e78:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5e7a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5e7c:	6820      	ldr	r0, [r4, #0]
   d5e7e:	f001 f8df 	bl	d7040 <memcpy>
	buffer[len] = 0;
   d5e82:	6822      	ldr	r2, [r4, #0]
   d5e84:	68a3      	ldr	r3, [r4, #8]
   d5e86:	2100      	movs	r1, #0
   d5e88:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	bd70      	pop	{r4, r5, r6, pc}

000d5e8e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5e8e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e90:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5e92:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e94:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e96:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e98:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e9a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5e9c:	460d      	mov	r5, r1
   d5e9e:	b139      	cbz	r1, d5eb0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5ea0:	4608      	mov	r0, r1
   d5ea2:	f001 f90e 	bl	d70c2 <strlen>
   d5ea6:	4629      	mov	r1, r5
   d5ea8:	4602      	mov	r2, r0
   d5eaa:	4620      	mov	r0, r4
   d5eac:	f7ff ffd7 	bl	d5e5e <_ZN6String4copyEPKcj>
}
   d5eb0:	4620      	mov	r0, r4
   d5eb2:	bd38      	pop	{r3, r4, r5, pc}

000d5eb4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5eb4:	b538      	push	{r3, r4, r5, lr}
   d5eb6:	4605      	mov	r5, r0
	if (buffer) {
   d5eb8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5eba:	460c      	mov	r4, r1
	if (buffer) {
   d5ebc:	b160      	cbz	r0, d5ed8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5ebe:	686a      	ldr	r2, [r5, #4]
   d5ec0:	688b      	ldr	r3, [r1, #8]
   d5ec2:	429a      	cmp	r2, r3
   d5ec4:	d306      	bcc.n	d5ed4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5ec6:	6809      	ldr	r1, [r1, #0]
   d5ec8:	f001 f8d7 	bl	d707a <strcpy>
			len = rhs.len;
   d5ecc:	68a3      	ldr	r3, [r4, #8]
   d5ece:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5ed0:	2300      	movs	r3, #0
   d5ed2:	e00a      	b.n	d5eea <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5ed4:	f7ff f8a0 	bl	d5018 <free>
		}
	}
	buffer = rhs.buffer;
   d5ed8:	6823      	ldr	r3, [r4, #0]
   d5eda:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5edc:	6863      	ldr	r3, [r4, #4]
   d5ede:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5ee0:	68a3      	ldr	r3, [r4, #8]
   d5ee2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5ee4:	2300      	movs	r3, #0
   d5ee6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5ee8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5eea:	60a3      	str	r3, [r4, #8]
   d5eec:	bd38      	pop	{r3, r4, r5, pc}

000d5eee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5eee:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	460b      	mov	r3, r1
   d5ef4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5ef6:	d007      	beq.n	d5f08 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5ef8:	6809      	ldr	r1, [r1, #0]
   d5efa:	b119      	cbz	r1, d5f04 <_ZN6StringaSERKS_+0x16>
   d5efc:	689a      	ldr	r2, [r3, #8]
   d5efe:	f7ff ffae 	bl	d5e5e <_ZN6String4copyEPKcj>
   d5f02:	e001      	b.n	d5f08 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5f04:	f7ff ff83 	bl	d5e0e <_ZN6String10invalidateEv>

	return *this;
}
   d5f08:	4620      	mov	r0, r4
   d5f0a:	bd10      	pop	{r4, pc}

000d5f0c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5f0c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f0e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5f10:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f12:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5f14:	6043      	str	r3, [r0, #4]
	len = 0;
   d5f16:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f18:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5f1a:	f7ff ffe8 	bl	d5eee <_ZN6StringaSERKS_>
}
   d5f1e:	4620      	mov	r0, r4
   d5f20:	bd10      	pop	{r4, pc}

000d5f22 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5f22:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5f24:	b510      	push	{r4, lr}
   d5f26:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5f28:	d001      	beq.n	d5f2e <_ZN6StringaSEOS_+0xc>
   d5f2a:	f7ff ffc3 	bl	d5eb4 <_ZN6String4moveERS_>
	return *this;
}
   d5f2e:	4620      	mov	r0, r4
   d5f30:	bd10      	pop	{r4, pc}

000d5f32 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5f32:	b538      	push	{r3, r4, r5, lr}
   d5f34:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5f36:	460c      	mov	r4, r1
   d5f38:	b141      	cbz	r1, d5f4c <_ZN6StringaSEPKc+0x1a>
   d5f3a:	4608      	mov	r0, r1
   d5f3c:	f001 f8c1 	bl	d70c2 <strlen>
   d5f40:	4621      	mov	r1, r4
   d5f42:	4602      	mov	r2, r0
   d5f44:	4628      	mov	r0, r5
   d5f46:	f7ff ff8a 	bl	d5e5e <_ZN6String4copyEPKcj>
   d5f4a:	e001      	b.n	d5f50 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5f4c:	f7ff ff5f 	bl	d5e0e <_ZN6String10invalidateEv>

	return *this;
}
   d5f50:	4628      	mov	r0, r5
   d5f52:	bd38      	pop	{r3, r4, r5, pc}

000d5f54 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5f54:	b510      	push	{r4, lr}
   d5f56:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f58:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5f5a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f5c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5f5e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5f60:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5f62:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5f64:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5f66:	a901      	add	r1, sp, #4
   d5f68:	f000 fdca 	bl	d6b00 <itoa>
	*this = buf;
   d5f6c:	a901      	add	r1, sp, #4
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7ff ffdf 	bl	d5f32 <_ZN6StringaSEPKc>
}
   d5f74:	4620      	mov	r0, r4
   d5f76:	b00a      	add	sp, #40	; 0x28
   d5f78:	bd10      	pop	{r4, pc}

000d5f7a <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5f7a:	b510      	push	{r4, lr}
   d5f7c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f7e:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5f80:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5f82:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5f84:	6063      	str	r3, [r4, #4]
	len = 0;
   d5f86:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5f88:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5f8a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d5f8c:	a901      	add	r1, sp, #4
   d5f8e:	f000 fd50 	bl	d6a32 <ltoa>
	*this = buf;
   d5f92:	a901      	add	r1, sp, #4
   d5f94:	4620      	mov	r0, r4
   d5f96:	f7ff ffcc 	bl	d5f32 <_ZN6StringaSEPKc>
}
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	b00a      	add	sp, #40	; 0x28
   d5f9e:	bd10      	pop	{r4, pc}

000d5fa0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5fa0:	b570      	push	{r4, r5, r6, lr}
   d5fa2:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5fa4:	460e      	mov	r6, r1
   d5fa6:	b909      	cbnz	r1, d5fac <_ZN6String6concatEPKcj+0xc>
   d5fa8:	2000      	movs	r0, #0
   d5faa:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5fac:	b16a      	cbz	r2, d5fca <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5fae:	6883      	ldr	r3, [r0, #8]
   d5fb0:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5fb2:	4629      	mov	r1, r5
   d5fb4:	f7ff ff42 	bl	d5e3c <_ZN6String7reserveEj>
   d5fb8:	2800      	cmp	r0, #0
   d5fba:	d0f5      	beq.n	d5fa8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5fbc:	6820      	ldr	r0, [r4, #0]
   d5fbe:	68a3      	ldr	r3, [r4, #8]
   d5fc0:	4631      	mov	r1, r6
   d5fc2:	4418      	add	r0, r3
   d5fc4:	f001 f859 	bl	d707a <strcpy>
	len = newlen;
   d5fc8:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5fca:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5fcc:	bd70      	pop	{r4, r5, r6, pc}

000d5fce <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d5fce:	b538      	push	{r3, r4, r5, lr}
   d5fd0:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d5fd2:	6880      	ldr	r0, [r0, #8]
   d5fd4:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d5fd6:	f7ff ffe3 	bl	d5fa0 <_ZN6String6concatEPKcj>
   d5fda:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d5fdc:	6898      	ldr	r0, [r3, #8]
    }
   d5fde:	1b40      	subs	r0, r0, r5
   d5fe0:	bd38      	pop	{r3, r4, r5, pc}

000d5fe2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5fe2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5fe4:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5fe6:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5fea:	2201      	movs	r2, #1
   d5fec:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5fee:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5ff2:	f7ff ffd5 	bl	d5fa0 <_ZN6String6concatEPKcj>
}
   d5ff6:	b003      	add	sp, #12
   d5ff8:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ffc <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d5ffc:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d5ffe:	6880      	ldr	r0, [r0, #8]
   d6000:	f7ff ffef 	bl	d5fe2 <_ZN6String6concatEc>
    }
   d6004:	bd08      	pop	{r3, pc}

000d6006 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6006:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6008:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d600a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d600c:	b912      	cbnz	r2, d6014 <_ZNK6String6equalsEPKc+0xe>
   d600e:	b919      	cbnz	r1, d6018 <_ZNK6String6equalsEPKc+0x12>
   d6010:	2001      	movs	r0, #1
   d6012:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6014:	b911      	cbnz	r1, d601c <_ZNK6String6equalsEPKc+0x16>
   d6016:	6803      	ldr	r3, [r0, #0]
   d6018:	7818      	ldrb	r0, [r3, #0]
   d601a:	e002      	b.n	d6022 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d601c:	6800      	ldr	r0, [r0, #0]
   d601e:	f001 f822 	bl	d7066 <strcmp>
   d6022:	fab0 f080 	clz	r0, r0
   d6026:	0940      	lsrs	r0, r0, #5
}
   d6028:	bd08      	pop	{r3, pc}

000d602a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d602a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d602c:	6883      	ldr	r3, [r0, #8]
   d602e:	4293      	cmp	r3, r2
   d6030:	d907      	bls.n	d6042 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6032:	6804      	ldr	r4, [r0, #0]
   d6034:	6809      	ldr	r1, [r1, #0]
   d6036:	18a0      	adds	r0, r4, r2
   d6038:	f001 f84b 	bl	d70d2 <strstr>
	if (found == NULL) return -1;
   d603c:	b108      	cbz	r0, d6042 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d603e:	1b00      	subs	r0, r0, r4
   d6040:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d6042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d6046:	bd10      	pop	{r4, pc}

000d6048 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d6048:	2200      	movs	r2, #0
   d604a:	f7ff bfee 	b.w	d602a <_ZNK6String7indexOfERKS_j>
	...

000d6050 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d6054:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6056:	460e      	mov	r6, r1
   d6058:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d605a:	4910      	ldr	r1, [pc, #64]	; (d609c <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d605c:	bf88      	it	hi
   d605e:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6060:	4615      	mov	r5, r2
   d6062:	4607      	mov	r7, r0
	if (left > right) {
   d6064:	bf84      	itt	hi
   d6066:	4625      	movhi	r5, r4
   d6068:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d606a:	f7ff ff10 	bl	d5e8e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d606e:	68b1      	ldr	r1, [r6, #8]
   d6070:	428d      	cmp	r5, r1
   d6072:	d80f      	bhi.n	d6094 <_ZNK6String9substringEjj+0x44>
   d6074:	428c      	cmp	r4, r1
   d6076:	bf28      	it	cs
   d6078:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d607a:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d607c:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d607e:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d6082:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d6084:	6831      	ldr	r1, [r6, #0]
   d6086:	4638      	mov	r0, r7
   d6088:	4429      	add	r1, r5
   d608a:	f7ff ff52 	bl	d5f32 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d608e:	6833      	ldr	r3, [r6, #0]
   d6090:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d6094:	4638      	mov	r0, r7
   d6096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d609a:	bf00      	nop
   d609c:	000d739c 	.word	0x000d739c

000d60a0 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d60a0:	b510      	push	{r4, lr}
   d60a2:	4604      	mov	r4, r0
	return substring(left, len);
   d60a4:	688b      	ldr	r3, [r1, #8]
   d60a6:	f7ff ffd3 	bl	d6050 <_ZNK6String9substringEjj>
}
   d60aa:	4620      	mov	r0, r4
   d60ac:	bd10      	pop	{r4, pc}

000d60ae <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d60ae:	6800      	ldr	r0, [r0, #0]
   d60b0:	b108      	cbz	r0, d60b6 <_ZNK6String5toIntEv+0x8>
   d60b2:	f000 bf9f 	b.w	d6ff4 <atol>
	return 0;
}
   d60b6:	4770      	bx	lr

000d60b8 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d60b8:	b530      	push	{r4, r5, lr}
   d60ba:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d60bc:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d60be:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d60c0:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d60c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d60c4:	6043      	str	r3, [r0, #4]
	len = 0;
   d60c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d60c8:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d60ca:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d60cc:	4b06      	ldr	r3, [pc, #24]	; (d60e8 <_ZN6StringC1ERK9Printable+0x30>)
   d60ce:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d60d0:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d60d2:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d60d4:	f7ff feb2 	bl	d5e3c <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d60d8:	682b      	ldr	r3, [r5, #0]
   d60da:	a901      	add	r1, sp, #4
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	4628      	mov	r0, r5
   d60e0:	4798      	blx	r3
}
   d60e2:	4620      	mov	r0, r4
   d60e4:	b005      	add	sp, #20
   d60e6:	bd30      	pop	{r4, r5, pc}
   d60e8:	000d7514 	.word	0x000d7514

000d60ec <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d60ec:	4b05      	ldr	r3, [pc, #20]	; (d6104 <_GLOBAL__sub_I_System+0x18>)
   d60ee:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d60f2:	2000      	movs	r0, #0
   d60f4:	805a      	strh	r2, [r3, #2]
   d60f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d60fa:	7018      	strb	r0, [r3, #0]
   d60fc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d60fe:	f7fe bedf 	b.w	d4ec0 <set_system_mode>
   d6102:	bf00      	nop
   d6104:	2003e5cc 	.word	0x2003e5cc

000d6108 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6108:	4b02      	ldr	r3, [pc, #8]	; (d6114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d610a:	681a      	ldr	r2, [r3, #0]
   d610c:	4b02      	ldr	r3, [pc, #8]	; (d6118 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d610e:	601a      	str	r2, [r3, #0]
   d6110:	4770      	bx	lr
   d6112:	bf00      	nop
   d6114:	2003e33c 	.word	0x2003e33c
   d6118:	2003e5d4 	.word	0x2003e5d4

000d611c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d611c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d611e:	6804      	ldr	r4, [r0, #0]
   d6120:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6122:	46a4      	mov	ip, r4
    }
   d6124:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6128:	4760      	bx	ip

000d612a <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d612a:	6803      	ldr	r3, [r0, #0]
   d612c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d612e:	4718      	bx	r3

000d6130 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6130:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6132:	4770      	bx	lr

000d6134 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6134:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6136:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6138:	1a10      	subs	r0, r2, r0
   d613a:	4770      	bx	lr

000d613c <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d613c:	b513      	push	{r0, r1, r4, lr}
   d613e:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6140:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6142:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d6146:	68d4      	ldr	r4, [r2, #12]
   d6148:	4619      	mov	r1, r3
   d614a:	2201      	movs	r2, #1
   d614c:	47a0      	blx	r4
}
   d614e:	b002      	add	sp, #8
   d6150:	bd10      	pop	{r4, pc}

000d6152 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6152:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6154:	6803      	ldr	r3, [r0, #0]
   d6156:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6158:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d615a:	4798      	blx	r3
   d615c:	b128      	cbz	r0, d616a <_ZN3UDP4readEv+0x18>
   d615e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6160:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6162:	1c59      	adds	r1, r3, #1
   d6164:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6166:	5cd0      	ldrb	r0, [r2, r3]
   d6168:	bd10      	pop	{r4, pc}
   d616a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d616e:	bd10      	pop	{r4, pc}

000d6170 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6170:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6172:	6803      	ldr	r3, [r0, #0]
   d6174:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6176:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6178:	4798      	blx	r3
   d617a:	b118      	cbz	r0, d6184 <_ZN3UDP4peekEv+0x14>
   d617c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d617e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6180:	5cd0      	ldrb	r0, [r2, r3]
   d6182:	bd10      	pop	{r4, pc}
   d6184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6188:	bd10      	pop	{r4, pc}

000d618a <_ZN3UDP5flushEv>:

void UDP::flush() {
   d618a:	4770      	bx	lr

000d618c <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d618c:	b410      	push	{r4}
   d618e:	4603      	mov	r3, r0
   d6190:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6192:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d6194:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d6196:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d6198:	6803      	ldr	r3, [r0, #0]
   d619a:	1a52      	subs	r2, r2, r1
   d619c:	68db      	ldr	r3, [r3, #12]
   d619e:	4421      	add	r1, r4
}
   d61a0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d61a4:	4718      	bx	r3

000d61a6 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d61a6:	f1a0 0010 	sub.w	r0, r0, #16
   d61aa:	f7ff bfef 	b.w	d618c <_ZNK3UDP7printToER5Print>

000d61ae <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d61ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d61b0:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d61b2:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d61b4:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d61b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d61b8:	4604      	mov	r4, r0
   d61ba:	460f      	mov	r7, r1
   d61bc:	4615      	mov	r5, r2
    stop();
   d61be:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d61c0:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d61c2:	4632      	mov	r2, r6
   d61c4:	2100      	movs	r1, #0
   d61c6:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d61c8:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d61ca:	f000 ff44 	bl	d7056 <memset>
    saddr.sin6_len = sizeof(saddr);
   d61ce:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d61d2:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d61d4:	260a      	movs	r6, #10
   d61d6:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d61da:	f7fe fd99 	bl	d4d10 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d61de:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d61e0:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d61e4:	2102      	movs	r1, #2
   d61e6:	4630      	mov	r0, r6
   d61e8:	f7fe fdd2 	bl	d4d90 <sock_socket>

    if (_sock < 0) {
   d61ec:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d61ee:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d61f0:	db24      	blt.n	d623c <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d61f2:	2204      	movs	r2, #4
   d61f4:	9200      	str	r2, [sp, #0]
   d61f6:	ab02      	add	r3, sp, #8
   d61f8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d61fc:	f7fe fda8 	bl	d4d50 <sock_setsockopt>
   d6200:	b9e0      	cbnz	r0, d623c <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6202:	b195      	cbz	r5, d622a <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d6204:	9003      	str	r0, [sp, #12]
   d6206:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d620a:	a903      	add	r1, sp, #12
   d620c:	b2e8      	uxtb	r0, r5
   d620e:	f7fe fd3f 	bl	d4c90 <if_index_to_name>
   d6212:	b998      	cbnz	r0, d623c <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6214:	2306      	movs	r3, #6
   d6216:	9300      	str	r3, [sp, #0]
   d6218:	f241 020b 	movw	r2, #4107	; 0x100b
   d621c:	ab03      	add	r3, sp, #12
   d621e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6222:	6960      	ldr	r0, [r4, #20]
   d6224:	f7fe fd94 	bl	d4d50 <sock_setsockopt>
   d6228:	b940      	cbnz	r0, d623c <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d622a:	221c      	movs	r2, #28
   d622c:	a905      	add	r1, sp, #20
   d622e:	6960      	ldr	r0, [r4, #20]
   d6230:	f7fe fd86 	bl	d4d40 <sock_bind>
   d6234:	b910      	cbnz	r0, d623c <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d6236:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6238:	2001      	movs	r0, #1
   d623a:	e004      	b.n	d6246 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d623c:	6823      	ldr	r3, [r4, #0]
   d623e:	4620      	mov	r0, r4
   d6240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6242:	4798      	blx	r3
   d6244:	2000      	movs	r0, #0
    }
    return bound;
}
   d6246:	b00d      	add	sp, #52	; 0x34
   d6248:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d624a <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d624a:	b510      	push	{r4, lr}
   d624c:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d624e:	6940      	ldr	r0, [r0, #20]
   d6250:	2800      	cmp	r0, #0
   d6252:	db01      	blt.n	d6258 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6254:	f7fe fd84 	bl	d4d60 <sock_close>
    }

    _sock = -1;
   d6258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d625c:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d625e:	2300      	movs	r3, #0
   d6260:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6262:	8723      	strh	r3, [r4, #56]	; 0x38
   d6264:	bd10      	pop	{r4, pc}

000d6266 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6266:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6268:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d626a:	4605      	mov	r5, r0
   d626c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d626e:	b113      	cbz	r3, d6276 <_ZN3UDP5writeEPKhj+0x10>
   d6270:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d6272:	1a24      	subs	r4, r4, r0
   d6274:	e000      	b.n	d6278 <_ZN3UDP5writeEPKhj+0x12>
   d6276:	461c      	mov	r4, r3
   d6278:	4294      	cmp	r4, r2
   d627a:	bf28      	it	cs
   d627c:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d627e:	4622      	mov	r2, r4
   d6280:	4418      	add	r0, r3
   d6282:	f000 fedd 	bl	d7040 <memcpy>
    _offset += size;
   d6286:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6288:	4423      	add	r3, r4
   d628a:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d628c:	4620      	mov	r0, r4
   d628e:	bd38      	pop	{r3, r4, r5, pc}

000d6290 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6290:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d6292:	6803      	ldr	r3, [r0, #0]
   d6294:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6296:	4604      	mov	r4, r0
   d6298:	460e      	mov	r6, r1
   d629a:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d629c:	4798      	blx	r3
   d629e:	b188      	cbz	r0, d62c4 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d62a0:	6823      	ldr	r3, [r4, #0]
   d62a2:	4620      	mov	r0, r4
   d62a4:	691b      	ldr	r3, [r3, #16]
   d62a6:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d62a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d62aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d62ac:	4285      	cmp	r5, r0
   d62ae:	bfa8      	it	ge
   d62b0:	4605      	movge	r5, r0
   d62b2:	4419      	add	r1, r3
   d62b4:	462a      	mov	r2, r5
   d62b6:	4630      	mov	r0, r6
   d62b8:	f000 fec2 	bl	d7040 <memcpy>
        _offset += read;
   d62bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d62be:	442b      	add	r3, r5
   d62c0:	86e3      	strh	r3, [r4, #54]	; 0x36
   d62c2:	e001      	b.n	d62c8 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d62c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d62c8:	4628      	mov	r0, r5
   d62ca:	bd70      	pop	{r4, r5, r6, pc}

000d62cc <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d62cc:	b570      	push	{r4, r5, r6, lr}
   d62ce:	4604      	mov	r4, r0
   d62d0:	4b05      	ldr	r3, [pc, #20]	; (d62e8 <_ZN3UDP8remoteIPEv+0x1c>)
   d62d2:	f844 3b04 	str.w	r3, [r4], #4
   d62d6:	f101 0520 	add.w	r5, r1, #32
   d62da:	4606      	mov	r6, r0
   d62dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62e0:	682b      	ldr	r3, [r5, #0]
   d62e2:	7023      	strb	r3, [r4, #0]
   d62e4:	4630      	mov	r0, r6
   d62e6:	bd70      	pop	{r4, r5, r6, pc}
   d62e8:	000d737c 	.word	0x000d737c

000d62ec <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62ee:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d62f0:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d62f2:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d62f4:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d62f6:	4a0a      	ldr	r2, [pc, #40]	; (d6320 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d62f8:	9202      	str	r2, [sp, #8]
   d62fa:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d62fc:	468e      	mov	lr, r1
   d62fe:	4606      	mov	r6, r0
   d6300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6302:	ac03      	add	r4, sp, #12
   d6304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6306:	682b      	ldr	r3, [r5, #0]
   d6308:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d630a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d630e:	9300      	str	r3, [sp, #0]
   d6310:	4662      	mov	r2, ip
   d6312:	ab02      	add	r3, sp, #8
   d6314:	4671      	mov	r1, lr
   d6316:	4630      	mov	r0, r6
   d6318:	47b8      	blx	r7
    }
   d631a:	b009      	add	sp, #36	; 0x24
   d631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d631e:	bf00      	nop
   d6320:	000d737c 	.word	0x000d737c

000d6324 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6324:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6326:	6803      	ldr	r3, [r0, #0]
   d6328:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d632c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d632e:	4b0d      	ldr	r3, [pc, #52]	; (d6364 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6330:	b089      	sub	sp, #36	; 0x24
   d6332:	f100 0620 	add.w	r6, r0, #32
   d6336:	4604      	mov	r4, r0
   d6338:	9302      	str	r3, [sp, #8]
   d633a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d633c:	ad03      	add	r5, sp, #12
   d633e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6340:	6833      	ldr	r3, [r6, #0]
   d6342:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6344:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6346:	9300      	str	r3, [sp, #0]
   d6348:	4672      	mov	r2, lr
   d634a:	ab02      	add	r3, sp, #8
   d634c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d634e:	4620      	mov	r0, r4
   d6350:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6352:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6354:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6356:	69db      	ldr	r3, [r3, #28]
   d6358:	4620      	mov	r0, r4
   d635a:	4798      	blx	r3
    return result;
}
   d635c:	4628      	mov	r0, r5
   d635e:	b009      	add	sp, #36	; 0x24
   d6360:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6362:	bf00      	nop
   d6364:	000d737c 	.word	0x000d737c

000d6368 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6368:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d636a:	7843      	ldrb	r3, [r0, #1]
   d636c:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d636e:	b08d      	sub	sp, #52	; 0x34
   d6370:	4605      	mov	r5, r0
   d6372:	460c      	mov	r4, r1
   d6374:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6376:	d101      	bne.n	d637c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6378:	1d01      	adds	r1, r0, #4
   d637a:	e033      	b.n	d63e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d637c:	2b0a      	cmp	r3, #10
   d637e:	d135      	bne.n	d63ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6380:	2211      	movs	r2, #17
   d6382:	2100      	movs	r1, #0
   d6384:	a801      	add	r0, sp, #4
   d6386:	f000 fe66 	bl	d7056 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d638a:	68ab      	ldr	r3, [r5, #8]
   d638c:	b943      	cbnz	r3, d63a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d638e:	68eb      	ldr	r3, [r5, #12]
   d6390:	b933      	cbnz	r3, d63a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6392:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6396:	692e      	ldr	r6, [r5, #16]
   d6398:	f7fe fcaa 	bl	d4cf0 <inet_htonl>
   d639c:	4286      	cmp	r6, r0
   d639e:	d01f      	beq.n	d63e0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d63a0:	f105 0308 	add.w	r3, r5, #8
   d63a4:	ae01      	add	r6, sp, #4
   d63a6:	f105 0e18 	add.w	lr, r5, #24
   d63aa:	6818      	ldr	r0, [r3, #0]
   d63ac:	6859      	ldr	r1, [r3, #4]
   d63ae:	4632      	mov	r2, r6
   d63b0:	c203      	stmia	r2!, {r0, r1}
   d63b2:	3308      	adds	r3, #8
   d63b4:	4573      	cmp	r3, lr
   d63b6:	4616      	mov	r6, r2
   d63b8:	d1f7      	bne.n	d63aa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d63ba:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d63bc:	a901      	add	r1, sp, #4
   d63be:	a806      	add	r0, sp, #24
   d63c0:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d63c2:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d63c6:	f7ff f9fd 	bl	d57c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d63ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d63cc:	3404      	adds	r4, #4
   d63ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d63d0:	6833      	ldr	r3, [r6, #0]
   d63d2:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d63d4:	b157      	cbz	r7, d63ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d63d6:	8868      	ldrh	r0, [r5, #2]
   d63d8:	f7fe fc92 	bl	d4d00 <inet_ntohs>
   d63dc:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d63de:	e005      	b.n	d63ec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d63e0:	f105 0114 	add.w	r1, r5, #20
   d63e4:	4620      	mov	r0, r4
   d63e6:	f7ff fa22 	bl	d582e <_ZN9IPAddressaSEPKh>
   d63ea:	e7f3      	b.n	d63d4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d63ec:	b00d      	add	sp, #52	; 0x34
   d63ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63f0 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d63f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63f4:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d63f6:	ab0e      	add	r3, sp, #56	; 0x38
   d63f8:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d63fa:	4606      	mov	r6, r0
   d63fc:	4617      	mov	r7, r2
   d63fe:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6400:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6404:	462a      	mov	r2, r5
   d6406:	4629      	mov	r1, r5
   d6408:	f7fe fc92 	bl	d4d30 <netdb_getaddrinfo>
   d640c:	2800      	cmp	r0, #0
   d640e:	db1f      	blt.n	d6450 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6410:	9b01      	ldr	r3, [sp, #4]
   d6412:	b1fb      	cbz	r3, d6454 <_ZN3UDP11beginPacketEPKct+0x64>
   d6414:	695b      	ldr	r3, [r3, #20]
   d6416:	b1eb      	cbz	r3, d6454 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6418:	a802      	add	r0, sp, #8
   d641a:	f7ff f9c5 	bl	d57a8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d641e:	9b01      	ldr	r3, [sp, #4]
   d6420:	462a      	mov	r2, r5
   d6422:	6958      	ldr	r0, [r3, #20]
   d6424:	a902      	add	r1, sp, #8
   d6426:	f7ff ff9f 	bl	d6368 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d642a:	a802      	add	r0, sp, #8
   d642c:	f7ff f9dc 	bl	d57e8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6430:	b180      	cbz	r0, d6454 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6432:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6434:	ad03      	add	r5, sp, #12
   d6436:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d643a:	4b0b      	ldr	r3, [pc, #44]	; (d6468 <_ZN3UDP11beginPacketEPKct+0x78>)
   d643c:	9308      	str	r3, [sp, #32]
   d643e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6440:	ac09      	add	r4, sp, #36	; 0x24
   d6442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6444:	682b      	ldr	r3, [r5, #0]
   d6446:	7023      	strb	r3, [r4, #0]
   d6448:	463a      	mov	r2, r7
   d644a:	a908      	add	r1, sp, #32
   d644c:	4630      	mov	r0, r6
   d644e:	47c0      	blx	r8
   d6450:	4604      	mov	r4, r0
   d6452:	e001      	b.n	d6458 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6454:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6458:	9801      	ldr	r0, [sp, #4]
   d645a:	f7fe fc61 	bl	d4d20 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d645e:	4620      	mov	r0, r4
   d6460:	b00e      	add	sp, #56	; 0x38
   d6462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6466:	bf00      	nop
   d6468:	000d737c 	.word	0x000d737c

000d646c <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6470:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d6474:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6478:	b098      	sub	sp, #96	; 0x60
   d647a:	4605      	mov	r5, r0
   d647c:	460c      	mov	r4, r1
   d647e:	4617      	mov	r7, r2
   d6480:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6482:	db00      	blt.n	d6486 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6484:	b911      	cbnz	r1, d648c <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d648a:	e04e      	b.n	d652a <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d648c:	f04f 0a1c 	mov.w	sl, #28
   d6490:	ae09      	add	r6, sp, #36	; 0x24
   d6492:	4652      	mov	r2, sl
   d6494:	2100      	movs	r1, #0
   d6496:	4630      	mov	r0, r6
   d6498:	f000 fddd 	bl	d7056 <memset>
        socklen_t slen = sizeof(saddr);
   d649c:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d64a0:	f1b9 0f00 	cmp.w	r9, #0
   d64a4:	d014      	beq.n	d64d0 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d64a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d64aa:	fbb9 f1f2 	udiv	r1, r9, r2
   d64ae:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d64b0:	fb02 9111 	mls	r1, r2, r1, r9
   d64b4:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d64b6:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d64b8:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d64ba:	9300      	str	r3, [sp, #0]
   d64bc:	f241 0206 	movw	r2, #4102	; 0x1006
   d64c0:	ab10      	add	r3, sp, #64	; 0x40
   d64c2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d64c6:	4640      	mov	r0, r8
   d64c8:	f7fe fc42 	bl	d4d50 <sock_setsockopt>
            if (ret) {
   d64cc:	b108      	cbz	r0, d64d2 <_ZN3UDP13receivePacketEPhjm+0x66>
   d64ce:	e02c      	b.n	d652a <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d64d0:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d64d2:	ab04      	add	r3, sp, #16
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	4621      	mov	r1, r4
   d64d8:	4603      	mov	r3, r0
   d64da:	9600      	str	r6, [sp, #0]
   d64dc:	463a      	mov	r2, r7
   d64de:	6968      	ldr	r0, [r5, #20]
   d64e0:	f7fe fc46 	bl	d4d70 <sock_recvfrom>
        if (ret >= 0) {
   d64e4:	1e04      	subs	r4, r0, #0
   d64e6:	db1f      	blt.n	d6528 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d64e8:	f105 071c 	add.w	r7, r5, #28
   d64ec:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d64f0:	4630      	mov	r0, r6
   d64f2:	4639      	mov	r1, r7
   d64f4:	f7ff ff38 	bl	d6368 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d64f8:	2600      	movs	r6, #0
   d64fa:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d64fc:	4639      	mov	r1, r7
   d64fe:	a805      	add	r0, sp, #20
   d6500:	9310      	str	r3, [sp, #64]	; 0x40
   d6502:	9611      	str	r6, [sp, #68]	; 0x44
   d6504:	f7ff fdd8 	bl	d60b8 <_ZN6StringC1ERK9Printable>
   d6508:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d650a:	9303      	str	r3, [sp, #12]
   d650c:	9b05      	ldr	r3, [sp, #20]
   d650e:	9302      	str	r3, [sp, #8]
   d6510:	4b07      	ldr	r3, [pc, #28]	; (d6530 <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d6512:	9300      	str	r3, [sp, #0]
   d6514:	2001      	movs	r0, #1
   d6516:	9401      	str	r4, [sp, #4]
   d6518:	4633      	mov	r3, r6
   d651a:	aa10      	add	r2, sp, #64	; 0x40
   d651c:	4905      	ldr	r1, [pc, #20]	; (d6534 <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d651e:	f7fe fcc7 	bl	d4eb0 <log_message>
   d6522:	a805      	add	r0, sp, #20
   d6524:	f7ff fc6c 	bl	d5e00 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6528:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d652a:	b018      	add	sp, #96	; 0x60
   d652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6530:	000d754d 	.word	0x000d754d
   d6534:	000d74b1 	.word	0x000d74b1

000d6538 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6538:	b538      	push	{r3, r4, r5, lr}
   d653a:	4605      	mov	r5, r0
   d653c:	4614      	mov	r4, r2
   d653e:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6540:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6542:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6544:	d111      	bne.n	d656a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6546:	231c      	movs	r3, #28
   d6548:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d654a:	230a      	movs	r3, #10
   d654c:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d654e:	f7fe fbdf 	bl	d4d10 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6552:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6554:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6558:	1d2b      	adds	r3, r5, #4
   d655a:	3514      	adds	r5, #20
   d655c:	f853 2b04 	ldr.w	r2, [r3], #4
   d6560:	f844 2b04 	str.w	r2, [r4], #4
   d6564:	42ab      	cmp	r3, r5
   d6566:	d1f9      	bne.n	d655c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6568:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d656a:	2b04      	cmp	r3, #4
   d656c:	d10a      	bne.n	d6584 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d656e:	2310      	movs	r3, #16
   d6570:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6572:	2302      	movs	r3, #2
   d6574:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6576:	f7fe fbcb 	bl	d4d10 <inet_htons>
   d657a:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d657c:	6868      	ldr	r0, [r5, #4]
   d657e:	f7fe fbb7 	bl	d4cf0 <inet_htonl>
   d6582:	6060      	str	r0, [r4, #4]
   d6584:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6588 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d658c:	4698      	mov	r8, r3
   d658e:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d6590:	2320      	movs	r3, #32
   d6592:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6594:	4682      	mov	sl, r0
   d6596:	468b      	mov	fp, r1
   d6598:	a804      	add	r0, sp, #16
   d659a:	4641      	mov	r1, r8
   d659c:	4616      	mov	r6, r2
   d659e:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d65a2:	9308      	str	r3, [sp, #32]
   d65a4:	9409      	str	r4, [sp, #36]	; 0x24
   d65a6:	f7ff fd87 	bl	d60b8 <_ZN6StringC1ERK9Printable>
   d65aa:	9b04      	ldr	r3, [sp, #16]
   d65ac:	9302      	str	r3, [sp, #8]
   d65ae:	ad08      	add	r5, sp, #32
   d65b0:	4b15      	ldr	r3, [pc, #84]	; (d6608 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d65b2:	4916      	ldr	r1, [pc, #88]	; (d660c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d65b4:	9300      	str	r3, [sp, #0]
   d65b6:	462a      	mov	r2, r5
   d65b8:	4623      	mov	r3, r4
   d65ba:	2001      	movs	r0, #1
   d65bc:	f8cd 900c 	str.w	r9, [sp, #12]
   d65c0:	9601      	str	r6, [sp, #4]
   d65c2:	f7fe fc75 	bl	d4eb0 <log_message>
	sockaddr_storage s = {};
   d65c6:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d65c8:	a804      	add	r0, sp, #16
   d65ca:	f7ff fc19 	bl	d5e00 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d65ce:	463a      	mov	r2, r7
   d65d0:	4621      	mov	r1, r4
   d65d2:	4628      	mov	r0, r5
   d65d4:	f000 fd3f 	bl	d7056 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d65d8:	462a      	mov	r2, r5
   d65da:	4649      	mov	r1, r9
   d65dc:	4640      	mov	r0, r8
   d65de:	f7ff ffab 	bl	d6538 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d65e2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d65e6:	b14b      	cbz	r3, d65fc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d65e8:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d65ec:	4623      	mov	r3, r4
   d65ee:	4632      	mov	r2, r6
   d65f0:	4659      	mov	r1, fp
   d65f2:	f8da 0014 	ldr.w	r0, [sl, #20]
   d65f6:	f7fe fbc3 	bl	d4d80 <sock_sendto>
   d65fa:	e001      	b.n	d6600 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d65fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d6600:	b011      	add	sp, #68	; 0x44
   d6602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6606:	bf00      	nop
   d6608:	000d756a 	.word	0x000d756a
   d660c:	000d74b1 	.word	0x000d74b1

000d6610 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6610:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6612:	b091      	sub	sp, #68	; 0x44
   d6614:	460c      	mov	r4, r1
   d6616:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d6618:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d661a:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d661c:	a809      	add	r0, sp, #36	; 0x24
   d661e:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6620:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d6622:	f000 fd18 	bl	d7056 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d6626:	aa09      	add	r2, sp, #36	; 0x24
   d6628:	2100      	movs	r1, #0
   d662a:	4620      	mov	r0, r4
   d662c:	f7ff ff84 	bl	d6538 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d6630:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d6634:	2b02      	cmp	r3, #2
   d6636:	d12e      	bne.n	d6696 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d6638:	2300      	movs	r3, #0
   d663a:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d663c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d663e:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d6640:	b1dd      	cbz	r5, d667a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d6642:	a902      	add	r1, sp, #8
   d6644:	4628      	mov	r0, r5
   d6646:	f7fe fb2b 	bl	d4ca0 <if_get_by_index>
   d664a:	b9b0      	cbnz	r0, d667a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d664c:	a910      	add	r1, sp, #64	; 0x40
   d664e:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d6652:	9802      	ldr	r0, [sp, #8]
   d6654:	f7fe fb2c 	bl	d4cb0 <if_get_addrs>
   d6658:	b960      	cbnz	r0, d6674 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d665a:	9b03      	ldr	r3, [sp, #12]
   d665c:	b153      	cbz	r3, d6674 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d665e:	68da      	ldr	r2, [r3, #12]
   d6660:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d6662:	7851      	ldrb	r1, [r2, #1]
   d6664:	2902      	cmp	r1, #2
   d6666:	d103      	bne.n	d6670 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d6668:	6852      	ldr	r2, [r2, #4]
   d666a:	b10a      	cbz	r2, d6670 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d666c:	9205      	str	r2, [sp, #20]
   d666e:	e001      	b.n	d6674 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	e7f3      	b.n	d665c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d6674:	9803      	ldr	r0, [sp, #12]
   d6676:	f7fe fb23 	bl	d4cc0 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d667a:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d667c:	f04f 0308 	mov.w	r3, #8
   d6680:	9300      	str	r3, [sp, #0]
   d6682:	bf18      	it	ne
   d6684:	2203      	movne	r2, #3
   d6686:	ab04      	add	r3, sp, #16
   d6688:	bf08      	it	eq
   d668a:	2204      	moveq	r2, #4
   d668c:	2100      	movs	r1, #0
   d668e:	4630      	mov	r0, r6
   d6690:	f7fe fb5e 	bl	d4d50 <sock_setsockopt>
   d6694:	e01e      	b.n	d66d4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d6696:	2b0a      	cmp	r3, #10
   d6698:	d11a      	bne.n	d66d0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d669a:	ac04      	add	r4, sp, #16
   d669c:	2214      	movs	r2, #20
   d669e:	2100      	movs	r1, #0
   d66a0:	4620      	mov	r0, r4
   d66a2:	f000 fcd8 	bl	d7056 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d66a6:	ab0b      	add	r3, sp, #44	; 0x2c
   d66a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d66aa:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d66ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d66b0:	f04f 0314 	mov.w	r3, #20
   d66b4:	9300      	str	r3, [sp, #0]
   d66b6:	bf18      	it	ne
   d66b8:	220c      	movne	r2, #12
   d66ba:	4623      	mov	r3, r4
   d66bc:	bf08      	it	eq
   d66be:	220d      	moveq	r2, #13
   d66c0:	2129      	movs	r1, #41	; 0x29
   d66c2:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d66c4:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d66c6:	f7fe fb43 	bl	d4d50 <sock_setsockopt>
   d66ca:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d66ce:	e001      	b.n	d66d4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d66d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d66d4:	b011      	add	sp, #68	; 0x44
   d66d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66d8 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d66d8:	b538      	push	{r3, r4, r5, lr}
   d66da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66de:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d66e0:	4b0b      	ldr	r3, [pc, #44]	; (d6710 <_ZN3UDPC1Ev+0x38>)
   d66e2:	f103 0208 	add.w	r2, r3, #8
   d66e6:	336c      	adds	r3, #108	; 0x6c
   d66e8:	2500      	movs	r5, #0
   d66ea:	6103      	str	r3, [r0, #16]
   d66ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d66f0:	4604      	mov	r4, r0
   d66f2:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d66f4:	6002      	str	r2, [r0, #0]
   d66f6:	6143      	str	r3, [r0, #20]
   d66f8:	301c      	adds	r0, #28
   d66fa:	f7ff f855 	bl	d57a8 <_ZN9IPAddressC1Ev>
   d66fe:	f44f 7300 	mov.w	r3, #512	; 0x200
   d6702:	86e5      	strh	r5, [r4, #54]	; 0x36
   d6704:	8725      	strh	r5, [r4, #56]	; 0x38
   d6706:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6708:	6423      	str	r3, [r4, #64]	; 0x40
   d670a:	6465      	str	r5, [r4, #68]	; 0x44
}
   d670c:	4620      	mov	r0, r4
   d670e:	bd38      	pop	{r3, r4, r5, pc}
   d6710:	000d7598 	.word	0x000d7598

000d6714 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6714:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6716:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d671a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d671c:	b11b      	cbz	r3, d6726 <_ZN3UDP13releaseBufferEv+0x12>
   d671e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6720:	b108      	cbz	r0, d6726 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d6722:	f7fd fcbc 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d6726:	2300      	movs	r3, #0
   d6728:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d672a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d672e:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6730:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6732:	8723      	strh	r3, [r4, #56]	; 0x38
   d6734:	bd10      	pop	{r4, pc}

000d6736 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d6736:	b570      	push	{r4, r5, r6, lr}
   d6738:	4604      	mov	r4, r0
   d673a:	4616      	mov	r6, r2
   d673c:	460d      	mov	r5, r1
    releaseBuffer();
   d673e:	f7ff ffe9 	bl	d6714 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6742:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6744:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d6746:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d6748:	b93e      	cbnz	r6, d675a <_ZN3UDP9setBufferEjPh+0x24>
   d674a:	b135      	cbz	r5, d675a <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d674c:	4628      	mov	r0, r5
   d674e:	f7fd fca4 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d6752:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6754:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6756:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d675a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d675c:	b103      	cbz	r3, d6760 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d675e:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6760:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6762:	3000      	adds	r0, #0
   d6764:	bf18      	it	ne
   d6766:	2001      	movne	r0, #1
   d6768:	bd70      	pop	{r4, r5, r6, pc}

000d676a <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d676a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d676c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d676e:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d6770:	b91a      	cbnz	r2, d677a <_ZN3UDP11parsePacketEm+0x10>
   d6772:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6774:	b109      	cbz	r1, d677a <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d6776:	f7ff ffde 	bl	d6736 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d677a:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d677c:	2300      	movs	r3, #0
   d677e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6780:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6782:	b141      	cbz	r1, d6796 <_ZN3UDP11parsePacketEm+0x2c>
   d6784:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6786:	b132      	cbz	r2, d6796 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d6788:	6820      	ldr	r0, [r4, #0]
   d678a:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d678c:	4620      	mov	r0, r4
   d678e:	47a8      	blx	r5
        if (result > 0) {
   d6790:	2800      	cmp	r0, #0
            _total = result;
   d6792:	bfc8      	it	gt
   d6794:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6796:	6823      	ldr	r3, [r4, #0]
   d6798:	4620      	mov	r0, r4
   d679a:	691b      	ldr	r3, [r3, #16]
}
   d679c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d67a0:	4718      	bx	r3
	...

000d67a4 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d67a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67a6:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d67a8:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d67aa:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d67ac:	2600      	movs	r6, #0
   d67ae:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d67b0:	4617      	mov	r7, r2
   d67b2:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d67b4:	9308      	str	r3, [sp, #32]
   d67b6:	9609      	str	r6, [sp, #36]	; 0x24
   d67b8:	f7ff fc7e 	bl	d60b8 <_ZN6StringC1ERK9Printable>
   d67bc:	9b04      	ldr	r3, [sp, #16]
   d67be:	9301      	str	r3, [sp, #4]
   d67c0:	4b10      	ldr	r3, [pc, #64]	; (d6804 <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d67c2:	9300      	str	r3, [sp, #0]
   d67c4:	aa08      	add	r2, sp, #32
   d67c6:	4633      	mov	r3, r6
   d67c8:	490f      	ldr	r1, [pc, #60]	; (d6808 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d67ca:	9702      	str	r7, [sp, #8]
   d67cc:	2001      	movs	r0, #1
   d67ce:	f7fe fb6f 	bl	d4eb0 <log_message>
   d67d2:	a804      	add	r0, sp, #16
   d67d4:	f7ff fb14 	bl	d5e00 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d67d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d67da:	b922      	cbnz	r2, d67e6 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d67dc:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d67de:	b111      	cbz	r1, d67e6 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d67e0:	4628      	mov	r0, r5
   d67e2:	f7ff ffa8 	bl	d6736 <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d67e6:	3404      	adds	r4, #4
   d67e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d67ea:	f105 0620 	add.w	r6, r5, #32
   d67ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d67f0:	6823      	ldr	r3, [r4, #0]
   d67f2:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d67f4:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d67f6:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d67f8:	2300      	movs	r3, #0
   d67fa:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d67fc:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d67fe:	b011      	add	sp, #68	; 0x44
   d6800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6802:	bf00      	nop
   d6804:	000d7584 	.word	0x000d7584
   d6808:	000d74b1 	.word	0x000d74b1

000d680c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d680c:	b510      	push	{r4, lr}
   d680e:	4b07      	ldr	r3, [pc, #28]	; (d682c <_ZN3UDPD1Ev+0x20>)
   d6810:	f103 0208 	add.w	r2, r3, #8
   d6814:	336c      	adds	r3, #108	; 0x6c
   d6816:	4604      	mov	r4, r0
   d6818:	6002      	str	r2, [r0, #0]
   d681a:	6103      	str	r3, [r0, #16]
   d681c:	f7ff fd15 	bl	d624a <_ZN3UDP4stopEv>
   d6820:	4620      	mov	r0, r4
   d6822:	f7ff ff77 	bl	d6714 <_ZN3UDP13releaseBufferEv>
   d6826:	4620      	mov	r0, r4
   d6828:	bd10      	pop	{r4, pc}
   d682a:	bf00      	nop
   d682c:	000d7598 	.word	0x000d7598

000d6830 <_ZN3UDPD0Ev>:
   d6830:	b510      	push	{r4, lr}
   d6832:	4604      	mov	r4, r0
   d6834:	f7ff ffea 	bl	d680c <_ZN3UDPD1Ev>
   d6838:	4620      	mov	r0, r4
   d683a:	f7fd fc30 	bl	d409e <_ZdlPv>
   d683e:	4620      	mov	r0, r4
   d6840:	bd10      	pop	{r4, pc}

000d6842 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d6842:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d6844:	6940      	ldr	r0, [r0, #20]
   d6846:	2800      	cmp	r0, #0
   d6848:	db04      	blt.n	d6854 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d684a:	2301      	movs	r3, #1
   d684c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d6850:	f7ff bede 	b.w	d6610 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d6854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6858:	4770      	bx	lr

000d685a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d685a:	4770      	bx	lr

000d685c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d685c:	7441      	strb	r1, [r0, #17]
   d685e:	4770      	bx	lr

000d6860 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d6860:	7c00      	ldrb	r0, [r0, #16]
   d6862:	f7fe bae5 	b.w	d4e30 <HAL_USART_Available_Data_For_Write>

000d6866 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6866:	7c00      	ldrb	r0, [r0, #16]
   d6868:	f7fe baba 	b.w	d4de0 <HAL_USART_Available_Data>

000d686c <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d686c:	7c00      	ldrb	r0, [r0, #16]
   d686e:	f7fe bac7 	b.w	d4e00 <HAL_USART_Peek_Data>

000d6872 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6872:	7c00      	ldrb	r0, [r0, #16]
   d6874:	f7fe babc 	b.w	d4df0 <HAL_USART_Read_Data>

000d6878 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6878:	7c00      	ldrb	r0, [r0, #16]
   d687a:	f7fe bac9 	b.w	d4e10 <HAL_USART_Flush_Data>

000d687e <_ZN11USARTSerialD0Ev>:
   d687e:	b510      	push	{r4, lr}
   d6880:	4604      	mov	r4, r0
   d6882:	f7fd fc0c 	bl	d409e <_ZdlPv>
   d6886:	4620      	mov	r0, r4
   d6888:	bd10      	pop	{r4, pc}

000d688a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d688a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d688c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d688e:	4604      	mov	r4, r0
   d6890:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6892:	b925      	cbnz	r5, d689e <_ZN11USARTSerial5writeEh+0x14>
   d6894:	7c00      	ldrb	r0, [r0, #16]
   d6896:	f7fe facb 	bl	d4e30 <HAL_USART_Available_Data_For_Write>
   d689a:	2800      	cmp	r0, #0
   d689c:	dd05      	ble.n	d68aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d689e:	4631      	mov	r1, r6
   d68a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d68a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d68a6:	f7fe ba93 	b.w	d4dd0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d68aa:	4628      	mov	r0, r5
   d68ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d68b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d68b0:	b510      	push	{r4, lr}
   d68b2:	4604      	mov	r4, r0
   d68b4:	4608      	mov	r0, r1
   d68b6:	4611      	mov	r1, r2
   d68b8:	2200      	movs	r2, #0
   d68ba:	6062      	str	r2, [r4, #4]
   d68bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d68c0:	60a2      	str	r2, [r4, #8]
   d68c2:	4a05      	ldr	r2, [pc, #20]	; (d68d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d68c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d68c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d68c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d68ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d68cc:	461a      	mov	r2, r3
   d68ce:	f7fe fa77 	bl	d4dc0 <HAL_USART_Init>
}
   d68d2:	4620      	mov	r0, r4
   d68d4:	bd10      	pop	{r4, pc}
   d68d6:	bf00      	nop
   d68d8:	000d7610 	.word	0x000d7610

000d68dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d68dc:	7c00      	ldrb	r0, [r0, #16]
   d68de:	f7fe ba9f 	b.w	d4e20 <HAL_USART_Is_Enabled>
	...

000d68e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d68e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d68e6:	4d0c      	ldr	r5, [pc, #48]	; (d6918 <_Z22__fetch_global_Serial1v+0x34>)
   d68e8:	6829      	ldr	r1, [r5, #0]
   d68ea:	f011 0401 	ands.w	r4, r1, #1
   d68ee:	d111      	bne.n	d6914 <_Z22__fetch_global_Serial1v+0x30>
   d68f0:	4628      	mov	r0, r5
   d68f2:	f7fd fbd8 	bl	d40a6 <__cxa_guard_acquire>
   d68f6:	b168      	cbz	r0, d6914 <_Z22__fetch_global_Serial1v+0x30>
   d68f8:	4a08      	ldr	r2, [pc, #32]	; (d691c <_Z22__fetch_global_Serial1v+0x38>)
   d68fa:	4b09      	ldr	r3, [pc, #36]	; (d6920 <_Z22__fetch_global_Serial1v+0x3c>)
   d68fc:	4809      	ldr	r0, [pc, #36]	; (d6924 <_Z22__fetch_global_Serial1v+0x40>)
   d68fe:	4621      	mov	r1, r4
   d6900:	f7ff ffd6 	bl	d68b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6904:	4628      	mov	r0, r5
   d6906:	f7fd fbd3 	bl	d40b0 <__cxa_guard_release>
   d690a:	4a07      	ldr	r2, [pc, #28]	; (d6928 <_Z22__fetch_global_Serial1v+0x44>)
   d690c:	4907      	ldr	r1, [pc, #28]	; (d692c <_Z22__fetch_global_Serial1v+0x48>)
   d690e:	4805      	ldr	r0, [pc, #20]	; (d6924 <_Z22__fetch_global_Serial1v+0x40>)
   d6910:	f000 fa20 	bl	d6d54 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6914:	4803      	ldr	r0, [pc, #12]	; (d6924 <_Z22__fetch_global_Serial1v+0x40>)
   d6916:	bd38      	pop	{r3, r4, r5, pc}
   d6918:	2003e670 	.word	0x2003e670
   d691c:	2003e674 	.word	0x2003e674
   d6920:	2003e5ec 	.word	0x2003e5ec
   d6924:	2003e5d8 	.word	0x2003e5d8
   d6928:	2003e3a8 	.word	0x2003e3a8
   d692c:	000d685b 	.word	0x000d685b

000d6930 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6930:	7441      	strb	r1, [r0, #17]
   d6932:	4770      	bx	lr

000d6934 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6934:	4770      	bx	lr

000d6936 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d6936:	2100      	movs	r1, #0
   d6938:	7c00      	ldrb	r0, [r0, #16]
   d693a:	f7fe baa1 	b.w	d4e80 <HAL_USB_USART_Receive_Data>

000d693e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d693e:	2101      	movs	r1, #1
   d6940:	7c00      	ldrb	r0, [r0, #16]
   d6942:	f7fe ba9d 	b.w	d4e80 <HAL_USB_USART_Receive_Data>

000d6946 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d6946:	7c00      	ldrb	r0, [r0, #16]
   d6948:	f7fe ba92 	b.w	d4e70 <HAL_USB_USART_Available_Data_For_Write>

000d694c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d694c:	7c00      	ldrb	r0, [r0, #16]
   d694e:	f7fe ba87 	b.w	d4e60 <HAL_USB_USART_Available_Data>

000d6952 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d6952:	b538      	push	{r3, r4, r5, lr}
   d6954:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6956:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d6958:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d695a:	f7fe fa89 	bl	d4e70 <HAL_USB_USART_Available_Data_For_Write>
   d695e:	2800      	cmp	r0, #0
   d6960:	dc01      	bgt.n	d6966 <_ZN9USBSerial5writeEh+0x14>
   d6962:	7c60      	ldrb	r0, [r4, #17]
   d6964:	b120      	cbz	r0, d6970 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d6966:	4629      	mov	r1, r5
   d6968:	7c20      	ldrb	r0, [r4, #16]
   d696a:	f7fe fa91 	bl	d4e90 <HAL_USB_USART_Send_Data>
    return 1;
   d696e:	2001      	movs	r0, #1
  }
  return 0;
}
   d6970:	bd38      	pop	{r3, r4, r5, pc}

000d6972 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6972:	7c00      	ldrb	r0, [r0, #16]
   d6974:	f7fe ba94 	b.w	d4ea0 <HAL_USB_USART_Flush_Data>

000d6978 <_ZN9USBSerialD0Ev>:
   d6978:	b510      	push	{r4, lr}
   d697a:	4604      	mov	r4, r0
   d697c:	f7fd fb8f 	bl	d409e <_ZdlPv>
   d6980:	4620      	mov	r0, r4
   d6982:	bd10      	pop	{r4, pc}

000d6984 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6984:	b510      	push	{r4, lr}
   d6986:	4604      	mov	r4, r0
   d6988:	2300      	movs	r3, #0
   d698a:	6063      	str	r3, [r4, #4]
   d698c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6990:	60a3      	str	r3, [r4, #8]
   d6992:	4b05      	ldr	r3, [pc, #20]	; (d69a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6994:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6996:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6998:	4608      	mov	r0, r1
{
  _serial = serial;
   d699a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d699c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d699e:	4611      	mov	r1, r2
   d69a0:	f7fe fa4e 	bl	d4e40 <HAL_USB_USART_Init>
}
   d69a4:	4620      	mov	r0, r4
   d69a6:	bd10      	pop	{r4, pc}
   d69a8:	000d7640 	.word	0x000d7640

000d69ac <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d69ac:	2200      	movs	r2, #0
   d69ae:	7c00      	ldrb	r0, [r0, #16]
   d69b0:	f7fe ba4e 	b.w	d4e50 <HAL_USB_USART_Begin>

000d69b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d69b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d69b6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d69b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d69ba:	2100      	movs	r1, #0
   d69bc:	f000 fb4b 	bl	d7056 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d69c0:	4620      	mov	r0, r4
   d69c2:	bd10      	pop	{r4, pc}

000d69c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d69c4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d69c6:	4d0e      	ldr	r5, [pc, #56]	; (d6a00 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d69c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d69ca:	a801      	add	r0, sp, #4
   d69cc:	f7ff fff2 	bl	d69b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d69d0:	6829      	ldr	r1, [r5, #0]
   d69d2:	f011 0401 	ands.w	r4, r1, #1
   d69d6:	d110      	bne.n	d69fa <_Z16_fetch_usbserialv+0x36>
   d69d8:	4628      	mov	r0, r5
   d69da:	f7fd fb64 	bl	d40a6 <__cxa_guard_acquire>
   d69de:	b160      	cbz	r0, d69fa <_Z16_fetch_usbserialv+0x36>
   d69e0:	aa01      	add	r2, sp, #4
   d69e2:	4621      	mov	r1, r4
   d69e4:	4807      	ldr	r0, [pc, #28]	; (d6a04 <_Z16_fetch_usbserialv+0x40>)
   d69e6:	f7ff ffcd 	bl	d6984 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d69ea:	4628      	mov	r0, r5
   d69ec:	f7fd fb60 	bl	d40b0 <__cxa_guard_release>
   d69f0:	4a05      	ldr	r2, [pc, #20]	; (d6a08 <_Z16_fetch_usbserialv+0x44>)
   d69f2:	4906      	ldr	r1, [pc, #24]	; (d6a0c <_Z16_fetch_usbserialv+0x48>)
   d69f4:	4803      	ldr	r0, [pc, #12]	; (d6a04 <_Z16_fetch_usbserialv+0x40>)
   d69f6:	f000 f9ad 	bl	d6d54 <__aeabi_atexit>
	return _usbserial;
}
   d69fa:	4802      	ldr	r0, [pc, #8]	; (d6a04 <_Z16_fetch_usbserialv+0x40>)
   d69fc:	b007      	add	sp, #28
   d69fe:	bd30      	pop	{r4, r5, pc}
   d6a00:	2003e6f8 	.word	0x2003e6f8
   d6a04:	2003e6fc 	.word	0x2003e6fc
   d6a08:	2003e3a8 	.word	0x2003e3a8
   d6a0c:	000d6935 	.word	0x000d6935

000d6a10 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6a10:	b510      	push	{r4, lr}
   d6a12:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6a14:	f000 fb55 	bl	d70c2 <strlen>
   d6a18:	3801      	subs	r0, #1
   d6a1a:	1823      	adds	r3, r4, r0
   d6a1c:	4620      	mov	r0, r4
	while(i<j){
   d6a1e:	4298      	cmp	r0, r3
   d6a20:	d206      	bcs.n	d6a30 <_Z11str_reversePc+0x20>
		c = *i;
   d6a22:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6a24:	7819      	ldrb	r1, [r3, #0]
   d6a26:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6a2a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6a2e:	e7f6      	b.n	d6a1e <_Z11str_reversePc+0xe>
   d6a30:	bd10      	pop	{r4, pc}

000d6a32 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d6a36:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d6a38:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6a3a:	4615      	mov	r5, r2
   d6a3c:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d6a3e:	bf34      	ite	cc
   d6a40:	4615      	movcc	r5, r2
   d6a42:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6a44:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d6a46:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d6a48:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d6a4a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d6a4e:	d107      	bne.n	d6a60 <ltoa+0x2e>
   d6a50:	4298      	cmp	r0, r3
   d6a52:	da05      	bge.n	d6a60 <ltoa+0x2e>
      {
            *head++ = '-';
   d6a54:	232d      	movs	r3, #45	; 0x2d
   d6a56:	f101 0801 	add.w	r8, r1, #1
   d6a5a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d6a5c:	4240      	negs	r0, r0
   d6a5e:	e001      	b.n	d6a64 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d6a60:	b1b0      	cbz	r0, d6a90 <ltoa+0x5e>
   d6a62:	46a0      	mov	r8, r4
   d6a64:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d6a68:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d6a6a:	462a      	mov	r2, r5
   d6a6c:	4601      	mov	r1, r0
   d6a6e:	a801      	add	r0, sp, #4
   d6a70:	f000 fad2 	bl	d7018 <ldiv>
   d6a74:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d6a76:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d6a78:	2b09      	cmp	r3, #9
   d6a7a:	bfcc      	ite	gt
   d6a7c:	2237      	movgt	r2, #55	; 0x37
   d6a7e:	2230      	movle	r2, #48	; 0x30
   d6a80:	fa52 f383 	uxtab	r3, r2, r3
   d6a84:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6a88:	3701      	adds	r7, #1
   d6a8a:	2800      	cmp	r0, #0
   d6a8c:	d1ed      	bne.n	d6a6a <ltoa+0x38>
   d6a8e:	e006      	b.n	d6a9e <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d6a90:	2330      	movs	r3, #48	; 0x30
   d6a92:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6a96:	46a0      	mov	r8, r4
   d6a98:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d6a9c:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d6a9e:	463a      	mov	r2, r7
   d6aa0:	1c71      	adds	r1, r6, #1
   d6aa2:	4640      	mov	r0, r8
   d6aa4:	f000 facc 	bl	d7040 <memcpy>
      return str;
}
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	b00c      	add	sp, #48	; 0x30
   d6aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ab0 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6ab0:	b570      	push	{r4, r5, r6, lr}
   d6ab2:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6ab4:	1e91      	subs	r1, r2, #2
   d6ab6:	2922      	cmp	r1, #34	; 0x22
   d6ab8:	d820      	bhi.n	d6afc <ultoa+0x4c>
   d6aba:	4625      	mov	r5, r4
   d6abc:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6abe:	b910      	cbnz	r0, d6ac6 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6ac0:	4423      	add	r3, r4
            *ptr++ = '0';
   d6ac2:	2230      	movs	r2, #48	; 0x30
   d6ac4:	e00e      	b.n	d6ae4 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6ac6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6aca:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6ace:	b2c1      	uxtb	r1, r0
   d6ad0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6ad4:	2809      	cmp	r0, #9
                *ptr += '0';
   d6ad6:	bf94      	ite	ls
   d6ad8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6ada:	3157      	addhi	r1, #87	; 0x57
   d6adc:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6ae0:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6ae2:	e7eb      	b.n	d6abc <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6ae4:	4299      	cmp	r1, r3
   d6ae6:	d202      	bcs.n	d6aee <ultoa+0x3e>
            *ptr++ = '0';
   d6ae8:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6aec:	e7fa      	b.n	d6ae4 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6aee:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6af0:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d6af2:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d6af4:	f7ff ff8c 	bl	d6a10 <_Z11str_reversePc>
	return buffer;
   d6af8:	4620      	mov	r0, r4
   d6afa:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6afc:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6afe:	bd70      	pop	{r4, r5, r6, pc}

000d6b00 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6b00:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6b02:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6b04:	460c      	mov	r4, r1
   d6b06:	4615      	mov	r5, r2
	if(a<0){
   d6b08:	da0b      	bge.n	d6b22 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6b0e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6b12:	bf14      	ite	ne
   d6b14:	4258      	negne	r0, r3
   d6b16:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6b18:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6b1a:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d6b1c:	462a      	mov	r2, r5
   d6b1e:	4419      	add	r1, r3
   d6b20:	e000      	b.n	d6b24 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d6b22:	2301      	movs	r3, #1
   d6b24:	f7ff ffc4 	bl	d6ab0 <ultoa>
	}
	return buffer;
}
   d6b28:	4620      	mov	r0, r4
   d6b2a:	bd38      	pop	{r3, r4, r5, pc}

000d6b2c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6b2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6b2e:	4b0c      	ldr	r3, [pc, #48]	; (d6b60 <serialEventRun+0x34>)
   d6b30:	b133      	cbz	r3, d6b40 <serialEventRun+0x14>
   d6b32:	f7ff ff47 	bl	d69c4 <_Z16_fetch_usbserialv>
   d6b36:	6803      	ldr	r3, [r0, #0]
   d6b38:	691b      	ldr	r3, [r3, #16]
   d6b3a:	4798      	blx	r3
   d6b3c:	2800      	cmp	r0, #0
   d6b3e:	dc09      	bgt.n	d6b54 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6b40:	4b08      	ldr	r3, [pc, #32]	; (d6b64 <serialEventRun+0x38>)
   d6b42:	b163      	cbz	r3, d6b5e <serialEventRun+0x32>
   d6b44:	f7ff fece 	bl	d68e4 <_Z22__fetch_global_Serial1v>
   d6b48:	6803      	ldr	r3, [r0, #0]
   d6b4a:	691b      	ldr	r3, [r3, #16]
   d6b4c:	4798      	blx	r3
   d6b4e:	2800      	cmp	r0, #0
   d6b50:	dc03      	bgt.n	d6b5a <serialEventRun+0x2e>
   d6b52:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6b54:	f3af 8000 	nop.w
   d6b58:	e7f2      	b.n	d6b40 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6b5a:	f3af 8000 	nop.w
   d6b5e:	bd08      	pop	{r3, pc}
	...

000d6b68 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6b68:	b508      	push	{r3, lr}
	serialEventRun();
   d6b6a:	f7ff ffdf 	bl	d6b2c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6b6e:	f7fe f80f 	bl	d4b90 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6b72:	4b01      	ldr	r3, [pc, #4]	; (d6b78 <_post_loop+0x10>)
   d6b74:	6018      	str	r0, [r3, #0]
   d6b76:	bd08      	pop	{r3, pc}
   d6b78:	2003e714 	.word	0x2003e714

000d6b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6b7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b7e:	2300      	movs	r3, #0
   d6b80:	9300      	str	r3, [sp, #0]
   d6b82:	461a      	mov	r2, r3
   d6b84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b88:	f7fe f9c4 	bl	d4f14 <system_ctrl_set_result>
}
   d6b8c:	b003      	add	sp, #12
   d6b8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b94 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6b94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6b96:	8843      	ldrh	r3, [r0, #2]
   d6b98:	2b0a      	cmp	r3, #10
   d6b9a:	d008      	beq.n	d6bae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b9c:	2b50      	cmp	r3, #80	; 0x50
   d6b9e:	d109      	bne.n	d6bb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6ba0:	4b09      	ldr	r3, [pc, #36]	; (d6bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6ba2:	681b      	ldr	r3, [r3, #0]
   d6ba4:	b13b      	cbz	r3, d6bb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6ba6:	b003      	add	sp, #12
   d6ba8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6bac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6bae:	f7ff ffe5 	bl	d6b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6bb2:	e006      	b.n	d6bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6bb4:	2300      	movs	r3, #0
   d6bb6:	9300      	str	r3, [sp, #0]
   d6bb8:	461a      	mov	r2, r3
   d6bba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6bbe:	f7fe f9a9 	bl	d4f14 <system_ctrl_set_result>
        break;
    }
}
   d6bc2:	b003      	add	sp, #12
   d6bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6bc8:	2003e710 	.word	0x2003e710

000d6bcc <module_user_init_hook>:

void module_user_init_hook()
{
   d6bcc:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6bce:	2100      	movs	r1, #0
   d6bd0:	4804      	ldr	r0, [pc, #16]	; (d6be4 <module_user_init_hook+0x18>)
   d6bd2:	f7fe f9c1 	bl	d4f58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bd6:	2100      	movs	r1, #0
   d6bd8:	4803      	ldr	r0, [pc, #12]	; (d6be8 <module_user_init_hook+0x1c>)
}
   d6bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bde:	f7fe b98f 	b.w	d4f00 <system_ctrl_set_app_request_handler>
   d6be2:	bf00      	nop
   d6be4:	00000000 	.word	0x00000000
   d6be8:	000d6b95 	.word	0x000d6b95

000d6bec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6bec:	b510      	push	{r4, lr}
   d6bee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6bf0:	480f      	ldr	r0, [pc, #60]	; (d6c30 <pinAvailable+0x44>)
   d6bf2:	f7ff f8fb 	bl	d5dec <_ZN8SPIClass9isEnabledEv>
   d6bf6:	b128      	cbz	r0, d6c04 <pinAvailable+0x18>
   d6bf8:	f1a4 030b 	sub.w	r3, r4, #11
   d6bfc:	2b02      	cmp	r3, #2
   d6bfe:	d801      	bhi.n	d6c04 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6c00:	2000      	movs	r0, #0
   d6c02:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6c04:	f000 f864 	bl	d6cd0 <_Z19__fetch_global_Wirev>
   d6c08:	f7fe fd90 	bl	d572c <_ZN7TwoWire9isEnabledEv>
   d6c0c:	b108      	cbz	r0, d6c12 <pinAvailable+0x26>
   d6c0e:	2c01      	cmp	r4, #1
   d6c10:	d9f6      	bls.n	d6c00 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6c12:	f7ff fe67 	bl	d68e4 <_Z22__fetch_global_Serial1v>
   d6c16:	f7ff fe61 	bl	d68dc <_ZN11USARTSerial9isEnabledEv>
   d6c1a:	b118      	cbz	r0, d6c24 <pinAvailable+0x38>
   d6c1c:	f1a4 0309 	sub.w	r3, r4, #9
   d6c20:	2b01      	cmp	r3, #1
   d6c22:	d9ed      	bls.n	d6c00 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6c24:	2c1e      	cmp	r4, #30
   d6c26:	bf8c      	ite	hi
   d6c28:	2000      	movhi	r0, #0
   d6c2a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6c2c:	bd10      	pop	{r4, pc}
   d6c2e:	bf00      	nop
   d6c30:	2003e730 	.word	0x2003e730

000d6c34 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c34:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6c36:	b538      	push	{r3, r4, r5, lr}
   d6c38:	4604      	mov	r4, r0
   d6c3a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c3c:	d80a      	bhi.n	d6c54 <pinMode+0x20>
   d6c3e:	29ff      	cmp	r1, #255	; 0xff
   d6c40:	d008      	beq.n	d6c54 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c42:	f7ff ffd3 	bl	d6bec <pinAvailable>
   d6c46:	b128      	cbz	r0, d6c54 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c48:	4629      	mov	r1, r5
   d6c4a:	4620      	mov	r0, r4
}
   d6c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c50:	f7fd bfb6 	b.w	d4bc0 <HAL_Pin_Mode>
   d6c54:	bd38      	pop	{r3, r4, r5, pc}

000d6c56 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6c56:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6c58:	b510      	push	{r4, lr}
   d6c5a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6c5c:	bf9c      	itt	ls
   d6c5e:	340e      	addls	r4, #14
   d6c60:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c62:	4620      	mov	r0, r4
   d6c64:	f7ff ffc2 	bl	d6bec <pinAvailable>
   d6c68:	b150      	cbz	r0, d6c80 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6c6a:	2103      	movs	r1, #3
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	f7fd ff9f 	bl	d4bb0 <HAL_Validate_Pin_Function>
   d6c72:	2803      	cmp	r0, #3
   d6c74:	d104      	bne.n	d6c80 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6c76:	4620      	mov	r0, r4
}
   d6c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6c7c:	f7fd bfb8 	b.w	d4bf0 <HAL_ADC_Read>
}
   d6c80:	2000      	movs	r0, #0
   d6c82:	bd10      	pop	{r4, pc}

000d6c84 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6c84:	b538      	push	{r3, r4, r5, lr}
   d6c86:	4604      	mov	r4, r0
   d6c88:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6c8a:	f7ff ffaf 	bl	d6bec <pinAvailable>
   d6c8e:	b1f0      	cbz	r0, d6cce <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6c90:	2104      	movs	r1, #4
   d6c92:	4620      	mov	r0, r4
   d6c94:	f7fd ff8c 	bl	d4bb0 <HAL_Validate_Pin_Function>
   d6c98:	2804      	cmp	r0, #4
   d6c9a:	d105      	bne.n	d6ca8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6c9c:	b2a9      	uxth	r1, r5
   d6c9e:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d6ca4:	f7fd bf9c 	b.w	d4be0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6ca8:	2102      	movs	r1, #2
   d6caa:	4620      	mov	r0, r4
   d6cac:	f7fd ff80 	bl	d4bb0 <HAL_Validate_Pin_Function>
   d6cb0:	2802      	cmp	r0, #2
   d6cb2:	d10c      	bne.n	d6cce <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	f7fd ff8b 	bl	d4bd0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6cba:	2801      	cmp	r0, #1
   d6cbc:	d001      	beq.n	d6cc2 <_Z11analogWritetm+0x3e>
   d6cbe:	2804      	cmp	r0, #4
   d6cc0:	d105      	bne.n	d6cce <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6cc2:	4629      	mov	r1, r5
   d6cc4:	4620      	mov	r0, r4
    }
}
   d6cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6cca:	f7fd bf99 	b.w	d4c00 <HAL_PWM_Write_Ext>
   d6cce:	bd38      	pop	{r3, r4, r5, pc}

000d6cd0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6cd0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6cd2:	4d0b      	ldr	r5, [pc, #44]	; (d6d00 <_Z19__fetch_global_Wirev+0x30>)
   d6cd4:	6829      	ldr	r1, [r5, #0]
   d6cd6:	f011 0401 	ands.w	r4, r1, #1
   d6cda:	d10f      	bne.n	d6cfc <_Z19__fetch_global_Wirev+0x2c>
   d6cdc:	4628      	mov	r0, r5
   d6cde:	f7fd f9e2 	bl	d40a6 <__cxa_guard_acquire>
   d6ce2:	b158      	cbz	r0, d6cfc <_Z19__fetch_global_Wirev+0x2c>
   d6ce4:	4621      	mov	r1, r4
   d6ce6:	4807      	ldr	r0, [pc, #28]	; (d6d04 <_Z19__fetch_global_Wirev+0x34>)
   d6ce8:	f7fe fd0e 	bl	d5708 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6cec:	4628      	mov	r0, r5
   d6cee:	f7fd f9df 	bl	d40b0 <__cxa_guard_release>
   d6cf2:	4a05      	ldr	r2, [pc, #20]	; (d6d08 <_Z19__fetch_global_Wirev+0x38>)
   d6cf4:	4905      	ldr	r1, [pc, #20]	; (d6d0c <_Z19__fetch_global_Wirev+0x3c>)
   d6cf6:	4803      	ldr	r0, [pc, #12]	; (d6d04 <_Z19__fetch_global_Wirev+0x34>)
   d6cf8:	f000 f82c 	bl	d6d54 <__aeabi_atexit>
	return wire;
}
   d6cfc:	4801      	ldr	r0, [pc, #4]	; (d6d04 <_Z19__fetch_global_Wirev+0x34>)
   d6cfe:	bd38      	pop	{r3, r4, r5, pc}
   d6d00:	2003e718 	.word	0x2003e718
   d6d04:	2003e71c 	.word	0x2003e71c
   d6d08:	2003e3a8 	.word	0x2003e3a8
   d6d0c:	000d56b1 	.word	0x000d56b1

000d6d10 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d10:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6d12:	4c0c      	ldr	r4, [pc, #48]	; (d6d44 <_GLOBAL__sub_I_SPI+0x34>)
   d6d14:	4e0c      	ldr	r6, [pc, #48]	; (d6d48 <_GLOBAL__sub_I_SPI+0x38>)
   d6d16:	4d0d      	ldr	r5, [pc, #52]	; (d6d4c <_GLOBAL__sub_I_SPI+0x3c>)
   d6d18:	2100      	movs	r1, #0
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	f7ff f852 	bl	d5dc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d20:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d22:	4c0b      	ldr	r4, [pc, #44]	; (d6d50 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6d24:	4632      	mov	r2, r6
   d6d26:	4629      	mov	r1, r5
   d6d28:	f000 f814 	bl	d6d54 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6d2c:	2101      	movs	r1, #1
   d6d2e:	4620      	mov	r0, r4
   d6d30:	f7ff f848 	bl	d5dc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d34:	4632      	mov	r2, r6
   d6d36:	4629      	mov	r1, r5
   d6d38:	4620      	mov	r0, r4
   d6d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6d3e:	f000 b809 	b.w	d6d54 <__aeabi_atexit>
   d6d42:	bf00      	nop
   d6d44:	2003e730 	.word	0x2003e730
   d6d48:	2003e3a8 	.word	0x2003e3a8
   d6d4c:	000d5db5 	.word	0x000d5db5
   d6d50:	2003e740 	.word	0x2003e740

000d6d54 <__aeabi_atexit>:
   d6d54:	460b      	mov	r3, r1
   d6d56:	4601      	mov	r1, r0
   d6d58:	4618      	mov	r0, r3
   d6d5a:	f000 b94f 	b.w	d6ffc <__cxa_atexit>

000d6d5e <_ZSt25__throw_bad_function_callv>:
   d6d5e:	b508      	push	{r3, lr}
   d6d60:	f7fe f972 	bl	d5048 <abort>

000d6d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6d64:	4b24      	ldr	r3, [pc, #144]	; (d6df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6d66:	681a      	ldr	r2, [r3, #0]
   d6d68:	07d0      	lsls	r0, r2, #31
   d6d6a:	bf5c      	itt	pl
   d6d6c:	2201      	movpl	r2, #1
   d6d6e:	601a      	strpl	r2, [r3, #0]
   d6d70:	4b22      	ldr	r3, [pc, #136]	; (d6dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6d72:	681a      	ldr	r2, [r3, #0]
   d6d74:	07d1      	lsls	r1, r2, #31
   d6d76:	bf5c      	itt	pl
   d6d78:	2201      	movpl	r2, #1
   d6d7a:	601a      	strpl	r2, [r3, #0]
   d6d7c:	4b20      	ldr	r3, [pc, #128]	; (d6e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6d7e:	681a      	ldr	r2, [r3, #0]
   d6d80:	07d2      	lsls	r2, r2, #31
   d6d82:	bf5c      	itt	pl
   d6d84:	2201      	movpl	r2, #1
   d6d86:	601a      	strpl	r2, [r3, #0]
   d6d88:	4b1e      	ldr	r3, [pc, #120]	; (d6e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6d8a:	681a      	ldr	r2, [r3, #0]
   d6d8c:	07d0      	lsls	r0, r2, #31
   d6d8e:	bf5c      	itt	pl
   d6d90:	2201      	movpl	r2, #1
   d6d92:	601a      	strpl	r2, [r3, #0]
   d6d94:	4b1c      	ldr	r3, [pc, #112]	; (d6e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6d96:	681a      	ldr	r2, [r3, #0]
   d6d98:	07d1      	lsls	r1, r2, #31
   d6d9a:	bf5c      	itt	pl
   d6d9c:	2201      	movpl	r2, #1
   d6d9e:	601a      	strpl	r2, [r3, #0]
   d6da0:	4b1a      	ldr	r3, [pc, #104]	; (d6e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6da2:	681a      	ldr	r2, [r3, #0]
   d6da4:	07d2      	lsls	r2, r2, #31
   d6da6:	bf5c      	itt	pl
   d6da8:	2201      	movpl	r2, #1
   d6daa:	601a      	strpl	r2, [r3, #0]
   d6dac:	4b18      	ldr	r3, [pc, #96]	; (d6e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6dae:	681a      	ldr	r2, [r3, #0]
   d6db0:	07d0      	lsls	r0, r2, #31
   d6db2:	bf5c      	itt	pl
   d6db4:	2201      	movpl	r2, #1
   d6db6:	601a      	strpl	r2, [r3, #0]
   d6db8:	4b16      	ldr	r3, [pc, #88]	; (d6e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6dba:	681a      	ldr	r2, [r3, #0]
   d6dbc:	07d1      	lsls	r1, r2, #31
   d6dbe:	bf5c      	itt	pl
   d6dc0:	2201      	movpl	r2, #1
   d6dc2:	601a      	strpl	r2, [r3, #0]
   d6dc4:	4b14      	ldr	r3, [pc, #80]	; (d6e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6dc6:	681a      	ldr	r2, [r3, #0]
   d6dc8:	07d2      	lsls	r2, r2, #31
   d6dca:	bf5c      	itt	pl
   d6dcc:	2201      	movpl	r2, #1
   d6dce:	601a      	strpl	r2, [r3, #0]
   d6dd0:	4b12      	ldr	r3, [pc, #72]	; (d6e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6dd2:	681a      	ldr	r2, [r3, #0]
   d6dd4:	07d0      	lsls	r0, r2, #31
   d6dd6:	bf5c      	itt	pl
   d6dd8:	2201      	movpl	r2, #1
   d6dda:	601a      	strpl	r2, [r3, #0]
   d6ddc:	4b10      	ldr	r3, [pc, #64]	; (d6e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6dde:	681a      	ldr	r2, [r3, #0]
   d6de0:	07d1      	lsls	r1, r2, #31
   d6de2:	bf5c      	itt	pl
   d6de4:	2201      	movpl	r2, #1
   d6de6:	601a      	strpl	r2, [r3, #0]
   d6de8:	4b0e      	ldr	r3, [pc, #56]	; (d6e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6dea:	681a      	ldr	r2, [r3, #0]
   d6dec:	07d2      	lsls	r2, r2, #31
   d6dee:	bf5c      	itt	pl
   d6df0:	2201      	movpl	r2, #1
   d6df2:	601a      	strpl	r2, [r3, #0]
   d6df4:	4770      	bx	lr
   d6df6:	bf00      	nop
   d6df8:	2003e77c 	.word	0x2003e77c
   d6dfc:	2003e778 	.word	0x2003e778
   d6e00:	2003e774 	.word	0x2003e774
   d6e04:	2003e770 	.word	0x2003e770
   d6e08:	2003e76c 	.word	0x2003e76c
   d6e0c:	2003e768 	.word	0x2003e768
   d6e10:	2003e764 	.word	0x2003e764
   d6e14:	2003e760 	.word	0x2003e760
   d6e18:	2003e75c 	.word	0x2003e75c
   d6e1c:	2003e758 	.word	0x2003e758
   d6e20:	2003e754 	.word	0x2003e754
   d6e24:	2003e750 	.word	0x2003e750

000d6e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e28:	4b18      	ldr	r3, [pc, #96]	; (d6e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e2a:	681a      	ldr	r2, [r3, #0]
   d6e2c:	07d1      	lsls	r1, r2, #31
   d6e2e:	bf5c      	itt	pl
   d6e30:	2201      	movpl	r2, #1
   d6e32:	601a      	strpl	r2, [r3, #0]
   d6e34:	4b16      	ldr	r3, [pc, #88]	; (d6e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e36:	681a      	ldr	r2, [r3, #0]
   d6e38:	07d2      	lsls	r2, r2, #31
   d6e3a:	bf5c      	itt	pl
   d6e3c:	2201      	movpl	r2, #1
   d6e3e:	601a      	strpl	r2, [r3, #0]
   d6e40:	4b14      	ldr	r3, [pc, #80]	; (d6e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e42:	681a      	ldr	r2, [r3, #0]
   d6e44:	07d0      	lsls	r0, r2, #31
   d6e46:	bf5c      	itt	pl
   d6e48:	2201      	movpl	r2, #1
   d6e4a:	601a      	strpl	r2, [r3, #0]
   d6e4c:	4b12      	ldr	r3, [pc, #72]	; (d6e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e4e:	681a      	ldr	r2, [r3, #0]
   d6e50:	07d1      	lsls	r1, r2, #31
   d6e52:	bf5c      	itt	pl
   d6e54:	2201      	movpl	r2, #1
   d6e56:	601a      	strpl	r2, [r3, #0]
   d6e58:	4b10      	ldr	r3, [pc, #64]	; (d6e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e5a:	681a      	ldr	r2, [r3, #0]
   d6e5c:	07d2      	lsls	r2, r2, #31
   d6e5e:	bf5c      	itt	pl
   d6e60:	2201      	movpl	r2, #1
   d6e62:	601a      	strpl	r2, [r3, #0]
   d6e64:	4b0e      	ldr	r3, [pc, #56]	; (d6ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e66:	681a      	ldr	r2, [r3, #0]
   d6e68:	07d0      	lsls	r0, r2, #31
   d6e6a:	bf5c      	itt	pl
   d6e6c:	2201      	movpl	r2, #1
   d6e6e:	601a      	strpl	r2, [r3, #0]
   d6e70:	4b0c      	ldr	r3, [pc, #48]	; (d6ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6e72:	681a      	ldr	r2, [r3, #0]
   d6e74:	07d1      	lsls	r1, r2, #31
   d6e76:	bf5c      	itt	pl
   d6e78:	2201      	movpl	r2, #1
   d6e7a:	601a      	strpl	r2, [r3, #0]
   d6e7c:	4b0a      	ldr	r3, [pc, #40]	; (d6ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6e7e:	681a      	ldr	r2, [r3, #0]
   d6e80:	07d2      	lsls	r2, r2, #31
   d6e82:	bf5c      	itt	pl
   d6e84:	2201      	movpl	r2, #1
   d6e86:	601a      	strpl	r2, [r3, #0]
   d6e88:	4770      	bx	lr
   d6e8a:	bf00      	nop
   d6e8c:	2003e79c 	.word	0x2003e79c
   d6e90:	2003e798 	.word	0x2003e798
   d6e94:	2003e794 	.word	0x2003e794
   d6e98:	2003e790 	.word	0x2003e790
   d6e9c:	2003e78c 	.word	0x2003e78c
   d6ea0:	2003e788 	.word	0x2003e788
   d6ea4:	2003e784 	.word	0x2003e784
   d6ea8:	2003e780 	.word	0x2003e780

000d6eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6eac:	4b18      	ldr	r3, [pc, #96]	; (d6f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6eae:	681a      	ldr	r2, [r3, #0]
   d6eb0:	07d1      	lsls	r1, r2, #31
   d6eb2:	bf5c      	itt	pl
   d6eb4:	2201      	movpl	r2, #1
   d6eb6:	601a      	strpl	r2, [r3, #0]
   d6eb8:	4b16      	ldr	r3, [pc, #88]	; (d6f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6eba:	681a      	ldr	r2, [r3, #0]
   d6ebc:	07d2      	lsls	r2, r2, #31
   d6ebe:	bf5c      	itt	pl
   d6ec0:	2201      	movpl	r2, #1
   d6ec2:	601a      	strpl	r2, [r3, #0]
   d6ec4:	4b14      	ldr	r3, [pc, #80]	; (d6f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6ec6:	681a      	ldr	r2, [r3, #0]
   d6ec8:	07d0      	lsls	r0, r2, #31
   d6eca:	bf5c      	itt	pl
   d6ecc:	2201      	movpl	r2, #1
   d6ece:	601a      	strpl	r2, [r3, #0]
   d6ed0:	4b12      	ldr	r3, [pc, #72]	; (d6f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6ed2:	681a      	ldr	r2, [r3, #0]
   d6ed4:	07d1      	lsls	r1, r2, #31
   d6ed6:	bf5c      	itt	pl
   d6ed8:	2201      	movpl	r2, #1
   d6eda:	601a      	strpl	r2, [r3, #0]
   d6edc:	4b10      	ldr	r3, [pc, #64]	; (d6f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6ede:	681a      	ldr	r2, [r3, #0]
   d6ee0:	07d2      	lsls	r2, r2, #31
   d6ee2:	bf5c      	itt	pl
   d6ee4:	2201      	movpl	r2, #1
   d6ee6:	601a      	strpl	r2, [r3, #0]
   d6ee8:	4b0e      	ldr	r3, [pc, #56]	; (d6f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6eea:	681a      	ldr	r2, [r3, #0]
   d6eec:	07d0      	lsls	r0, r2, #31
   d6eee:	bf5c      	itt	pl
   d6ef0:	2201      	movpl	r2, #1
   d6ef2:	601a      	strpl	r2, [r3, #0]
   d6ef4:	4b0c      	ldr	r3, [pc, #48]	; (d6f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6ef6:	681a      	ldr	r2, [r3, #0]
   d6ef8:	07d1      	lsls	r1, r2, #31
   d6efa:	bf5c      	itt	pl
   d6efc:	2201      	movpl	r2, #1
   d6efe:	601a      	strpl	r2, [r3, #0]
   d6f00:	4b0a      	ldr	r3, [pc, #40]	; (d6f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f02:	681a      	ldr	r2, [r3, #0]
   d6f04:	07d2      	lsls	r2, r2, #31
   d6f06:	bf5c      	itt	pl
   d6f08:	2201      	movpl	r2, #1
   d6f0a:	601a      	strpl	r2, [r3, #0]
   d6f0c:	4770      	bx	lr
   d6f0e:	bf00      	nop
   d6f10:	2003e7bc 	.word	0x2003e7bc
   d6f14:	2003e7b8 	.word	0x2003e7b8
   d6f18:	2003e7b4 	.word	0x2003e7b4
   d6f1c:	2003e7b0 	.word	0x2003e7b0
   d6f20:	2003e7ac 	.word	0x2003e7ac
   d6f24:	2003e7a8 	.word	0x2003e7a8
   d6f28:	2003e7a4 	.word	0x2003e7a4
   d6f2c:	2003e7a0 	.word	0x2003e7a0

000d6f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6f30:	4b24      	ldr	r3, [pc, #144]	; (d6fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6f32:	681a      	ldr	r2, [r3, #0]
   d6f34:	07d0      	lsls	r0, r2, #31
   d6f36:	bf5c      	itt	pl
   d6f38:	2201      	movpl	r2, #1
   d6f3a:	601a      	strpl	r2, [r3, #0]
   d6f3c:	4b22      	ldr	r3, [pc, #136]	; (d6fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6f3e:	681a      	ldr	r2, [r3, #0]
   d6f40:	07d1      	lsls	r1, r2, #31
   d6f42:	bf5c      	itt	pl
   d6f44:	2201      	movpl	r2, #1
   d6f46:	601a      	strpl	r2, [r3, #0]
   d6f48:	4b20      	ldr	r3, [pc, #128]	; (d6fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f4a:	681a      	ldr	r2, [r3, #0]
   d6f4c:	07d2      	lsls	r2, r2, #31
   d6f4e:	bf5c      	itt	pl
   d6f50:	2201      	movpl	r2, #1
   d6f52:	601a      	strpl	r2, [r3, #0]
   d6f54:	4b1e      	ldr	r3, [pc, #120]	; (d6fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f56:	681a      	ldr	r2, [r3, #0]
   d6f58:	07d0      	lsls	r0, r2, #31
   d6f5a:	bf5c      	itt	pl
   d6f5c:	2201      	movpl	r2, #1
   d6f5e:	601a      	strpl	r2, [r3, #0]
   d6f60:	4b1c      	ldr	r3, [pc, #112]	; (d6fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f62:	681a      	ldr	r2, [r3, #0]
   d6f64:	07d1      	lsls	r1, r2, #31
   d6f66:	bf5c      	itt	pl
   d6f68:	2201      	movpl	r2, #1
   d6f6a:	601a      	strpl	r2, [r3, #0]
   d6f6c:	4b1a      	ldr	r3, [pc, #104]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6f6e:	681a      	ldr	r2, [r3, #0]
   d6f70:	07d2      	lsls	r2, r2, #31
   d6f72:	bf5c      	itt	pl
   d6f74:	2201      	movpl	r2, #1
   d6f76:	601a      	strpl	r2, [r3, #0]
   d6f78:	4b18      	ldr	r3, [pc, #96]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6f7a:	681a      	ldr	r2, [r3, #0]
   d6f7c:	07d0      	lsls	r0, r2, #31
   d6f7e:	bf5c      	itt	pl
   d6f80:	2201      	movpl	r2, #1
   d6f82:	601a      	strpl	r2, [r3, #0]
   d6f84:	4b16      	ldr	r3, [pc, #88]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6f86:	681a      	ldr	r2, [r3, #0]
   d6f88:	07d1      	lsls	r1, r2, #31
   d6f8a:	bf5c      	itt	pl
   d6f8c:	2201      	movpl	r2, #1
   d6f8e:	601a      	strpl	r2, [r3, #0]
   d6f90:	4b14      	ldr	r3, [pc, #80]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6f92:	681a      	ldr	r2, [r3, #0]
   d6f94:	07d2      	lsls	r2, r2, #31
   d6f96:	bf5c      	itt	pl
   d6f98:	2201      	movpl	r2, #1
   d6f9a:	601a      	strpl	r2, [r3, #0]
   d6f9c:	4b12      	ldr	r3, [pc, #72]	; (d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6f9e:	681a      	ldr	r2, [r3, #0]
   d6fa0:	07d0      	lsls	r0, r2, #31
   d6fa2:	bf5c      	itt	pl
   d6fa4:	2201      	movpl	r2, #1
   d6fa6:	601a      	strpl	r2, [r3, #0]
   d6fa8:	4b10      	ldr	r3, [pc, #64]	; (d6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6faa:	681a      	ldr	r2, [r3, #0]
   d6fac:	07d1      	lsls	r1, r2, #31
   d6fae:	bf5c      	itt	pl
   d6fb0:	2201      	movpl	r2, #1
   d6fb2:	601a      	strpl	r2, [r3, #0]
   d6fb4:	4b0e      	ldr	r3, [pc, #56]	; (d6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6fb6:	681a      	ldr	r2, [r3, #0]
   d6fb8:	07d2      	lsls	r2, r2, #31
   d6fba:	bf5c      	itt	pl
   d6fbc:	2201      	movpl	r2, #1
   d6fbe:	601a      	strpl	r2, [r3, #0]
   d6fc0:	4770      	bx	lr
   d6fc2:	bf00      	nop
   d6fc4:	2003e7ec 	.word	0x2003e7ec
   d6fc8:	2003e7e8 	.word	0x2003e7e8
   d6fcc:	2003e7e4 	.word	0x2003e7e4
   d6fd0:	2003e7e0 	.word	0x2003e7e0
   d6fd4:	2003e7dc 	.word	0x2003e7dc
   d6fd8:	2003e7d8 	.word	0x2003e7d8
   d6fdc:	2003e7d4 	.word	0x2003e7d4
   d6fe0:	2003e7d0 	.word	0x2003e7d0
   d6fe4:	2003e7cc 	.word	0x2003e7cc
   d6fe8:	2003e7c8 	.word	0x2003e7c8
   d6fec:	2003e7c4 	.word	0x2003e7c4
   d6ff0:	2003e7c0 	.word	0x2003e7c0

000d6ff4 <atol>:
   d6ff4:	220a      	movs	r2, #10
   d6ff6:	2100      	movs	r1, #0
   d6ff8:	f000 b90c 	b.w	d7214 <strtol>

000d6ffc <__cxa_atexit>:
   d6ffc:	b510      	push	{r4, lr}
   d6ffe:	4c05      	ldr	r4, [pc, #20]	; (d7014 <__cxa_atexit+0x18>)
   d7000:	4613      	mov	r3, r2
   d7002:	b12c      	cbz	r4, d7010 <__cxa_atexit+0x14>
   d7004:	460a      	mov	r2, r1
   d7006:	4601      	mov	r1, r0
   d7008:	2002      	movs	r0, #2
   d700a:	f3af 8000 	nop.w
   d700e:	bd10      	pop	{r4, pc}
   d7010:	4620      	mov	r0, r4
   d7012:	bd10      	pop	{r4, pc}
   d7014:	00000000 	.word	0x00000000

000d7018 <ldiv>:
   d7018:	2900      	cmp	r1, #0
   d701a:	b510      	push	{r4, lr}
   d701c:	fb91 f4f2 	sdiv	r4, r1, r2
   d7020:	fb02 1314 	mls	r3, r2, r4, r1
   d7024:	db04      	blt.n	d7030 <ldiv+0x18>
   d7026:	2b00      	cmp	r3, #0
   d7028:	da07      	bge.n	d703a <ldiv+0x22>
   d702a:	3401      	adds	r4, #1
   d702c:	1a9b      	subs	r3, r3, r2
   d702e:	e004      	b.n	d703a <ldiv+0x22>
   d7030:	2b00      	cmp	r3, #0
   d7032:	bfc4      	itt	gt
   d7034:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   d7038:	189b      	addgt	r3, r3, r2
   d703a:	6004      	str	r4, [r0, #0]
   d703c:	6043      	str	r3, [r0, #4]
   d703e:	bd10      	pop	{r4, pc}

000d7040 <memcpy>:
   d7040:	b510      	push	{r4, lr}
   d7042:	1e43      	subs	r3, r0, #1
   d7044:	440a      	add	r2, r1
   d7046:	4291      	cmp	r1, r2
   d7048:	d004      	beq.n	d7054 <memcpy+0x14>
   d704a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d704e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7052:	e7f8      	b.n	d7046 <memcpy+0x6>
   d7054:	bd10      	pop	{r4, pc}

000d7056 <memset>:
   d7056:	4402      	add	r2, r0
   d7058:	4603      	mov	r3, r0
   d705a:	4293      	cmp	r3, r2
   d705c:	d002      	beq.n	d7064 <memset+0xe>
   d705e:	f803 1b01 	strb.w	r1, [r3], #1
   d7062:	e7fa      	b.n	d705a <memset+0x4>
   d7064:	4770      	bx	lr

000d7066 <strcmp>:
   d7066:	f810 2b01 	ldrb.w	r2, [r0], #1
   d706a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d706e:	2a01      	cmp	r2, #1
   d7070:	bf28      	it	cs
   d7072:	429a      	cmpcs	r2, r3
   d7074:	d0f7      	beq.n	d7066 <strcmp>
   d7076:	1ad0      	subs	r0, r2, r3
   d7078:	4770      	bx	lr

000d707a <strcpy>:
   d707a:	4603      	mov	r3, r0
   d707c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7080:	f803 2b01 	strb.w	r2, [r3], #1
   d7084:	2a00      	cmp	r2, #0
   d7086:	d1f9      	bne.n	d707c <strcpy+0x2>
   d7088:	4770      	bx	lr
	...

000d708c <strdup>:
   d708c:	4b02      	ldr	r3, [pc, #8]	; (d7098 <strdup+0xc>)
   d708e:	4601      	mov	r1, r0
   d7090:	6818      	ldr	r0, [r3, #0]
   d7092:	f000 b803 	b.w	d709c <_strdup_r>
   d7096:	bf00      	nop
   d7098:	2003e3a4 	.word	0x2003e3a4

000d709c <_strdup_r>:
   d709c:	b570      	push	{r4, r5, r6, lr}
   d709e:	4606      	mov	r6, r0
   d70a0:	4608      	mov	r0, r1
   d70a2:	460c      	mov	r4, r1
   d70a4:	f000 f80d 	bl	d70c2 <strlen>
   d70a8:	1c45      	adds	r5, r0, #1
   d70aa:	4629      	mov	r1, r5
   d70ac:	4630      	mov	r0, r6
   d70ae:	f7fd ffd3 	bl	d5058 <_malloc_r>
   d70b2:	4606      	mov	r6, r0
   d70b4:	b118      	cbz	r0, d70be <_strdup_r+0x22>
   d70b6:	462a      	mov	r2, r5
   d70b8:	4621      	mov	r1, r4
   d70ba:	f7ff ffc1 	bl	d7040 <memcpy>
   d70be:	4630      	mov	r0, r6
   d70c0:	bd70      	pop	{r4, r5, r6, pc}

000d70c2 <strlen>:
   d70c2:	4603      	mov	r3, r0
   d70c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70c8:	2a00      	cmp	r2, #0
   d70ca:	d1fb      	bne.n	d70c4 <strlen+0x2>
   d70cc:	1a18      	subs	r0, r3, r0
   d70ce:	3801      	subs	r0, #1
   d70d0:	4770      	bx	lr

000d70d2 <strstr>:
   d70d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d70d4:	7803      	ldrb	r3, [r0, #0]
   d70d6:	b963      	cbnz	r3, d70f2 <strstr+0x20>
   d70d8:	780b      	ldrb	r3, [r1, #0]
   d70da:	2b00      	cmp	r3, #0
   d70dc:	bf18      	it	ne
   d70de:	2000      	movne	r0, #0
   d70e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70e2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d70e6:	b162      	cbz	r2, d7102 <strstr+0x30>
   d70e8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d70ec:	4297      	cmp	r7, r2
   d70ee:	4630      	mov	r0, r6
   d70f0:	d0f7      	beq.n	d70e2 <strstr+0x10>
   d70f2:	4603      	mov	r3, r0
   d70f4:	1c46      	adds	r6, r0, #1
   d70f6:	7800      	ldrb	r0, [r0, #0]
   d70f8:	b110      	cbz	r0, d7100 <strstr+0x2e>
   d70fa:	1e4d      	subs	r5, r1, #1
   d70fc:	1e5c      	subs	r4, r3, #1
   d70fe:	e7f0      	b.n	d70e2 <strstr+0x10>
   d7100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7102:	4618      	mov	r0, r3
   d7104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7108 <_strtol_r>:
   d7108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d710c:	4680      	mov	r8, r0
   d710e:	4840      	ldr	r0, [pc, #256]	; (d7210 <_strtol_r+0x108>)
   d7110:	f8d0 9000 	ldr.w	r9, [r0]
   d7114:	460f      	mov	r7, r1
   d7116:	463d      	mov	r5, r7
   d7118:	f815 4b01 	ldrb.w	r4, [r5], #1
   d711c:	eb09 0004 	add.w	r0, r9, r4
   d7120:	7840      	ldrb	r0, [r0, #1]
   d7122:	f000 0008 	and.w	r0, r0, #8
   d7126:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d712a:	b108      	cbz	r0, d7130 <_strtol_r+0x28>
   d712c:	462f      	mov	r7, r5
   d712e:	e7f2      	b.n	d7116 <_strtol_r+0xe>
   d7130:	2c2d      	cmp	r4, #45	; 0x2d
   d7132:	d103      	bne.n	d713c <_strtol_r+0x34>
   d7134:	1cbd      	adds	r5, r7, #2
   d7136:	787c      	ldrb	r4, [r7, #1]
   d7138:	2601      	movs	r6, #1
   d713a:	e003      	b.n	d7144 <_strtol_r+0x3c>
   d713c:	2c2b      	cmp	r4, #43	; 0x2b
   d713e:	bf04      	itt	eq
   d7140:	787c      	ldrbeq	r4, [r7, #1]
   d7142:	1cbd      	addeq	r5, r7, #2
   d7144:	b113      	cbz	r3, d714c <_strtol_r+0x44>
   d7146:	2b10      	cmp	r3, #16
   d7148:	d10a      	bne.n	d7160 <_strtol_r+0x58>
   d714a:	e05b      	b.n	d7204 <_strtol_r+0xfc>
   d714c:	2c30      	cmp	r4, #48	; 0x30
   d714e:	d157      	bne.n	d7200 <_strtol_r+0xf8>
   d7150:	7828      	ldrb	r0, [r5, #0]
   d7152:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7156:	2858      	cmp	r0, #88	; 0x58
   d7158:	d14d      	bne.n	d71f6 <_strtol_r+0xee>
   d715a:	786c      	ldrb	r4, [r5, #1]
   d715c:	2310      	movs	r3, #16
   d715e:	3502      	adds	r5, #2
   d7160:	2e00      	cmp	r6, #0
   d7162:	bf14      	ite	ne
   d7164:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7168:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d716c:	2700      	movs	r7, #0
   d716e:	fbbc faf3 	udiv	sl, ip, r3
   d7172:	4638      	mov	r0, r7
   d7174:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7178:	eb09 0e04 	add.w	lr, r9, r4
   d717c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7180:	f01e 0f04 	tst.w	lr, #4
   d7184:	d001      	beq.n	d718a <_strtol_r+0x82>
   d7186:	3c30      	subs	r4, #48	; 0x30
   d7188:	e00b      	b.n	d71a2 <_strtol_r+0x9a>
   d718a:	f01e 0e03 	ands.w	lr, lr, #3
   d718e:	d01b      	beq.n	d71c8 <_strtol_r+0xc0>
   d7190:	f1be 0f01 	cmp.w	lr, #1
   d7194:	bf0c      	ite	eq
   d7196:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d719a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d719e:	ebce 0404 	rsb	r4, lr, r4
   d71a2:	42a3      	cmp	r3, r4
   d71a4:	dd10      	ble.n	d71c8 <_strtol_r+0xc0>
   d71a6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d71aa:	d00a      	beq.n	d71c2 <_strtol_r+0xba>
   d71ac:	4550      	cmp	r0, sl
   d71ae:	d806      	bhi.n	d71be <_strtol_r+0xb6>
   d71b0:	d101      	bne.n	d71b6 <_strtol_r+0xae>
   d71b2:	4564      	cmp	r4, ip
   d71b4:	dc03      	bgt.n	d71be <_strtol_r+0xb6>
   d71b6:	fb03 4000 	mla	r0, r3, r0, r4
   d71ba:	2701      	movs	r7, #1
   d71bc:	e001      	b.n	d71c2 <_strtol_r+0xba>
   d71be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d71c2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d71c6:	e7d7      	b.n	d7178 <_strtol_r+0x70>
   d71c8:	1c7b      	adds	r3, r7, #1
   d71ca:	d10c      	bne.n	d71e6 <_strtol_r+0xde>
   d71cc:	2e00      	cmp	r6, #0
   d71ce:	f04f 0322 	mov.w	r3, #34	; 0x22
   d71d2:	bf14      	ite	ne
   d71d4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d71d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d71dc:	f8c8 3000 	str.w	r3, [r8]
   d71e0:	b92a      	cbnz	r2, d71ee <_strtol_r+0xe6>
   d71e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71e6:	b106      	cbz	r6, d71ea <_strtol_r+0xe2>
   d71e8:	4240      	negs	r0, r0
   d71ea:	b172      	cbz	r2, d720a <_strtol_r+0x102>
   d71ec:	b107      	cbz	r7, d71f0 <_strtol_r+0xe8>
   d71ee:	1e69      	subs	r1, r5, #1
   d71f0:	6011      	str	r1, [r2, #0]
   d71f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71f6:	2430      	movs	r4, #48	; 0x30
   d71f8:	2b00      	cmp	r3, #0
   d71fa:	d1b1      	bne.n	d7160 <_strtol_r+0x58>
   d71fc:	2308      	movs	r3, #8
   d71fe:	e7af      	b.n	d7160 <_strtol_r+0x58>
   d7200:	230a      	movs	r3, #10
   d7202:	e7ad      	b.n	d7160 <_strtol_r+0x58>
   d7204:	2c30      	cmp	r4, #48	; 0x30
   d7206:	d0a3      	beq.n	d7150 <_strtol_r+0x48>
   d7208:	e7aa      	b.n	d7160 <_strtol_r+0x58>
   d720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d720e:	bf00      	nop
   d7210:	2003e340 	.word	0x2003e340

000d7214 <strtol>:
   d7214:	4613      	mov	r3, r2
   d7216:	460a      	mov	r2, r1
   d7218:	4601      	mov	r1, r0
   d721a:	4802      	ldr	r0, [pc, #8]	; (d7224 <strtol+0x10>)
   d721c:	6800      	ldr	r0, [r0, #0]
   d721e:	f7ff bf73 	b.w	d7108 <_strtol_r>
   d7222:	bf00      	nop
   d7224:	2003e3a4 	.word	0x2003e3a4

000d7228 <dynalib_user>:
   d7228:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7238:	00000000 4f6c6c61 6c006666 46746665     ....allOff.leftF
   d7248:	67697200 00467468 7466656c 69720052     .rightF.leftR.ri
   d7258:	52746867 20732500 3a6c6176 00692520     ghtR.%s val: %i.
   d7268:	6f66002c 776f6c6c 69707300 6573006e     ,.follow.spin.se
   d7278:	7972746e 6c707300 65746e69 75700072     ntry.splinter.pu
   d7288:	6f006873 74696272 20435200 65646f4d     sh.orbit.RC Mode
   d7298:	6d654400 6f4d206f 73006564 6d726177     .Demo Mode.swarm
   d72a8:	61656c2d 2d726564 696c6e6f 7300656e     -leader-online.s
   d72b8:	6d726177 646f6d2d 77660065 7265762d     warm-mode.fw-ver
   d72c8:	6e6f6973 69777300 4d686374 0065646f     sion.switchMode.
   d72d8:	72617773 6d65446d 7473006f 6544706f     swarmDemo.stopDe
   d72e8:	00736f6d 64006372 006f6d65 332e3176     mos.rc.demo.v1.3
   d72f8:	00000000                                ....

000d72fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7304:	000d5095 000d509b 000d50c3 000d50a7     .P...P...P...P..
   d7314:	000d5097                                .P..

000d7318 <_ZTVN5spark13EthernetClassE>:
	...
   d7320:	000d5693 000d5689 000d567f 000d5675     .V...V...V..uV..
   d7330:	000d5669 000d565d 000d5651 000d5649     iV..]V..QV..IV..
   d7340:	000d563f 000d5635 000d5bb9              ?V..5V...[..

000d734c <_ZTV7TwoWire>:
	...
   d7354:	000d56b1 000d56fb 000d56d3 000d56b3     .V...V...V...V..
   d7364:	000d56db 000d56e3 000d56eb 000d56f3     .V...V...V...V..

000d7374 <_ZTV9IPAddress>:
	...
   d737c:	000d5743 000d5735 000d5737 66006e6c     CW..5W..7W..ln.f
   d738c:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
   d739c:	31302500 00207530 2c00205d 29280020     .%010u .] ., .()
   d73ac:	2000203a 6f63005b 3d206564 65640020     : . [.code = .de
   d73bc:	6c696174 203d2073 75616200 65530064     tails = .baud.Se
   d73cc:	6c616972 72655300 316c6169 70797400     rial.Serial1.typ
   d73dc:	61700065 006d6172 00646d63 68006469     e.param.cmd.id.h
   d73ec:	7300646e 006d7274 746c6966 6c766c00     nd.strm.filt.lvl
   d73fc:	64646100 646e6148 0072656c 6f6d6572     .addHandler.remo
   d740c:	61486576 656c646e 6e650072 61486d75     veHandler.enumHa
   d741c:	656c646e 4a007372 534e4f53 61657274     ndlers.JSONStrea
   d742c:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
   d743c:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
   d744c:	6e726177 72726500 7000726f 63696e61     warn.error.panic
   d745c:	6c6c6100 00000000                       .all....

000d7464 <_ZTVN5spark9MeshClassE>:
	...
   d746c:	000d58b3 000d58a9 000d589f 000d5895     .X...X...X...X..
   d747c:	000d5889 000d587d 000d5871 000d5869     .X..}X..qX..iX..
   d748c:	000d585f 000d5855 000d5bb9 33306666     _X..UX...[..ff03
   d749c:	3a313a3a 31303031 31687400 73656d00     ::1:1001.th1.mes
   d74ac:	62757068 72697700 00676e69 73726170     hpub.wiring.pars
   d74bc:	61702065 74656b63 00642520              e packet %d.

000d74c8 <_ZTVN5spark12NetworkClassE>:
	...
   d74d0:	000d5b51 000d5b5b 000d5b65 000d5b6f     Q[..[[..e[..o[..
   d74e0:	000d5b79 000d5b85 000d5b91 000d5b9d     y[...[...[...[..
   d74f0:	000d5ba5 000d5baf 000d5bb9              .[...[...[..

000d74fc <_ZTV8SPIClass>:
	...
   d7504:	000d5db5 000d5db7                       .]...]..

000d750c <_ZTV21StringPrintableHelper>:
	...
   d7514:	000d5df3 000d5df5 000d5ffd 000d5fcf     .]...]..._..._..
   d7524:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d7534:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d7544:	63736100 656d6974 63657200 65766965     .asctime.receive
   d7554:	64252064 74796220 66207365 206d6f72     d %d bytes from 
   d7564:	25237325 65730064 6150646e 74656b63     %s#%d.sendPacket
   d7574:	7a697320 64252065 7325202c 00642523      size %d, %s#%d.
   d7584:	69676562 6170206e 74656b63 23732520     begin packet %s#
   d7594:	00006425                                %d..

000d7598 <_ZTV3UDP>:
	...
   d75a0:	000d680d 000d6831 000d613d 000d6267     .h..1h..=a..gb..
   d75b0:	000d6135 000d6153 000d6171 000d618b     5a..Sa..qa...a..
   d75c0:	000d61af 000d624b 000d6589 000d62ed     .a..Kb...e...b..
   d75d0:	000d646d 000d611d 000d67a5 000d63f1     md...a...g...c..
   d75e0:	000d6325 000d676b 000d6291 000d612b     %c..kg...b..+a..
   d75f0:	000d62cd 000d6131 000d618d fffffff0     .b..1a...a......
   d7600:	00000000 000d61a7                       .....a..

000d7608 <_ZTV11USARTSerial>:
	...
   d7610:	000d685b 000d687f 000d688b 000d5c51     [h...h...h..Q\..
   d7620:	000d6867 000d6873 000d686d 000d6879     gh..sh..mh..yh..
   d7630:	000d685d 000d6861                       ]h..ah..

000d7638 <_ZTV9USBSerial>:
	...
   d7640:	000d6935 000d6979 000d6953 000d5c51     5i..yi..Si..Q\..
   d7650:	000d694d 000d6937 000d693f 000d6973     Mi..7i..?i..si..
   d7660:	000d6947 000d6931                       Gi..1i..

000d7668 <_ctype_>:
   d7668:	20202000 20202020 28282020 20282828     .         ((((( 
   d7678:	20202020 20202020 20202020 20202020                     
   d7688:	10108820 10101010 10101010 10101010      ...............
   d7698:	04040410 04040404 10040404 10101010     ................
   d76a8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d76b8:	01010101 01010101 01010101 10101010     ................
   d76c8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d76d8:	02020202 02020202 02020202 10101010     ................
   d76e8:	00000020 00000000 00000000 00000000      ...............
	...

000d776c <__sf_fake_stdin>:
	...

000d778c <__sf_fake_stdout>:
	...

000d77ac <__sf_fake_stderr>:
	...
   d77cc:	00000043                                         C.

000d77ce <link_const_variable_data_end>:
	...

000d77d0 <link_constructors_location>:
   d77d0:	000d4ae5 	.word	0x000d4ae5
   d77d4:	000d4b1d 	.word	0x000d4b1d
   d77d8:	000d569d 	.word	0x000d569d
   d77dc:	000d5845 	.word	0x000d5845
   d77e0:	000d5b05 	.word	0x000d5b05
   d77e4:	000d5c3d 	.word	0x000d5c3d
   d77e8:	000d5d99 	.word	0x000d5d99
   d77ec:	000d60ed 	.word	0x000d60ed
   d77f0:	000d6109 	.word	0x000d6109
   d77f4:	000d6d11 	.word	0x000d6d11
   d77f8:	000d6d65 	.word	0x000d6d65
   d77fc:	000d6e29 	.word	0x000d6e29
   d7800:	000d6ead 	.word	0x000d6ead
   d7804:	000d6f31 	.word	0x000d6f31

000d7808 <link_constructors_end>:
	...
