
/Users/bsatrom/Development/particle/rc-mesh/rc-swarm-leader/target/rc-swarm-leader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001761c  2**0
                  CONTENTS
  3 .data         00000080  2003e32c  000d7570  0000e32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000444  2003e3ac  2003e3ac  0001e3ac  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d75f0  000d75f0  000175f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7618  000d7618  00017618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ae1c9  00000000  00000000  0001761c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001042d  00000000  00000000  000c57e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015a9d  00000000  00000000  000d5c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000021e0  00000000  00000000  000eb6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000036b8  00000000  00000000  000ed88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003267f  00000000  00000000  000f0f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026dd3  00000000  00000000  001235c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3eba  00000000  00000000  0014a399  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c02c  00000000  00000000  0021e254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a4 6f 0d 00                                         .o..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fec5 	bl	d6dbc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 feca 	bl	d6dd2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e32c 	.word	0x2003e32c
   d4048:	000d7570 	.word	0x000d7570
   d404c:	2003e3ac 	.word	0x2003e3ac
   d4050:	2003e3ac 	.word	0x2003e3ac
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fc75 	bl	d6948 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7564 	.word	0x000d7564
   d4080:	000d752c 	.word	0x000d752c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb14 	b.w	d46b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa37 	bl	d44fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bc27 	b.w	d68e4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be75 	b.w	d4d84 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 be73 	b.w	d4d84 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 be79 	b.w	d4d94 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 be77 	b.w	d4d94 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_ZN10CloudClass7publishEPKcS1_.isra.8>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40bc:	b513      	push	{r0, r1, r4, lr}
   d40be:	4b05      	ldr	r3, [pc, #20]	; (d40d4 <_ZN10CloudClass7publishEPKcS1_.isra.8+0x18>)
   d40c0:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c2:	f88d 3000 	strb.w	r3, [sp]
   d40c6:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c8:	4604      	mov	r4, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ca:	f001 f80d 	bl	d50e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d40ce:	4620      	mov	r0, r4
   d40d0:	b002      	add	sp, #8
   d40d2:	bd10      	pop	{r4, pc}
   d40d4:	2003e3b8 	.word	0x2003e3b8

000d40d8 <_Z6allOffv>:

  delay(del);
}

void allOff()
{
   d40d8:	b508      	push	{r3, lr}
  analogWrite(leftReverse, 0);
   d40da:	4b0b      	ldr	r3, [pc, #44]	; (d4108 <_Z6allOffv+0x30>)
   d40dc:	2100      	movs	r1, #0
   d40de:	8818      	ldrh	r0, [r3, #0]
   d40e0:	f002 fc8e 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(leftForward, 0);
   d40e4:	4b09      	ldr	r3, [pc, #36]	; (d410c <_Z6allOffv+0x34>)
   d40e6:	2100      	movs	r1, #0
   d40e8:	8818      	ldrh	r0, [r3, #0]
   d40ea:	f002 fc89 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightReverse, 0);
   d40ee:	4b08      	ldr	r3, [pc, #32]	; (d4110 <_Z6allOffv+0x38>)
   d40f0:	2100      	movs	r1, #0
   d40f2:	8818      	ldrh	r0, [r3, #0]
   d40f4:	f002 fc84 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightForward, 0);
   d40f8:	4b06      	ldr	r3, [pc, #24]	; (d4114 <_Z6allOffv+0x3c>)
   d40fa:	2100      	movs	r1, #0
   d40fc:	8818      	ldrh	r0, [r3, #0]
}
   d40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void allOff()
{
  analogWrite(leftReverse, 0);
  analogWrite(leftForward, 0);
  analogWrite(rightReverse, 0);
  analogWrite(rightForward, 0);
   d4102:	f002 bc7d 	b.w	d6a00 <_Z11analogWritetm>
   d4106:	bf00      	nop
   d4108:	2003e33c 	.word	0x2003e33c
   d410c:	2003e338 	.word	0x2003e338
   d4110:	2003e330 	.word	0x2003e330
   d4114:	2003e32c 	.word	0x2003e32c

000d4118 <_Z9motorsOffl>:

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
}

void motorsOff(int32_t del)
{
   d4118:	b510      	push	{r4, lr}
  Mesh.publish("allOff", NULL);
   d411a:	2200      	movs	r2, #0

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
}

void motorsOff(int32_t del)
{
   d411c:	4604      	mov	r4, r0
  Mesh.publish("allOff", NULL);
   d411e:	4905      	ldr	r1, [pc, #20]	; (d4134 <_Z9motorsOffl+0x1c>)
   d4120:	4805      	ldr	r0, [pc, #20]	; (d4138 <_Z9motorsOffl+0x20>)
   d4122:	f001 fb35 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
  allOff();
   d4126:	f7ff ffd7 	bl	d40d8 <_Z6allOffv>

  delay(del);
   d412a:	4620      	mov	r0, r4
}
   d412c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void motorsOff(int32_t del)
{
  Mesh.publish("allOff", NULL);
  allOff();

  delay(del);
   d4130:	f000 be58 	b.w	d4de4 <delay>
   d4134:	000d6fb8 	.word	0x000d6fb8
   d4138:	2003e3ec 	.word	0x2003e3ec

000d413c <_Z11moveForwardlll>:
}

/* PRIMITIVES */

void moveForward(int32_t val, int32_t del, int32_t offDel)
{
   d413c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Mesh.publish("leftF", String(val));
   d413e:	4d18      	ldr	r5, [pc, #96]	; (d41a0 <_Z11moveForwardlll+0x64>)
}

/* PRIMITIVES */

void moveForward(int32_t val, int32_t del, int32_t offDel)
{
   d4140:	b085      	sub	sp, #20
   d4142:	4604      	mov	r4, r0
   d4144:	460f      	mov	r7, r1
   d4146:	4616      	mov	r6, r2
  Mesh.publish("leftF", String(val));
   d4148:	4601      	mov	r1, r0
   d414a:	220a      	movs	r2, #10
   d414c:	4668      	mov	r0, sp
   d414e:	f001 fdd2 	bl	d5cf6 <_ZN6StringC1Elh>
   d4152:	9a00      	ldr	r2, [sp, #0]
   d4154:	4913      	ldr	r1, [pc, #76]	; (d41a4 <_Z11moveForwardlll+0x68>)
   d4156:	4628      	mov	r0, r5
   d4158:	f001 fb1a 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d415c:	4668      	mov	r0, sp
   d415e:	f001 fd0d 	bl	d5b7c <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(val));
   d4162:	4621      	mov	r1, r4
   d4164:	220a      	movs	r2, #10
   d4166:	4668      	mov	r0, sp
   d4168:	f001 fdc5 	bl	d5cf6 <_ZN6StringC1Elh>
   d416c:	9a00      	ldr	r2, [sp, #0]
   d416e:	490e      	ldr	r1, [pc, #56]	; (d41a8 <_Z11moveForwardlll+0x6c>)
   d4170:	4628      	mov	r0, r5
   d4172:	f001 fb0d 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4176:	4668      	mov	r0, sp
   d4178:	f001 fd00 	bl	d5b7c <_ZN6StringD1Ev>

  analogWrite(leftForward, val);
   d417c:	4b0b      	ldr	r3, [pc, #44]	; (d41ac <_Z11moveForwardlll+0x70>)
   d417e:	4621      	mov	r1, r4
   d4180:	8818      	ldrh	r0, [r3, #0]
   d4182:	f002 fc3d 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightForward, val);
   d4186:	4b0a      	ldr	r3, [pc, #40]	; (d41b0 <_Z11moveForwardlll+0x74>)
   d4188:	4621      	mov	r1, r4
   d418a:	8818      	ldrh	r0, [r3, #0]
   d418c:	f002 fc38 	bl	d6a00 <_Z11analogWritetm>

  delay(del);
   d4190:	4638      	mov	r0, r7
   d4192:	f000 fe27 	bl	d4de4 <delay>

  motorsOff(offDel);
   d4196:	4630      	mov	r0, r6
   d4198:	f7ff ffbe 	bl	d4118 <_Z9motorsOffl>
}
   d419c:	b005      	add	sp, #20
   d419e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41a0:	2003e3ec 	.word	0x2003e3ec
   d41a4:	000d6fbf 	.word	0x000d6fbf
   d41a8:	000d6fc5 	.word	0x000d6fc5
   d41ac:	2003e338 	.word	0x2003e338
   d41b0:	2003e32c 	.word	0x2003e32c

000d41b4 <_Z11spinLeft360v>:

  motorsOff(offDel);
}

void spinLeft360()
{
   d41b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  moveForward(255, 400, 200);
   d41b6:	22c8      	movs	r2, #200	; 0xc8
   d41b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d41bc:	20ff      	movs	r0, #255	; 0xff
   d41be:	f7ff ffbd 	bl	d413c <_Z11moveForwardlll>

  Mesh.publish("leftR", String(255));
   d41c2:	220a      	movs	r2, #10
   d41c4:	21ff      	movs	r1, #255	; 0xff
   d41c6:	4668      	mov	r0, sp
   d41c8:	f001 fd82 	bl	d5cd0 <_ZN6StringC1Eih>
   d41cc:	9a00      	ldr	r2, [sp, #0]
   d41ce:	4914      	ldr	r1, [pc, #80]	; (d4220 <_Z11spinLeft360v+0x6c>)
   d41d0:	4814      	ldr	r0, [pc, #80]	; (d4224 <_Z11spinLeft360v+0x70>)
   d41d2:	f001 fadd 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d41d6:	4668      	mov	r0, sp
   d41d8:	f001 fcd0 	bl	d5b7c <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(255));
   d41dc:	220a      	movs	r2, #10
   d41de:	21ff      	movs	r1, #255	; 0xff
   d41e0:	4668      	mov	r0, sp
   d41e2:	f001 fd75 	bl	d5cd0 <_ZN6StringC1Eih>
   d41e6:	9a00      	ldr	r2, [sp, #0]
   d41e8:	490f      	ldr	r1, [pc, #60]	; (d4228 <_Z11spinLeft360v+0x74>)
   d41ea:	480e      	ldr	r0, [pc, #56]	; (d4224 <_Z11spinLeft360v+0x70>)
   d41ec:	f001 fad0 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d41f0:	4668      	mov	r0, sp
   d41f2:	f001 fcc3 	bl	d5b7c <_ZN6StringD1Ev>

  analogWrite(leftReverse, 255);
   d41f6:	4b0d      	ldr	r3, [pc, #52]	; (d422c <_Z11spinLeft360v+0x78>)
   d41f8:	21ff      	movs	r1, #255	; 0xff
   d41fa:	8818      	ldrh	r0, [r3, #0]
   d41fc:	f002 fc00 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightForward, 255);
   d4200:	4b0b      	ldr	r3, [pc, #44]	; (d4230 <_Z11spinLeft360v+0x7c>)
   d4202:	21ff      	movs	r1, #255	; 0xff
   d4204:	8818      	ldrh	r0, [r3, #0]
   d4206:	f002 fbfb 	bl	d6a00 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
   d420a:	4b0a      	ldr	r3, [pc, #40]	; (d4234 <_Z11spinLeft360v+0x80>)
   d420c:	6818      	ldr	r0, [r3, #0]
   d420e:	2800      	cmp	r0, #0
   d4210:	bf08      	it	eq
   d4212:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   d4216:	f000 fde5 	bl	d4de4 <delay>
}
   d421a:	b005      	add	sp, #20
   d421c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4220:	000d6fcc 	.word	0x000d6fcc
   d4224:	2003e3ec 	.word	0x2003e3ec
   d4228:	000d6fc5 	.word	0x000d6fc5
   d422c:	2003e33c 	.word	0x2003e33c
   d4230:	2003e32c 	.word	0x2003e32c
   d4234:	2003e3b0 	.word	0x2003e3b0

000d4238 <_Z12spinRight360v>:

void spinRight360()
{
   d4238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  moveForward(255, 400, 200);
   d423a:	22c8      	movs	r2, #200	; 0xc8
   d423c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d4240:	20ff      	movs	r0, #255	; 0xff
   d4242:	f7ff ff7b 	bl	d413c <_Z11moveForwardlll>

  Mesh.publish("leftF", String(255));
   d4246:	220a      	movs	r2, #10
   d4248:	21ff      	movs	r1, #255	; 0xff
   d424a:	4668      	mov	r0, sp
   d424c:	f001 fd40 	bl	d5cd0 <_ZN6StringC1Eih>
   d4250:	9a00      	ldr	r2, [sp, #0]
   d4252:	4914      	ldr	r1, [pc, #80]	; (d42a4 <_Z12spinRight360v+0x6c>)
   d4254:	4814      	ldr	r0, [pc, #80]	; (d42a8 <_Z12spinRight360v+0x70>)
   d4256:	f001 fa9b 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d425a:	4668      	mov	r0, sp
   d425c:	f001 fc8e 	bl	d5b7c <_ZN6StringD1Ev>
  Mesh.publish("rightR", String(255));
   d4260:	220a      	movs	r2, #10
   d4262:	21ff      	movs	r1, #255	; 0xff
   d4264:	4668      	mov	r0, sp
   d4266:	f001 fd33 	bl	d5cd0 <_ZN6StringC1Eih>
   d426a:	9a00      	ldr	r2, [sp, #0]
   d426c:	490f      	ldr	r1, [pc, #60]	; (d42ac <_Z12spinRight360v+0x74>)
   d426e:	480e      	ldr	r0, [pc, #56]	; (d42a8 <_Z12spinRight360v+0x70>)
   d4270:	f001 fa8e 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4274:	4668      	mov	r0, sp
   d4276:	f001 fc81 	bl	d5b7c <_ZN6StringD1Ev>

  analogWrite(leftForward, 255);
   d427a:	4b0d      	ldr	r3, [pc, #52]	; (d42b0 <_Z12spinRight360v+0x78>)
   d427c:	21ff      	movs	r1, #255	; 0xff
   d427e:	8818      	ldrh	r0, [r3, #0]
   d4280:	f002 fbbe 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightReverse, 255);
   d4284:	4b0b      	ldr	r3, [pc, #44]	; (d42b4 <_Z12spinRight360v+0x7c>)
   d4286:	21ff      	movs	r1, #255	; 0xff
   d4288:	8818      	ldrh	r0, [r3, #0]
   d428a:	f002 fbb9 	bl	d6a00 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : SPIN_DELAY);
   d428e:	4b0a      	ldr	r3, [pc, #40]	; (d42b8 <_Z12spinRight360v+0x80>)
   d4290:	6818      	ldr	r0, [r3, #0]
   d4292:	2800      	cmp	r0, #0
   d4294:	bf08      	it	eq
   d4296:	f44f 70c8 	moveq.w	r0, #400	; 0x190
   d429a:	f000 fda3 	bl	d4de4 <delay>
}
   d429e:	b005      	add	sp, #20
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d42a4:	000d6fbf 	.word	0x000d6fbf
   d42a8:	2003e3ec 	.word	0x2003e3ec
   d42ac:	000d6fd2 	.word	0x000d6fd2
   d42b0:	2003e338 	.word	0x2003e338
   d42b4:	2003e330 	.word	0x2003e330
   d42b8:	2003e3b0 	.word	0x2003e3b0

000d42bc <_Z8spinCarsv>:
  turnRight90(500);
  turnLeft90(10);
}

void spinCars()
{
   d42bc:	b508      	push	{r3, lr}
  spinLeft360();
   d42be:	f7ff ff79 	bl	d41b4 <_Z11spinLeft360v>
  motorsOff(200);
   d42c2:	20c8      	movs	r0, #200	; 0xc8
   d42c4:	f7ff ff28 	bl	d4118 <_Z9motorsOffl>

  spinRight360();
   d42c8:	f7ff ffb6 	bl	d4238 <_Z12spinRight360v>
  motorsOff(200);
   d42cc:	20c8      	movs	r0, #200	; 0xc8
}
   d42ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  spinLeft360();
  motorsOff(200);

  spinRight360();
  motorsOff(200);
   d42d2:	f7ff bf21 	b.w	d4118 <_Z9motorsOffl>
	...

000d42d8 <_Z8moveBacklll>:

  motorsOff(offDel);
}

void moveBack(int32_t val, int32_t del, int32_t offDel)
{
   d42d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Mesh.publish("leftR", String(val));
   d42da:	4d18      	ldr	r5, [pc, #96]	; (d433c <_Z8moveBacklll+0x64>)

  motorsOff(offDel);
}

void moveBack(int32_t val, int32_t del, int32_t offDel)
{
   d42dc:	b085      	sub	sp, #20
   d42de:	4604      	mov	r4, r0
   d42e0:	460f      	mov	r7, r1
   d42e2:	4616      	mov	r6, r2
  Mesh.publish("leftR", String(val));
   d42e4:	4601      	mov	r1, r0
   d42e6:	220a      	movs	r2, #10
   d42e8:	4668      	mov	r0, sp
   d42ea:	f001 fd04 	bl	d5cf6 <_ZN6StringC1Elh>
   d42ee:	9a00      	ldr	r2, [sp, #0]
   d42f0:	4913      	ldr	r1, [pc, #76]	; (d4340 <_Z8moveBacklll+0x68>)
   d42f2:	4628      	mov	r0, r5
   d42f4:	f001 fa4c 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42f8:	4668      	mov	r0, sp
   d42fa:	f001 fc3f 	bl	d5b7c <_ZN6StringD1Ev>
  Mesh.publish("rightR", String(val));
   d42fe:	4621      	mov	r1, r4
   d4300:	220a      	movs	r2, #10
   d4302:	4668      	mov	r0, sp
   d4304:	f001 fcf7 	bl	d5cf6 <_ZN6StringC1Elh>
   d4308:	9a00      	ldr	r2, [sp, #0]
   d430a:	490e      	ldr	r1, [pc, #56]	; (d4344 <_Z8moveBacklll+0x6c>)
   d430c:	4628      	mov	r0, r5
   d430e:	f001 fa3f 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4312:	4668      	mov	r0, sp
   d4314:	f001 fc32 	bl	d5b7c <_ZN6StringD1Ev>

  analogWrite(leftReverse, val);
   d4318:	4b0b      	ldr	r3, [pc, #44]	; (d4348 <_Z8moveBacklll+0x70>)
   d431a:	4621      	mov	r1, r4
   d431c:	8818      	ldrh	r0, [r3, #0]
   d431e:	f002 fb6f 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightReverse, val);
   d4322:	4b0a      	ldr	r3, [pc, #40]	; (d434c <_Z8moveBacklll+0x74>)
   d4324:	4621      	mov	r1, r4
   d4326:	8818      	ldrh	r0, [r3, #0]
   d4328:	f002 fb6a 	bl	d6a00 <_Z11analogWritetm>

  delay(del);
   d432c:	4638      	mov	r0, r7
   d432e:	f000 fd59 	bl	d4de4 <delay>

  motorsOff(offDel);
   d4332:	4630      	mov	r0, r6
   d4334:	f7ff fef0 	bl	d4118 <_Z9motorsOffl>
}
   d4338:	b005      	add	sp, #20
   d433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d433c:	2003e3ec 	.word	0x2003e3ec
   d4340:	000d6fcc 	.word	0x000d6fcc
   d4344:	000d6fd2 	.word	0x000d6fd2
   d4348:	2003e33c 	.word	0x2003e33c
   d434c:	2003e330 	.word	0x2003e330

000d4350 <_Z10turnLeft90l>:

void turnLeft90(int32_t offDel)
{
   d4350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4352:	4604      	mov	r4, r0
  Mesh.publish("leftR", String(255));
   d4354:	220a      	movs	r2, #10
   d4356:	21ff      	movs	r1, #255	; 0xff
   d4358:	4668      	mov	r0, sp
   d435a:	f001 fcb9 	bl	d5cd0 <_ZN6StringC1Eih>
   d435e:	9a00      	ldr	r2, [sp, #0]
   d4360:	4915      	ldr	r1, [pc, #84]	; (d43b8 <_Z10turnLeft90l+0x68>)
   d4362:	4816      	ldr	r0, [pc, #88]	; (d43bc <_Z10turnLeft90l+0x6c>)
   d4364:	f001 fa14 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4368:	4668      	mov	r0, sp
   d436a:	f001 fc07 	bl	d5b7c <_ZN6StringD1Ev>
  Mesh.publish("rightF", String(255));
   d436e:	220a      	movs	r2, #10
   d4370:	21ff      	movs	r1, #255	; 0xff
   d4372:	4668      	mov	r0, sp
   d4374:	f001 fcac 	bl	d5cd0 <_ZN6StringC1Eih>
   d4378:	9a00      	ldr	r2, [sp, #0]
   d437a:	4911      	ldr	r1, [pc, #68]	; (d43c0 <_Z10turnLeft90l+0x70>)
   d437c:	480f      	ldr	r0, [pc, #60]	; (d43bc <_Z10turnLeft90l+0x6c>)
   d437e:	f001 fa07 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4382:	4668      	mov	r0, sp
   d4384:	f001 fbfa 	bl	d5b7c <_ZN6StringD1Ev>

  analogWrite(leftReverse, 255);
   d4388:	4b0e      	ldr	r3, [pc, #56]	; (d43c4 <_Z10turnLeft90l+0x74>)
   d438a:	21ff      	movs	r1, #255	; 0xff
   d438c:	8818      	ldrh	r0, [r3, #0]
   d438e:	f002 fb37 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(rightForward, 255);
   d4392:	4b0d      	ldr	r3, [pc, #52]	; (d43c8 <_Z10turnLeft90l+0x78>)
   d4394:	21ff      	movs	r1, #255	; 0xff
   d4396:	8818      	ldrh	r0, [r3, #0]
   d4398:	f002 fb32 	bl	d6a00 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : TIGHT_TURN_DELAY);
   d439c:	4b0b      	ldr	r3, [pc, #44]	; (d43cc <_Z10turnLeft90l+0x7c>)
   d439e:	6818      	ldr	r0, [r3, #0]
   d43a0:	f240 2349 	movw	r3, #585	; 0x249
   d43a4:	2800      	cmp	r0, #0
   d43a6:	bf08      	it	eq
   d43a8:	4618      	moveq	r0, r3
   d43aa:	f000 fd1b 	bl	d4de4 <delay>

  motorsOff(offDel);
   d43ae:	4620      	mov	r0, r4
   d43b0:	f7ff feb2 	bl	d4118 <_Z9motorsOffl>
}
   d43b4:	b004      	add	sp, #16
   d43b6:	bd10      	pop	{r4, pc}
   d43b8:	000d6fcc 	.word	0x000d6fcc
   d43bc:	2003e3ec 	.word	0x2003e3ec
   d43c0:	000d6fc5 	.word	0x000d6fc5
   d43c4:	2003e33c 	.word	0x2003e33c
   d43c8:	2003e32c 	.word	0x2003e32c
   d43cc:	2003e3b0 	.word	0x2003e3b0

000d43d0 <_Z6sentryv>:
  spinRight360();
  motorsOff(200);
}

void sentry()
{
   d43d0:	b510      	push	{r4, lr}
   d43d2:	2404      	movs	r4, #4
  for (size_t i = 0; i < 4; i++)
  {
    // move forward 1 sec
    moveForward(SENTRY_MODE_SPEED, SENTRY_MODE_DELAY, 100);
   d43d4:	2264      	movs	r2, #100	; 0x64
   d43d6:	4610      	mov	r0, r2
   d43d8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   d43dc:	f7ff feae 	bl	d413c <_Z11moveForwardlll>

    // turn left
    turnLeft90(100);
   d43e0:	2064      	movs	r0, #100	; 0x64
   d43e2:	f7ff ffb5 	bl	d4350 <_Z10turnLeft90l>
  motorsOff(200);
}

void sentry()
{
  for (size_t i = 0; i < 4; i++)
   d43e6:	3c01      	subs	r4, #1
   d43e8:	d1f4      	bne.n	d43d4 <_Z6sentryv+0x4>
    moveForward(SENTRY_MODE_SPEED, SENTRY_MODE_DELAY, 100);

    // turn left
    turnLeft90(100);
  } // repeat
}
   d43ea:	bd10      	pop	{r4, pc}

000d43ec <_Z11turnRight90l>:

  motorsOff(offDel);
}

void turnRight90(int32_t offDel)
{
   d43ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d43ee:	4604      	mov	r4, r0
  Mesh.publish("rightR", String(255));
   d43f0:	220a      	movs	r2, #10
   d43f2:	21ff      	movs	r1, #255	; 0xff
   d43f4:	4668      	mov	r0, sp
   d43f6:	f001 fc6b 	bl	d5cd0 <_ZN6StringC1Eih>
   d43fa:	9a00      	ldr	r2, [sp, #0]
   d43fc:	4915      	ldr	r1, [pc, #84]	; (d4454 <_Z11turnRight90l+0x68>)
   d43fe:	4816      	ldr	r0, [pc, #88]	; (d4458 <_Z11turnRight90l+0x6c>)
   d4400:	f001 f9c6 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4404:	4668      	mov	r0, sp
   d4406:	f001 fbb9 	bl	d5b7c <_ZN6StringD1Ev>
  Mesh.publish("leftF", String(255));
   d440a:	220a      	movs	r2, #10
   d440c:	21ff      	movs	r1, #255	; 0xff
   d440e:	4668      	mov	r0, sp
   d4410:	f001 fc5e 	bl	d5cd0 <_ZN6StringC1Eih>
   d4414:	9a00      	ldr	r2, [sp, #0]
   d4416:	4911      	ldr	r1, [pc, #68]	; (d445c <_Z11turnRight90l+0x70>)
   d4418:	480f      	ldr	r0, [pc, #60]	; (d4458 <_Z11turnRight90l+0x6c>)
   d441a:	f001 f9b9 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d441e:	4668      	mov	r0, sp
   d4420:	f001 fbac 	bl	d5b7c <_ZN6StringD1Ev>

  analogWrite(rightReverse, 255);
   d4424:	4b0e      	ldr	r3, [pc, #56]	; (d4460 <_Z11turnRight90l+0x74>)
   d4426:	21ff      	movs	r1, #255	; 0xff
   d4428:	8818      	ldrh	r0, [r3, #0]
   d442a:	f002 fae9 	bl	d6a00 <_Z11analogWritetm>
  analogWrite(leftForward, 255);
   d442e:	4b0d      	ldr	r3, [pc, #52]	; (d4464 <_Z11turnRight90l+0x78>)
   d4430:	21ff      	movs	r1, #255	; 0xff
   d4432:	8818      	ldrh	r0, [r3, #0]
   d4434:	f002 fae4 	bl	d6a00 <_Z11analogWritetm>

  delay(overrideDelay ? overrideDelay : TIGHT_TURN_DELAY);
   d4438:	4b0b      	ldr	r3, [pc, #44]	; (d4468 <_Z11turnRight90l+0x7c>)
   d443a:	6818      	ldr	r0, [r3, #0]
   d443c:	f240 2349 	movw	r3, #585	; 0x249
   d4440:	2800      	cmp	r0, #0
   d4442:	bf08      	it	eq
   d4444:	4618      	moveq	r0, r3
   d4446:	f000 fccd 	bl	d4de4 <delay>

  motorsOff(offDel);
   d444a:	4620      	mov	r0, r4
   d444c:	f7ff fe64 	bl	d4118 <_Z9motorsOffl>
}
   d4450:	b004      	add	sp, #16
   d4452:	bd10      	pop	{r4, pc}
   d4454:	000d6fd2 	.word	0x000d6fd2
   d4458:	2003e3ec 	.word	0x2003e3ec
   d445c:	000d6fbf 	.word	0x000d6fbf
   d4460:	2003e330 	.word	0x2003e330
   d4464:	2003e338 	.word	0x2003e338
   d4468:	2003e3b0 	.word	0x2003e3b0

000d446c <_Z15followTheLeaderv>:
}

/* SEQUENCES */

void followTheLeader()
{
   d446c:	b508      	push	{r3, lr}
  //Move forward,
  moveForward(DRIVE_VAL, 800, 100);
   d446e:	2264      	movs	r2, #100	; 0x64
   d4470:	f44f 7148 	mov.w	r1, #800	; 0x320
   d4474:	207d      	movs	r0, #125	; 0x7d
   d4476:	f7ff fe61 	bl	d413c <_Z11moveForwardlll>

  //Move back to start
  moveBack(DRIVE_VAL, 800, 1000);
   d447a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d447e:	f44f 7148 	mov.w	r1, #800	; 0x320
   d4482:	207d      	movs	r0, #125	; 0x7d
   d4484:	f7ff ff28 	bl	d42d8 <_Z8moveBacklll>

  turnRight90(500);
   d4488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d448c:	f7ff ffae 	bl	d43ec <_Z11turnRight90l>
  turnLeft90(10);
   d4490:	200a      	movs	r0, #10
}
   d4492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  //Move back to start
  moveBack(DRIVE_VAL, 800, 1000);

  turnRight90(500);
  turnLeft90(10);
   d4496:	f7ff bf5b 	b.w	d4350 <_Z10turnLeft90l>
	...

000d449c <_Z8checkPiniPlPKc>:
/* UTILITIES */

// Check and control when in RC mode where leader is controlling
// followers via th RC remote.
void checkPin(int pin, int32_t *lastVal, const char *event)
{
   d449c:	b570      	push	{r4, r5, r6, lr}
  int32_t pinVal = analogRead(pin) / 16;
   d449e:	b280      	uxth	r0, r0
/* UTILITIES */

// Check and control when in RC mode where leader is controlling
// followers via th RC remote.
void checkPin(int pin, int32_t *lastVal, const char *event)
{
   d44a0:	b086      	sub	sp, #24
   d44a2:	460e      	mov	r6, r1
   d44a4:	4615      	mov	r5, r2
  int32_t pinVal = analogRead(pin) / 16;
   d44a6:	f002 fa94 	bl	d69d2 <analogRead>
  if (pinVal > MIN_PIN_VAL)
    pinVal = DRIVE_VAL;
  else
    pinVal = 0;

  if (pinVal != *lastVal && pinVal == DRIVE_VAL)
   d44aa:	6833      	ldr	r3, [r6, #0]
  int32_t pinVal = analogRead(pin) / 16;

  if (pinVal > MIN_PIN_VAL)
    pinVal = DRIVE_VAL;
  else
    pinVal = 0;
   d44ac:	f5b0 6f17 	cmp.w	r0, #2416	; 0x970
   d44b0:	bfac      	ite	ge
   d44b2:	247d      	movge	r4, #125	; 0x7d
   d44b4:	2400      	movlt	r4, #0

  if (pinVal != *lastVal && pinVal == DRIVE_VAL)
   d44b6:	429c      	cmp	r4, r3
   d44b8:	d001      	beq.n	d44be <_Z8checkPiniPlPKc+0x22>
   d44ba:	2c7d      	cmp	r4, #125	; 0x7d
   d44bc:	d001      	beq.n	d44c2 <_Z8checkPiniPlPKc+0x26>
    *lastVal = pinVal;

    Mesh.publish(event, String(DRIVE_VAL));
    Serial.printlnf("%s val: %i", event, DRIVE_VAL);
  }
  else if (pinVal == 0 && *lastVal != 0)
   d44be:	b9b4      	cbnz	r4, d44ee <_Z8checkPiniPlPKc+0x52>
   d44c0:	b1ab      	cbz	r3, d44ee <_Z8checkPiniPlPKc+0x52>
  {
    *lastVal = 0;

    Mesh.publish(event, String(0));
   d44c2:	220a      	movs	r2, #10
   d44c4:	4621      	mov	r1, r4
    Mesh.publish(event, String(DRIVE_VAL));
    Serial.printlnf("%s val: %i", event, DRIVE_VAL);
  }
  else if (pinVal == 0 && *lastVal != 0)
  {
    *lastVal = 0;
   d44c6:	6034      	str	r4, [r6, #0]

    Mesh.publish(event, String(0));
   d44c8:	a802      	add	r0, sp, #8
   d44ca:	f001 fc01 	bl	d5cd0 <_ZN6StringC1Eih>
   d44ce:	9a02      	ldr	r2, [sp, #8]
   d44d0:	4808      	ldr	r0, [pc, #32]	; (d44f4 <_Z8checkPiniPlPKc+0x58>)
   d44d2:	4629      	mov	r1, r5
   d44d4:	f001 f95c 	bl	d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d44d8:	a802      	add	r0, sp, #8
   d44da:	f001 fb4f 	bl	d5b7c <_ZN6StringD1Ev>
    Serial.printlnf("%s val: %i", event, 0);
   d44de:	f002 f92f 	bl	d6740 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d44e2:	9400      	str	r4, [sp, #0]
   d44e4:	462b      	mov	r3, r5
   d44e6:	4a04      	ldr	r2, [pc, #16]	; (d44f8 <_Z8checkPiniPlPKc+0x5c>)
   d44e8:	2101      	movs	r1, #1
   d44ea:	f001 fad3 	bl	d5a94 <_ZN5Print11printf_implEbPKcz>
  }
}
   d44ee:	b006      	add	sp, #24
   d44f0:	bd70      	pop	{r4, r5, r6, pc}
   d44f2:	bf00      	nop
   d44f4:	2003e3ec 	.word	0x2003e3ec
   d44f8:	000d6fd9 	.word	0x000d6fd9

000d44fc <loop>:
  Particle.function("switchMode", switchSwarmMode);
  Particle.function("swarmDemo", swarmDemo);
}

void loop()
{
   d44fc:	b508      	push	{r3, lr}
  if (mode == RC_MODE)
   d44fe:	4b0f      	ldr	r3, [pc, #60]	; (d453c <loop+0x40>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	2b01      	cmp	r3, #1
   d4504:	d119      	bne.n	d453a <loop+0x3e>
  {
    checkPin(leftReverse, &lastLeftRVal, "leftR");
   d4506:	4b0e      	ldr	r3, [pc, #56]	; (d4540 <loop+0x44>)
   d4508:	4a0e      	ldr	r2, [pc, #56]	; (d4544 <loop+0x48>)
   d450a:	6818      	ldr	r0, [r3, #0]
   d450c:	490e      	ldr	r1, [pc, #56]	; (d4548 <loop+0x4c>)
   d450e:	f7ff ffc5 	bl	d449c <_Z8checkPiniPlPKc>
    checkPin(leftForward, &lastLeftFVal, "leftF");
   d4512:	4b0e      	ldr	r3, [pc, #56]	; (d454c <loop+0x50>)
   d4514:	4a0e      	ldr	r2, [pc, #56]	; (d4550 <loop+0x54>)
   d4516:	6818      	ldr	r0, [r3, #0]
   d4518:	490e      	ldr	r1, [pc, #56]	; (d4554 <loop+0x58>)
   d451a:	f7ff ffbf 	bl	d449c <_Z8checkPiniPlPKc>
    checkPin(rightReverse, &lastRightRVal, "rightR");
   d451e:	4b0e      	ldr	r3, [pc, #56]	; (d4558 <loop+0x5c>)
   d4520:	4a0e      	ldr	r2, [pc, #56]	; (d455c <loop+0x60>)
   d4522:	6818      	ldr	r0, [r3, #0]
   d4524:	490e      	ldr	r1, [pc, #56]	; (d4560 <loop+0x64>)
   d4526:	f7ff ffb9 	bl	d449c <_Z8checkPiniPlPKc>
    checkPin(rightForward, &lastRightFVal, "rightF");
   d452a:	4b0e      	ldr	r3, [pc, #56]	; (d4564 <loop+0x68>)
   d452c:	4a0e      	ldr	r2, [pc, #56]	; (d4568 <loop+0x6c>)
   d452e:	6818      	ldr	r0, [r3, #0]
   d4530:	490e      	ldr	r1, [pc, #56]	; (d456c <loop+0x70>)
  }
}
   d4532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (mode == RC_MODE)
  {
    checkPin(leftReverse, &lastLeftRVal, "leftR");
    checkPin(leftForward, &lastLeftFVal, "leftF");
    checkPin(rightReverse, &lastRightRVal, "rightR");
    checkPin(rightForward, &lastRightFVal, "rightF");
   d4536:	f7ff bfb1 	b.w	d449c <_Z8checkPiniPlPKc>
   d453a:	bd08      	pop	{r3, pc}
   d453c:	2003e334 	.word	0x2003e334
   d4540:	2003e33c 	.word	0x2003e33c
   d4544:	000d6fcc 	.word	0x000d6fcc
   d4548:	2003e3b4 	.word	0x2003e3b4
   d454c:	2003e338 	.word	0x2003e338
   d4550:	000d6fbf 	.word	0x000d6fbf
   d4554:	2003e3d4 	.word	0x2003e3d4
   d4558:	2003e330 	.word	0x2003e330
   d455c:	000d6fd2 	.word	0x000d6fd2
   d4560:	2003e3d0 	.word	0x2003e3d0
   d4564:	2003e32c 	.word	0x2003e32c
   d4568:	000d6fc5 	.word	0x000d6fc5
   d456c:	2003e3cc 	.word	0x2003e3cc

000d4570 <_Z7getArgs6String>:
  }
}

// Utility function to split a Particle function args string into component parts
String *getArgs(String args)
{
   d4570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4572:	4605      	mov	r5, r0
  String *vals = new String[2];
   d4574:	2028      	movs	r0, #40	; 0x28
   d4576:	f7ff fd90 	bl	d409a <_Znaj>
   d457a:	4604      	mov	r4, r0
   d457c:	b178      	cbz	r0, d459e <_Z7getArgs6String+0x2e>
   d457e:	2210      	movs	r2, #16
   d4580:	2302      	movs	r3, #2
   d4582:	f100 0608 	add.w	r6, r0, #8
   d4586:	e880 000c 	stmia.w	r0, {r2, r3}
   d458a:	491d      	ldr	r1, [pc, #116]	; (d4600 <_Z7getArgs6String+0x90>)
   d458c:	4630      	mov	r0, r6
   d458e:	f001 fb3c 	bl	d5c0a <_ZN6StringC1EPK19__FlashStringHelper>
   d4592:	f104 0018 	add.w	r0, r4, #24
   d4596:	491a      	ldr	r1, [pc, #104]	; (d4600 <_Z7getArgs6String+0x90>)
   d4598:	f001 fb37 	bl	d5c0a <_ZN6StringC1EPK19__FlashStringHelper>
   d459c:	4634      	mov	r4, r6
  int separatorIndex = args.indexOf(",");
   d459e:	4919      	ldr	r1, [pc, #100]	; (d4604 <_Z7getArgs6String+0x94>)
   d45a0:	4668      	mov	r0, sp
   d45a2:	f001 fb32 	bl	d5c0a <_ZN6StringC1EPK19__FlashStringHelper>
   d45a6:	4669      	mov	r1, sp
   d45a8:	4628      	mov	r0, r5
   d45aa:	f001 fc0b 	bl	d5dc4 <_ZNK6String7indexOfERKS_>
   d45ae:	4606      	mov	r6, r0
   d45b0:	4668      	mov	r0, sp
   d45b2:	f001 fae3 	bl	d5b7c <_ZN6StringD1Ev>

  if (separatorIndex == -1)
   d45b6:	1c73      	adds	r3, r6, #1
   d45b8:	d104      	bne.n	d45c4 <_Z7getArgs6String+0x54>
  {
    vals[0] = args;
   d45ba:	4629      	mov	r1, r5
   d45bc:	4620      	mov	r0, r4
   d45be:	f001 fb54 	bl	d5c6a <_ZN6StringaSERKS_>
   d45c2:	e019      	b.n	d45f8 <_Z7getArgs6String+0x88>
  }
  else
  {
    vals[0] = args.substring(0, separatorIndex);
   d45c4:	4633      	mov	r3, r6
   d45c6:	2200      	movs	r2, #0
   d45c8:	4629      	mov	r1, r5
   d45ca:	4668      	mov	r0, sp
   d45cc:	f001 fbfe 	bl	d5dcc <_ZNK6String9substringEjj>
   d45d0:	4669      	mov	r1, sp
   d45d2:	4620      	mov	r0, r4
   d45d4:	f001 fb63 	bl	d5c9e <_ZN6StringaSEOS_>
   d45d8:	4668      	mov	r0, sp
   d45da:	f001 facf 	bl	d5b7c <_ZN6StringD1Ev>
    vals[1] = args.substring(separatorIndex + 1);
   d45de:	1c72      	adds	r2, r6, #1
   d45e0:	4629      	mov	r1, r5
   d45e2:	4668      	mov	r0, sp
   d45e4:	f001 fc1a 	bl	d5e1c <_ZNK6String9substringEj>
   d45e8:	4669      	mov	r1, sp
   d45ea:	f104 0010 	add.w	r0, r4, #16
   d45ee:	f001 fb56 	bl	d5c9e <_ZN6StringaSEOS_>
   d45f2:	4668      	mov	r0, sp
   d45f4:	f001 fac2 	bl	d5b7c <_ZN6StringD1Ev>
  }

  return vals;
   d45f8:	4620      	mov	r0, r4
   d45fa:	b004      	add	sp, #16
   d45fc:	bd70      	pop	{r4, r5, r6, pc}
   d45fe:	bf00      	nop
   d4600:	000d70f8 	.word	0x000d70f8
   d4604:	000d6fe4 	.word	0x000d6fe4

000d4608 <_Z9swarmDemo6String>:
}

/* MODE CONTROL */

int swarmDemo(String args)
{
   d4608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (mode == RC_MODE)
   d460a:	4b19      	ldr	r3, [pc, #100]	; (d4670 <_Z9swarmDemo6String+0x68>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	2b01      	cmp	r3, #1
}

/* MODE CONTROL */

int swarmDemo(String args)
{
   d4610:	4601      	mov	r1, r0
  if (mode == RC_MODE)
   d4612:	d027      	beq.n	d4664 <_Z9swarmDemo6String+0x5c>
    return 0;

  String *argVals = getArgs(args);
   d4614:	4668      	mov	r0, sp
   d4616:	f001 fb37 	bl	d5c88 <_ZN6StringC1ERKS_>
   d461a:	4668      	mov	r0, sp
   d461c:	f7ff ffa8 	bl	d4570 <_Z7getArgs6String>
   d4620:	4604      	mov	r4, r0
   d4622:	4668      	mov	r0, sp
   d4624:	f001 faaa 	bl	d5b7c <_ZN6StringD1Ev>

  // Can be run with adjustable delays to test without recompiling
  overrideDelay = argVals[1].toInt();
   d4628:	f104 0010 	add.w	r0, r4, #16
   d462c:	f001 fbfd 	bl	d5e2a <_ZNK6String5toIntEv>
   d4630:	4b10      	ldr	r3, [pc, #64]	; (d4674 <_Z9swarmDemo6String+0x6c>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4632:	4911      	ldr	r1, [pc, #68]	; (d4678 <_Z9swarmDemo6String+0x70>)
   d4634:	6018      	str	r0, [r3, #0]
   d4636:	4620      	mov	r0, r4
   d4638:	f001 fba3 	bl	d5d82 <_ZNK6String6equalsEPKc>

  if (argVals[0] == "follow")
   d463c:	b110      	cbz	r0, d4644 <_Z9swarmDemo6String+0x3c>
  {
    // Run follow the leader demo
    followTheLeader();
   d463e:	f7ff ff15 	bl	d446c <_Z15followTheLeaderv>
   d4642:	e011      	b.n	d4668 <_Z9swarmDemo6String+0x60>
   d4644:	490d      	ldr	r1, [pc, #52]	; (d467c <_Z9swarmDemo6String+0x74>)
   d4646:	4620      	mov	r0, r4
   d4648:	f001 fb9b 	bl	d5d82 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "spin")
   d464c:	b110      	cbz	r0, d4654 <_Z9swarmDemo6String+0x4c>
  {
    spinCars();
   d464e:	f7ff fe35 	bl	d42bc <_Z8spinCarsv>
   d4652:	e009      	b.n	d4668 <_Z9swarmDemo6String+0x60>
   d4654:	490a      	ldr	r1, [pc, #40]	; (d4680 <_Z9swarmDemo6String+0x78>)
   d4656:	4620      	mov	r0, r4
   d4658:	f001 fb93 	bl	d5d82 <_ZNK6String6equalsEPKc>
  }
  else if (argVals[0] == "sentry")
   d465c:	b120      	cbz	r0, d4668 <_Z9swarmDemo6String+0x60>
  {
    sentry();
   d465e:	f7ff feb7 	bl	d43d0 <_Z6sentryv>
   d4662:	e001      	b.n	d4668 <_Z9swarmDemo6String+0x60>
/* MODE CONTROL */

int swarmDemo(String args)
{
  if (mode == RC_MODE)
    return 0;
   d4664:	2000      	movs	r0, #0
   d4666:	e000      	b.n	d466a <_Z9swarmDemo6String+0x62>
  }
  else if (argVals[0] == "spin")
  {
    spinCars();
  }
  else if (argVals[0] == "sentry")
   d4668:	2001      	movs	r0, #1
  {
    sentry();
  }

  return 1;
}
   d466a:	b004      	add	sp, #16
   d466c:	bd10      	pop	{r4, pc}
   d466e:	bf00      	nop
   d4670:	2003e334 	.word	0x2003e334
   d4674:	2003e3b0 	.word	0x2003e3b0
   d4678:	000d6fe6 	.word	0x000d6fe6
   d467c:	000d6fed 	.word	0x000d6fed
   d4680:	000d6ff2 	.word	0x000d6ff2

000d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4684:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4686:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4688:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d468a:	b17c      	cbz	r4, d46ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d468c:	6863      	ldr	r3, [r4, #4]
   d468e:	3b01      	subs	r3, #1
   d4690:	6063      	str	r3, [r4, #4]
   d4692:	b95b      	cbnz	r3, d46ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4694:	6823      	ldr	r3, [r4, #0]
   d4696:	4620      	mov	r0, r4
   d4698:	689b      	ldr	r3, [r3, #8]
   d469a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d469c:	68a3      	ldr	r3, [r4, #8]
   d469e:	3b01      	subs	r3, #1
   d46a0:	60a3      	str	r3, [r4, #8]
   d46a2:	b91b      	cbnz	r3, d46ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d46a4:	6823      	ldr	r3, [r4, #0]
   d46a6:	4620      	mov	r0, r4
   d46a8:	68db      	ldr	r3, [r3, #12]
   d46aa:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d46ac:	4628      	mov	r0, r5
   d46ae:	bd38      	pop	{r3, r4, r5, pc}

000d46b0 <setup>:
int32_t overrideDelay = 0;

/* MAIN Firmware Functions */

void setup()
{
   d46b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Serial.begin(9600);
   d46b2:	f002 f845 	bl	d6740 <_Z16_fetch_usbserialv>
   d46b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d46ba:	f002 f835 	bl	d6728 <_ZN9USBSerial5beginEl>

  pinMode(leftReverse, INPUT);
   d46be:	4b24      	ldr	r3, [pc, #144]	; (d4750 <setup+0xa0>)
   d46c0:	4d24      	ldr	r5, [pc, #144]	; (d4754 <setup+0xa4>)
   d46c2:	8818      	ldrh	r0, [r3, #0]
  pinMode(leftForward, INPUT);
  pinMode(rightForward, INPUT);
  pinMode(rightReverse, INPUT);

  Particle.publish("swarm-leader-online", version);
  Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d46c4:	4c24      	ldr	r4, [pc, #144]	; (d4758 <setup+0xa8>)

void setup()
{
  Serial.begin(9600);

  pinMode(leftReverse, INPUT);
   d46c6:	2100      	movs	r1, #0
   d46c8:	f002 f972 	bl	d69b0 <pinMode>
  pinMode(leftForward, INPUT);
   d46cc:	4b23      	ldr	r3, [pc, #140]	; (d475c <setup+0xac>)
   d46ce:	2100      	movs	r1, #0
   d46d0:	8818      	ldrh	r0, [r3, #0]
   d46d2:	f002 f96d 	bl	d69b0 <pinMode>
  pinMode(rightForward, INPUT);
   d46d6:	4b22      	ldr	r3, [pc, #136]	; (d4760 <setup+0xb0>)
   d46d8:	2100      	movs	r1, #0
   d46da:	8818      	ldrh	r0, [r3, #0]
   d46dc:	f002 f968 	bl	d69b0 <pinMode>
  pinMode(rightReverse, INPUT);
   d46e0:	4b20      	ldr	r3, [pc, #128]	; (d4764 <setup+0xb4>)
   d46e2:	2100      	movs	r1, #0
   d46e4:	8818      	ldrh	r0, [r3, #0]
   d46e6:	f002 f963 	bl	d69b0 <pinMode>

  Particle.publish("swarm-leader-online", version);
   d46ea:	682a      	ldr	r2, [r5, #0]
   d46ec:	491e      	ldr	r1, [pc, #120]	; (d4768 <setup+0xb8>)
   d46ee:	4668      	mov	r0, sp
   d46f0:	f7ff fce4 	bl	d40bc <_ZN10CloudClass7publishEPKcS1_.isra.8>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d46f4:	a801      	add	r0, sp, #4
   d46f6:	f7ff ffc5 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d46fa:	6821      	ldr	r1, [r4, #0]
   d46fc:	4b1b      	ldr	r3, [pc, #108]	; (d476c <setup+0xbc>)
   d46fe:	4a1c      	ldr	r2, [pc, #112]	; (d4770 <setup+0xc0>)
   d4700:	4668      	mov	r0, sp
   d4702:	2901      	cmp	r1, #1
   d4704:	bf18      	it	ne
   d4706:	461a      	movne	r2, r3
   d4708:	491a      	ldr	r1, [pc, #104]	; (d4774 <setup+0xc4>)
   d470a:	f7ff fcd7 	bl	d40bc <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d470e:	a801      	add	r0, sp, #4
   d4710:	f7ff ffb8 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d4714:	2308      	movs	r3, #8
   d4716:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d471a:	4b17      	ldr	r3, [pc, #92]	; (d4778 <setup+0xc8>)
   d471c:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d471e:	4629      	mov	r1, r5
   d4720:	466b      	mov	r3, sp
   d4722:	2204      	movs	r2, #4
   d4724:	4815      	ldr	r0, [pc, #84]	; (d477c <setup+0xcc>)
   d4726:	f000 fabd 	bl	d4ca4 <spark_variable>
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
    }

    static inline bool _variable(const char *varKey, const int32_t* userVar, const CloudVariableTypeInt& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::value(), NULL), false);
   d472a:	2300      	movs	r3, #0
   d472c:	4621      	mov	r1, r4
   d472e:	2202      	movs	r2, #2
   d4730:	4810      	ldr	r0, [pc, #64]	; (d4774 <setup+0xc4>)
   d4732:	f000 fab7 	bl	d4ca4 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4736:	4a12      	ldr	r2, [pc, #72]	; (d4780 <setup+0xd0>)
   d4738:	4912      	ldr	r1, [pc, #72]	; (d4784 <setup+0xd4>)
   d473a:	4813      	ldr	r0, [pc, #76]	; (d4788 <setup+0xd8>)
   d473c:	f000 fbb4 	bl	d4ea8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4740:	4a12      	ldr	r2, [pc, #72]	; (d478c <setup+0xdc>)
   d4742:	4913      	ldr	r1, [pc, #76]	; (d4790 <setup+0xe0>)
   d4744:	4810      	ldr	r0, [pc, #64]	; (d4788 <setup+0xd8>)
   d4746:	f000 fbaf 	bl	d4ea8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("fw-version", version);
  Particle.variable("swarm-mode", mode);

  Particle.function("switchMode", switchSwarmMode);
  Particle.function("swarmDemo", swarmDemo);
}
   d474a:	b003      	add	sp, #12
   d474c:	bd30      	pop	{r4, r5, pc}
   d474e:	bf00      	nop
   d4750:	2003e33c 	.word	0x2003e33c
   d4754:	2003e3bc 	.word	0x2003e3bc
   d4758:	2003e334 	.word	0x2003e334
   d475c:	2003e338 	.word	0x2003e338
   d4760:	2003e32c 	.word	0x2003e32c
   d4764:	2003e330 	.word	0x2003e330
   d4768:	000d700b 	.word	0x000d700b
   d476c:	000d7001 	.word	0x000d7001
   d4770:	000d6ff9 	.word	0x000d6ff9
   d4774:	000d701f 	.word	0x000d701f
   d4778:	000d40b7 	.word	0x000d40b7
   d477c:	000d702a 	.word	0x000d702a
   d4780:	000d7035 	.word	0x000d7035
   d4784:	000d4795 	.word	0x000d4795
   d4788:	000d4e7d 	.word	0x000d4e7d
   d478c:	000d7040 	.word	0x000d7040
   d4790:	000d4609 	.word	0x000d4609

000d4794 <_Z15switchSwarmMode6String>:

  return 1;
}

int switchSwarmMode(String args)
{
   d4794:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4796:	4606      	mov	r6, r0
  int32_t newMode = args.toInt();
   d4798:	f001 fb47 	bl	d5e2a <_ZNK6String5toIntEv>
   d479c:	4d26      	ldr	r5, [pc, #152]	; (d4838 <_Z15switchSwarmMode6String+0xa4>)

  if (newMode == 0) // It's a String
   d479e:	4604      	mov	r4, r0
   d47a0:	2800      	cmp	r0, #0
   d47a2:	d139      	bne.n	d4818 <_Z15switchSwarmMode6String+0x84>
   d47a4:	4925      	ldr	r1, [pc, #148]	; (d483c <_Z15switchSwarmMode6String+0xa8>)
   d47a6:	4630      	mov	r0, r6
   d47a8:	f001 faeb 	bl	d5d82 <_ZNK6String6equalsEPKc>
  {
    if (args == "rc")
   d47ac:	b190      	cbz	r0, d47d4 <_Z15switchSwarmMode6String+0x40>
    {
      mode = RC_MODE;
   d47ae:	2301      	movs	r3, #1
   d47b0:	602b      	str	r3, [r5, #0]

      pinMode(leftReverse, INPUT);
   d47b2:	4b23      	ldr	r3, [pc, #140]	; (d4840 <_Z15switchSwarmMode6String+0xac>)
   d47b4:	4621      	mov	r1, r4
   d47b6:	8818      	ldrh	r0, [r3, #0]
   d47b8:	f002 f8fa 	bl	d69b0 <pinMode>
      pinMode(leftForward, INPUT);
   d47bc:	4b21      	ldr	r3, [pc, #132]	; (d4844 <_Z15switchSwarmMode6String+0xb0>)
   d47be:	4621      	mov	r1, r4
   d47c0:	8818      	ldrh	r0, [r3, #0]
   d47c2:	f002 f8f5 	bl	d69b0 <pinMode>
      pinMode(rightForward, INPUT);
   d47c6:	4b20      	ldr	r3, [pc, #128]	; (d4848 <_Z15switchSwarmMode6String+0xb4>)
   d47c8:	4621      	mov	r1, r4
   d47ca:	8818      	ldrh	r0, [r3, #0]
   d47cc:	f002 f8f0 	bl	d69b0 <pinMode>
      pinMode(rightReverse, INPUT);
   d47d0:	4621      	mov	r1, r4
   d47d2:	e016      	b.n	d4802 <_Z15switchSwarmMode6String+0x6e>
   d47d4:	491d      	ldr	r1, [pc, #116]	; (d484c <_Z15switchSwarmMode6String+0xb8>)
   d47d6:	4630      	mov	r0, r6
   d47d8:	f001 fad3 	bl	d5d82 <_ZNK6String6equalsEPKc>
    }
    else if (args == "demo")
   d47dc:	b1a8      	cbz	r0, d480a <_Z15switchSwarmMode6String+0x76>
    {
      mode = DEMO_MODE;
   d47de:	2302      	movs	r3, #2
   d47e0:	602b      	str	r3, [r5, #0]

      pinMode(leftReverse, OUTPUT);
   d47e2:	4b17      	ldr	r3, [pc, #92]	; (d4840 <_Z15switchSwarmMode6String+0xac>)
   d47e4:	2101      	movs	r1, #1
   d47e6:	8818      	ldrh	r0, [r3, #0]
   d47e8:	f002 f8e2 	bl	d69b0 <pinMode>
      pinMode(leftForward, OUTPUT);
   d47ec:	4b15      	ldr	r3, [pc, #84]	; (d4844 <_Z15switchSwarmMode6String+0xb0>)
   d47ee:	2101      	movs	r1, #1
   d47f0:	8818      	ldrh	r0, [r3, #0]
   d47f2:	f002 f8dd 	bl	d69b0 <pinMode>
      pinMode(rightForward, OUTPUT);
   d47f6:	4b14      	ldr	r3, [pc, #80]	; (d4848 <_Z15switchSwarmMode6String+0xb4>)
   d47f8:	2101      	movs	r1, #1
   d47fa:	8818      	ldrh	r0, [r3, #0]
   d47fc:	f002 f8d8 	bl	d69b0 <pinMode>
      pinMode(rightReverse, OUTPUT);
   d4800:	2101      	movs	r1, #1
   d4802:	4b13      	ldr	r3, [pc, #76]	; (d4850 <_Z15switchSwarmMode6String+0xbc>)
   d4804:	8818      	ldrh	r0, [r3, #0]
   d4806:	f002 f8d3 	bl	d69b0 <pinMode>
    }

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d480a:	6829      	ldr	r1, [r5, #0]
   d480c:	4b11      	ldr	r3, [pc, #68]	; (d4854 <_Z15switchSwarmMode6String+0xc0>)
   d480e:	4a12      	ldr	r2, [pc, #72]	; (d4858 <_Z15switchSwarmMode6String+0xc4>)
   d4810:	2901      	cmp	r1, #1
   d4812:	bf18      	it	ne
   d4814:	461a      	movne	r2, r3
   d4816:	e005      	b.n	d4824 <_Z15switchSwarmMode6String+0x90>
  }
  else
  {
    mode = newMode;

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d4818:	4b0e      	ldr	r3, [pc, #56]	; (d4854 <_Z15switchSwarmMode6String+0xc0>)
   d481a:	4a0f      	ldr	r2, [pc, #60]	; (d4858 <_Z15switchSwarmMode6String+0xc4>)

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
  }
  else
  {
    mode = newMode;
   d481c:	6028      	str	r0, [r5, #0]

    Particle.publish("swarm-mode", mode == 1 ? "RC Mode" : "Demo Mode");
   d481e:	2801      	cmp	r0, #1
   d4820:	bf18      	it	ne
   d4822:	461a      	movne	r2, r3
   d4824:	490d      	ldr	r1, [pc, #52]	; (d485c <_Z15switchSwarmMode6String+0xc8>)
   d4826:	4668      	mov	r0, sp
   d4828:	f7ff fc48 	bl	d40bc <_ZN10CloudClass7publishEPKcS1_.isra.8>
   d482c:	a801      	add	r0, sp, #4
   d482e:	f7ff ff29 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  return 1;
}
   d4832:	2001      	movs	r0, #1
   d4834:	b002      	add	sp, #8
   d4836:	bd70      	pop	{r4, r5, r6, pc}
   d4838:	2003e334 	.word	0x2003e334
   d483c:	000d704a 	.word	0x000d704a
   d4840:	2003e33c 	.word	0x2003e33c
   d4844:	2003e338 	.word	0x2003e338
   d4848:	2003e32c 	.word	0x2003e32c
   d484c:	000d704d 	.word	0x000d704d
   d4850:	2003e330 	.word	0x2003e330
   d4854:	000d7001 	.word	0x000d7001
   d4858:	000d6ff9 	.word	0x000d6ff9
   d485c:	000d701f 	.word	0x000d701f

000d4860 <_GLOBAL__sub_I_leftReverse>:
    vals[0] = args.substring(0, separatorIndex);
    vals[1] = args.substring(separatorIndex + 1);
  }

  return vals;
   d4860:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4862:	4b08      	ldr	r3, [pc, #32]	; (d4884 <_GLOBAL__sub_I_leftReverse+0x24>)

// Sentry mode
#define SENTRY_MODE_DELAY 700
#define SENTRY_MODE_SPEED 100

String version = "v1.2";
   d4864:	4c08      	ldr	r4, [pc, #32]	; (d4888 <_GLOBAL__sub_I_leftReverse+0x28>)
   d4866:	2200      	movs	r2, #0
   d4868:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d486a:	f000 f857 	bl	d491c <HAL_Pin_Map>
   d486e:	4907      	ldr	r1, [pc, #28]	; (d488c <_GLOBAL__sub_I_leftReverse+0x2c>)
   d4870:	4620      	mov	r0, r4
   d4872:	f001 f9ca 	bl	d5c0a <_ZN6StringC1EPK19__FlashStringHelper>
   d4876:	4620      	mov	r0, r4
   d4878:	4a05      	ldr	r2, [pc, #20]	; (d4890 <_GLOBAL__sub_I_leftReverse+0x30>)
   d487a:	4906      	ldr	r1, [pc, #24]	; (d4894 <_GLOBAL__sub_I_leftReverse+0x34>)
    vals[0] = args.substring(0, separatorIndex);
    vals[1] = args.substring(separatorIndex + 1);
  }

  return vals;
   d487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// Sentry mode
#define SENTRY_MODE_DELAY 700
#define SENTRY_MODE_SPEED 100

String version = "v1.2";
   d4880:	f002 b926 	b.w	d6ad0 <__aeabi_atexit>
   d4884:	2003e3b8 	.word	0x2003e3b8
   d4888:	2003e3bc 	.word	0x2003e3bc
   d488c:	000d7052 	.word	0x000d7052
   d4890:	2003e3ac 	.word	0x2003e3ac
   d4894:	000d5b7d 	.word	0x000d5b7d

000d4898 <_GLOBAL__sub_I__ZN5StateC2EPFvvE>:
   d4898:	f000 b840 	b.w	d491c <HAL_Pin_Map>

000d489c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <os_thread_is_current+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	689b      	ldr	r3, [r3, #8]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030248 	.word	0x00030248

000d48ac <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <os_thread_join+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	691b      	ldr	r3, [r3, #16]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030248 	.word	0x00030248

000d48bc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <os_thread_cleanup+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	695b      	ldr	r3, [r3, #20]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030248 	.word	0x00030248

000d48cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <os_mutex_create+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030248 	.word	0x00030248

000d48dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <os_mutex_recursive_create+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030248 	.word	0x00030248

000d48ec <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <os_mutex_recursive_lock+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030248 	.word	0x00030248

000d48fc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <os_mutex_recursive_unlock+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030248 	.word	0x00030248

000d490c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	695b      	ldr	r3, [r3, #20]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030218 	.word	0x00030218

000d491c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_Pin_Map+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	681b      	ldr	r3, [r3, #0]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	0003022c 	.word	0x0003022c

000d492c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_Validate_Pin_Function+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	685b      	ldr	r3, [r3, #4]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003022c 	.word	0x0003022c

000d493c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <HAL_Pin_Mode+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	689b      	ldr	r3, [r3, #8]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	0003022c 	.word	0x0003022c

000d494c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <HAL_Get_Pin_Mode+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	68db      	ldr	r3, [r3, #12]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	0003022c 	.word	0x0003022c

000d495c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_DAC_Write+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	0003022c 	.word	0x0003022c

000d496c <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <HAL_ADC_Read+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	0003022c 	.word	0x0003022c

000d497c <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_PWM_Write_Ext+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	0003022c 	.word	0x0003022c

000d498c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <HAL_I2C_Write_Data+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	6a1b      	ldr	r3, [r3, #32]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030228 	.word	0x00030228

000d499c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <HAL_I2C_Available_Data+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030228 	.word	0x00030228

000d49ac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_I2C_Read_Data+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030228 	.word	0x00030228

000d49bc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_I2C_Peek_Data+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030228 	.word	0x00030228

000d49cc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_I2C_Flush_Data+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030228 	.word	0x00030228

000d49dc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_I2C_Is_Enabled+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030228 	.word	0x00030228

000d49ec <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_I2C_Init+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030228 	.word	0x00030228

000d49fc <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <if_name_to_index+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	691b      	ldr	r3, [r3, #16]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003026c 	.word	0x0003026c

000d4a0c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <if_index_to_name+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	695b      	ldr	r3, [r3, #20]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003026c 	.word	0x0003026c

000d4a1c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <if_get_by_index+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	699b      	ldr	r3, [r3, #24]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003026c 	.word	0x0003026c

000d4a2c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <if_get_addrs+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003026c 	.word	0x0003026c

000d4a3c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <if_free_if_addrs+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003026c 	.word	0x0003026c

000d4a4c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <inet_inet_ntop+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	695b      	ldr	r3, [r3, #20]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030264 	.word	0x00030264

000d4a5c <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <inet_inet_pton+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	699b      	ldr	r3, [r3, #24]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030264 	.word	0x00030264

000d4a6c <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <inet_htonl+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6a1b      	ldr	r3, [r3, #32]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	00030264 	.word	0x00030264

000d4a7c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <inet_ntohs+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030264 	.word	0x00030264

000d4a8c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <inet_htons+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030264 	.word	0x00030264

000d4a9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <netdb_freeaddrinfo+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	689b      	ldr	r3, [r3, #8]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030268 	.word	0x00030268

000d4aac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <netdb_getaddrinfo+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	68db      	ldr	r3, [r3, #12]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030268 	.word	0x00030268

000d4abc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <sock_bind+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	685b      	ldr	r3, [r3, #4]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030238 	.word	0x00030238

000d4acc <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <sock_setsockopt+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	699b      	ldr	r3, [r3, #24]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030238 	.word	0x00030238

000d4adc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <sock_close+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	69db      	ldr	r3, [r3, #28]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030238 	.word	0x00030238

000d4aec <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <sock_recvfrom+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030238 	.word	0x00030238

000d4afc <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <sock_sendto+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030238 	.word	0x00030238

000d4b0c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <sock_socket+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030238 	.word	0x00030238

000d4b1c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_SPI_Init+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	69db      	ldr	r3, [r3, #28]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030230 	.word	0x00030230

000d4b2c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_SPI_Is_Enabled+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	6a1b      	ldr	r3, [r3, #32]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030230 	.word	0x00030230

000d4b3c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <HAL_USART_Init+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	681b      	ldr	r3, [r3, #0]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	0003023c 	.word	0x0003023c

000d4b4c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <HAL_USART_Write_Data+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	68db      	ldr	r3, [r3, #12]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003023c 	.word	0x0003023c

000d4b5c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <HAL_USART_Available_Data+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	691b      	ldr	r3, [r3, #16]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	0003023c 	.word	0x0003023c

000d4b6c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <HAL_USART_Read_Data+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	695b      	ldr	r3, [r3, #20]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	0003023c 	.word	0x0003023c

000d4b7c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <HAL_USART_Peek_Data+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	699b      	ldr	r3, [r3, #24]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003023c 	.word	0x0003023c

000d4b8c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_USART_Flush_Data+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	69db      	ldr	r3, [r3, #28]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003023c 	.word	0x0003023c

000d4b9c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_USART_Is_Enabled+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6a1b      	ldr	r3, [r3, #32]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003023c 	.word	0x0003023c

000d4bac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003023c 	.word	0x0003023c

000d4bbc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_USB_USART_Init+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	681b      	ldr	r3, [r3, #0]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	0003024c 	.word	0x0003024c

000d4bcc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <HAL_USB_USART_Begin+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	685b      	ldr	r3, [r3, #4]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	0003024c 	.word	0x0003024c

000d4bdc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <HAL_USB_USART_Available_Data+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	691b      	ldr	r3, [r3, #16]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	0003024c 	.word	0x0003024c

000d4bec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	695b      	ldr	r3, [r3, #20]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	0003024c 	.word	0x0003024c

000d4bfc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <HAL_USB_USART_Receive_Data+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	699b      	ldr	r3, [r3, #24]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	0003024c 	.word	0x0003024c

000d4c0c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <HAL_USB_USART_Send_Data+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	69db      	ldr	r3, [r3, #28]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	0003024c 	.word	0x0003024c

000d4c1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <HAL_USB_USART_Flush_Data+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a1b      	ldr	r3, [r3, #32]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	0003024c 	.word	0x0003024c

000d4c2c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <log_message+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030260 	.word	0x00030260

000d4c3c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <set_system_mode+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	685b      	ldr	r3, [r3, #4]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030220 	.word	0x00030220

000d4c4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <system_delay_ms+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	695b      	ldr	r3, [r3, #20]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030220 	.word	0x00030220

000d4c5c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <application_thread_current+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030220 	.word	0x00030220

000d4c6c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <application_thread_invoke+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030220 	.word	0x00030220

000d4c7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b03      	ldr	r3, [pc, #12]	; (d4c8c <system_ctrl_set_app_request_handler+0x10>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c86:	9301      	str	r3, [sp, #4]
   d4c88:	bd08      	pop	{r3, pc}
   d4c8a:	0000      	.short	0x0000
   d4c8c:	00030220 	.word	0x00030220

000d4c90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b03      	ldr	r3, [pc, #12]	; (d4ca0 <system_ctrl_set_result+0x10>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c9a:	9301      	str	r3, [sp, #4]
   d4c9c:	bd08      	pop	{r3, pc}
   d4c9e:	0000      	.short	0x0000
   d4ca0:	00030220 	.word	0x00030220

000d4ca4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <spark_variable+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	681b      	ldr	r3, [r3, #0]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030244 	.word	0x00030244

000d4cb4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <spark_function+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	685b      	ldr	r3, [r3, #4]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030244 	.word	0x00030244

000d4cc4 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <spark_send_event+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6a1b      	ldr	r3, [r3, #32]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030244 	.word	0x00030244

000d4cd4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030244 	.word	0x00030244

000d4ce4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <network_connect+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	685b      	ldr	r3, [r3, #4]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030240 	.word	0x00030240

000d4cf4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <network_connecting+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030240 	.word	0x00030240

000d4d04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <network_disconnect+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	68db      	ldr	r3, [r3, #12]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030240 	.word	0x00030240

000d4d14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <network_ready+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	691b      	ldr	r3, [r3, #16]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030240 	.word	0x00030240

000d4d24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <network_on+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	695b      	ldr	r3, [r3, #20]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030240 	.word	0x00030240

000d4d34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <network_off+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	699b      	ldr	r3, [r3, #24]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030240 	.word	0x00030240

000d4d44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <network_listen+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	69db      	ldr	r3, [r3, #28]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030240 	.word	0x00030240

000d4d54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <network_listening+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6a1b      	ldr	r3, [r3, #32]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030240 	.word	0x00030240

000d4d64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <network_set_listen_timeout+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030240 	.word	0x00030240

000d4d74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <network_get_listen_timeout+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030240 	.word	0x00030240

000d4d84 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <malloc+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	681b      	ldr	r3, [r3, #0]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003021c 	.word	0x0003021c

000d4d94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <free+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	685b      	ldr	r3, [r3, #4]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003021c 	.word	0x0003021c

000d4da4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <realloc+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	689b      	ldr	r3, [r3, #8]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003021c 	.word	0x0003021c

000d4db4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <vsnprintf+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003021c 	.word	0x0003021c

000d4dc4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <abort+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003021c 	.word	0x0003021c

000d4dd4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <_malloc_r+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003021c 	.word	0x0003021c

000d4de4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4de4:	2100      	movs	r1, #0
   d4de6:	f7ff bf31 	b.w	d4c4c <system_delay_ms>

000d4dea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4dea:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dec:	6883      	ldr	r3, [r0, #8]
   d4dee:	4604      	mov	r4, r0
   d4df0:	b90b      	cbnz	r3, d4df6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4df2:	f001 fe72 	bl	d6ada <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4df6:	68c3      	ldr	r3, [r0, #12]
   d4df8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4dfa:	68a3      	ldr	r3, [r4, #8]
   d4dfc:	b11b      	cbz	r3, d4e06 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dfe:	2203      	movs	r2, #3
   d4e00:	4621      	mov	r1, r4
   d4e02:	4620      	mov	r0, r4
   d4e04:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e06:	4620      	mov	r0, r4
}
   d4e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e0c:	f7ff b947 	b.w	d409e <_ZdlPv>

000d4e10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e10:	4770      	bx	lr

000d4e12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4e12:	2000      	movs	r0, #0
   d4e14:	4770      	bx	lr

000d4e16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e16:	b510      	push	{r4, lr}
   d4e18:	4604      	mov	r4, r0
   d4e1a:	f7ff f940 	bl	d409e <_ZdlPv>
   d4e1e:	4620      	mov	r0, r4
   d4e20:	bd10      	pop	{r4, pc}

000d4e22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4e22:	b508      	push	{r3, lr}
      { delete this; }
   d4e24:	b108      	cbz	r0, d4e2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4e26:	f7ff fff6 	bl	d4e16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4e2a:	bd08      	pop	{r3, pc}

000d4e2c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e2c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e2e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e30:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e32:	b113      	cbz	r3, d4e3a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e34:	2203      	movs	r2, #3
   d4e36:	4601      	mov	r1, r0
   d4e38:	4798      	blx	r3
    }
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	bd10      	pop	{r4, pc}

000d4e3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4e3e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4e40:	68c4      	ldr	r4, [r0, #12]
   d4e42:	b1d4      	cbz	r4, d4e7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4e44:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4e46:	2b02      	cmp	r3, #2
   d4e48:	d102      	bne.n	d4e50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4e4a:	68e0      	ldr	r0, [r4, #12]
   d4e4c:	f7ff ffa2 	bl	d4d94 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4e50:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4e52:	b12d      	cbz	r5, d4e60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e54:	4628      	mov	r0, r5
   d4e56:	f7ff ffe9 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
   d4e5a:	4628      	mov	r0, r5
   d4e5c:	f7ff f91f 	bl	d409e <_ZdlPv>
   d4e60:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4e62:	b12d      	cbz	r5, d4e70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d4e64:	4628      	mov	r0, r5
   d4e66:	f7ff ffe1 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
   d4e6a:	4628      	mov	r0, r5
   d4e6c:	f7ff f917 	bl	d409e <_ZdlPv>
   d4e70:	4620      	mov	r0, r4
   d4e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e76:	f7ff b912 	b.w	d409e <_ZdlPv>
   d4e7a:	bd38      	pop	{r3, r4, r5, pc}

000d4e7c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4e7c:	b510      	push	{r4, lr}
   d4e7e:	b088      	sub	sp, #32
   d4e80:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4e82:	4668      	mov	r0, sp
   d4e84:	f000 fec1 	bl	d5c0a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4e88:	4669      	mov	r1, sp
   d4e8a:	a804      	add	r0, sp, #16
   d4e8c:	f000 fefc 	bl	d5c88 <_ZN6StringC1ERKS_>
   d4e90:	a804      	add	r0, sp, #16
   d4e92:	47a0      	blx	r4
   d4e94:	4604      	mov	r4, r0
   d4e96:	a804      	add	r0, sp, #16
   d4e98:	f000 fe70 	bl	d5b7c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4e9c:	4668      	mov	r0, sp
   d4e9e:	f000 fe6d 	bl	d5b7c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	b008      	add	sp, #32
   d4ea6:	bd10      	pop	{r4, pc}

000d4ea8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4eaa:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4eac:	b085      	sub	sp, #20
   d4eae:	4607      	mov	r7, r0
   d4eb0:	460e      	mov	r6, r1
   d4eb2:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	4622      	mov	r2, r4
   d4eb8:	4668      	mov	r0, sp
   d4eba:	f001 ff8a 	bl	d6dd2 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ebe:	2200      	movs	r2, #0
   d4ec0:	4669      	mov	r1, sp
   d4ec2:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d4ec4:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d4ec8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4eca:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4ecc:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4ece:	f7ff fef1 	bl	d4cb4 <spark_function>
}
   d4ed2:	b005      	add	sp, #20
   d4ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ed6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4ed6:	b513      	push	{r0, r1, r4, lr}
   d4ed8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4eda:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4ede:	2300      	movs	r3, #0
   d4ee0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ee2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ee4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4ee6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ee8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4eea:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4eec:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4eee:	f7ff fbc9 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	b002      	add	sp, #8
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ef8:	680b      	ldr	r3, [r1, #0]
   d4efa:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4efc:	b113      	cbz	r3, d4f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4efe:	685a      	ldr	r2, [r3, #4]
   d4f00:	3201      	adds	r2, #1
   d4f02:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4f04:	4770      	bx	lr

000d4f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f08:	460c      	mov	r4, r1
   d4f0a:	ad02      	add	r5, sp, #8
   d4f0c:	f854 3b04 	ldr.w	r3, [r4], #4
   d4f10:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4f14:	4606      	mov	r6, r0
   d4f16:	460f      	mov	r7, r1
   d4f18:	a801      	add	r0, sp, #4
   d4f1a:	4621      	mov	r1, r4
   d4f1c:	f7ff ffec 	bl	d4ef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4f20:	4629      	mov	r1, r5
   d4f22:	4630      	mov	r0, r6
   d4f24:	f7ff ffd7 	bl	d4ed6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f28:	a801      	add	r0, sp, #4
   d4f2a:	f7ff fbab 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f7ff fba8 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4f34:	4638      	mov	r0, r7
   d4f36:	f7ff f8b2 	bl	d409e <_ZdlPv>
        return p;
    }
   d4f3a:	4630      	mov	r0, r6
   d4f3c:	b003      	add	sp, #12
   d4f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f40 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4f40:	b513      	push	{r0, r1, r4, lr}
   d4f42:	460b      	mov	r3, r1
   d4f44:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f46:	c803      	ldmia	r0, {r0, r1}
   d4f48:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f4c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f50:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f54:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4f58:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f5c:	b002      	add	sp, #8
   d4f5e:	bd10      	pop	{r4, pc}

000d4f60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f60:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f62:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f64:	b90a      	cbnz	r2, d4f6a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4f66:	f001 fdb8 	bl	d6ada <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f6a:	68c3      	ldr	r3, [r0, #12]
    }
   d4f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f70:	4718      	bx	r3

000d4f72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f72:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f74:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f76:	f100 0110 	add.w	r1, r0, #16
   d4f7a:	f7ff fff1 	bl	d4f60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f7e:	bd08      	pop	{r3, pc}

000d4f80 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f80:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f82:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f84:	b90a      	cbnz	r2, d4f8a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4f86:	f001 fda8 	bl	d6ada <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f8a:	68c3      	ldr	r3, [r0, #12]
    }
   d4f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f90:	4718      	bx	r3

000d4f92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f92:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f94:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f96:	f100 0110 	add.w	r1, r0, #16
   d4f9a:	f7ff fff1 	bl	d4f80 <_ZNKSt8functionIFvRKbEEclES1_>
   d4f9e:	bd08      	pop	{r3, pc}

000d4fa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fa0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fa2:	2300      	movs	r3, #0
   d4fa4:	6083      	str	r3, [r0, #8]
   d4fa6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fa8:	4604      	mov	r4, r0
   d4faa:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4fac:	b12b      	cbz	r3, d4fba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4fae:	2202      	movs	r2, #2
   d4fb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4fb2:	68eb      	ldr	r3, [r5, #12]
   d4fb4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4fb6:	68ab      	ldr	r3, [r5, #8]
   d4fb8:	60a3      	str	r3, [r4, #8]
	}
    }
   d4fba:	4620      	mov	r0, r4
   d4fbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4fc4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4fc8:	b086      	sub	sp, #24
   d4fca:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4fcc:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fd0:	808b      	strh	r3, [r1, #4]
   d4fd2:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4fd4:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4fd6:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fda:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4fdc:	f04f 0002 	mov.w	r0, #2
   d4fe0:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4fe4:	4299      	cmp	r1, r3
   d4fe6:	d103      	bne.n	d4ff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4fe8:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4fec:	2d00      	cmp	r5, #0
   d4fee:	d1f7      	bne.n	d4fe0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4ff0:	d002      	beq.n	d4ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4ff2:	f88d 1000 	strb.w	r1, [sp]
   d4ff6:	e06a      	b.n	d50ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4ff8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ffc:	bf1e      	ittt	ne
   d4ffe:	60e7      	strne	r7, [r4, #12]
   d5000:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5002:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5004:	2301      	movs	r3, #1
   d5006:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d500a:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d500c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d500e:	f104 0308 	add.w	r3, r4, #8
   d5012:	f3bf 8f5f 	dmb	sy
   d5016:	e853 6f00 	ldrex	r6, [r3]
   d501a:	e843 0200 	strex	r2, r0, [r3]
   d501e:	2a00      	cmp	r2, #0
   d5020:	d1f9      	bne.n	d5016 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5022:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5026:	2e00      	cmp	r6, #0
   d5028:	d051      	beq.n	d50ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d502a:	f7ff fe17 	bl	d4c5c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d502e:	b120      	cbz	r0, d503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5030:	4629      	mov	r1, r5
   d5032:	4630      	mov	r0, r6
   d5034:	f7ff ff94 	bl	d4f60 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5038:	e043      	b.n	d50c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d503a:	4631      	mov	r1, r6
   d503c:	4668      	mov	r0, sp
   d503e:	f7ff ffaf 	bl	d4fa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5042:	68e0      	ldr	r0, [r4, #12]
   d5044:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5048:	b108      	cbz	r0, d504e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d504a:	f001 fedd 	bl	d6e08 <strdup>
   d504e:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5050:	2010      	movs	r0, #16
   d5052:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5056:	f7ff f81e 	bl	d4096 <_Znwj>
   d505a:	4605      	mov	r5, r0
   d505c:	b330      	cbz	r0, d50ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d505e:	f04f 0800 	mov.w	r8, #0
   d5062:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5066:	2018      	movs	r0, #24
   d5068:	f7ff f815 	bl	d4096 <_Znwj>
   d506c:	4604      	mov	r4, r0
   d506e:	b1c0      	cbz	r0, d50a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5070:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5074:	4601      	mov	r1, r0
   d5076:	4668      	mov	r0, sp
   d5078:	f7ff ff62 	bl	d4f40 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d507c:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d507e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5080:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5082:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5084:	9202      	str	r2, [sp, #8]
   d5086:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5088:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d508a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d508e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5090:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5094:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5098:	9b04      	ldr	r3, [sp, #16]
   d509a:	9203      	str	r2, [sp, #12]
   d509c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d509e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d50a2:	4b0e      	ldr	r3, [pc, #56]	; (d50dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d50a4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d50a6:	4b0e      	ldr	r3, [pc, #56]	; (d50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50a8:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d50aa:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d50ac:	9804      	ldr	r0, [sp, #16]
   d50ae:	f7ff fe71 	bl	d4d94 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50b2:	4668      	mov	r0, sp
   d50b4:	f7ff feba 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d50b8:	2200      	movs	r2, #0
   d50ba:	4629      	mov	r1, r5
   d50bc:	4809      	ldr	r0, [pc, #36]	; (d50e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d50be:	f7ff fdd5 	bl	d4c6c <application_thread_invoke>
   d50c2:	4630      	mov	r0, r6
   d50c4:	f7ff feb2 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d50c8:	4630      	mov	r0, r6
   d50ca:	f7fe ffe8 	bl	d409e <_ZdlPv>
   d50ce:	4638      	mov	r0, r7
   d50d0:	f7ff fe60 	bl	d4d94 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d50d4:	b006      	add	sp, #24
   d50d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d50da:	bf00      	nop
   d50dc:	000d4f73 	.word	0x000d4f73
   d50e0:	000d51d1 	.word	0x000d51d1
   d50e4:	000d4deb 	.word	0x000d4deb

000d50e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d50e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50ec:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d50ee:	ad07      	add	r5, sp, #28
   d50f0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d50f4:	4606      	mov	r6, r0
   d50f6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d50f8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d50fa:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d50fc:	460f      	mov	r7, r1
   d50fe:	4690      	mov	r8, r2
   d5100:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5104:	f8c5 b004 	str.w	fp, [r5, #4]
   d5108:	f8c5 b008 	str.w	fp, [r5, #8]
   d510c:	9307      	str	r3, [sp, #28]
   d510e:	f7fe ffc2 	bl	d4096 <_Znwj>
   d5112:	4604      	mov	r4, r0
   d5114:	b138      	cbz	r0, d5126 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5116:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d511a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d511e:	f8c0 b004 	str.w	fp, [r0, #4]
   d5122:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5126:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5128:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d512a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d512c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d512e:	f7fe ffb2 	bl	d4096 <_Znwj>
   d5132:	b128      	cbz	r0, d5140 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5134:	2301      	movs	r3, #1
   d5136:	6043      	str	r3, [r0, #4]
   d5138:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d513a:	4b23      	ldr	r3, [pc, #140]	; (d51c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d513c:	6003      	str	r3, [r0, #0]
   d513e:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5140:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5142:	4b22      	ldr	r3, [pc, #136]	; (d51cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5144:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5146:	2008      	movs	r0, #8
   d5148:	f7fe ffa5 	bl	d4096 <_Znwj>
   d514c:	4604      	mov	r4, r0
   d514e:	b128      	cbz	r0, d515c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5150:	9b03      	ldr	r3, [sp, #12]
   d5152:	f840 3b04 	str.w	r3, [r0], #4
   d5156:	a904      	add	r1, sp, #16
   d5158:	f7ff fece 	bl	d4ef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d515c:	9500      	str	r5, [sp, #0]
   d515e:	fa5f f38a 	uxtb.w	r3, sl
   d5162:	464a      	mov	r2, r9
   d5164:	4641      	mov	r1, r8
   d5166:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5168:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d516a:	f7ff fdab 	bl	d4cc4 <spark_send_event>
   d516e:	b9b8      	cbnz	r0, d51a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5170:	9b03      	ldr	r3, [sp, #12]
   d5172:	785b      	ldrb	r3, [r3, #1]
   d5174:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5178:	b993      	cbnz	r3, d51a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d517a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d517e:	a905      	add	r1, sp, #20
   d5180:	a803      	add	r0, sp, #12
   d5182:	9205      	str	r2, [sp, #20]
   d5184:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5188:	f7ff ff1a 	bl	d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d518c:	9805      	ldr	r0, [sp, #20]
   d518e:	f7ff fe01 	bl	d4d94 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5192:	a805      	add	r0, sp, #20
   d5194:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5196:	f7ff feb6 	bl	d4f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d519a:	a806      	add	r0, sp, #24
   d519c:	f7ff fa72 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51a0:	9b03      	ldr	r3, [sp, #12]
   d51a2:	9305      	str	r3, [sp, #20]
   d51a4:	a904      	add	r1, sp, #16
   d51a6:	a806      	add	r0, sp, #24
   d51a8:	f7ff fea6 	bl	d4ef8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d51ac:	a905      	add	r1, sp, #20
   d51ae:	4630      	mov	r0, r6
   d51b0:	f7ff fe91 	bl	d4ed6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51b4:	a806      	add	r0, sp, #24
   d51b6:	f7ff fa65 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51ba:	a804      	add	r0, sp, #16
   d51bc:	f7ff fa62 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d51c0:	4630      	mov	r0, r6
   d51c2:	b00b      	add	sp, #44	; 0x2c
   d51c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51c8:	000d7060 	.word	0x000d7060
   d51cc:	000d5339 	.word	0x000d5339

000d51d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d51d0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51d4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d51d6:	d006      	beq.n	d51e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d51d8:	2a03      	cmp	r2, #3
   d51da:	d017      	beq.n	d520c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d51dc:	2a01      	cmp	r2, #1
   d51de:	d120      	bne.n	d5222 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51e0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51e2:	6003      	str	r3, [r0, #0]
	      break;
   d51e4:	e01d      	b.n	d5222 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51e6:	2018      	movs	r0, #24
   d51e8:	680e      	ldr	r6, [r1, #0]
   d51ea:	f7fe ff54 	bl	d4096 <_Znwj>
   d51ee:	4605      	mov	r5, r0
   d51f0:	b150      	cbz	r0, d5208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d51f2:	4631      	mov	r1, r6
   d51f4:	f7ff fed4 	bl	d4fa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d51f8:	6930      	ldr	r0, [r6, #16]
   d51fa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d51fe:	b108      	cbz	r0, d5204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5200:	f001 fe02 	bl	d6e08 <strdup>
   d5204:	6128      	str	r0, [r5, #16]
   d5206:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5208:	6025      	str	r5, [r4, #0]
   d520a:	e00a      	b.n	d5222 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d520c:	6804      	ldr	r4, [r0, #0]
   d520e:	b144      	cbz	r4, d5222 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5210:	6920      	ldr	r0, [r4, #16]
   d5212:	f7ff fdbf 	bl	d4d94 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5216:	4620      	mov	r0, r4
   d5218:	f7ff fe08 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d521c:	4620      	mov	r0, r4
   d521e:	f7fe ff3e 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5222:	2000      	movs	r0, #0
   d5224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5226 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5226:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5228:	2300      	movs	r3, #0
   d522a:	6083      	str	r3, [r0, #8]
   d522c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d522e:	4604      	mov	r4, r0
   d5230:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5232:	b12b      	cbz	r3, d5240 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5234:	2202      	movs	r2, #2
   d5236:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5238:	68eb      	ldr	r3, [r5, #12]
   d523a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d523c:	68ab      	ldr	r3, [r5, #8]
   d523e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5240:	4620      	mov	r0, r4
   d5242:	bd38      	pop	{r3, r4, r5, pc}

000d5244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5244:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5246:	b570      	push	{r4, r5, r6, lr}
   d5248:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d524a:	d006      	beq.n	d525a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d524c:	2a03      	cmp	r2, #3
   d524e:	d011      	beq.n	d5274 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5250:	2a01      	cmp	r2, #1
   d5252:	d117      	bne.n	d5284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5254:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5256:	6003      	str	r3, [r0, #0]
	      break;
   d5258:	e014      	b.n	d5284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d525a:	2014      	movs	r0, #20
   d525c:	680e      	ldr	r6, [r1, #0]
   d525e:	f7fe ff1a 	bl	d4096 <_Znwj>
   d5262:	4605      	mov	r5, r0
   d5264:	b120      	cbz	r0, d5270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5266:	4631      	mov	r1, r6
   d5268:	f7ff ffdd 	bl	d5226 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d526c:	7c33      	ldrb	r3, [r6, #16]
   d526e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5270:	6025      	str	r5, [r4, #0]
   d5272:	e007      	b.n	d5284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5274:	6804      	ldr	r4, [r0, #0]
   d5276:	b12c      	cbz	r4, d5284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5278:	4620      	mov	r0, r4
   d527a:	f7ff fdd7 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d527e:	4620      	mov	r0, r4
   d5280:	f7fe ff0d 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5284:	2000      	movs	r0, #0
   d5286:	bd70      	pop	{r4, r5, r6, pc}

000d5288 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5288:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d528a:	2300      	movs	r3, #0
   d528c:	b087      	sub	sp, #28
   d528e:	460c      	mov	r4, r1
   d5290:	f3bf 8f5f 	dmb	sy
   d5294:	e850 6f00 	ldrex	r6, [r0]
   d5298:	e840 3200 	strex	r2, r3, [r0]
   d529c:	2a00      	cmp	r2, #0
   d529e:	d1f9      	bne.n	d5294 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d52a0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d52a4:	2e00      	cmp	r6, #0
   d52a6:	d03e      	beq.n	d5326 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52a8:	4618      	mov	r0, r3
   d52aa:	f7ff fcd7 	bl	d4c5c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52ae:	4607      	mov	r7, r0
   d52b0:	b120      	cbz	r0, d52bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52b2:	4621      	mov	r1, r4
   d52b4:	4630      	mov	r0, r6
   d52b6:	f7ff fe63 	bl	d4f80 <_ZNKSt8functionIFvRKbEEclES1_>
   d52ba:	e02e      	b.n	d531a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d52bc:	4631      	mov	r1, r6
   d52be:	a801      	add	r0, sp, #4
   d52c0:	f7ff ffb1 	bl	d5226 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52c4:	7823      	ldrb	r3, [r4, #0]
   d52c6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d52ca:	2010      	movs	r0, #16
   d52cc:	f7fe fee3 	bl	d4096 <_Znwj>
   d52d0:	4605      	mov	r5, r0
   d52d2:	b1d0      	cbz	r0, d530a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52d4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52d6:	2014      	movs	r0, #20
   d52d8:	f7fe fedd 	bl	d4096 <_Znwj>
   d52dc:	4604      	mov	r4, r0
   d52de:	b178      	cbz	r0, d5300 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52e0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52e2:	4601      	mov	r1, r0
   d52e4:	a801      	add	r0, sp, #4
   d52e6:	f7ff fe2b 	bl	d4f40 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52ea:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d52ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52f2:	9203      	str	r2, [sp, #12]
   d52f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52f6:	60e3      	str	r3, [r4, #12]
   d52f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d52fc:	9204      	str	r2, [sp, #16]
   d52fe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5300:	4b0a      	ldr	r3, [pc, #40]	; (d532c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5302:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5304:	4b0a      	ldr	r3, [pc, #40]	; (d5330 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5306:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5308:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d530a:	a801      	add	r0, sp, #4
   d530c:	f7ff fd8e 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5310:	2200      	movs	r2, #0
   d5312:	4629      	mov	r1, r5
   d5314:	4807      	ldr	r0, [pc, #28]	; (d5334 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5316:	f7ff fca9 	bl	d4c6c <application_thread_invoke>
   d531a:	4630      	mov	r0, r6
   d531c:	f7ff fd86 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5320:	4630      	mov	r0, r6
   d5322:	f7fe febc 	bl	d409e <_ZdlPv>
        }
    }
   d5326:	b007      	add	sp, #28
   d5328:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d532a:	bf00      	nop
   d532c:	000d4f93 	.word	0x000d4f93
   d5330:	000d5245 	.word	0x000d5245
   d5334:	000d4deb 	.word	0x000d4deb

000d5338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5338:	b530      	push	{r4, r5, lr}
   d533a:	b085      	sub	sp, #20
   d533c:	4604      	mov	r4, r0
   d533e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5340:	4668      	mov	r0, sp
   d5342:	4611      	mov	r1, r2
   d5344:	f7ff fddf 	bl	d4f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5348:	b17c      	cbz	r4, d536a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d534a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d534c:	4628      	mov	r0, r5
   d534e:	b10d      	cbz	r5, d5354 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5350:	f001 fd5a 	bl	d6e08 <strdup>
   d5354:	9002      	str	r0, [sp, #8]
   d5356:	a902      	add	r1, sp, #8
   d5358:	4668      	mov	r0, sp
   d535a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d535e:	f7ff fe2f 	bl	d4fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5362:	9802      	ldr	r0, [sp, #8]
   d5364:	f7ff fd16 	bl	d4d94 <free>
   d5368:	e01d      	b.n	d53a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d536a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d536c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5370:	f04f 0201 	mov.w	r2, #1
   d5374:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5378:	42a3      	cmp	r3, r4
   d537a:	d103      	bne.n	d5384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d537c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5380:	2900      	cmp	r1, #0
   d5382:	d1f7      	bne.n	d5374 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5384:	d002      	beq.n	d538c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5386:	f88d 3008 	strb.w	r3, [sp, #8]
   d538a:	e00c      	b.n	d53a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d538c:	f110 010c 	adds.w	r1, r0, #12
   d5390:	f04f 0301 	mov.w	r3, #1
   d5394:	bf18      	it	ne
   d5396:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5398:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d539c:	3004      	adds	r0, #4
   d539e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d53a2:	f7ff ff71 	bl	d5288 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d53a6:	a801      	add	r0, sp, #4
   d53a8:	f7ff f96c 	bl	d4684 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d53ac:	b005      	add	sp, #20
   d53ae:	bd30      	pop	{r4, r5, pc}

000d53b0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53b0:	2200      	movs	r2, #0
   d53b2:	4611      	mov	r1, r2
   d53b4:	6840      	ldr	r0, [r0, #4]
   d53b6:	f7ff bccd 	b.w	d4d54 <network_listening>

000d53ba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53ba:	2200      	movs	r2, #0
   d53bc:	4611      	mov	r1, r2
   d53be:	6840      	ldr	r0, [r0, #4]
   d53c0:	f7ff bcd8 	b.w	d4d74 <network_get_listen_timeout>

000d53c4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53c4:	2200      	movs	r2, #0
   d53c6:	6840      	ldr	r0, [r0, #4]
   d53c8:	f7ff bccc 	b.w	d4d64 <network_set_listen_timeout>

000d53cc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53cc:	2200      	movs	r2, #0
   d53ce:	f081 0101 	eor.w	r1, r1, #1
   d53d2:	6840      	ldr	r0, [r0, #4]
   d53d4:	f7ff bcb6 	b.w	d4d44 <network_listen>

000d53d8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d53d8:	2300      	movs	r3, #0
   d53da:	461a      	mov	r2, r3
   d53dc:	4619      	mov	r1, r3
   d53de:	6840      	ldr	r0, [r0, #4]
   d53e0:	f7ff bca8 	b.w	d4d34 <network_off>

000d53e4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d53e4:	2300      	movs	r3, #0
   d53e6:	461a      	mov	r2, r3
   d53e8:	4619      	mov	r1, r3
   d53ea:	6840      	ldr	r0, [r0, #4]
   d53ec:	f7ff bc9a 	b.w	d4d24 <network_on>

000d53f0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d53f0:	2200      	movs	r2, #0
   d53f2:	4611      	mov	r1, r2
   d53f4:	6840      	ldr	r0, [r0, #4]
   d53f6:	f7ff bc8d 	b.w	d4d14 <network_ready>

000d53fa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53fa:	2200      	movs	r2, #0
   d53fc:	4611      	mov	r1, r2
   d53fe:	6840      	ldr	r0, [r0, #4]
   d5400:	f7ff bc78 	b.w	d4cf4 <network_connecting>

000d5404 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5404:	2200      	movs	r2, #0
   d5406:	2102      	movs	r1, #2
   d5408:	6840      	ldr	r0, [r0, #4]
   d540a:	f7ff bc7b 	b.w	d4d04 <network_disconnect>

000d540e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d540e:	2300      	movs	r3, #0
   d5410:	461a      	mov	r2, r3
   d5412:	6840      	ldr	r0, [r0, #4]
   d5414:	f7ff bc66 	b.w	d4ce4 <network_connect>

000d5418 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5418:	4b02      	ldr	r3, [pc, #8]	; (d5424 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d541a:	2203      	movs	r2, #3
   d541c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d541e:	4a02      	ldr	r2, [pc, #8]	; (d5428 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5420:	601a      	str	r2, [r3, #0]
   d5422:	4770      	bx	lr
   d5424:	2003e3d8 	.word	0x2003e3d8
   d5428:	000d707c 	.word	0x000d707c

000d542c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d542c:	4770      	bx	lr

000d542e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5430:	4606      	mov	r6, r0
   d5432:	4615      	mov	r5, r2
   d5434:	460c      	mov	r4, r1
   d5436:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5438:	42bc      	cmp	r4, r7
   d543a:	d006      	beq.n	d544a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d543c:	6833      	ldr	r3, [r6, #0]
   d543e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5442:	689b      	ldr	r3, [r3, #8]
   d5444:	4630      	mov	r0, r6
   d5446:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5448:	e7f6      	b.n	d5438 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d544a:	4628      	mov	r0, r5
   d544c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d544e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d544e:	2200      	movs	r2, #0
   d5450:	7c00      	ldrb	r0, [r0, #16]
   d5452:	f7ff ba9b 	b.w	d498c <HAL_I2C_Write_Data>

000d5456 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5456:	2100      	movs	r1, #0
   d5458:	7c00      	ldrb	r0, [r0, #16]
   d545a:	f7ff ba9f 	b.w	d499c <HAL_I2C_Available_Data>

000d545e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d545e:	2100      	movs	r1, #0
   d5460:	7c00      	ldrb	r0, [r0, #16]
   d5462:	f7ff baa3 	b.w	d49ac <HAL_I2C_Read_Data>

000d5466 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5466:	2100      	movs	r1, #0
   d5468:	7c00      	ldrb	r0, [r0, #16]
   d546a:	f7ff baa7 	b.w	d49bc <HAL_I2C_Peek_Data>

000d546e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d546e:	2100      	movs	r1, #0
   d5470:	7c00      	ldrb	r0, [r0, #16]
   d5472:	f7ff baab 	b.w	d49cc <HAL_I2C_Flush_Data>

000d5476 <_ZN7TwoWireD0Ev>:
   d5476:	b510      	push	{r4, lr}
   d5478:	4604      	mov	r4, r0
   d547a:	f7fe fe10 	bl	d409e <_ZdlPv>
   d547e:	4620      	mov	r0, r4
   d5480:	bd10      	pop	{r4, pc}
	...

000d5484 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5484:	b510      	push	{r4, lr}
   d5486:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d548c:	4608      	mov	r0, r1
   d548e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5490:	2100      	movs	r1, #0
   d5492:	4b04      	ldr	r3, [pc, #16]	; (d54a4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5494:	7420      	strb	r0, [r4, #16]
   d5496:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5498:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d549a:	f7ff faa7 	bl	d49ec <HAL_I2C_Init>

}
   d549e:	4620      	mov	r0, r4
   d54a0:	bd10      	pop	{r4, pc}
   d54a2:	bf00      	nop
   d54a4:	000d70b0 	.word	0x000d70b0

000d54a8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d54a8:	2100      	movs	r1, #0
   d54aa:	7c00      	ldrb	r0, [r0, #16]
   d54ac:	f7ff ba96 	b.w	d49dc <HAL_I2C_Is_Enabled>

000d54b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54b0:	4770      	bx	lr

000d54b2 <_ZN9IPAddressD0Ev>:
   d54b2:	b510      	push	{r4, lr}
   d54b4:	4604      	mov	r4, r0
   d54b6:	f7fe fdf2 	bl	d409e <_ZdlPv>
   d54ba:	4620      	mov	r0, r4
   d54bc:	bd10      	pop	{r4, pc}

000d54be <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54be:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d54c0:	7d03      	ldrb	r3, [r0, #20]
   d54c2:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54c4:	b08d      	sub	sp, #52	; 0x34
   d54c6:	460e      	mov	r6, r1
   d54c8:	f100 0704 	add.w	r7, r0, #4
   d54cc:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d54d0:	d002      	beq.n	d54d8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d54d2:	f100 0508 	add.w	r5, r0, #8
   d54d6:	e018      	b.n	d550a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54d8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54da:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54dc:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54e0:	232f      	movs	r3, #47	; 0x2f
   d54e2:	462a      	mov	r2, r5
   d54e4:	200a      	movs	r0, #10
   d54e6:	f7ff fab1 	bl	d4a4c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54ea:	4628      	mov	r0, r5
   d54ec:	f001 fca7 	bl	d6e3e <strlen>
   d54f0:	6833      	ldr	r3, [r6, #0]
   d54f2:	4602      	mov	r2, r0
   d54f4:	68db      	ldr	r3, [r3, #12]
   d54f6:	4629      	mov	r1, r5
   d54f8:	4630      	mov	r0, r6
   d54fa:	4798      	blx	r3
   d54fc:	e00f      	b.n	d551e <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d54fe:	b124      	cbz	r4, d550a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5500:	212e      	movs	r1, #46	; 0x2e
   d5502:	4630      	mov	r0, r6
   d5504:	f000 fa88 	bl	d5a18 <_ZN5Print5printEc>
   d5508:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d550a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d550e:	220a      	movs	r2, #10
   d5510:	4630      	mov	r0, r6
   d5512:	f000 fabd 	bl	d5a90 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5516:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5518:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d551a:	d1f0      	bne.n	d54fe <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d551c:	4620      	mov	r0, r4
    }
    return n;
}
   d551e:	b00d      	add	sp, #52	; 0x34
   d5520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5524 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5524:	b510      	push	{r4, lr}
   d5526:	4b05      	ldr	r3, [pc, #20]	; (d553c <_ZN9IPAddressC1Ev+0x18>)
   d5528:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d552a:	2211      	movs	r2, #17
   d552c:	f840 3b04 	str.w	r3, [r0], #4
   d5530:	2100      	movs	r1, #0
   d5532:	f001 fc4e 	bl	d6dd2 <memset>
{
    clear();
}
   d5536:	4620      	mov	r0, r4
   d5538:	bd10      	pop	{r4, pc}
   d553a:	bf00      	nop
   d553c:	000d70d8 	.word	0x000d70d8

000d5540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5540:	4603      	mov	r3, r0
   d5542:	4a07      	ldr	r2, [pc, #28]	; (d5560 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5544:	b510      	push	{r4, lr}
   d5546:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d554a:	f101 0210 	add.w	r2, r1, #16
   d554e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5552:	f843 4b04 	str.w	r4, [r3], #4
   d5556:	4291      	cmp	r1, r2
   d5558:	d1f9      	bne.n	d554e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d555a:	780a      	ldrb	r2, [r1, #0]
   d555c:	701a      	strb	r2, [r3, #0]
}
   d555e:	bd10      	pop	{r4, pc}
   d5560:	000d70d8 	.word	0x000d70d8

000d5564 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5564:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5566:	2b04      	cmp	r3, #4
   d5568:	d101      	bne.n	d556e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d556a:	6840      	ldr	r0, [r0, #4]
   d556c:	e008      	b.n	d5580 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d556e:	2b06      	cmp	r3, #6
   d5570:	d10a      	bne.n	d5588 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5572:	6843      	ldr	r3, [r0, #4]
   d5574:	b153      	cbz	r3, d558c <_ZNK9IPAddresscvbEv+0x28>
   d5576:	6883      	ldr	r3, [r0, #8]
   d5578:	b143      	cbz	r3, d558c <_ZNK9IPAddresscvbEv+0x28>
   d557a:	68c3      	ldr	r3, [r0, #12]
   d557c:	b133      	cbz	r3, d558c <_ZNK9IPAddresscvbEv+0x28>
   d557e:	6900      	ldr	r0, [r0, #16]
   d5580:	3000      	adds	r0, #0
   d5582:	bf18      	it	ne
   d5584:	2001      	movne	r0, #1
   d5586:	4770      	bx	lr
   d5588:	2000      	movs	r0, #0
   d558a:	4770      	bx	lr
   d558c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d558e:	4770      	bx	lr

000d5590 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5590:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5592:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5596:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d559a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d559e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d55a2:	2304      	movs	r3, #4
   d55a4:	6041      	str	r1, [r0, #4]
   d55a6:	7503      	strb	r3, [r0, #20]
   d55a8:	bd10      	pop	{r4, pc}

000d55aa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d55aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d55ac:	780d      	ldrb	r5, [r1, #0]
   d55ae:	788b      	ldrb	r3, [r1, #2]
   d55b0:	784a      	ldrb	r2, [r1, #1]
   d55b2:	78c9      	ldrb	r1, [r1, #3]
   d55b4:	9100      	str	r1, [sp, #0]
   d55b6:	4629      	mov	r1, r5
   d55b8:	f7ff ffea 	bl	d5590 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d55bc:	b003      	add	sp, #12
   d55be:	bd30      	pop	{r4, r5, pc}

000d55c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d55c0:	4b01      	ldr	r3, [pc, #4]	; (d55c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d55c2:	4a02      	ldr	r2, [pc, #8]	; (d55cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d55c4:	601a      	str	r2, [r3, #0]
   d55c6:	4770      	bx	lr
   d55c8:	2003e3e0 	.word	0x2003e3e0
   d55cc:	000d7194 	.word	0x000d7194

000d55d0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55d0:	2200      	movs	r2, #0
   d55d2:	4611      	mov	r1, r2
   d55d4:	6840      	ldr	r0, [r0, #4]
   d55d6:	f7ff bbbd 	b.w	d4d54 <network_listening>

000d55da <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55da:	2200      	movs	r2, #0
   d55dc:	4611      	mov	r1, r2
   d55de:	6840      	ldr	r0, [r0, #4]
   d55e0:	f7ff bbc8 	b.w	d4d74 <network_get_listen_timeout>

000d55e4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55e4:	2200      	movs	r2, #0
   d55e6:	6840      	ldr	r0, [r0, #4]
   d55e8:	f7ff bbbc 	b.w	d4d64 <network_set_listen_timeout>

000d55ec <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55ec:	2200      	movs	r2, #0
   d55ee:	f081 0101 	eor.w	r1, r1, #1
   d55f2:	6840      	ldr	r0, [r0, #4]
   d55f4:	f7ff bba6 	b.w	d4d44 <network_listen>

000d55f8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55f8:	2300      	movs	r3, #0
   d55fa:	461a      	mov	r2, r3
   d55fc:	4619      	mov	r1, r3
   d55fe:	6840      	ldr	r0, [r0, #4]
   d5600:	f7ff bb98 	b.w	d4d34 <network_off>

000d5604 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5604:	2300      	movs	r3, #0
   d5606:	461a      	mov	r2, r3
   d5608:	4619      	mov	r1, r3
   d560a:	6840      	ldr	r0, [r0, #4]
   d560c:	f7ff bb8a 	b.w	d4d24 <network_on>

000d5610 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5610:	2200      	movs	r2, #0
   d5612:	4611      	mov	r1, r2
   d5614:	6840      	ldr	r0, [r0, #4]
   d5616:	f7ff bb7d 	b.w	d4d14 <network_ready>

000d561a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d561a:	2200      	movs	r2, #0
   d561c:	4611      	mov	r1, r2
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	f7ff bb68 	b.w	d4cf4 <network_connecting>

000d5624 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5624:	2200      	movs	r2, #0
   d5626:	2102      	movs	r1, #2
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	f7ff bb6b 	b.w	d4d04 <network_disconnect>

000d562e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d562e:	2300      	movs	r3, #0
   d5630:	461a      	mov	r2, r3
   d5632:	6840      	ldr	r0, [r0, #4]
   d5634:	f7ff bb56 	b.w	d4ce4 <network_connect>

000d5638 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5638:	b110      	cbz	r0, d5640 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d563a:	6803      	ldr	r3, [r0, #0]
   d563c:	685b      	ldr	r3, [r3, #4]
   d563e:	4718      	bx	r3
   d5640:	4770      	bx	lr

000d5642 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5642:	b538      	push	{r3, r4, r5, lr}
   d5644:	4604      	mov	r4, r0
   d5646:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5648:	b1d0      	cbz	r0, d5680 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d564a:	f7ff f927 	bl	d489c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d564e:	b9b8      	cbnz	r0, d5680 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5650:	7c23      	ldrb	r3, [r4, #16]
   d5652:	b91b      	cbnz	r3, d565c <_ZN6Thread7disposeEv+0x1a>
   d5654:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5656:	b108      	cbz	r0, d565c <_ZN6Thread7disposeEv+0x1a>
   d5658:	f7ff f928 	bl	d48ac <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d565c:	6865      	ldr	r5, [r4, #4]
   d565e:	b155      	cbz	r5, d5676 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5660:	68ab      	ldr	r3, [r5, #8]
   d5662:	b11b      	cbz	r3, d566c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5664:	2203      	movs	r2, #3
   d5666:	4629      	mov	r1, r5
   d5668:	4628      	mov	r0, r5
   d566a:	4798      	blx	r3
            delete wrapper;
   d566c:	4628      	mov	r0, r5
   d566e:	f7fe fd16 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d5672:	2300      	movs	r3, #0
   d5674:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5676:	6820      	ldr	r0, [r4, #0]
   d5678:	f7ff f920 	bl	d48bc <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d567c:	2300      	movs	r3, #0
   d567e:	6023      	str	r3, [r4, #0]
   d5680:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5684 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5684:	b538      	push	{r3, r4, r5, lr}
   d5686:	4b0b      	ldr	r3, [pc, #44]	; (d56b4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5688:	6003      	str	r3, [r0, #0]
   d568a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d568c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5690:	b108      	cbz	r0, d5696 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5692:	f7fe fd06 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5696:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d569a:	b12d      	cbz	r5, d56a8 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d569c:	4628      	mov	r0, r5
   d569e:	f7ff ffd0 	bl	d5642 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56a2:	4628      	mov	r0, r5
   d56a4:	f7fe fcfb 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56a8:	68a0      	ldr	r0, [r4, #8]
   d56aa:	b108      	cbz	r0, d56b0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d56ac:	f7ff ffc4 	bl	d5638 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d56b0:	4620      	mov	r0, r4
   d56b2:	bd38      	pop	{r3, r4, r5, pc}
   d56b4:	000d71c8 	.word	0x000d71c8

000d56b8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d56b8:	6800      	ldr	r0, [r0, #0]
   d56ba:	f7ff b917 	b.w	d48ec <os_mutex_recursive_lock>
	...

000d56c0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d56c0:	b530      	push	{r4, r5, lr}
   d56c2:	b08d      	sub	sp, #52	; 0x34
   d56c4:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d56c6:	2211      	movs	r2, #17
   d56c8:	2100      	movs	r1, #0
   d56ca:	a801      	add	r0, sp, #4
   d56cc:	f001 fb81 	bl	d6dd2 <memset>
    addr.v = 6;
   d56d0:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d56d2:	aa01      	add	r2, sp, #4
   d56d4:	4909      	ldr	r1, [pc, #36]	; (d56fc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d56d6:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d56da:	200a      	movs	r0, #10
   d56dc:	f7ff f9be 	bl	d4a5c <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d56e0:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d56e2:	a901      	add	r1, sp, #4
   d56e4:	a806      	add	r0, sp, #24
   d56e6:	f7ff ff2b 	bl	d5540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d56ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56ec:	3404      	adds	r4, #4
   d56ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56f0:	682b      	ldr	r3, [r5, #0]
   d56f2:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d56f4:	2000      	movs	r0, #0
   d56f6:	b00d      	add	sp, #52	; 0x34
   d56f8:	bd30      	pop	{r4, r5, pc}
   d56fa:	bf00      	nop
   d56fc:	000d71f4 	.word	0x000d71f4

000d5700 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5700:	b530      	push	{r4, r5, lr}
   d5702:	4604      	mov	r4, r0
   d5704:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5706:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d570a:	f7ff ffd5 	bl	d56b8 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d570e:	6823      	ldr	r3, [r4, #0]
   d5710:	bb83      	cbnz	r3, d5774 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5712:	204c      	movs	r0, #76	; 0x4c
   d5714:	f7fe fcbf 	bl	d4096 <_Znwj>
   d5718:	4605      	mov	r5, r0
   d571a:	b108      	cbz	r0, d5720 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d571c:	f000 fe9a 	bl	d6454 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5720:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5722:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5724:	b108      	cbz	r0, d572a <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5726:	f7ff ff87 	bl	d5638 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d572a:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d572c:	b320      	cbz	r0, d5778 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d572e:	2200      	movs	r2, #0
   d5730:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5734:	f000 febd 	bl	d64b2 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5738:	a908      	add	r1, sp, #32
   d573a:	2500      	movs	r5, #0
   d573c:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5740:	4811      	ldr	r0, [pc, #68]	; (d5788 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d5742:	f7ff f95b 	bl	d49fc <if_name_to_index>
   d5746:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5748:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d574c:	6803      	ldr	r3, [r0, #0]
   d574e:	f249 0169 	movw	r1, #36969	; 0x9069
   d5752:	6a1b      	ldr	r3, [r3, #32]
   d5754:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5756:	a802      	add	r0, sp, #8
   d5758:	f7ff fee4 	bl	d5524 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d575c:	a802      	add	r0, sp, #8
   d575e:	f7ff ffaf 	bl	d56c0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5762:	2800      	cmp	r0, #0
   d5764:	db04      	blt.n	d5770 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d5766:	a902      	add	r1, sp, #8
   d5768:	6820      	ldr	r0, [r4, #0]
   d576a:	f000 ff28 	bl	d65be <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d576e:	e004      	b.n	d577a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d5770:	4605      	mov	r5, r0
   d5772:	e002      	b.n	d577a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d5774:	2500      	movs	r5, #0
   d5776:	e000      	b.n	d577a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5778:	4d04      	ldr	r5, [pc, #16]	; (d578c <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d577a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d577e:	f7ff f8bd 	bl	d48fc <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d5782:	4628      	mov	r0, r5
   d5784:	b009      	add	sp, #36	; 0x24
   d5786:	bd30      	pop	{r4, r5, pc}
   d5788:	000d7201 	.word	0x000d7201
   d578c:	fffffefc 	.word	0xfffffefc

000d5790 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d5790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5794:	4605      	mov	r5, r0
   d5796:	b08c      	sub	sp, #48	; 0x30
   d5798:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d579a:	460f      	mov	r7, r1
   d579c:	b109      	cbz	r1, d57a2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d579e:	780b      	ldrb	r3, [r1, #0]
   d57a0:	b90b      	cbnz	r3, d57a6 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d57a2:	4c35      	ldr	r4, [pc, #212]	; (d5878 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d57a4:	e064      	b.n	d5870 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d57a6:	4608      	mov	r0, r1
   d57a8:	f001 fb49 	bl	d6e3e <strlen>
   d57ac:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d57ae:	2e00      	cmp	r6, #0
   d57b0:	d05c      	beq.n	d586c <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d57b2:	4630      	mov	r0, r6
   d57b4:	f001 fb43 	bl	d6e3e <strlen>
   d57b8:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d57ba:	f108 0302 	add.w	r3, r8, #2
   d57be:	4423      	add	r3, r4
   d57c0:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d57c4:	d84f      	bhi.n	d5866 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d57c6:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d57ca:	f7ff ff75 	bl	d56b8 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d57ce:	4628      	mov	r0, r5
   d57d0:	f7ff ff96 	bl	d5700 <_ZN5spark11MeshPublish14initialize_udpEv>
   d57d4:	2800      	cmp	r0, #0
   d57d6:	db40      	blt.n	d585a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d57d8:	4668      	mov	r0, sp
   d57da:	f7ff fea3 	bl	d5524 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d57de:	4668      	mov	r0, sp
   d57e0:	f7ff ff6e 	bl	d56c0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d57e4:	2800      	cmp	r0, #0
   d57e6:	db38      	blt.n	d585a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d57e8:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d57ec:	f8da 3000 	ldr.w	r3, [sl]
   d57f0:	f10d 0c04 	add.w	ip, sp, #4
   d57f4:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d57f8:	4b20      	ldr	r3, [pc, #128]	; (d587c <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d57fa:	9306      	str	r3, [sp, #24]
   d57fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5800:	f10d 0e1c 	add.w	lr, sp, #28
   d5804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5808:	f8dc 3000 	ldr.w	r3, [ip]
   d580c:	f88e 3000 	strb.w	r3, [lr]
   d5810:	f249 0269 	movw	r2, #36969	; 0x9069
   d5814:	a906      	add	r1, sp, #24
   d5816:	4650      	mov	r0, sl
   d5818:	47c8      	blx	r9
   d581a:	2800      	cmp	r0, #0
   d581c:	db1d      	blt.n	d585a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d581e:	2300      	movs	r3, #0
   d5820:	6828      	ldr	r0, [r5, #0]
   d5822:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5826:	6803      	ldr	r3, [r0, #0]
   d5828:	2201      	movs	r2, #1
   d582a:	68db      	ldr	r3, [r3, #12]
   d582c:	a906      	add	r1, sp, #24
   d582e:	4798      	blx	r3
   d5830:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d5832:	6803      	ldr	r3, [r0, #0]
   d5834:	f108 0201 	add.w	r2, r8, #1
   d5838:	68db      	ldr	r3, [r3, #12]
   d583a:	4639      	mov	r1, r7
   d583c:	4798      	blx	r3
    if (dataLen > 0) {
   d583e:	b12c      	cbz	r4, d584c <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d5840:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d5842:	6803      	ldr	r3, [r0, #0]
   d5844:	4622      	mov	r2, r4
   d5846:	68db      	ldr	r3, [r3, #12]
   d5848:	4631      	mov	r1, r6
   d584a:	4798      	blx	r3
   d584c:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d584e:	6803      	ldr	r3, [r0, #0]
   d5850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5852:	4798      	blx	r3
   d5854:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5858:	e000      	b.n	d585c <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d585a:	4604      	mov	r4, r0
   d585c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5860:	f7ff f84c 	bl	d48fc <os_mutex_recursive_unlock>
   d5864:	e004      	b.n	d5870 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5866:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d586a:	e001      	b.n	d5870 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d586c:	4634      	mov	r4, r6
   d586e:	e7a4      	b.n	d57ba <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d5870:	4620      	mov	r0, r4
   d5872:	b00c      	add	sp, #48	; 0x30
   d5874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5878:	fffffef2 	.word	0xfffffef2
   d587c:	000d70d8 	.word	0x000d70d8

000d5880 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5880:	b538      	push	{r3, r4, r5, lr}
   d5882:	4c0d      	ldr	r4, [pc, #52]	; (d58b8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5884:	4b0d      	ldr	r3, [pc, #52]	; (d58bc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5886:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5888:	2500      	movs	r5, #0
   d588a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d588c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5890:	6063      	str	r3, [r4, #4]
   d5892:	60a5      	str	r5, [r4, #8]
   d5894:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5898:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d589c:	f7ff f81e 	bl	d48dc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d58a0:	4b07      	ldr	r3, [pc, #28]	; (d58c0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d58a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d58a6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d58a8:	4620      	mov	r0, r4
   d58aa:	4a06      	ldr	r2, [pc, #24]	; (d58c4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d58ac:	4906      	ldr	r1, [pc, #24]	; (d58c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d58ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d58b2:	f001 b90d 	b.w	d6ad0 <__aeabi_atexit>
   d58b6:	bf00      	nop
   d58b8:	2003e3e4 	.word	0x2003e3e4
   d58bc:	000d722c 	.word	0x000d722c
   d58c0:	000d71c8 	.word	0x000d71c8
   d58c4:	2003e3ac 	.word	0x2003e3ac
   d58c8:	000d5685 	.word	0x000d5685

000d58cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58cc:	2300      	movs	r3, #0
   d58ce:	461a      	mov	r2, r3
   d58d0:	6840      	ldr	r0, [r0, #4]
   d58d2:	f7ff ba07 	b.w	d4ce4 <network_connect>

000d58d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58d6:	2200      	movs	r2, #0
   d58d8:	2102      	movs	r1, #2
   d58da:	6840      	ldr	r0, [r0, #4]
   d58dc:	f7ff ba12 	b.w	d4d04 <network_disconnect>

000d58e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d58e0:	2200      	movs	r2, #0
   d58e2:	4611      	mov	r1, r2
   d58e4:	6840      	ldr	r0, [r0, #4]
   d58e6:	f7ff ba05 	b.w	d4cf4 <network_connecting>

000d58ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58ea:	2200      	movs	r2, #0
   d58ec:	4611      	mov	r1, r2
   d58ee:	6840      	ldr	r0, [r0, #4]
   d58f0:	f7ff ba10 	b.w	d4d14 <network_ready>

000d58f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d58f4:	2300      	movs	r3, #0
   d58f6:	461a      	mov	r2, r3
   d58f8:	4619      	mov	r1, r3
   d58fa:	6840      	ldr	r0, [r0, #4]
   d58fc:	f7ff ba12 	b.w	d4d24 <network_on>

000d5900 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5900:	2300      	movs	r3, #0
   d5902:	461a      	mov	r2, r3
   d5904:	4619      	mov	r1, r3
   d5906:	6840      	ldr	r0, [r0, #4]
   d5908:	f7ff ba14 	b.w	d4d34 <network_off>

000d590c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d590c:	2200      	movs	r2, #0
   d590e:	f081 0101 	eor.w	r1, r1, #1
   d5912:	6840      	ldr	r0, [r0, #4]
   d5914:	f7ff ba16 	b.w	d4d44 <network_listen>

000d5918 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5918:	2200      	movs	r2, #0
   d591a:	6840      	ldr	r0, [r0, #4]
   d591c:	f7ff ba22 	b.w	d4d64 <network_set_listen_timeout>

000d5920 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5920:	2200      	movs	r2, #0
   d5922:	4611      	mov	r1, r2
   d5924:	6840      	ldr	r0, [r0, #4]
   d5926:	f7ff ba25 	b.w	d4d74 <network_get_listen_timeout>

000d592a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d592a:	2200      	movs	r2, #0
   d592c:	4611      	mov	r1, r2
   d592e:	6840      	ldr	r0, [r0, #4]
   d5930:	f7ff ba10 	b.w	d4d54 <network_listening>

000d5934 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5934:	b570      	push	{r4, r5, r6, lr}
   d5936:	b08c      	sub	sp, #48	; 0x30
   d5938:	4614      	mov	r4, r2
   d593a:	4606      	mov	r6, r0
    IPAddress addr;
   d593c:	f7ff fdf2 	bl	d5524 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5940:	ab0c      	add	r3, sp, #48	; 0x30
   d5942:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5944:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5946:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d594a:	4620      	mov	r0, r4
   d594c:	f7ff f8ae 	bl	d4aac <netdb_getaddrinfo>
    if (!r && ai) {
   d5950:	4601      	mov	r1, r0
   d5952:	bb58      	cbnz	r0, d59ac <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5954:	9b00      	ldr	r3, [sp, #0]
   d5956:	b34b      	cbz	r3, d59ac <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5958:	685a      	ldr	r2, [r3, #4]
   d595a:	2a02      	cmp	r2, #2
   d595c:	d00e      	beq.n	d597c <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d595e:	2a0a      	cmp	r2, #10
   d5960:	d124      	bne.n	d59ac <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5962:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5964:	2211      	movs	r2, #17
   d5966:	a801      	add	r0, sp, #4
   d5968:	f001 fa33 	bl	d6dd2 <memset>
                a.v = 6;
   d596c:	2306      	movs	r3, #6
   d596e:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5972:	ad01      	add	r5, sp, #4
   d5974:	f104 0308 	add.w	r3, r4, #8
   d5978:	3418      	adds	r4, #24
   d597a:	e005      	b.n	d5988 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d597c:	6959      	ldr	r1, [r3, #20]
   d597e:	4630      	mov	r0, r6
   d5980:	3104      	adds	r1, #4
   d5982:	f7ff fe12 	bl	d55aa <_ZN9IPAddressaSEPKh>
                break;
   d5986:	e011      	b.n	d59ac <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5988:	6818      	ldr	r0, [r3, #0]
   d598a:	6859      	ldr	r1, [r3, #4]
   d598c:	462a      	mov	r2, r5
   d598e:	c203      	stmia	r2!, {r0, r1}
   d5990:	3308      	adds	r3, #8
   d5992:	42a3      	cmp	r3, r4
   d5994:	4615      	mov	r5, r2
   d5996:	d1f7      	bne.n	d5988 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5998:	a901      	add	r1, sp, #4
   d599a:	a806      	add	r0, sp, #24
   d599c:	ad07      	add	r5, sp, #28
   d599e:	f7ff fdcf 	bl	d5540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59a4:	1d34      	adds	r4, r6, #4
   d59a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59a8:	682b      	ldr	r3, [r5, #0]
   d59aa:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d59ac:	9800      	ldr	r0, [sp, #0]
   d59ae:	f7ff f875 	bl	d4a9c <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d59b2:	4630      	mov	r0, r6
   d59b4:	b00c      	add	sp, #48	; 0x30
   d59b6:	bd70      	pop	{r4, r5, r6, pc}

000d59b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d59b8:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d59ba:	4a03      	ldr	r2, [pc, #12]	; (d59c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d59bc:	601a      	str	r2, [r3, #0]
   d59be:	2200      	movs	r2, #0
   d59c0:	605a      	str	r2, [r3, #4]
   d59c2:	4770      	bx	lr
   d59c4:	2003e5b4 	.word	0x2003e5b4
   d59c8:	000d722c 	.word	0x000d722c

000d59cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d59cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59ce:	4606      	mov	r6, r0
   d59d0:	460d      	mov	r5, r1
   d59d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d59d4:	2400      	movs	r4, #0
  while (size--) {
   d59d6:	42bd      	cmp	r5, r7
   d59d8:	d00c      	beq.n	d59f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d59da:	6833      	ldr	r3, [r6, #0]
   d59dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d59e0:	689b      	ldr	r3, [r3, #8]
   d59e2:	4630      	mov	r0, r6
   d59e4:	4798      	blx	r3
     if (chunk>=0)
   d59e6:	2800      	cmp	r0, #0
   d59e8:	db01      	blt.n	d59ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d59ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d59ec:	e7f3      	b.n	d59d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d59ee:	2c00      	cmp	r4, #0
   d59f0:	bf08      	it	eq
   d59f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d59f4:	4620      	mov	r0, r4
   d59f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d59f8:	b570      	push	{r4, r5, r6, lr}
   d59fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d59fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d59fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5a00:	b149      	cbz	r1, d5a16 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5a02:	f001 fa1c 	bl	d6e3e <strlen>
   d5a06:	682b      	ldr	r3, [r5, #0]
   d5a08:	4602      	mov	r2, r0
   d5a0a:	4621      	mov	r1, r4
   d5a0c:	4628      	mov	r0, r5
   d5a0e:	68db      	ldr	r3, [r3, #12]
    }
   d5a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a14:	4718      	bx	r3
    }
   d5a16:	bd70      	pop	{r4, r5, r6, pc}

000d5a18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a18:	6803      	ldr	r3, [r0, #0]
   d5a1a:	689b      	ldr	r3, [r3, #8]
   d5a1c:	4718      	bx	r3

000d5a1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5a1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5a20:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5a22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5a24:	f7ff fff8 	bl	d5a18 <_ZN5Print5printEc>
  n += print('\n');
   d5a28:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5a2a:	4604      	mov	r4, r0
  n += print('\n');
   d5a2c:	4628      	mov	r0, r5
   d5a2e:	f7ff fff3 	bl	d5a18 <_ZN5Print5printEc>
  return n;
}
   d5a32:	4420      	add	r0, r4
   d5a34:	bd38      	pop	{r3, r4, r5, pc}

000d5a36 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a36:	b530      	push	{r4, r5, lr}
   d5a38:	b08b      	sub	sp, #44	; 0x2c
   d5a3a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a3c:	2100      	movs	r1, #0
   d5a3e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5a42:	2a01      	cmp	r2, #1
   d5a44:	bf98      	it	ls
   d5a46:	220a      	movls	r2, #10
   d5a48:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5a4c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5a50:	fb05 3312 	mls	r3, r5, r2, r3
   d5a54:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a58:	2b09      	cmp	r3, #9
   d5a5a:	bf94      	ite	ls
   d5a5c:	3330      	addls	r3, #48	; 0x30
   d5a5e:	3337      	addhi	r3, #55	; 0x37
   d5a60:	b2db      	uxtb	r3, r3
   d5a62:	4621      	mov	r1, r4
   d5a64:	f804 3901 	strb.w	r3, [r4], #-1
   d5a68:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5a6a:	2d00      	cmp	r5, #0
   d5a6c:	d1ee      	bne.n	d5a4c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5a6e:	f7ff ffc3 	bl	d59f8 <_ZN5Print5writeEPKc>
}
   d5a72:	b00b      	add	sp, #44	; 0x2c
   d5a74:	bd30      	pop	{r4, r5, pc}

000d5a76 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5a76:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5a78:	b92a      	cbnz	r2, d5a86 <_ZN5Print5printEmi+0x10>
   d5a7a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5a80:	689b      	ldr	r3, [r3, #8]
   d5a82:	b2c9      	uxtb	r1, r1
   d5a84:	4718      	bx	r3
  else return printNumber(n, base);
   d5a86:	b2d2      	uxtb	r2, r2
}
   d5a88:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5a8c:	f7ff bfd3 	b.w	d5a36 <_ZN5Print11printNumberEmh>

000d5a90 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5a90:	f7ff bff1 	b.w	d5a76 <_ZN5Print5printEmi>

000d5a94 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5a94:	b40c      	push	{r2, r3}
   d5a96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a9a:	b087      	sub	sp, #28
   d5a9c:	af00      	add	r7, sp, #0
   d5a9e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5aa2:	4605      	mov	r5, r0
   d5aa4:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5aa8:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5aaa:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5aac:	4623      	mov	r3, r4
   d5aae:	464a      	mov	r2, r9
   d5ab0:	2114      	movs	r1, #20
   d5ab2:	1d38      	adds	r0, r7, #4
   d5ab4:	f7ff f97e 	bl	d4db4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5ab8:	2813      	cmp	r0, #19
   d5aba:	d805      	bhi.n	d5ac8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5abc:	1d39      	adds	r1, r7, #4
   d5abe:	4628      	mov	r0, r5
   d5ac0:	f7ff ff9a 	bl	d59f8 <_ZN5Print5writeEPKc>
   d5ac4:	4604      	mov	r4, r0
   d5ac6:	e013      	b.n	d5af0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5ac8:	f100 0308 	add.w	r3, r0, #8
   d5acc:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5ad0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5ad2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5ad6:	1c41      	adds	r1, r0, #1
   d5ad8:	4623      	mov	r3, r4
   d5ada:	464a      	mov	r2, r9
   d5adc:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5ade:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5ae0:	f7ff f968 	bl	d4db4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ae4:	4669      	mov	r1, sp
   d5ae6:	4628      	mov	r0, r5
   d5ae8:	f7ff ff86 	bl	d59f8 <_ZN5Print5writeEPKc>
   d5aec:	4604      	mov	r4, r0
   d5aee:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5af0:	b11e      	cbz	r6, d5afa <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5af2:	4628      	mov	r0, r5
   d5af4:	f7ff ff93 	bl	d5a1e <_ZN5Print7printlnEv>
   d5af8:	4404      	add	r4, r0
    return n;
}
   d5afa:	4620      	mov	r0, r4
   d5afc:	371c      	adds	r7, #28
   d5afe:	46bd      	mov	sp, r7
   d5b00:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b04:	b002      	add	sp, #8
   d5b06:	4770      	bx	lr

000d5b08 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5b08:	b510      	push	{r4, lr}
   d5b0a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b0c:	f7ff f98e 	bl	d4e2c <_ZNSt14_Function_baseD1Ev>
   d5b10:	4620      	mov	r0, r4
   d5b12:	bd10      	pop	{r4, pc}

000d5b14 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5b14:	4803      	ldr	r0, [pc, #12]	; (d5b24 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5b16:	4a04      	ldr	r2, [pc, #16]	; (d5b28 <_GLOBAL__sub_I_RGB+0x14>)
   d5b18:	4904      	ldr	r1, [pc, #16]	; (d5b2c <_GLOBAL__sub_I_RGB+0x18>)
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	6083      	str	r3, [r0, #8]
   d5b1e:	f000 bfd7 	b.w	d6ad0 <__aeabi_atexit>
   d5b22:	bf00      	nop
   d5b24:	2003e5bc 	.word	0x2003e5bc
   d5b28:	2003e3ac 	.word	0x2003e3ac
   d5b2c:	000d5b09 	.word	0x000d5b09

000d5b30 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5b30:	4770      	bx	lr

000d5b32 <_ZN8SPIClassD0Ev>:
   d5b32:	b510      	push	{r4, lr}
   d5b34:	4604      	mov	r4, r0
   d5b36:	f7fe fab2 	bl	d409e <_ZdlPv>
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	bd10      	pop	{r4, pc}
	...

000d5b40 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5b40:	b570      	push	{r4, r5, r6, lr}
   d5b42:	4b08      	ldr	r3, [pc, #32]	; (d5b64 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5b44:	6003      	str	r3, [r0, #0]
   d5b46:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5b48:	2500      	movs	r5, #0
   d5b4a:	460e      	mov	r6, r1
   d5b4c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5b50:	f7fe febc 	bl	d48cc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5b54:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5b56:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5b58:	f7fe ffe0 	bl	d4b1c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5b5c:	60a5      	str	r5, [r4, #8]
}
   d5b5e:	4620      	mov	r0, r4
   d5b60:	bd70      	pop	{r4, r5, r6, pc}
   d5b62:	bf00      	nop
   d5b64:	000d7260 	.word	0x000d7260

000d5b68 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5b68:	7900      	ldrb	r0, [r0, #4]
   d5b6a:	f7fe bfdf 	b.w	d4b2c <HAL_SPI_Is_Enabled>

000d5b6e <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d5b6e:	4770      	bx	lr

000d5b70 <_ZN21StringPrintableHelperD0Ev>:
   d5b70:	b510      	push	{r4, lr}
   d5b72:	4604      	mov	r4, r0
   d5b74:	f7fe fa93 	bl	d409e <_ZdlPv>
   d5b78:	4620      	mov	r0, r4
   d5b7a:	bd10      	pop	{r4, pc}

000d5b7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5b7c:	b510      	push	{r4, lr}
   d5b7e:	4604      	mov	r4, r0
{
	free(buffer);
   d5b80:	6800      	ldr	r0, [r0, #0]
   d5b82:	f7ff f907 	bl	d4d94 <free>
}
   d5b86:	4620      	mov	r0, r4
   d5b88:	bd10      	pop	{r4, pc}

000d5b8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5b8a:	b510      	push	{r4, lr}
   d5b8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5b8e:	6800      	ldr	r0, [r0, #0]
   d5b90:	b108      	cbz	r0, d5b96 <_ZN6String10invalidateEv+0xc>
   d5b92:	f7ff f8ff 	bl	d4d94 <free>
	buffer = NULL;
   d5b96:	2300      	movs	r3, #0
   d5b98:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5b9a:	60a3      	str	r3, [r4, #8]
   d5b9c:	6063      	str	r3, [r4, #4]
   d5b9e:	bd10      	pop	{r4, pc}

000d5ba0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ba0:	b538      	push	{r3, r4, r5, lr}
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ba6:	6800      	ldr	r0, [r0, #0]
   d5ba8:	3101      	adds	r1, #1
   d5baa:	f7ff f8fb 	bl	d4da4 <realloc>
	if (newbuffer) {
   d5bae:	b110      	cbz	r0, d5bb6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5bb0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5bb4:	2001      	movs	r0, #1
	}
	return 0;
}
   d5bb6:	bd38      	pop	{r3, r4, r5, pc}

000d5bb8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5bb8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5bba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5bbc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5bbe:	b113      	cbz	r3, d5bc6 <_ZN6String7reserveEj+0xe>
   d5bc0:	6843      	ldr	r3, [r0, #4]
   d5bc2:	428b      	cmp	r3, r1
   d5bc4:	d207      	bcs.n	d5bd6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	f7ff ffea 	bl	d5ba0 <_ZN6String12changeBufferEj>
   d5bcc:	b120      	cbz	r0, d5bd8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5bce:	68a3      	ldr	r3, [r4, #8]
   d5bd0:	b90b      	cbnz	r3, d5bd6 <_ZN6String7reserveEj+0x1e>
   d5bd2:	6822      	ldr	r2, [r4, #0]
   d5bd4:	7013      	strb	r3, [r2, #0]
   d5bd6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5bd8:	bd10      	pop	{r4, pc}

000d5bda <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5bda:	b570      	push	{r4, r5, r6, lr}
   d5bdc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5bde:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5be0:	4604      	mov	r4, r0
   d5be2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5be4:	f7ff ffe8 	bl	d5bb8 <_ZN6String7reserveEj>
   d5be8:	b918      	cbnz	r0, d5bf2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5bea:	4620      	mov	r0, r4
   d5bec:	f7ff ffcd 	bl	d5b8a <_ZN6String10invalidateEv>
		return *this;
   d5bf0:	e009      	b.n	d5c06 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5bf2:	462a      	mov	r2, r5
   d5bf4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5bf6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5bf8:	6820      	ldr	r0, [r4, #0]
   d5bfa:	f001 f8df 	bl	d6dbc <memcpy>
	buffer[len] = 0;
   d5bfe:	6822      	ldr	r2, [r4, #0]
   d5c00:	68a3      	ldr	r3, [r4, #8]
   d5c02:	2100      	movs	r1, #0
   d5c04:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5c06:	4620      	mov	r0, r4
   d5c08:	bd70      	pop	{r4, r5, r6, pc}

000d5c0a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c0a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c0c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c10:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c12:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c14:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c16:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5c18:	460d      	mov	r5, r1
   d5c1a:	b139      	cbz	r1, d5c2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5c1c:	4608      	mov	r0, r1
   d5c1e:	f001 f90e 	bl	d6e3e <strlen>
   d5c22:	4629      	mov	r1, r5
   d5c24:	4602      	mov	r2, r0
   d5c26:	4620      	mov	r0, r4
   d5c28:	f7ff ffd7 	bl	d5bda <_ZN6String4copyEPKcj>
}
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	bd38      	pop	{r3, r4, r5, pc}

000d5c30 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5c30:	b538      	push	{r3, r4, r5, lr}
   d5c32:	4605      	mov	r5, r0
	if (buffer) {
   d5c34:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5c36:	460c      	mov	r4, r1
	if (buffer) {
   d5c38:	b160      	cbz	r0, d5c54 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5c3a:	686a      	ldr	r2, [r5, #4]
   d5c3c:	688b      	ldr	r3, [r1, #8]
   d5c3e:	429a      	cmp	r2, r3
   d5c40:	d306      	bcc.n	d5c50 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d5c42:	6809      	ldr	r1, [r1, #0]
   d5c44:	f001 f8d7 	bl	d6df6 <strcpy>
			len = rhs.len;
   d5c48:	68a3      	ldr	r3, [r4, #8]
   d5c4a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5c4c:	2300      	movs	r3, #0
   d5c4e:	e00a      	b.n	d5c66 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5c50:	f7ff f8a0 	bl	d4d94 <free>
		}
	}
	buffer = rhs.buffer;
   d5c54:	6823      	ldr	r3, [r4, #0]
   d5c56:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5c58:	6863      	ldr	r3, [r4, #4]
   d5c5a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5c5c:	68a3      	ldr	r3, [r4, #8]
   d5c5e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5c60:	2300      	movs	r3, #0
   d5c62:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5c64:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5c66:	60a3      	str	r3, [r4, #8]
   d5c68:	bd38      	pop	{r3, r4, r5, pc}

000d5c6a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5c6a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5c6c:	b510      	push	{r4, lr}
   d5c6e:	460b      	mov	r3, r1
   d5c70:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5c72:	d007      	beq.n	d5c84 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5c74:	6809      	ldr	r1, [r1, #0]
   d5c76:	b119      	cbz	r1, d5c80 <_ZN6StringaSERKS_+0x16>
   d5c78:	689a      	ldr	r2, [r3, #8]
   d5c7a:	f7ff ffae 	bl	d5bda <_ZN6String4copyEPKcj>
   d5c7e:	e001      	b.n	d5c84 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5c80:	f7ff ff83 	bl	d5b8a <_ZN6String10invalidateEv>

	return *this;
}
   d5c84:	4620      	mov	r0, r4
   d5c86:	bd10      	pop	{r4, pc}

000d5c88 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5c88:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c8a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5c8c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c8e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c90:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c92:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c94:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5c96:	f7ff ffe8 	bl	d5c6a <_ZN6StringaSERKS_>
}
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	bd10      	pop	{r4, pc}

000d5c9e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5c9e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5ca0:	b510      	push	{r4, lr}
   d5ca2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5ca4:	d001      	beq.n	d5caa <_ZN6StringaSEOS_+0xc>
   d5ca6:	f7ff ffc3 	bl	d5c30 <_ZN6String4moveERS_>
	return *this;
}
   d5caa:	4620      	mov	r0, r4
   d5cac:	bd10      	pop	{r4, pc}

000d5cae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5cae:	b538      	push	{r3, r4, r5, lr}
   d5cb0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5cb2:	460c      	mov	r4, r1
   d5cb4:	b141      	cbz	r1, d5cc8 <_ZN6StringaSEPKc+0x1a>
   d5cb6:	4608      	mov	r0, r1
   d5cb8:	f001 f8c1 	bl	d6e3e <strlen>
   d5cbc:	4621      	mov	r1, r4
   d5cbe:	4602      	mov	r2, r0
   d5cc0:	4628      	mov	r0, r5
   d5cc2:	f7ff ff8a 	bl	d5bda <_ZN6String4copyEPKcj>
   d5cc6:	e001      	b.n	d5ccc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5cc8:	f7ff ff5f 	bl	d5b8a <_ZN6String10invalidateEv>

	return *this;
}
   d5ccc:	4628      	mov	r0, r5
   d5cce:	bd38      	pop	{r3, r4, r5, pc}

000d5cd0 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5cd0:	b510      	push	{r4, lr}
   d5cd2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cd4:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5cd6:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cd8:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5cda:	6063      	str	r3, [r4, #4]
	len = 0;
   d5cdc:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5cde:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5ce0:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5ce2:	a901      	add	r1, sp, #4
   d5ce4:	f000 fdca 	bl	d687c <itoa>
	*this = buf;
   d5ce8:	a901      	add	r1, sp, #4
   d5cea:	4620      	mov	r0, r4
   d5cec:	f7ff ffdf 	bl	d5cae <_ZN6StringaSEPKc>
}
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	b00a      	add	sp, #40	; 0x28
   d5cf4:	bd10      	pop	{r4, pc}

000d5cf6 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5cf6:	b510      	push	{r4, lr}
   d5cf8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cfa:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5cfc:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cfe:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5d00:	6063      	str	r3, [r4, #4]
	len = 0;
   d5d02:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5d04:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5d06:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d5d08:	a901      	add	r1, sp, #4
   d5d0a:	f000 fd50 	bl	d67ae <ltoa>
	*this = buf;
   d5d0e:	a901      	add	r1, sp, #4
   d5d10:	4620      	mov	r0, r4
   d5d12:	f7ff ffcc 	bl	d5cae <_ZN6StringaSEPKc>
}
   d5d16:	4620      	mov	r0, r4
   d5d18:	b00a      	add	sp, #40	; 0x28
   d5d1a:	bd10      	pop	{r4, pc}

000d5d1c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5d1c:	b570      	push	{r4, r5, r6, lr}
   d5d1e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5d20:	460e      	mov	r6, r1
   d5d22:	b909      	cbnz	r1, d5d28 <_ZN6String6concatEPKcj+0xc>
   d5d24:	2000      	movs	r0, #0
   d5d26:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5d28:	b16a      	cbz	r2, d5d46 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5d2a:	6883      	ldr	r3, [r0, #8]
   d5d2c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5d2e:	4629      	mov	r1, r5
   d5d30:	f7ff ff42 	bl	d5bb8 <_ZN6String7reserveEj>
   d5d34:	2800      	cmp	r0, #0
   d5d36:	d0f5      	beq.n	d5d24 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5d38:	6820      	ldr	r0, [r4, #0]
   d5d3a:	68a3      	ldr	r3, [r4, #8]
   d5d3c:	4631      	mov	r1, r6
   d5d3e:	4418      	add	r0, r3
   d5d40:	f001 f859 	bl	d6df6 <strcpy>
	len = newlen;
   d5d44:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5d46:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5d48:	bd70      	pop	{r4, r5, r6, pc}

000d5d4a <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d5d4a:	b538      	push	{r3, r4, r5, lr}
   d5d4c:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d5d4e:	6880      	ldr	r0, [r0, #8]
   d5d50:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d5d52:	f7ff ffe3 	bl	d5d1c <_ZN6String6concatEPKcj>
   d5d56:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d5d58:	6898      	ldr	r0, [r3, #8]
    }
   d5d5a:	1b40      	subs	r0, r0, r5
   d5d5c:	bd38      	pop	{r3, r4, r5, pc}

000d5d5e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5d5e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5d60:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5d62:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5d66:	2201      	movs	r2, #1
   d5d68:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5d6a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5d6e:	f7ff ffd5 	bl	d5d1c <_ZN6String6concatEPKcj>
}
   d5d72:	b003      	add	sp, #12
   d5d74:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d78 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d5d78:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d5d7a:	6880      	ldr	r0, [r0, #8]
   d5d7c:	f7ff ffef 	bl	d5d5e <_ZN6String6concatEc>
    }
   d5d80:	bd08      	pop	{r3, pc}

000d5d82 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5d82:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d84:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5d86:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d88:	b912      	cbnz	r2, d5d90 <_ZNK6String6equalsEPKc+0xe>
   d5d8a:	b919      	cbnz	r1, d5d94 <_ZNK6String6equalsEPKc+0x12>
   d5d8c:	2001      	movs	r0, #1
   d5d8e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5d90:	b911      	cbnz	r1, d5d98 <_ZNK6String6equalsEPKc+0x16>
   d5d92:	6803      	ldr	r3, [r0, #0]
   d5d94:	7818      	ldrb	r0, [r3, #0]
   d5d96:	e002      	b.n	d5d9e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5d98:	6800      	ldr	r0, [r0, #0]
   d5d9a:	f001 f822 	bl	d6de2 <strcmp>
   d5d9e:	fab0 f080 	clz	r0, r0
   d5da2:	0940      	lsrs	r0, r0, #5
}
   d5da4:	bd08      	pop	{r3, pc}

000d5da6 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d5da6:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d5da8:	6883      	ldr	r3, [r0, #8]
   d5daa:	4293      	cmp	r3, r2
   d5dac:	d907      	bls.n	d5dbe <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d5dae:	6804      	ldr	r4, [r0, #0]
   d5db0:	6809      	ldr	r1, [r1, #0]
   d5db2:	18a0      	adds	r0, r4, r2
   d5db4:	f001 f84b 	bl	d6e4e <strstr>
	if (found == NULL) return -1;
   d5db8:	b108      	cbz	r0, d5dbe <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d5dba:	1b00      	subs	r0, r0, r4
   d5dbc:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d5dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d5dc2:	bd10      	pop	{r4, pc}

000d5dc4 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d5dc4:	2200      	movs	r2, #0
   d5dc6:	f7ff bfee 	b.w	d5da6 <_ZNK6String7indexOfERKS_j>
	...

000d5dcc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d5dd0:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5dd2:	460e      	mov	r6, r1
   d5dd4:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5dd6:	4910      	ldr	r1, [pc, #64]	; (d5e18 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d5dd8:	bf88      	it	hi
   d5dda:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5ddc:	4615      	mov	r5, r2
   d5dde:	4607      	mov	r7, r0
	if (left > right) {
   d5de0:	bf84      	itt	hi
   d5de2:	4625      	movhi	r5, r4
   d5de4:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5de6:	f7ff ff10 	bl	d5c0a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d5dea:	68b1      	ldr	r1, [r6, #8]
   d5dec:	428d      	cmp	r5, r1
   d5dee:	d80f      	bhi.n	d5e10 <_ZNK6String9substringEjj+0x44>
   d5df0:	428c      	cmp	r4, r1
   d5df2:	bf28      	it	cs
   d5df4:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d5df6:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d5df8:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d5dfa:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d5dfe:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d5e00:	6831      	ldr	r1, [r6, #0]
   d5e02:	4638      	mov	r0, r7
   d5e04:	4429      	add	r1, r5
   d5e06:	f7ff ff52 	bl	d5cae <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d5e0a:	6833      	ldr	r3, [r6, #0]
   d5e0c:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d5e10:	4638      	mov	r0, r7
   d5e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e16:	bf00      	nop
   d5e18:	000d70f8 	.word	0x000d70f8

000d5e1c <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d5e1c:	b510      	push	{r4, lr}
   d5e1e:	4604      	mov	r4, r0
	return substring(left, len);
   d5e20:	688b      	ldr	r3, [r1, #8]
   d5e22:	f7ff ffd3 	bl	d5dcc <_ZNK6String9substringEjj>
}
   d5e26:	4620      	mov	r0, r4
   d5e28:	bd10      	pop	{r4, pc}

000d5e2a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5e2a:	6800      	ldr	r0, [r0, #0]
   d5e2c:	b108      	cbz	r0, d5e32 <_ZNK6String5toIntEv+0x8>
   d5e2e:	f000 bf9f 	b.w	d6d70 <atol>
	return 0;
}
   d5e32:	4770      	bx	lr

000d5e34 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5e34:	b530      	push	{r4, r5, lr}
   d5e36:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e38:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5e3a:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e3c:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e3e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e40:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e42:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e44:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d5e46:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5e48:	4b06      	ldr	r3, [pc, #24]	; (d5e64 <_ZN6StringC1ERK9Printable+0x30>)
   d5e4a:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d5e4c:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d5e4e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d5e50:	f7ff feb2 	bl	d5bb8 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d5e54:	682b      	ldr	r3, [r5, #0]
   d5e56:	a901      	add	r1, sp, #4
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	4628      	mov	r0, r5
   d5e5c:	4798      	blx	r3
}
   d5e5e:	4620      	mov	r0, r4
   d5e60:	b005      	add	sp, #20
   d5e62:	bd30      	pop	{r4, r5, pc}
   d5e64:	000d7270 	.word	0x000d7270

000d5e68 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5e68:	4b05      	ldr	r3, [pc, #20]	; (d5e80 <_GLOBAL__sub_I_System+0x18>)
   d5e6a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5e6e:	2000      	movs	r0, #0
   d5e70:	805a      	strh	r2, [r3, #2]
   d5e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e76:	7018      	strb	r0, [r3, #0]
   d5e78:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5e7a:	f7fe bedf 	b.w	d4c3c <set_system_mode>
   d5e7e:	bf00      	nop
   d5e80:	2003e5cc 	.word	0x2003e5cc

000d5e84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e84:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e86:	681a      	ldr	r2, [r3, #0]
   d5e88:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e8a:	601a      	str	r2, [r3, #0]
   d5e8c:	4770      	bx	lr
   d5e8e:	bf00      	nop
   d5e90:	2003e340 	.word	0x2003e340
   d5e94:	2003e5d4 	.word	0x2003e5d4

000d5e98 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5e98:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5e9a:	6804      	ldr	r4, [r0, #0]
   d5e9c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5e9e:	46a4      	mov	ip, r4
    }
   d5ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5ea4:	4760      	bx	ip

000d5ea6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5ea6:	6803      	ldr	r3, [r0, #0]
   d5ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5eaa:	4718      	bx	r3

000d5eac <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5eac:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5eae:	4770      	bx	lr

000d5eb0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5eb0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5eb2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5eb4:	1a10      	subs	r0, r2, r0
   d5eb6:	4770      	bx	lr

000d5eb8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5eb8:	b513      	push	{r0, r1, r4, lr}
   d5eba:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5ebc:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5ebe:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5ec2:	68d4      	ldr	r4, [r2, #12]
   d5ec4:	4619      	mov	r1, r3
   d5ec6:	2201      	movs	r2, #1
   d5ec8:	47a0      	blx	r4
}
   d5eca:	b002      	add	sp, #8
   d5ecc:	bd10      	pop	{r4, pc}

000d5ece <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d5ece:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5ed0:	6803      	ldr	r3, [r0, #0]
   d5ed2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5ed4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5ed6:	4798      	blx	r3
   d5ed8:	b128      	cbz	r0, d5ee6 <_ZN3UDP4readEv+0x18>
   d5eda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5edc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5ede:	1c59      	adds	r1, r3, #1
   d5ee0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5ee2:	5cd0      	ldrb	r0, [r2, r3]
   d5ee4:	bd10      	pop	{r4, pc}
   d5ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5eea:	bd10      	pop	{r4, pc}

000d5eec <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5eec:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5eee:	6803      	ldr	r3, [r0, #0]
   d5ef0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5ef2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5ef4:	4798      	blx	r3
   d5ef6:	b118      	cbz	r0, d5f00 <_ZN3UDP4peekEv+0x14>
   d5ef8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5efa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5efc:	5cd0      	ldrb	r0, [r2, r3]
   d5efe:	bd10      	pop	{r4, pc}
   d5f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5f04:	bd10      	pop	{r4, pc}

000d5f06 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5f06:	4770      	bx	lr

000d5f08 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5f08:	b410      	push	{r4}
   d5f0a:	4603      	mov	r3, r0
   d5f0c:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5f0e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5f10:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5f12:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5f14:	6803      	ldr	r3, [r0, #0]
   d5f16:	1a52      	subs	r2, r2, r1
   d5f18:	68db      	ldr	r3, [r3, #12]
   d5f1a:	4421      	add	r1, r4
}
   d5f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5f20:	4718      	bx	r3

000d5f22 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5f22:	f1a0 0010 	sub.w	r0, r0, #16
   d5f26:	f7ff bfef 	b.w	d5f08 <_ZNK3UDP7printToER5Print>

000d5f2a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5f2c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5f2e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5f30:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5f34:	4604      	mov	r4, r0
   d5f36:	460f      	mov	r7, r1
   d5f38:	4615      	mov	r5, r2
    stop();
   d5f3a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5f3c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5f3e:	4632      	mov	r2, r6
   d5f40:	2100      	movs	r1, #0
   d5f42:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5f44:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5f46:	f000 ff44 	bl	d6dd2 <memset>
    saddr.sin6_len = sizeof(saddr);
   d5f4a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5f4e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5f50:	260a      	movs	r6, #10
   d5f52:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5f56:	f7fe fd99 	bl	d4a8c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5f5a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5f5c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5f60:	2102      	movs	r1, #2
   d5f62:	4630      	mov	r0, r6
   d5f64:	f7fe fdd2 	bl	d4b0c <sock_socket>

    if (_sock < 0) {
   d5f68:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5f6a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5f6c:	db24      	blt.n	d5fb8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5f6e:	2204      	movs	r2, #4
   d5f70:	9200      	str	r2, [sp, #0]
   d5f72:	ab02      	add	r3, sp, #8
   d5f74:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5f78:	f7fe fda8 	bl	d4acc <sock_setsockopt>
   d5f7c:	b9e0      	cbnz	r0, d5fb8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5f7e:	b195      	cbz	r5, d5fa6 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5f80:	9003      	str	r0, [sp, #12]
   d5f82:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5f86:	a903      	add	r1, sp, #12
   d5f88:	b2e8      	uxtb	r0, r5
   d5f8a:	f7fe fd3f 	bl	d4a0c <if_index_to_name>
   d5f8e:	b998      	cbnz	r0, d5fb8 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5f90:	2306      	movs	r3, #6
   d5f92:	9300      	str	r3, [sp, #0]
   d5f94:	f241 020b 	movw	r2, #4107	; 0x100b
   d5f98:	ab03      	add	r3, sp, #12
   d5f9a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5f9e:	6960      	ldr	r0, [r4, #20]
   d5fa0:	f7fe fd94 	bl	d4acc <sock_setsockopt>
   d5fa4:	b940      	cbnz	r0, d5fb8 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5fa6:	221c      	movs	r2, #28
   d5fa8:	a905      	add	r1, sp, #20
   d5faa:	6960      	ldr	r0, [r4, #20]
   d5fac:	f7fe fd86 	bl	d4abc <sock_bind>
   d5fb0:	b910      	cbnz	r0, d5fb8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d5fb2:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5fb4:	2001      	movs	r0, #1
   d5fb6:	e004      	b.n	d5fc2 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5fb8:	6823      	ldr	r3, [r4, #0]
   d5fba:	4620      	mov	r0, r4
   d5fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fbe:	4798      	blx	r3
   d5fc0:	2000      	movs	r0, #0
    }
    return bound;
}
   d5fc2:	b00d      	add	sp, #52	; 0x34
   d5fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5fc6 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5fc6:	b510      	push	{r4, lr}
   d5fc8:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5fca:	6940      	ldr	r0, [r0, #20]
   d5fcc:	2800      	cmp	r0, #0
   d5fce:	db01      	blt.n	d5fd4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5fd0:	f7fe fd84 	bl	d4adc <sock_close>
    }

    _sock = -1;
   d5fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5fd8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5fda:	2300      	movs	r3, #0
   d5fdc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5fde:	8723      	strh	r3, [r4, #56]	; 0x38
   d5fe0:	bd10      	pop	{r4, pc}

000d5fe2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5fe2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5fe4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5fe6:	4605      	mov	r5, r0
   d5fe8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5fea:	b113      	cbz	r3, d5ff2 <_ZN3UDP5writeEPKhj+0x10>
   d5fec:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d5fee:	1a24      	subs	r4, r4, r0
   d5ff0:	e000      	b.n	d5ff4 <_ZN3UDP5writeEPKhj+0x12>
   d5ff2:	461c      	mov	r4, r3
   d5ff4:	4294      	cmp	r4, r2
   d5ff6:	bf28      	it	cs
   d5ff8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d5ffa:	4622      	mov	r2, r4
   d5ffc:	4418      	add	r0, r3
   d5ffe:	f000 fedd 	bl	d6dbc <memcpy>
    _offset += size;
   d6002:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6004:	4423      	add	r3, r4
   d6006:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d6008:	4620      	mov	r0, r4
   d600a:	bd38      	pop	{r3, r4, r5, pc}

000d600c <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d600c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d600e:	6803      	ldr	r3, [r0, #0]
   d6010:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6012:	4604      	mov	r4, r0
   d6014:	460e      	mov	r6, r1
   d6016:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6018:	4798      	blx	r3
   d601a:	b188      	cbz	r0, d6040 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d601c:	6823      	ldr	r3, [r4, #0]
   d601e:	4620      	mov	r0, r4
   d6020:	691b      	ldr	r3, [r3, #16]
   d6022:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d6024:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6026:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6028:	4285      	cmp	r5, r0
   d602a:	bfa8      	it	ge
   d602c:	4605      	movge	r5, r0
   d602e:	4419      	add	r1, r3
   d6030:	462a      	mov	r2, r5
   d6032:	4630      	mov	r0, r6
   d6034:	f000 fec2 	bl	d6dbc <memcpy>
        _offset += read;
   d6038:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d603a:	442b      	add	r3, r5
   d603c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d603e:	e001      	b.n	d6044 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d6040:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d6044:	4628      	mov	r0, r5
   d6046:	bd70      	pop	{r4, r5, r6, pc}

000d6048 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d6048:	b570      	push	{r4, r5, r6, lr}
   d604a:	4604      	mov	r4, r0
   d604c:	4b05      	ldr	r3, [pc, #20]	; (d6064 <_ZN3UDP8remoteIPEv+0x1c>)
   d604e:	f844 3b04 	str.w	r3, [r4], #4
   d6052:	f101 0520 	add.w	r5, r1, #32
   d6056:	4606      	mov	r6, r0
   d6058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d605a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d605c:	682b      	ldr	r3, [r5, #0]
   d605e:	7023      	strb	r3, [r4, #0]
   d6060:	4630      	mov	r0, r6
   d6062:	bd70      	pop	{r4, r5, r6, pc}
   d6064:	000d70d8 	.word	0x000d70d8

000d6068 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6068:	b5f0      	push	{r4, r5, r6, r7, lr}
   d606a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d606c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d606e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6070:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d6072:	4a0a      	ldr	r2, [pc, #40]	; (d609c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6074:	9202      	str	r2, [sp, #8]
   d6076:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6078:	468e      	mov	lr, r1
   d607a:	4606      	mov	r6, r0
   d607c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d607e:	ac03      	add	r4, sp, #12
   d6080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6082:	682b      	ldr	r3, [r5, #0]
   d6084:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6086:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d608a:	9300      	str	r3, [sp, #0]
   d608c:	4662      	mov	r2, ip
   d608e:	ab02      	add	r3, sp, #8
   d6090:	4671      	mov	r1, lr
   d6092:	4630      	mov	r0, r6
   d6094:	47b8      	blx	r7
    }
   d6096:	b009      	add	sp, #36	; 0x24
   d6098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d609a:	bf00      	nop
   d609c:	000d70d8 	.word	0x000d70d8

000d60a0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d60a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d60a2:	6803      	ldr	r3, [r0, #0]
   d60a4:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d60a8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d60aa:	4b0d      	ldr	r3, [pc, #52]	; (d60e0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d60ac:	b089      	sub	sp, #36	; 0x24
   d60ae:	f100 0620 	add.w	r6, r0, #32
   d60b2:	4604      	mov	r4, r0
   d60b4:	9302      	str	r3, [sp, #8]
   d60b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d60b8:	ad03      	add	r5, sp, #12
   d60ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d60bc:	6833      	ldr	r3, [r6, #0]
   d60be:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d60c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d60c2:	9300      	str	r3, [sp, #0]
   d60c4:	4672      	mov	r2, lr
   d60c6:	ab02      	add	r3, sp, #8
   d60c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d60ca:	4620      	mov	r0, r4
   d60cc:	47b8      	blx	r7
    flush(); // wait for send to complete
   d60ce:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d60d0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d60d2:	69db      	ldr	r3, [r3, #28]
   d60d4:	4620      	mov	r0, r4
   d60d6:	4798      	blx	r3
    return result;
}
   d60d8:	4628      	mov	r0, r5
   d60da:	b009      	add	sp, #36	; 0x24
   d60dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d60de:	bf00      	nop
   d60e0:	000d70d8 	.word	0x000d70d8

000d60e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d60e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d60e6:	7843      	ldrb	r3, [r0, #1]
   d60e8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d60ea:	b08d      	sub	sp, #52	; 0x34
   d60ec:	4605      	mov	r5, r0
   d60ee:	460c      	mov	r4, r1
   d60f0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d60f2:	d101      	bne.n	d60f8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d60f4:	1d01      	adds	r1, r0, #4
   d60f6:	e033      	b.n	d6160 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d60f8:	2b0a      	cmp	r3, #10
   d60fa:	d135      	bne.n	d6168 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d60fc:	2211      	movs	r2, #17
   d60fe:	2100      	movs	r1, #0
   d6100:	a801      	add	r0, sp, #4
   d6102:	f000 fe66 	bl	d6dd2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6106:	68ab      	ldr	r3, [r5, #8]
   d6108:	b943      	cbnz	r3, d611c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d610a:	68eb      	ldr	r3, [r5, #12]
   d610c:	b933      	cbnz	r3, d611c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d610e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6112:	692e      	ldr	r6, [r5, #16]
   d6114:	f7fe fcaa 	bl	d4a6c <inet_htonl>
   d6118:	4286      	cmp	r6, r0
   d611a:	d01f      	beq.n	d615c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d611c:	f105 0308 	add.w	r3, r5, #8
   d6120:	ae01      	add	r6, sp, #4
   d6122:	f105 0e18 	add.w	lr, r5, #24
   d6126:	6818      	ldr	r0, [r3, #0]
   d6128:	6859      	ldr	r1, [r3, #4]
   d612a:	4632      	mov	r2, r6
   d612c:	c203      	stmia	r2!, {r0, r1}
   d612e:	3308      	adds	r3, #8
   d6130:	4573      	cmp	r3, lr
   d6132:	4616      	mov	r6, r2
   d6134:	d1f7      	bne.n	d6126 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d6136:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6138:	a901      	add	r1, sp, #4
   d613a:	a806      	add	r0, sp, #24
   d613c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d613e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6142:	f7ff f9fd 	bl	d5540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6148:	3404      	adds	r4, #4
   d614a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d614c:	6833      	ldr	r3, [r6, #0]
   d614e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d6150:	b157      	cbz	r7, d6168 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d6152:	8868      	ldrh	r0, [r5, #2]
   d6154:	f7fe fc92 	bl	d4a7c <inet_ntohs>
   d6158:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d615a:	e005      	b.n	d6168 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d615c:	f105 0114 	add.w	r1, r5, #20
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff fa22 	bl	d55aa <_ZN9IPAddressaSEPKh>
   d6166:	e7f3      	b.n	d6150 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6168:	b00d      	add	sp, #52	; 0x34
   d616a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d616c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d616c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6170:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6172:	ab0e      	add	r3, sp, #56	; 0x38
   d6174:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6176:	4606      	mov	r6, r0
   d6178:	4617      	mov	r7, r2
   d617a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d617c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6180:	462a      	mov	r2, r5
   d6182:	4629      	mov	r1, r5
   d6184:	f7fe fc92 	bl	d4aac <netdb_getaddrinfo>
   d6188:	2800      	cmp	r0, #0
   d618a:	db1f      	blt.n	d61cc <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d618c:	9b01      	ldr	r3, [sp, #4]
   d618e:	b1fb      	cbz	r3, d61d0 <_ZN3UDP11beginPacketEPKct+0x64>
   d6190:	695b      	ldr	r3, [r3, #20]
   d6192:	b1eb      	cbz	r3, d61d0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6194:	a802      	add	r0, sp, #8
   d6196:	f7ff f9c5 	bl	d5524 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d619a:	9b01      	ldr	r3, [sp, #4]
   d619c:	462a      	mov	r2, r5
   d619e:	6958      	ldr	r0, [r3, #20]
   d61a0:	a902      	add	r1, sp, #8
   d61a2:	f7ff ff9f 	bl	d60e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d61a6:	a802      	add	r0, sp, #8
   d61a8:	f7ff f9dc 	bl	d5564 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d61ac:	b180      	cbz	r0, d61d0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d61ae:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d61b0:	ad03      	add	r5, sp, #12
   d61b2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d61b6:	4b0b      	ldr	r3, [pc, #44]	; (d61e4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d61b8:	9308      	str	r3, [sp, #32]
   d61ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61bc:	ac09      	add	r4, sp, #36	; 0x24
   d61be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61c0:	682b      	ldr	r3, [r5, #0]
   d61c2:	7023      	strb	r3, [r4, #0]
   d61c4:	463a      	mov	r2, r7
   d61c6:	a908      	add	r1, sp, #32
   d61c8:	4630      	mov	r0, r6
   d61ca:	47c0      	blx	r8
   d61cc:	4604      	mov	r4, r0
   d61ce:	e001      	b.n	d61d4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d61d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d61d4:	9801      	ldr	r0, [sp, #4]
   d61d6:	f7fe fc61 	bl	d4a9c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d61da:	4620      	mov	r0, r4
   d61dc:	b00e      	add	sp, #56	; 0x38
   d61de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d61e2:	bf00      	nop
   d61e4:	000d70d8 	.word	0x000d70d8

000d61e8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d61e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d61ec:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d61f0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d61f4:	b098      	sub	sp, #96	; 0x60
   d61f6:	4605      	mov	r5, r0
   d61f8:	460c      	mov	r4, r1
   d61fa:	4617      	mov	r7, r2
   d61fc:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d61fe:	db00      	blt.n	d6202 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6200:	b911      	cbnz	r1, d6208 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6206:	e04e      	b.n	d62a6 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d6208:	f04f 0a1c 	mov.w	sl, #28
   d620c:	ae09      	add	r6, sp, #36	; 0x24
   d620e:	4652      	mov	r2, sl
   d6210:	2100      	movs	r1, #0
   d6212:	4630      	mov	r0, r6
   d6214:	f000 fddd 	bl	d6dd2 <memset>
        socklen_t slen = sizeof(saddr);
   d6218:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d621c:	f1b9 0f00 	cmp.w	r9, #0
   d6220:	d014      	beq.n	d624c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d6222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6226:	fbb9 f1f2 	udiv	r1, r9, r2
   d622a:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d622c:	fb02 9111 	mls	r1, r2, r1, r9
   d6230:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6232:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d6234:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6236:	9300      	str	r3, [sp, #0]
   d6238:	f241 0206 	movw	r2, #4102	; 0x1006
   d623c:	ab10      	add	r3, sp, #64	; 0x40
   d623e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6242:	4640      	mov	r0, r8
   d6244:	f7fe fc42 	bl	d4acc <sock_setsockopt>
            if (ret) {
   d6248:	b108      	cbz	r0, d624e <_ZN3UDP13receivePacketEPhjm+0x66>
   d624a:	e02c      	b.n	d62a6 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d624c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d624e:	ab04      	add	r3, sp, #16
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	4621      	mov	r1, r4
   d6254:	4603      	mov	r3, r0
   d6256:	9600      	str	r6, [sp, #0]
   d6258:	463a      	mov	r2, r7
   d625a:	6968      	ldr	r0, [r5, #20]
   d625c:	f7fe fc46 	bl	d4aec <sock_recvfrom>
        if (ret >= 0) {
   d6260:	1e04      	subs	r4, r0, #0
   d6262:	db1f      	blt.n	d62a4 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6264:	f105 071c 	add.w	r7, r5, #28
   d6268:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d626c:	4630      	mov	r0, r6
   d626e:	4639      	mov	r1, r7
   d6270:	f7ff ff38 	bl	d60e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d6274:	2600      	movs	r6, #0
   d6276:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d6278:	4639      	mov	r1, r7
   d627a:	a805      	add	r0, sp, #20
   d627c:	9310      	str	r3, [sp, #64]	; 0x40
   d627e:	9611      	str	r6, [sp, #68]	; 0x44
   d6280:	f7ff fdd8 	bl	d5e34 <_ZN6StringC1ERK9Printable>
   d6284:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d6286:	9303      	str	r3, [sp, #12]
   d6288:	9b05      	ldr	r3, [sp, #20]
   d628a:	9302      	str	r3, [sp, #8]
   d628c:	4b07      	ldr	r3, [pc, #28]	; (d62ac <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d628e:	9300      	str	r3, [sp, #0]
   d6290:	2001      	movs	r0, #1
   d6292:	9401      	str	r4, [sp, #4]
   d6294:	4633      	mov	r3, r6
   d6296:	aa10      	add	r2, sp, #64	; 0x40
   d6298:	4905      	ldr	r1, [pc, #20]	; (d62b0 <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d629a:	f7fe fcc7 	bl	d4c2c <log_message>
   d629e:	a805      	add	r0, sp, #20
   d62a0:	f7ff fc6c 	bl	d5b7c <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d62a4:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d62a6:	b018      	add	sp, #96	; 0x60
   d62a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d62ac:	000d72a9 	.word	0x000d72a9
   d62b0:	000d720d 	.word	0x000d720d

000d62b4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d62b4:	b538      	push	{r3, r4, r5, lr}
   d62b6:	4605      	mov	r5, r0
   d62b8:	4614      	mov	r4, r2
   d62ba:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d62bc:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d62be:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d62c0:	d111      	bne.n	d62e6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d62c2:	231c      	movs	r3, #28
   d62c4:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d62c6:	230a      	movs	r3, #10
   d62c8:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d62ca:	f7fe fbdf 	bl	d4a8c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d62ce:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d62d0:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d62d4:	1d2b      	adds	r3, r5, #4
   d62d6:	3514      	adds	r5, #20
   d62d8:	f853 2b04 	ldr.w	r2, [r3], #4
   d62dc:	f844 2b04 	str.w	r2, [r4], #4
   d62e0:	42ab      	cmp	r3, r5
   d62e2:	d1f9      	bne.n	d62d8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d62e4:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d62e6:	2b04      	cmp	r3, #4
   d62e8:	d10a      	bne.n	d6300 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d62ea:	2310      	movs	r3, #16
   d62ec:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d62ee:	2302      	movs	r3, #2
   d62f0:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d62f2:	f7fe fbcb 	bl	d4a8c <inet_htons>
   d62f6:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d62f8:	6868      	ldr	r0, [r5, #4]
   d62fa:	f7fe fbb7 	bl	d4a6c <inet_htonl>
   d62fe:	6060      	str	r0, [r4, #4]
   d6300:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6304 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6308:	4698      	mov	r8, r3
   d630a:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d630c:	2320      	movs	r3, #32
   d630e:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6310:	4682      	mov	sl, r0
   d6312:	468b      	mov	fp, r1
   d6314:	a804      	add	r0, sp, #16
   d6316:	4641      	mov	r1, r8
   d6318:	4616      	mov	r6, r2
   d631a:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d631e:	9308      	str	r3, [sp, #32]
   d6320:	9409      	str	r4, [sp, #36]	; 0x24
   d6322:	f7ff fd87 	bl	d5e34 <_ZN6StringC1ERK9Printable>
   d6326:	9b04      	ldr	r3, [sp, #16]
   d6328:	9302      	str	r3, [sp, #8]
   d632a:	ad08      	add	r5, sp, #32
   d632c:	4b15      	ldr	r3, [pc, #84]	; (d6384 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d632e:	4916      	ldr	r1, [pc, #88]	; (d6388 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d6330:	9300      	str	r3, [sp, #0]
   d6332:	462a      	mov	r2, r5
   d6334:	4623      	mov	r3, r4
   d6336:	2001      	movs	r0, #1
   d6338:	f8cd 900c 	str.w	r9, [sp, #12]
   d633c:	9601      	str	r6, [sp, #4]
   d633e:	f7fe fc75 	bl	d4c2c <log_message>
	sockaddr_storage s = {};
   d6342:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d6344:	a804      	add	r0, sp, #16
   d6346:	f7ff fc19 	bl	d5b7c <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d634a:	463a      	mov	r2, r7
   d634c:	4621      	mov	r1, r4
   d634e:	4628      	mov	r0, r5
   d6350:	f000 fd3f 	bl	d6dd2 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6354:	462a      	mov	r2, r5
   d6356:	4649      	mov	r1, r9
   d6358:	4640      	mov	r0, r8
   d635a:	f7ff ffab 	bl	d62b4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d635e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d6362:	b14b      	cbz	r3, d6378 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6364:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d6368:	4623      	mov	r3, r4
   d636a:	4632      	mov	r2, r6
   d636c:	4659      	mov	r1, fp
   d636e:	f8da 0014 	ldr.w	r0, [sl, #20]
   d6372:	f7fe fbc3 	bl	d4afc <sock_sendto>
   d6376:	e001      	b.n	d637c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d6378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d637c:	b011      	add	sp, #68	; 0x44
   d637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6382:	bf00      	nop
   d6384:	000d72c6 	.word	0x000d72c6
   d6388:	000d720d 	.word	0x000d720d

000d638c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d638c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d638e:	b091      	sub	sp, #68	; 0x44
   d6390:	460c      	mov	r4, r1
   d6392:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d6394:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d6396:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d6398:	a809      	add	r0, sp, #36	; 0x24
   d639a:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d639c:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d639e:	f000 fd18 	bl	d6dd2 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d63a2:	aa09      	add	r2, sp, #36	; 0x24
   d63a4:	2100      	movs	r1, #0
   d63a6:	4620      	mov	r0, r4
   d63a8:	f7ff ff84 	bl	d62b4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d63ac:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d63b0:	2b02      	cmp	r3, #2
   d63b2:	d12e      	bne.n	d6412 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d63b4:	2300      	movs	r3, #0
   d63b6:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d63b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63ba:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d63bc:	b1dd      	cbz	r5, d63f6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d63be:	a902      	add	r1, sp, #8
   d63c0:	4628      	mov	r0, r5
   d63c2:	f7fe fb2b 	bl	d4a1c <if_get_by_index>
   d63c6:	b9b0      	cbnz	r0, d63f6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d63c8:	a910      	add	r1, sp, #64	; 0x40
   d63ca:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d63ce:	9802      	ldr	r0, [sp, #8]
   d63d0:	f7fe fb2c 	bl	d4a2c <if_get_addrs>
   d63d4:	b960      	cbnz	r0, d63f0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d63d6:	9b03      	ldr	r3, [sp, #12]
   d63d8:	b153      	cbz	r3, d63f0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d63da:	68da      	ldr	r2, [r3, #12]
   d63dc:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d63de:	7851      	ldrb	r1, [r2, #1]
   d63e0:	2902      	cmp	r1, #2
   d63e2:	d103      	bne.n	d63ec <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d63e4:	6852      	ldr	r2, [r2, #4]
   d63e6:	b10a      	cbz	r2, d63ec <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d63e8:	9205      	str	r2, [sp, #20]
   d63ea:	e001      	b.n	d63f0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d63ec:	681b      	ldr	r3, [r3, #0]
   d63ee:	e7f3      	b.n	d63d8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d63f0:	9803      	ldr	r0, [sp, #12]
   d63f2:	f7fe fb23 	bl	d4a3c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d63f6:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d63f8:	f04f 0308 	mov.w	r3, #8
   d63fc:	9300      	str	r3, [sp, #0]
   d63fe:	bf18      	it	ne
   d6400:	2203      	movne	r2, #3
   d6402:	ab04      	add	r3, sp, #16
   d6404:	bf08      	it	eq
   d6406:	2204      	moveq	r2, #4
   d6408:	2100      	movs	r1, #0
   d640a:	4630      	mov	r0, r6
   d640c:	f7fe fb5e 	bl	d4acc <sock_setsockopt>
   d6410:	e01e      	b.n	d6450 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d6412:	2b0a      	cmp	r3, #10
   d6414:	d11a      	bne.n	d644c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d6416:	ac04      	add	r4, sp, #16
   d6418:	2214      	movs	r2, #20
   d641a:	2100      	movs	r1, #0
   d641c:	4620      	mov	r0, r4
   d641e:	f000 fcd8 	bl	d6dd2 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d6422:	ab0b      	add	r3, sp, #44	; 0x2c
   d6424:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6426:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d6428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d642c:	f04f 0314 	mov.w	r3, #20
   d6430:	9300      	str	r3, [sp, #0]
   d6432:	bf18      	it	ne
   d6434:	220c      	movne	r2, #12
   d6436:	4623      	mov	r3, r4
   d6438:	bf08      	it	eq
   d643a:	220d      	moveq	r2, #13
   d643c:	2129      	movs	r1, #41	; 0x29
   d643e:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d6440:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6442:	f7fe fb43 	bl	d4acc <sock_setsockopt>
   d6446:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d644a:	e001      	b.n	d6450 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d644c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6450:	b011      	add	sp, #68	; 0x44
   d6452:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6454 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d6454:	b538      	push	{r3, r4, r5, lr}
   d6456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d645a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d645c:	4b0b      	ldr	r3, [pc, #44]	; (d648c <_ZN3UDPC1Ev+0x38>)
   d645e:	f103 0208 	add.w	r2, r3, #8
   d6462:	336c      	adds	r3, #108	; 0x6c
   d6464:	2500      	movs	r5, #0
   d6466:	6103      	str	r3, [r0, #16]
   d6468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d646c:	4604      	mov	r4, r0
   d646e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6470:	6002      	str	r2, [r0, #0]
   d6472:	6143      	str	r3, [r0, #20]
   d6474:	301c      	adds	r0, #28
   d6476:	f7ff f855 	bl	d5524 <_ZN9IPAddressC1Ev>
   d647a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d647e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d6480:	8725      	strh	r5, [r4, #56]	; 0x38
   d6482:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6484:	6423      	str	r3, [r4, #64]	; 0x40
   d6486:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6488:	4620      	mov	r0, r4
   d648a:	bd38      	pop	{r3, r4, r5, pc}
   d648c:	000d72f4 	.word	0x000d72f4

000d6490 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6490:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6492:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6496:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6498:	b11b      	cbz	r3, d64a2 <_ZN3UDP13releaseBufferEv+0x12>
   d649a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d649c:	b108      	cbz	r0, d64a2 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d649e:	f7fd fdfe 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d64a2:	2300      	movs	r3, #0
   d64a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d64a6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d64aa:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d64ac:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d64ae:	8723      	strh	r3, [r4, #56]	; 0x38
   d64b0:	bd10      	pop	{r4, pc}

000d64b2 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d64b2:	b570      	push	{r4, r5, r6, lr}
   d64b4:	4604      	mov	r4, r0
   d64b6:	4616      	mov	r6, r2
   d64b8:	460d      	mov	r5, r1
    releaseBuffer();
   d64ba:	f7ff ffe9 	bl	d6490 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d64be:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d64c0:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d64c2:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d64c4:	b93e      	cbnz	r6, d64d6 <_ZN3UDP9setBufferEjPh+0x24>
   d64c6:	b135      	cbz	r5, d64d6 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d64c8:	4628      	mov	r0, r5
   d64ca:	f7fd fde6 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d64ce:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d64d0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d64d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d64d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d64d8:	b103      	cbz	r3, d64dc <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d64da:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d64dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d64de:	3000      	adds	r0, #0
   d64e0:	bf18      	it	ne
   d64e2:	2001      	movne	r0, #1
   d64e4:	bd70      	pop	{r4, r5, r6, pc}

000d64e6 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d64e6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d64e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d64ea:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d64ec:	b91a      	cbnz	r2, d64f6 <_ZN3UDP11parsePacketEm+0x10>
   d64ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d64f0:	b109      	cbz	r1, d64f6 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d64f2:	f7ff ffde 	bl	d64b2 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d64f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d64f8:	2300      	movs	r3, #0
   d64fa:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d64fc:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d64fe:	b141      	cbz	r1, d6512 <_ZN3UDP11parsePacketEm+0x2c>
   d6500:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6502:	b132      	cbz	r2, d6512 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d6504:	6820      	ldr	r0, [r4, #0]
   d6506:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d6508:	4620      	mov	r0, r4
   d650a:	47a8      	blx	r5
        if (result > 0) {
   d650c:	2800      	cmp	r0, #0
            _total = result;
   d650e:	bfc8      	it	gt
   d6510:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6512:	6823      	ldr	r3, [r4, #0]
   d6514:	4620      	mov	r0, r4
   d6516:	691b      	ldr	r3, [r3, #16]
}
   d6518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d651c:	4718      	bx	r3
	...

000d6520 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6520:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6522:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d6524:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6526:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d6528:	2600      	movs	r6, #0
   d652a:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d652c:	4617      	mov	r7, r2
   d652e:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d6530:	9308      	str	r3, [sp, #32]
   d6532:	9609      	str	r6, [sp, #36]	; 0x24
   d6534:	f7ff fc7e 	bl	d5e34 <_ZN6StringC1ERK9Printable>
   d6538:	9b04      	ldr	r3, [sp, #16]
   d653a:	9301      	str	r3, [sp, #4]
   d653c:	4b10      	ldr	r3, [pc, #64]	; (d6580 <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d653e:	9300      	str	r3, [sp, #0]
   d6540:	aa08      	add	r2, sp, #32
   d6542:	4633      	mov	r3, r6
   d6544:	490f      	ldr	r1, [pc, #60]	; (d6584 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d6546:	9702      	str	r7, [sp, #8]
   d6548:	2001      	movs	r0, #1
   d654a:	f7fe fb6f 	bl	d4c2c <log_message>
   d654e:	a804      	add	r0, sp, #16
   d6550:	f7ff fb14 	bl	d5b7c <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6554:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d6556:	b922      	cbnz	r2, d6562 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d6558:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d655a:	b111      	cbz	r1, d6562 <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d655c:	4628      	mov	r0, r5
   d655e:	f7ff ffa8 	bl	d64b2 <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6562:	3404      	adds	r4, #4
   d6564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6566:	f105 0620 	add.w	r6, r5, #32
   d656a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d656c:	6823      	ldr	r3, [r4, #0]
   d656e:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6570:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6572:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6574:	2300      	movs	r3, #0
   d6576:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6578:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d657a:	b011      	add	sp, #68	; 0x44
   d657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d657e:	bf00      	nop
   d6580:	000d72e0 	.word	0x000d72e0
   d6584:	000d720d 	.word	0x000d720d

000d6588 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d6588:	b510      	push	{r4, lr}
   d658a:	4b07      	ldr	r3, [pc, #28]	; (d65a8 <_ZN3UDPD1Ev+0x20>)
   d658c:	f103 0208 	add.w	r2, r3, #8
   d6590:	336c      	adds	r3, #108	; 0x6c
   d6592:	4604      	mov	r4, r0
   d6594:	6002      	str	r2, [r0, #0]
   d6596:	6103      	str	r3, [r0, #16]
   d6598:	f7ff fd15 	bl	d5fc6 <_ZN3UDP4stopEv>
   d659c:	4620      	mov	r0, r4
   d659e:	f7ff ff77 	bl	d6490 <_ZN3UDP13releaseBufferEv>
   d65a2:	4620      	mov	r0, r4
   d65a4:	bd10      	pop	{r4, pc}
   d65a6:	bf00      	nop
   d65a8:	000d72f4 	.word	0x000d72f4

000d65ac <_ZN3UDPD0Ev>:
   d65ac:	b510      	push	{r4, lr}
   d65ae:	4604      	mov	r4, r0
   d65b0:	f7ff ffea 	bl	d6588 <_ZN3UDPD1Ev>
   d65b4:	4620      	mov	r0, r4
   d65b6:	f7fd fd72 	bl	d409e <_ZdlPv>
   d65ba:	4620      	mov	r0, r4
   d65bc:	bd10      	pop	{r4, pc}

000d65be <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d65be:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d65c0:	6940      	ldr	r0, [r0, #20]
   d65c2:	2800      	cmp	r0, #0
   d65c4:	db04      	blt.n	d65d0 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d65c6:	2301      	movs	r3, #1
   d65c8:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d65cc:	f7ff bede 	b.w	d638c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d65d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d65d4:	4770      	bx	lr

000d65d6 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d65d6:	4770      	bx	lr

000d65d8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65d8:	7441      	strb	r1, [r0, #17]
   d65da:	4770      	bx	lr

000d65dc <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d65dc:	7c00      	ldrb	r0, [r0, #16]
   d65de:	f7fe bae5 	b.w	d4bac <HAL_USART_Available_Data_For_Write>

000d65e2 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d65e2:	7c00      	ldrb	r0, [r0, #16]
   d65e4:	f7fe baba 	b.w	d4b5c <HAL_USART_Available_Data>

000d65e8 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d65e8:	7c00      	ldrb	r0, [r0, #16]
   d65ea:	f7fe bac7 	b.w	d4b7c <HAL_USART_Peek_Data>

000d65ee <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d65ee:	7c00      	ldrb	r0, [r0, #16]
   d65f0:	f7fe babc 	b.w	d4b6c <HAL_USART_Read_Data>

000d65f4 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d65f4:	7c00      	ldrb	r0, [r0, #16]
   d65f6:	f7fe bac9 	b.w	d4b8c <HAL_USART_Flush_Data>

000d65fa <_ZN11USARTSerialD0Ev>:
   d65fa:	b510      	push	{r4, lr}
   d65fc:	4604      	mov	r4, r0
   d65fe:	f7fd fd4e 	bl	d409e <_ZdlPv>
   d6602:	4620      	mov	r0, r4
   d6604:	bd10      	pop	{r4, pc}

000d6606 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6606:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6608:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d660a:	4604      	mov	r4, r0
   d660c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d660e:	b925      	cbnz	r5, d661a <_ZN11USARTSerial5writeEh+0x14>
   d6610:	7c00      	ldrb	r0, [r0, #16]
   d6612:	f7fe facb 	bl	d4bac <HAL_USART_Available_Data_For_Write>
   d6616:	2800      	cmp	r0, #0
   d6618:	dd05      	ble.n	d6626 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d661a:	4631      	mov	r1, r6
   d661c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d661e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6622:	f7fe ba93 	b.w	d4b4c <HAL_USART_Write_Data>
  }
  return 0;
}
   d6626:	4628      	mov	r0, r5
   d6628:	bd70      	pop	{r4, r5, r6, pc}
	...

000d662c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d662c:	b510      	push	{r4, lr}
   d662e:	4604      	mov	r4, r0
   d6630:	4608      	mov	r0, r1
   d6632:	4611      	mov	r1, r2
   d6634:	2200      	movs	r2, #0
   d6636:	6062      	str	r2, [r4, #4]
   d6638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d663c:	60a2      	str	r2, [r4, #8]
   d663e:	4a05      	ldr	r2, [pc, #20]	; (d6654 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6640:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6642:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6644:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6646:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6648:	461a      	mov	r2, r3
   d664a:	f7fe fa77 	bl	d4b3c <HAL_USART_Init>
}
   d664e:	4620      	mov	r0, r4
   d6650:	bd10      	pop	{r4, pc}
   d6652:	bf00      	nop
   d6654:	000d736c 	.word	0x000d736c

000d6658 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6658:	7c00      	ldrb	r0, [r0, #16]
   d665a:	f7fe ba9f 	b.w	d4b9c <HAL_USART_Is_Enabled>
	...

000d6660 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6660:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6662:	4d0c      	ldr	r5, [pc, #48]	; (d6694 <_Z22__fetch_global_Serial1v+0x34>)
   d6664:	6829      	ldr	r1, [r5, #0]
   d6666:	f011 0401 	ands.w	r4, r1, #1
   d666a:	d111      	bne.n	d6690 <_Z22__fetch_global_Serial1v+0x30>
   d666c:	4628      	mov	r0, r5
   d666e:	f7fd fd1a 	bl	d40a6 <__cxa_guard_acquire>
   d6672:	b168      	cbz	r0, d6690 <_Z22__fetch_global_Serial1v+0x30>
   d6674:	4a08      	ldr	r2, [pc, #32]	; (d6698 <_Z22__fetch_global_Serial1v+0x38>)
   d6676:	4b09      	ldr	r3, [pc, #36]	; (d669c <_Z22__fetch_global_Serial1v+0x3c>)
   d6678:	4809      	ldr	r0, [pc, #36]	; (d66a0 <_Z22__fetch_global_Serial1v+0x40>)
   d667a:	4621      	mov	r1, r4
   d667c:	f7ff ffd6 	bl	d662c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6680:	4628      	mov	r0, r5
   d6682:	f7fd fd15 	bl	d40b0 <__cxa_guard_release>
   d6686:	4a07      	ldr	r2, [pc, #28]	; (d66a4 <_Z22__fetch_global_Serial1v+0x44>)
   d6688:	4907      	ldr	r1, [pc, #28]	; (d66a8 <_Z22__fetch_global_Serial1v+0x48>)
   d668a:	4805      	ldr	r0, [pc, #20]	; (d66a0 <_Z22__fetch_global_Serial1v+0x40>)
   d668c:	f000 fa20 	bl	d6ad0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6690:	4803      	ldr	r0, [pc, #12]	; (d66a0 <_Z22__fetch_global_Serial1v+0x40>)
   d6692:	bd38      	pop	{r3, r4, r5, pc}
   d6694:	2003e670 	.word	0x2003e670
   d6698:	2003e674 	.word	0x2003e674
   d669c:	2003e5ec 	.word	0x2003e5ec
   d66a0:	2003e5d8 	.word	0x2003e5d8
   d66a4:	2003e3ac 	.word	0x2003e3ac
   d66a8:	000d65d7 	.word	0x000d65d7

000d66ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66ac:	7441      	strb	r1, [r0, #17]
   d66ae:	4770      	bx	lr

000d66b0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d66b0:	4770      	bx	lr

000d66b2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d66b2:	2100      	movs	r1, #0
   d66b4:	7c00      	ldrb	r0, [r0, #16]
   d66b6:	f7fe baa1 	b.w	d4bfc <HAL_USB_USART_Receive_Data>

000d66ba <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d66ba:	2101      	movs	r1, #1
   d66bc:	7c00      	ldrb	r0, [r0, #16]
   d66be:	f7fe ba9d 	b.w	d4bfc <HAL_USB_USART_Receive_Data>

000d66c2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d66c2:	7c00      	ldrb	r0, [r0, #16]
   d66c4:	f7fe ba92 	b.w	d4bec <HAL_USB_USART_Available_Data_For_Write>

000d66c8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d66c8:	7c00      	ldrb	r0, [r0, #16]
   d66ca:	f7fe ba87 	b.w	d4bdc <HAL_USB_USART_Available_Data>

000d66ce <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d66ce:	b538      	push	{r3, r4, r5, lr}
   d66d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66d2:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d66d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66d6:	f7fe fa89 	bl	d4bec <HAL_USB_USART_Available_Data_For_Write>
   d66da:	2800      	cmp	r0, #0
   d66dc:	dc01      	bgt.n	d66e2 <_ZN9USBSerial5writeEh+0x14>
   d66de:	7c60      	ldrb	r0, [r4, #17]
   d66e0:	b120      	cbz	r0, d66ec <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d66e2:	4629      	mov	r1, r5
   d66e4:	7c20      	ldrb	r0, [r4, #16]
   d66e6:	f7fe fa91 	bl	d4c0c <HAL_USB_USART_Send_Data>
    return 1;
   d66ea:	2001      	movs	r0, #1
  }
  return 0;
}
   d66ec:	bd38      	pop	{r3, r4, r5, pc}

000d66ee <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d66ee:	7c00      	ldrb	r0, [r0, #16]
   d66f0:	f7fe ba94 	b.w	d4c1c <HAL_USB_USART_Flush_Data>

000d66f4 <_ZN9USBSerialD0Ev>:
   d66f4:	b510      	push	{r4, lr}
   d66f6:	4604      	mov	r4, r0
   d66f8:	f7fd fcd1 	bl	d409e <_ZdlPv>
   d66fc:	4620      	mov	r0, r4
   d66fe:	bd10      	pop	{r4, pc}

000d6700 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6700:	b510      	push	{r4, lr}
   d6702:	4604      	mov	r4, r0
   d6704:	2300      	movs	r3, #0
   d6706:	6063      	str	r3, [r4, #4]
   d6708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d670c:	60a3      	str	r3, [r4, #8]
   d670e:	4b05      	ldr	r3, [pc, #20]	; (d6724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6710:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6712:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6714:	4608      	mov	r0, r1
{
  _serial = serial;
   d6716:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6718:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d671a:	4611      	mov	r1, r2
   d671c:	f7fe fa4e 	bl	d4bbc <HAL_USB_USART_Init>
}
   d6720:	4620      	mov	r0, r4
   d6722:	bd10      	pop	{r4, pc}
   d6724:	000d739c 	.word	0x000d739c

000d6728 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6728:	2200      	movs	r2, #0
   d672a:	7c00      	ldrb	r0, [r0, #16]
   d672c:	f7fe ba4e 	b.w	d4bcc <HAL_USB_USART_Begin>

000d6730 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6730:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6732:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6734:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6736:	2100      	movs	r1, #0
   d6738:	f000 fb4b 	bl	d6dd2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d673c:	4620      	mov	r0, r4
   d673e:	bd10      	pop	{r4, pc}

000d6740 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6740:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6742:	4d0e      	ldr	r5, [pc, #56]	; (d677c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6744:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6746:	a801      	add	r0, sp, #4
   d6748:	f7ff fff2 	bl	d6730 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d674c:	6829      	ldr	r1, [r5, #0]
   d674e:	f011 0401 	ands.w	r4, r1, #1
   d6752:	d110      	bne.n	d6776 <_Z16_fetch_usbserialv+0x36>
   d6754:	4628      	mov	r0, r5
   d6756:	f7fd fca6 	bl	d40a6 <__cxa_guard_acquire>
   d675a:	b160      	cbz	r0, d6776 <_Z16_fetch_usbserialv+0x36>
   d675c:	aa01      	add	r2, sp, #4
   d675e:	4621      	mov	r1, r4
   d6760:	4807      	ldr	r0, [pc, #28]	; (d6780 <_Z16_fetch_usbserialv+0x40>)
   d6762:	f7ff ffcd 	bl	d6700 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6766:	4628      	mov	r0, r5
   d6768:	f7fd fca2 	bl	d40b0 <__cxa_guard_release>
   d676c:	4a05      	ldr	r2, [pc, #20]	; (d6784 <_Z16_fetch_usbserialv+0x44>)
   d676e:	4906      	ldr	r1, [pc, #24]	; (d6788 <_Z16_fetch_usbserialv+0x48>)
   d6770:	4803      	ldr	r0, [pc, #12]	; (d6780 <_Z16_fetch_usbserialv+0x40>)
   d6772:	f000 f9ad 	bl	d6ad0 <__aeabi_atexit>
	return _usbserial;
}
   d6776:	4802      	ldr	r0, [pc, #8]	; (d6780 <_Z16_fetch_usbserialv+0x40>)
   d6778:	b007      	add	sp, #28
   d677a:	bd30      	pop	{r4, r5, pc}
   d677c:	2003e6f8 	.word	0x2003e6f8
   d6780:	2003e6fc 	.word	0x2003e6fc
   d6784:	2003e3ac 	.word	0x2003e3ac
   d6788:	000d66b1 	.word	0x000d66b1

000d678c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d678c:	b510      	push	{r4, lr}
   d678e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6790:	f000 fb55 	bl	d6e3e <strlen>
   d6794:	3801      	subs	r0, #1
   d6796:	1823      	adds	r3, r4, r0
   d6798:	4620      	mov	r0, r4
	while(i<j){
   d679a:	4298      	cmp	r0, r3
   d679c:	d206      	bcs.n	d67ac <_Z11str_reversePc+0x20>
		c = *i;
   d679e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d67a0:	7819      	ldrb	r1, [r3, #0]
   d67a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d67a6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d67aa:	e7f6      	b.n	d679a <_Z11str_reversePc+0xe>
   d67ac:	bd10      	pop	{r4, pc}

000d67ae <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d67ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d67b2:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d67b4:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d67b6:	4615      	mov	r5, r2
   d67b8:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d67ba:	bf34      	ite	cc
   d67bc:	4615      	movcc	r5, r2
   d67be:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d67c0:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d67c2:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d67c4:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d67c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d67ca:	d107      	bne.n	d67dc <ltoa+0x2e>
   d67cc:	4298      	cmp	r0, r3
   d67ce:	da05      	bge.n	d67dc <ltoa+0x2e>
      {
            *head++ = '-';
   d67d0:	232d      	movs	r3, #45	; 0x2d
   d67d2:	f101 0801 	add.w	r8, r1, #1
   d67d6:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d67d8:	4240      	negs	r0, r0
   d67da:	e001      	b.n	d67e0 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d67dc:	b1b0      	cbz	r0, d680c <ltoa+0x5e>
   d67de:	46a0      	mov	r8, r4
   d67e0:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d67e4:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d67e6:	462a      	mov	r2, r5
   d67e8:	4601      	mov	r1, r0
   d67ea:	a801      	add	r0, sp, #4
   d67ec:	f000 fad2 	bl	d6d94 <ldiv>
   d67f0:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d67f2:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d67f4:	2b09      	cmp	r3, #9
   d67f6:	bfcc      	ite	gt
   d67f8:	2237      	movgt	r2, #55	; 0x37
   d67fa:	2230      	movle	r2, #48	; 0x30
   d67fc:	fa52 f383 	uxtab	r3, r2, r3
   d6800:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d6804:	3701      	adds	r7, #1
   d6806:	2800      	cmp	r0, #0
   d6808:	d1ed      	bne.n	d67e6 <ltoa+0x38>
   d680a:	e006      	b.n	d681a <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d680c:	2330      	movs	r3, #48	; 0x30
   d680e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d6812:	46a0      	mov	r8, r4
   d6814:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d6818:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d681a:	463a      	mov	r2, r7
   d681c:	1c71      	adds	r1, r6, #1
   d681e:	4640      	mov	r0, r8
   d6820:	f000 facc 	bl	d6dbc <memcpy>
      return str;
}
   d6824:	4620      	mov	r0, r4
   d6826:	b00c      	add	sp, #48	; 0x30
   d6828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d682c <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d682c:	b570      	push	{r4, r5, r6, lr}
   d682e:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6830:	1e91      	subs	r1, r2, #2
   d6832:	2922      	cmp	r1, #34	; 0x22
   d6834:	d820      	bhi.n	d6878 <ultoa+0x4c>
   d6836:	4625      	mov	r5, r4
   d6838:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d683a:	b910      	cbnz	r0, d6842 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d683c:	4423      	add	r3, r4
            *ptr++ = '0';
   d683e:	2230      	movs	r2, #48	; 0x30
   d6840:	e00e      	b.n	d6860 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6842:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6846:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d684a:	b2c1      	uxtb	r1, r0
   d684c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6850:	2809      	cmp	r0, #9
                *ptr += '0';
   d6852:	bf94      	ite	ls
   d6854:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6856:	3157      	addhi	r1, #87	; 0x57
   d6858:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d685c:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d685e:	e7eb      	b.n	d6838 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6860:	4299      	cmp	r1, r3
   d6862:	d202      	bcs.n	d686a <ultoa+0x3e>
            *ptr++ = '0';
   d6864:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6868:	e7fa      	b.n	d6860 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d686a:	2300      	movs	r3, #0
	str_reverse(buffer);
   d686c:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d686e:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d6870:	f7ff ff8c 	bl	d678c <_Z11str_reversePc>
	return buffer;
   d6874:	4620      	mov	r0, r4
   d6876:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6878:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d687a:	bd70      	pop	{r4, r5, r6, pc}

000d687c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d687c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d687e:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6880:	460c      	mov	r4, r1
   d6882:	4615      	mov	r5, r2
	if(a<0){
   d6884:	da0b      	bge.n	d689e <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d688a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d688e:	bf14      	ite	ne
   d6890:	4258      	negne	r0, r3
   d6892:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6894:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d6896:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d6898:	462a      	mov	r2, r5
   d689a:	4419      	add	r1, r3
   d689c:	e000      	b.n	d68a0 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d689e:	2301      	movs	r3, #1
   d68a0:	f7ff ffc4 	bl	d682c <ultoa>
	}
	return buffer;
}
   d68a4:	4620      	mov	r0, r4
   d68a6:	bd38      	pop	{r3, r4, r5, pc}

000d68a8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d68a8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d68aa:	4b0c      	ldr	r3, [pc, #48]	; (d68dc <serialEventRun+0x34>)
   d68ac:	b133      	cbz	r3, d68bc <serialEventRun+0x14>
   d68ae:	f7ff ff47 	bl	d6740 <_Z16_fetch_usbserialv>
   d68b2:	6803      	ldr	r3, [r0, #0]
   d68b4:	691b      	ldr	r3, [r3, #16]
   d68b6:	4798      	blx	r3
   d68b8:	2800      	cmp	r0, #0
   d68ba:	dc09      	bgt.n	d68d0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d68bc:	4b08      	ldr	r3, [pc, #32]	; (d68e0 <serialEventRun+0x38>)
   d68be:	b163      	cbz	r3, d68da <serialEventRun+0x32>
   d68c0:	f7ff fece 	bl	d6660 <_Z22__fetch_global_Serial1v>
   d68c4:	6803      	ldr	r3, [r0, #0]
   d68c6:	691b      	ldr	r3, [r3, #16]
   d68c8:	4798      	blx	r3
   d68ca:	2800      	cmp	r0, #0
   d68cc:	dc03      	bgt.n	d68d6 <serialEventRun+0x2e>
   d68ce:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d68d0:	f3af 8000 	nop.w
   d68d4:	e7f2      	b.n	d68bc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d68d6:	f3af 8000 	nop.w
   d68da:	bd08      	pop	{r3, pc}
	...

000d68e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d68e4:	b508      	push	{r3, lr}
	serialEventRun();
   d68e6:	f7ff ffdf 	bl	d68a8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d68ea:	f7fe f80f 	bl	d490c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d68ee:	4b01      	ldr	r3, [pc, #4]	; (d68f4 <_post_loop+0x10>)
   d68f0:	6018      	str	r0, [r3, #0]
   d68f2:	bd08      	pop	{r3, pc}
   d68f4:	2003e714 	.word	0x2003e714

000d68f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d68f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d68fa:	2300      	movs	r3, #0
   d68fc:	9300      	str	r3, [sp, #0]
   d68fe:	461a      	mov	r2, r3
   d6900:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6904:	f7fe f9c4 	bl	d4c90 <system_ctrl_set_result>
}
   d6908:	b003      	add	sp, #12
   d690a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6910 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6910:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6912:	8843      	ldrh	r3, [r0, #2]
   d6914:	2b0a      	cmp	r3, #10
   d6916:	d008      	beq.n	d692a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6918:	2b50      	cmp	r3, #80	; 0x50
   d691a:	d109      	bne.n	d6930 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d691c:	4b09      	ldr	r3, [pc, #36]	; (d6944 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d691e:	681b      	ldr	r3, [r3, #0]
   d6920:	b13b      	cbz	r3, d6932 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6922:	b003      	add	sp, #12
   d6924:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6928:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d692a:	f7ff ffe5 	bl	d68f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d692e:	e006      	b.n	d693e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6930:	2300      	movs	r3, #0
   d6932:	9300      	str	r3, [sp, #0]
   d6934:	461a      	mov	r2, r3
   d6936:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d693a:	f7fe f9a9 	bl	d4c90 <system_ctrl_set_result>
        break;
    }
}
   d693e:	b003      	add	sp, #12
   d6940:	f85d fb04 	ldr.w	pc, [sp], #4
   d6944:	2003e710 	.word	0x2003e710

000d6948 <module_user_init_hook>:

void module_user_init_hook()
{
   d6948:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d694a:	2100      	movs	r1, #0
   d694c:	4804      	ldr	r0, [pc, #16]	; (d6960 <module_user_init_hook+0x18>)
   d694e:	f7fe f9c1 	bl	d4cd4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6952:	2100      	movs	r1, #0
   d6954:	4803      	ldr	r0, [pc, #12]	; (d6964 <module_user_init_hook+0x1c>)
}
   d6956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d695a:	f7fe b98f 	b.w	d4c7c <system_ctrl_set_app_request_handler>
   d695e:	bf00      	nop
   d6960:	00000000 	.word	0x00000000
   d6964:	000d6911 	.word	0x000d6911

000d6968 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6968:	b510      	push	{r4, lr}
   d696a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d696c:	480f      	ldr	r0, [pc, #60]	; (d69ac <pinAvailable+0x44>)
   d696e:	f7ff f8fb 	bl	d5b68 <_ZN8SPIClass9isEnabledEv>
   d6972:	b128      	cbz	r0, d6980 <pinAvailable+0x18>
   d6974:	f1a4 030b 	sub.w	r3, r4, #11
   d6978:	2b02      	cmp	r3, #2
   d697a:	d801      	bhi.n	d6980 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d697c:	2000      	movs	r0, #0
   d697e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6980:	f000 f864 	bl	d6a4c <_Z19__fetch_global_Wirev>
   d6984:	f7fe fd90 	bl	d54a8 <_ZN7TwoWire9isEnabledEv>
   d6988:	b108      	cbz	r0, d698e <pinAvailable+0x26>
   d698a:	2c01      	cmp	r4, #1
   d698c:	d9f6      	bls.n	d697c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d698e:	f7ff fe67 	bl	d6660 <_Z22__fetch_global_Serial1v>
   d6992:	f7ff fe61 	bl	d6658 <_ZN11USARTSerial9isEnabledEv>
   d6996:	b118      	cbz	r0, d69a0 <pinAvailable+0x38>
   d6998:	f1a4 0309 	sub.w	r3, r4, #9
   d699c:	2b01      	cmp	r3, #1
   d699e:	d9ed      	bls.n	d697c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d69a0:	2c1e      	cmp	r4, #30
   d69a2:	bf8c      	ite	hi
   d69a4:	2000      	movhi	r0, #0
   d69a6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d69a8:	bd10      	pop	{r4, pc}
   d69aa:	bf00      	nop
   d69ac:	2003e730 	.word	0x2003e730

000d69b0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d69b0:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d69b2:	b538      	push	{r3, r4, r5, lr}
   d69b4:	4604      	mov	r4, r0
   d69b6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d69b8:	d80a      	bhi.n	d69d0 <pinMode+0x20>
   d69ba:	29ff      	cmp	r1, #255	; 0xff
   d69bc:	d008      	beq.n	d69d0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d69be:	f7ff ffd3 	bl	d6968 <pinAvailable>
   d69c2:	b128      	cbz	r0, d69d0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d69c4:	4629      	mov	r1, r5
   d69c6:	4620      	mov	r0, r4
}
   d69c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d69cc:	f7fd bfb6 	b.w	d493c <HAL_Pin_Mode>
   d69d0:	bd38      	pop	{r3, r4, r5, pc}

000d69d2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d69d2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d69d4:	b510      	push	{r4, lr}
   d69d6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d69d8:	bf9c      	itt	ls
   d69da:	340e      	addls	r4, #14
   d69dc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d69de:	4620      	mov	r0, r4
   d69e0:	f7ff ffc2 	bl	d6968 <pinAvailable>
   d69e4:	b150      	cbz	r0, d69fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d69e6:	2103      	movs	r1, #3
   d69e8:	4620      	mov	r0, r4
   d69ea:	f7fd ff9f 	bl	d492c <HAL_Validate_Pin_Function>
   d69ee:	2803      	cmp	r0, #3
   d69f0:	d104      	bne.n	d69fc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d69f2:	4620      	mov	r0, r4
}
   d69f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d69f8:	f7fd bfb8 	b.w	d496c <HAL_ADC_Read>
}
   d69fc:	2000      	movs	r0, #0
   d69fe:	bd10      	pop	{r4, pc}

000d6a00 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6a00:	b538      	push	{r3, r4, r5, lr}
   d6a02:	4604      	mov	r4, r0
   d6a04:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6a06:	f7ff ffaf 	bl	d6968 <pinAvailable>
   d6a0a:	b1f0      	cbz	r0, d6a4a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6a0c:	2104      	movs	r1, #4
   d6a0e:	4620      	mov	r0, r4
   d6a10:	f7fd ff8c 	bl	d492c <HAL_Validate_Pin_Function>
   d6a14:	2804      	cmp	r0, #4
   d6a16:	d105      	bne.n	d6a24 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6a18:	b2a9      	uxth	r1, r5
   d6a1a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d6a20:	f7fd bf9c 	b.w	d495c <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6a24:	2102      	movs	r1, #2
   d6a26:	4620      	mov	r0, r4
   d6a28:	f7fd ff80 	bl	d492c <HAL_Validate_Pin_Function>
   d6a2c:	2802      	cmp	r0, #2
   d6a2e:	d10c      	bne.n	d6a4a <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6a30:	4620      	mov	r0, r4
   d6a32:	f7fd ff8b 	bl	d494c <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6a36:	2801      	cmp	r0, #1
   d6a38:	d001      	beq.n	d6a3e <_Z11analogWritetm+0x3e>
   d6a3a:	2804      	cmp	r0, #4
   d6a3c:	d105      	bne.n	d6a4a <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6a3e:	4629      	mov	r1, r5
   d6a40:	4620      	mov	r0, r4
    }
}
   d6a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6a46:	f7fd bf99 	b.w	d497c <HAL_PWM_Write_Ext>
   d6a4a:	bd38      	pop	{r3, r4, r5, pc}

000d6a4c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6a4c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6a4e:	4d0b      	ldr	r5, [pc, #44]	; (d6a7c <_Z19__fetch_global_Wirev+0x30>)
   d6a50:	6829      	ldr	r1, [r5, #0]
   d6a52:	f011 0401 	ands.w	r4, r1, #1
   d6a56:	d10f      	bne.n	d6a78 <_Z19__fetch_global_Wirev+0x2c>
   d6a58:	4628      	mov	r0, r5
   d6a5a:	f7fd fb24 	bl	d40a6 <__cxa_guard_acquire>
   d6a5e:	b158      	cbz	r0, d6a78 <_Z19__fetch_global_Wirev+0x2c>
   d6a60:	4621      	mov	r1, r4
   d6a62:	4807      	ldr	r0, [pc, #28]	; (d6a80 <_Z19__fetch_global_Wirev+0x34>)
   d6a64:	f7fe fd0e 	bl	d5484 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6a68:	4628      	mov	r0, r5
   d6a6a:	f7fd fb21 	bl	d40b0 <__cxa_guard_release>
   d6a6e:	4a05      	ldr	r2, [pc, #20]	; (d6a84 <_Z19__fetch_global_Wirev+0x38>)
   d6a70:	4905      	ldr	r1, [pc, #20]	; (d6a88 <_Z19__fetch_global_Wirev+0x3c>)
   d6a72:	4803      	ldr	r0, [pc, #12]	; (d6a80 <_Z19__fetch_global_Wirev+0x34>)
   d6a74:	f000 f82c 	bl	d6ad0 <__aeabi_atexit>
	return wire;
}
   d6a78:	4801      	ldr	r0, [pc, #4]	; (d6a80 <_Z19__fetch_global_Wirev+0x34>)
   d6a7a:	bd38      	pop	{r3, r4, r5, pc}
   d6a7c:	2003e718 	.word	0x2003e718
   d6a80:	2003e71c 	.word	0x2003e71c
   d6a84:	2003e3ac 	.word	0x2003e3ac
   d6a88:	000d542d 	.word	0x000d542d

000d6a8c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a8c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6a8e:	4c0c      	ldr	r4, [pc, #48]	; (d6ac0 <_GLOBAL__sub_I_SPI+0x34>)
   d6a90:	4e0c      	ldr	r6, [pc, #48]	; (d6ac4 <_GLOBAL__sub_I_SPI+0x38>)
   d6a92:	4d0d      	ldr	r5, [pc, #52]	; (d6ac8 <_GLOBAL__sub_I_SPI+0x3c>)
   d6a94:	2100      	movs	r1, #0
   d6a96:	4620      	mov	r0, r4
   d6a98:	f7ff f852 	bl	d5b40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6a9c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a9e:	4c0b      	ldr	r4, [pc, #44]	; (d6acc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6aa0:	4632      	mov	r2, r6
   d6aa2:	4629      	mov	r1, r5
   d6aa4:	f000 f814 	bl	d6ad0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6aa8:	2101      	movs	r1, #1
   d6aaa:	4620      	mov	r0, r4
   d6aac:	f7ff f848 	bl	d5b40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6ab0:	4632      	mov	r2, r6
   d6ab2:	4629      	mov	r1, r5
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6aba:	f000 b809 	b.w	d6ad0 <__aeabi_atexit>
   d6abe:	bf00      	nop
   d6ac0:	2003e730 	.word	0x2003e730
   d6ac4:	2003e3ac 	.word	0x2003e3ac
   d6ac8:	000d5b31 	.word	0x000d5b31
   d6acc:	2003e740 	.word	0x2003e740

000d6ad0 <__aeabi_atexit>:
   d6ad0:	460b      	mov	r3, r1
   d6ad2:	4601      	mov	r1, r0
   d6ad4:	4618      	mov	r0, r3
   d6ad6:	f000 b94f 	b.w	d6d78 <__cxa_atexit>

000d6ada <_ZSt25__throw_bad_function_callv>:
   d6ada:	b508      	push	{r3, lr}
   d6adc:	f7fe f972 	bl	d4dc4 <abort>

000d6ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6ae0:	4b24      	ldr	r3, [pc, #144]	; (d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6ae2:	681a      	ldr	r2, [r3, #0]
   d6ae4:	07d0      	lsls	r0, r2, #31
   d6ae6:	bf5c      	itt	pl
   d6ae8:	2201      	movpl	r2, #1
   d6aea:	601a      	strpl	r2, [r3, #0]
   d6aec:	4b22      	ldr	r3, [pc, #136]	; (d6b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6aee:	681a      	ldr	r2, [r3, #0]
   d6af0:	07d1      	lsls	r1, r2, #31
   d6af2:	bf5c      	itt	pl
   d6af4:	2201      	movpl	r2, #1
   d6af6:	601a      	strpl	r2, [r3, #0]
   d6af8:	4b20      	ldr	r3, [pc, #128]	; (d6b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6afa:	681a      	ldr	r2, [r3, #0]
   d6afc:	07d2      	lsls	r2, r2, #31
   d6afe:	bf5c      	itt	pl
   d6b00:	2201      	movpl	r2, #1
   d6b02:	601a      	strpl	r2, [r3, #0]
   d6b04:	4b1e      	ldr	r3, [pc, #120]	; (d6b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6b06:	681a      	ldr	r2, [r3, #0]
   d6b08:	07d0      	lsls	r0, r2, #31
   d6b0a:	bf5c      	itt	pl
   d6b0c:	2201      	movpl	r2, #1
   d6b0e:	601a      	strpl	r2, [r3, #0]
   d6b10:	4b1c      	ldr	r3, [pc, #112]	; (d6b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6b12:	681a      	ldr	r2, [r3, #0]
   d6b14:	07d1      	lsls	r1, r2, #31
   d6b16:	bf5c      	itt	pl
   d6b18:	2201      	movpl	r2, #1
   d6b1a:	601a      	strpl	r2, [r3, #0]
   d6b1c:	4b1a      	ldr	r3, [pc, #104]	; (d6b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6b1e:	681a      	ldr	r2, [r3, #0]
   d6b20:	07d2      	lsls	r2, r2, #31
   d6b22:	bf5c      	itt	pl
   d6b24:	2201      	movpl	r2, #1
   d6b26:	601a      	strpl	r2, [r3, #0]
   d6b28:	4b18      	ldr	r3, [pc, #96]	; (d6b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6b2a:	681a      	ldr	r2, [r3, #0]
   d6b2c:	07d0      	lsls	r0, r2, #31
   d6b2e:	bf5c      	itt	pl
   d6b30:	2201      	movpl	r2, #1
   d6b32:	601a      	strpl	r2, [r3, #0]
   d6b34:	4b16      	ldr	r3, [pc, #88]	; (d6b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6b36:	681a      	ldr	r2, [r3, #0]
   d6b38:	07d1      	lsls	r1, r2, #31
   d6b3a:	bf5c      	itt	pl
   d6b3c:	2201      	movpl	r2, #1
   d6b3e:	601a      	strpl	r2, [r3, #0]
   d6b40:	4b14      	ldr	r3, [pc, #80]	; (d6b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6b42:	681a      	ldr	r2, [r3, #0]
   d6b44:	07d2      	lsls	r2, r2, #31
   d6b46:	bf5c      	itt	pl
   d6b48:	2201      	movpl	r2, #1
   d6b4a:	601a      	strpl	r2, [r3, #0]
   d6b4c:	4b12      	ldr	r3, [pc, #72]	; (d6b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6b4e:	681a      	ldr	r2, [r3, #0]
   d6b50:	07d0      	lsls	r0, r2, #31
   d6b52:	bf5c      	itt	pl
   d6b54:	2201      	movpl	r2, #1
   d6b56:	601a      	strpl	r2, [r3, #0]
   d6b58:	4b10      	ldr	r3, [pc, #64]	; (d6b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6b5a:	681a      	ldr	r2, [r3, #0]
   d6b5c:	07d1      	lsls	r1, r2, #31
   d6b5e:	bf5c      	itt	pl
   d6b60:	2201      	movpl	r2, #1
   d6b62:	601a      	strpl	r2, [r3, #0]
   d6b64:	4b0e      	ldr	r3, [pc, #56]	; (d6ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6b66:	681a      	ldr	r2, [r3, #0]
   d6b68:	07d2      	lsls	r2, r2, #31
   d6b6a:	bf5c      	itt	pl
   d6b6c:	2201      	movpl	r2, #1
   d6b6e:	601a      	strpl	r2, [r3, #0]
   d6b70:	4770      	bx	lr
   d6b72:	bf00      	nop
   d6b74:	2003e77c 	.word	0x2003e77c
   d6b78:	2003e778 	.word	0x2003e778
   d6b7c:	2003e774 	.word	0x2003e774
   d6b80:	2003e770 	.word	0x2003e770
   d6b84:	2003e76c 	.word	0x2003e76c
   d6b88:	2003e768 	.word	0x2003e768
   d6b8c:	2003e764 	.word	0x2003e764
   d6b90:	2003e760 	.word	0x2003e760
   d6b94:	2003e75c 	.word	0x2003e75c
   d6b98:	2003e758 	.word	0x2003e758
   d6b9c:	2003e754 	.word	0x2003e754
   d6ba0:	2003e750 	.word	0x2003e750

000d6ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6ba4:	4b18      	ldr	r3, [pc, #96]	; (d6c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6ba6:	681a      	ldr	r2, [r3, #0]
   d6ba8:	07d1      	lsls	r1, r2, #31
   d6baa:	bf5c      	itt	pl
   d6bac:	2201      	movpl	r2, #1
   d6bae:	601a      	strpl	r2, [r3, #0]
   d6bb0:	4b16      	ldr	r3, [pc, #88]	; (d6c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6bb2:	681a      	ldr	r2, [r3, #0]
   d6bb4:	07d2      	lsls	r2, r2, #31
   d6bb6:	bf5c      	itt	pl
   d6bb8:	2201      	movpl	r2, #1
   d6bba:	601a      	strpl	r2, [r3, #0]
   d6bbc:	4b14      	ldr	r3, [pc, #80]	; (d6c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6bbe:	681a      	ldr	r2, [r3, #0]
   d6bc0:	07d0      	lsls	r0, r2, #31
   d6bc2:	bf5c      	itt	pl
   d6bc4:	2201      	movpl	r2, #1
   d6bc6:	601a      	strpl	r2, [r3, #0]
   d6bc8:	4b12      	ldr	r3, [pc, #72]	; (d6c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6bca:	681a      	ldr	r2, [r3, #0]
   d6bcc:	07d1      	lsls	r1, r2, #31
   d6bce:	bf5c      	itt	pl
   d6bd0:	2201      	movpl	r2, #1
   d6bd2:	601a      	strpl	r2, [r3, #0]
   d6bd4:	4b10      	ldr	r3, [pc, #64]	; (d6c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6bd6:	681a      	ldr	r2, [r3, #0]
   d6bd8:	07d2      	lsls	r2, r2, #31
   d6bda:	bf5c      	itt	pl
   d6bdc:	2201      	movpl	r2, #1
   d6bde:	601a      	strpl	r2, [r3, #0]
   d6be0:	4b0e      	ldr	r3, [pc, #56]	; (d6c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6be2:	681a      	ldr	r2, [r3, #0]
   d6be4:	07d0      	lsls	r0, r2, #31
   d6be6:	bf5c      	itt	pl
   d6be8:	2201      	movpl	r2, #1
   d6bea:	601a      	strpl	r2, [r3, #0]
   d6bec:	4b0c      	ldr	r3, [pc, #48]	; (d6c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6bee:	681a      	ldr	r2, [r3, #0]
   d6bf0:	07d1      	lsls	r1, r2, #31
   d6bf2:	bf5c      	itt	pl
   d6bf4:	2201      	movpl	r2, #1
   d6bf6:	601a      	strpl	r2, [r3, #0]
   d6bf8:	4b0a      	ldr	r3, [pc, #40]	; (d6c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6bfa:	681a      	ldr	r2, [r3, #0]
   d6bfc:	07d2      	lsls	r2, r2, #31
   d6bfe:	bf5c      	itt	pl
   d6c00:	2201      	movpl	r2, #1
   d6c02:	601a      	strpl	r2, [r3, #0]
   d6c04:	4770      	bx	lr
   d6c06:	bf00      	nop
   d6c08:	2003e79c 	.word	0x2003e79c
   d6c0c:	2003e798 	.word	0x2003e798
   d6c10:	2003e794 	.word	0x2003e794
   d6c14:	2003e790 	.word	0x2003e790
   d6c18:	2003e78c 	.word	0x2003e78c
   d6c1c:	2003e788 	.word	0x2003e788
   d6c20:	2003e784 	.word	0x2003e784
   d6c24:	2003e780 	.word	0x2003e780

000d6c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6c28:	4b18      	ldr	r3, [pc, #96]	; (d6c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6c2a:	681a      	ldr	r2, [r3, #0]
   d6c2c:	07d1      	lsls	r1, r2, #31
   d6c2e:	bf5c      	itt	pl
   d6c30:	2201      	movpl	r2, #1
   d6c32:	601a      	strpl	r2, [r3, #0]
   d6c34:	4b16      	ldr	r3, [pc, #88]	; (d6c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	07d2      	lsls	r2, r2, #31
   d6c3a:	bf5c      	itt	pl
   d6c3c:	2201      	movpl	r2, #1
   d6c3e:	601a      	strpl	r2, [r3, #0]
   d6c40:	4b14      	ldr	r3, [pc, #80]	; (d6c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6c42:	681a      	ldr	r2, [r3, #0]
   d6c44:	07d0      	lsls	r0, r2, #31
   d6c46:	bf5c      	itt	pl
   d6c48:	2201      	movpl	r2, #1
   d6c4a:	601a      	strpl	r2, [r3, #0]
   d6c4c:	4b12      	ldr	r3, [pc, #72]	; (d6c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6c4e:	681a      	ldr	r2, [r3, #0]
   d6c50:	07d1      	lsls	r1, r2, #31
   d6c52:	bf5c      	itt	pl
   d6c54:	2201      	movpl	r2, #1
   d6c56:	601a      	strpl	r2, [r3, #0]
   d6c58:	4b10      	ldr	r3, [pc, #64]	; (d6c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6c5a:	681a      	ldr	r2, [r3, #0]
   d6c5c:	07d2      	lsls	r2, r2, #31
   d6c5e:	bf5c      	itt	pl
   d6c60:	2201      	movpl	r2, #1
   d6c62:	601a      	strpl	r2, [r3, #0]
   d6c64:	4b0e      	ldr	r3, [pc, #56]	; (d6ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6c66:	681a      	ldr	r2, [r3, #0]
   d6c68:	07d0      	lsls	r0, r2, #31
   d6c6a:	bf5c      	itt	pl
   d6c6c:	2201      	movpl	r2, #1
   d6c6e:	601a      	strpl	r2, [r3, #0]
   d6c70:	4b0c      	ldr	r3, [pc, #48]	; (d6ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6c72:	681a      	ldr	r2, [r3, #0]
   d6c74:	07d1      	lsls	r1, r2, #31
   d6c76:	bf5c      	itt	pl
   d6c78:	2201      	movpl	r2, #1
   d6c7a:	601a      	strpl	r2, [r3, #0]
   d6c7c:	4b0a      	ldr	r3, [pc, #40]	; (d6ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6c7e:	681a      	ldr	r2, [r3, #0]
   d6c80:	07d2      	lsls	r2, r2, #31
   d6c82:	bf5c      	itt	pl
   d6c84:	2201      	movpl	r2, #1
   d6c86:	601a      	strpl	r2, [r3, #0]
   d6c88:	4770      	bx	lr
   d6c8a:	bf00      	nop
   d6c8c:	2003e7bc 	.word	0x2003e7bc
   d6c90:	2003e7b8 	.word	0x2003e7b8
   d6c94:	2003e7b4 	.word	0x2003e7b4
   d6c98:	2003e7b0 	.word	0x2003e7b0
   d6c9c:	2003e7ac 	.word	0x2003e7ac
   d6ca0:	2003e7a8 	.word	0x2003e7a8
   d6ca4:	2003e7a4 	.word	0x2003e7a4
   d6ca8:	2003e7a0 	.word	0x2003e7a0

000d6cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6cac:	4b24      	ldr	r3, [pc, #144]	; (d6d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6cae:	681a      	ldr	r2, [r3, #0]
   d6cb0:	07d0      	lsls	r0, r2, #31
   d6cb2:	bf5c      	itt	pl
   d6cb4:	2201      	movpl	r2, #1
   d6cb6:	601a      	strpl	r2, [r3, #0]
   d6cb8:	4b22      	ldr	r3, [pc, #136]	; (d6d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6cba:	681a      	ldr	r2, [r3, #0]
   d6cbc:	07d1      	lsls	r1, r2, #31
   d6cbe:	bf5c      	itt	pl
   d6cc0:	2201      	movpl	r2, #1
   d6cc2:	601a      	strpl	r2, [r3, #0]
   d6cc4:	4b20      	ldr	r3, [pc, #128]	; (d6d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6cc6:	681a      	ldr	r2, [r3, #0]
   d6cc8:	07d2      	lsls	r2, r2, #31
   d6cca:	bf5c      	itt	pl
   d6ccc:	2201      	movpl	r2, #1
   d6cce:	601a      	strpl	r2, [r3, #0]
   d6cd0:	4b1e      	ldr	r3, [pc, #120]	; (d6d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6cd2:	681a      	ldr	r2, [r3, #0]
   d6cd4:	07d0      	lsls	r0, r2, #31
   d6cd6:	bf5c      	itt	pl
   d6cd8:	2201      	movpl	r2, #1
   d6cda:	601a      	strpl	r2, [r3, #0]
   d6cdc:	4b1c      	ldr	r3, [pc, #112]	; (d6d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6cde:	681a      	ldr	r2, [r3, #0]
   d6ce0:	07d1      	lsls	r1, r2, #31
   d6ce2:	bf5c      	itt	pl
   d6ce4:	2201      	movpl	r2, #1
   d6ce6:	601a      	strpl	r2, [r3, #0]
   d6ce8:	4b1a      	ldr	r3, [pc, #104]	; (d6d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6cea:	681a      	ldr	r2, [r3, #0]
   d6cec:	07d2      	lsls	r2, r2, #31
   d6cee:	bf5c      	itt	pl
   d6cf0:	2201      	movpl	r2, #1
   d6cf2:	601a      	strpl	r2, [r3, #0]
   d6cf4:	4b18      	ldr	r3, [pc, #96]	; (d6d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6cf6:	681a      	ldr	r2, [r3, #0]
   d6cf8:	07d0      	lsls	r0, r2, #31
   d6cfa:	bf5c      	itt	pl
   d6cfc:	2201      	movpl	r2, #1
   d6cfe:	601a      	strpl	r2, [r3, #0]
   d6d00:	4b16      	ldr	r3, [pc, #88]	; (d6d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6d02:	681a      	ldr	r2, [r3, #0]
   d6d04:	07d1      	lsls	r1, r2, #31
   d6d06:	bf5c      	itt	pl
   d6d08:	2201      	movpl	r2, #1
   d6d0a:	601a      	strpl	r2, [r3, #0]
   d6d0c:	4b14      	ldr	r3, [pc, #80]	; (d6d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6d0e:	681a      	ldr	r2, [r3, #0]
   d6d10:	07d2      	lsls	r2, r2, #31
   d6d12:	bf5c      	itt	pl
   d6d14:	2201      	movpl	r2, #1
   d6d16:	601a      	strpl	r2, [r3, #0]
   d6d18:	4b12      	ldr	r3, [pc, #72]	; (d6d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6d1a:	681a      	ldr	r2, [r3, #0]
   d6d1c:	07d0      	lsls	r0, r2, #31
   d6d1e:	bf5c      	itt	pl
   d6d20:	2201      	movpl	r2, #1
   d6d22:	601a      	strpl	r2, [r3, #0]
   d6d24:	4b10      	ldr	r3, [pc, #64]	; (d6d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6d26:	681a      	ldr	r2, [r3, #0]
   d6d28:	07d1      	lsls	r1, r2, #31
   d6d2a:	bf5c      	itt	pl
   d6d2c:	2201      	movpl	r2, #1
   d6d2e:	601a      	strpl	r2, [r3, #0]
   d6d30:	4b0e      	ldr	r3, [pc, #56]	; (d6d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6d32:	681a      	ldr	r2, [r3, #0]
   d6d34:	07d2      	lsls	r2, r2, #31
   d6d36:	bf5c      	itt	pl
   d6d38:	2201      	movpl	r2, #1
   d6d3a:	601a      	strpl	r2, [r3, #0]
   d6d3c:	4770      	bx	lr
   d6d3e:	bf00      	nop
   d6d40:	2003e7ec 	.word	0x2003e7ec
   d6d44:	2003e7e8 	.word	0x2003e7e8
   d6d48:	2003e7e4 	.word	0x2003e7e4
   d6d4c:	2003e7e0 	.word	0x2003e7e0
   d6d50:	2003e7dc 	.word	0x2003e7dc
   d6d54:	2003e7d8 	.word	0x2003e7d8
   d6d58:	2003e7d4 	.word	0x2003e7d4
   d6d5c:	2003e7d0 	.word	0x2003e7d0
   d6d60:	2003e7cc 	.word	0x2003e7cc
   d6d64:	2003e7c8 	.word	0x2003e7c8
   d6d68:	2003e7c4 	.word	0x2003e7c4
   d6d6c:	2003e7c0 	.word	0x2003e7c0

000d6d70 <atol>:
   d6d70:	220a      	movs	r2, #10
   d6d72:	2100      	movs	r1, #0
   d6d74:	f000 b90c 	b.w	d6f90 <strtol>

000d6d78 <__cxa_atexit>:
   d6d78:	b510      	push	{r4, lr}
   d6d7a:	4c05      	ldr	r4, [pc, #20]	; (d6d90 <__cxa_atexit+0x18>)
   d6d7c:	4613      	mov	r3, r2
   d6d7e:	b12c      	cbz	r4, d6d8c <__cxa_atexit+0x14>
   d6d80:	460a      	mov	r2, r1
   d6d82:	4601      	mov	r1, r0
   d6d84:	2002      	movs	r0, #2
   d6d86:	f3af 8000 	nop.w
   d6d8a:	bd10      	pop	{r4, pc}
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}
   d6d90:	00000000 	.word	0x00000000

000d6d94 <ldiv>:
   d6d94:	2900      	cmp	r1, #0
   d6d96:	b510      	push	{r4, lr}
   d6d98:	fb91 f4f2 	sdiv	r4, r1, r2
   d6d9c:	fb02 1314 	mls	r3, r2, r4, r1
   d6da0:	db04      	blt.n	d6dac <ldiv+0x18>
   d6da2:	2b00      	cmp	r3, #0
   d6da4:	da07      	bge.n	d6db6 <ldiv+0x22>
   d6da6:	3401      	adds	r4, #1
   d6da8:	1a9b      	subs	r3, r3, r2
   d6daa:	e004      	b.n	d6db6 <ldiv+0x22>
   d6dac:	2b00      	cmp	r3, #0
   d6dae:	bfc4      	itt	gt
   d6db0:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   d6db4:	189b      	addgt	r3, r3, r2
   d6db6:	6004      	str	r4, [r0, #0]
   d6db8:	6043      	str	r3, [r0, #4]
   d6dba:	bd10      	pop	{r4, pc}

000d6dbc <memcpy>:
   d6dbc:	b510      	push	{r4, lr}
   d6dbe:	1e43      	subs	r3, r0, #1
   d6dc0:	440a      	add	r2, r1
   d6dc2:	4291      	cmp	r1, r2
   d6dc4:	d004      	beq.n	d6dd0 <memcpy+0x14>
   d6dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6dca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6dce:	e7f8      	b.n	d6dc2 <memcpy+0x6>
   d6dd0:	bd10      	pop	{r4, pc}

000d6dd2 <memset>:
   d6dd2:	4402      	add	r2, r0
   d6dd4:	4603      	mov	r3, r0
   d6dd6:	4293      	cmp	r3, r2
   d6dd8:	d002      	beq.n	d6de0 <memset+0xe>
   d6dda:	f803 1b01 	strb.w	r1, [r3], #1
   d6dde:	e7fa      	b.n	d6dd6 <memset+0x4>
   d6de0:	4770      	bx	lr

000d6de2 <strcmp>:
   d6de2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6de6:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6dea:	2a01      	cmp	r2, #1
   d6dec:	bf28      	it	cs
   d6dee:	429a      	cmpcs	r2, r3
   d6df0:	d0f7      	beq.n	d6de2 <strcmp>
   d6df2:	1ad0      	subs	r0, r2, r3
   d6df4:	4770      	bx	lr

000d6df6 <strcpy>:
   d6df6:	4603      	mov	r3, r0
   d6df8:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6dfc:	f803 2b01 	strb.w	r2, [r3], #1
   d6e00:	2a00      	cmp	r2, #0
   d6e02:	d1f9      	bne.n	d6df8 <strcpy+0x2>
   d6e04:	4770      	bx	lr
	...

000d6e08 <strdup>:
   d6e08:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <strdup+0xc>)
   d6e0a:	4601      	mov	r1, r0
   d6e0c:	6818      	ldr	r0, [r3, #0]
   d6e0e:	f000 b803 	b.w	d6e18 <_strdup_r>
   d6e12:	bf00      	nop
   d6e14:	2003e3a8 	.word	0x2003e3a8

000d6e18 <_strdup_r>:
   d6e18:	b570      	push	{r4, r5, r6, lr}
   d6e1a:	4606      	mov	r6, r0
   d6e1c:	4608      	mov	r0, r1
   d6e1e:	460c      	mov	r4, r1
   d6e20:	f000 f80d 	bl	d6e3e <strlen>
   d6e24:	1c45      	adds	r5, r0, #1
   d6e26:	4629      	mov	r1, r5
   d6e28:	4630      	mov	r0, r6
   d6e2a:	f7fd ffd3 	bl	d4dd4 <_malloc_r>
   d6e2e:	4606      	mov	r6, r0
   d6e30:	b118      	cbz	r0, d6e3a <_strdup_r+0x22>
   d6e32:	462a      	mov	r2, r5
   d6e34:	4621      	mov	r1, r4
   d6e36:	f7ff ffc1 	bl	d6dbc <memcpy>
   d6e3a:	4630      	mov	r0, r6
   d6e3c:	bd70      	pop	{r4, r5, r6, pc}

000d6e3e <strlen>:
   d6e3e:	4603      	mov	r3, r0
   d6e40:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6e44:	2a00      	cmp	r2, #0
   d6e46:	d1fb      	bne.n	d6e40 <strlen+0x2>
   d6e48:	1a18      	subs	r0, r3, r0
   d6e4a:	3801      	subs	r0, #1
   d6e4c:	4770      	bx	lr

000d6e4e <strstr>:
   d6e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e50:	7803      	ldrb	r3, [r0, #0]
   d6e52:	b963      	cbnz	r3, d6e6e <strstr+0x20>
   d6e54:	780b      	ldrb	r3, [r1, #0]
   d6e56:	2b00      	cmp	r3, #0
   d6e58:	bf18      	it	ne
   d6e5a:	2000      	movne	r0, #0
   d6e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e5e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6e62:	b162      	cbz	r2, d6e7e <strstr+0x30>
   d6e64:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d6e68:	4297      	cmp	r7, r2
   d6e6a:	4630      	mov	r0, r6
   d6e6c:	d0f7      	beq.n	d6e5e <strstr+0x10>
   d6e6e:	4603      	mov	r3, r0
   d6e70:	1c46      	adds	r6, r0, #1
   d6e72:	7800      	ldrb	r0, [r0, #0]
   d6e74:	b110      	cbz	r0, d6e7c <strstr+0x2e>
   d6e76:	1e4d      	subs	r5, r1, #1
   d6e78:	1e5c      	subs	r4, r3, #1
   d6e7a:	e7f0      	b.n	d6e5e <strstr+0x10>
   d6e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e7e:	4618      	mov	r0, r3
   d6e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6e84 <_strtol_r>:
   d6e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e88:	4680      	mov	r8, r0
   d6e8a:	4840      	ldr	r0, [pc, #256]	; (d6f8c <_strtol_r+0x108>)
   d6e8c:	f8d0 9000 	ldr.w	r9, [r0]
   d6e90:	460f      	mov	r7, r1
   d6e92:	463d      	mov	r5, r7
   d6e94:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6e98:	eb09 0004 	add.w	r0, r9, r4
   d6e9c:	7840      	ldrb	r0, [r0, #1]
   d6e9e:	f000 0008 	and.w	r0, r0, #8
   d6ea2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6ea6:	b108      	cbz	r0, d6eac <_strtol_r+0x28>
   d6ea8:	462f      	mov	r7, r5
   d6eaa:	e7f2      	b.n	d6e92 <_strtol_r+0xe>
   d6eac:	2c2d      	cmp	r4, #45	; 0x2d
   d6eae:	d103      	bne.n	d6eb8 <_strtol_r+0x34>
   d6eb0:	1cbd      	adds	r5, r7, #2
   d6eb2:	787c      	ldrb	r4, [r7, #1]
   d6eb4:	2601      	movs	r6, #1
   d6eb6:	e003      	b.n	d6ec0 <_strtol_r+0x3c>
   d6eb8:	2c2b      	cmp	r4, #43	; 0x2b
   d6eba:	bf04      	itt	eq
   d6ebc:	787c      	ldrbeq	r4, [r7, #1]
   d6ebe:	1cbd      	addeq	r5, r7, #2
   d6ec0:	b113      	cbz	r3, d6ec8 <_strtol_r+0x44>
   d6ec2:	2b10      	cmp	r3, #16
   d6ec4:	d10a      	bne.n	d6edc <_strtol_r+0x58>
   d6ec6:	e05b      	b.n	d6f80 <_strtol_r+0xfc>
   d6ec8:	2c30      	cmp	r4, #48	; 0x30
   d6eca:	d157      	bne.n	d6f7c <_strtol_r+0xf8>
   d6ecc:	7828      	ldrb	r0, [r5, #0]
   d6ece:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6ed2:	2858      	cmp	r0, #88	; 0x58
   d6ed4:	d14d      	bne.n	d6f72 <_strtol_r+0xee>
   d6ed6:	786c      	ldrb	r4, [r5, #1]
   d6ed8:	2310      	movs	r3, #16
   d6eda:	3502      	adds	r5, #2
   d6edc:	2e00      	cmp	r6, #0
   d6ede:	bf14      	ite	ne
   d6ee0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6ee4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6ee8:	2700      	movs	r7, #0
   d6eea:	fbbc faf3 	udiv	sl, ip, r3
   d6eee:	4638      	mov	r0, r7
   d6ef0:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6ef4:	eb09 0e04 	add.w	lr, r9, r4
   d6ef8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6efc:	f01e 0f04 	tst.w	lr, #4
   d6f00:	d001      	beq.n	d6f06 <_strtol_r+0x82>
   d6f02:	3c30      	subs	r4, #48	; 0x30
   d6f04:	e00b      	b.n	d6f1e <_strtol_r+0x9a>
   d6f06:	f01e 0e03 	ands.w	lr, lr, #3
   d6f0a:	d01b      	beq.n	d6f44 <_strtol_r+0xc0>
   d6f0c:	f1be 0f01 	cmp.w	lr, #1
   d6f10:	bf0c      	ite	eq
   d6f12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6f16:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6f1a:	ebce 0404 	rsb	r4, lr, r4
   d6f1e:	42a3      	cmp	r3, r4
   d6f20:	dd10      	ble.n	d6f44 <_strtol_r+0xc0>
   d6f22:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d6f26:	d00a      	beq.n	d6f3e <_strtol_r+0xba>
   d6f28:	4550      	cmp	r0, sl
   d6f2a:	d806      	bhi.n	d6f3a <_strtol_r+0xb6>
   d6f2c:	d101      	bne.n	d6f32 <_strtol_r+0xae>
   d6f2e:	4564      	cmp	r4, ip
   d6f30:	dc03      	bgt.n	d6f3a <_strtol_r+0xb6>
   d6f32:	fb03 4000 	mla	r0, r3, r0, r4
   d6f36:	2701      	movs	r7, #1
   d6f38:	e001      	b.n	d6f3e <_strtol_r+0xba>
   d6f3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d6f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6f42:	e7d7      	b.n	d6ef4 <_strtol_r+0x70>
   d6f44:	1c7b      	adds	r3, r7, #1
   d6f46:	d10c      	bne.n	d6f62 <_strtol_r+0xde>
   d6f48:	2e00      	cmp	r6, #0
   d6f4a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d6f4e:	bf14      	ite	ne
   d6f50:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6f54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6f58:	f8c8 3000 	str.w	r3, [r8]
   d6f5c:	b92a      	cbnz	r2, d6f6a <_strtol_r+0xe6>
   d6f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f62:	b106      	cbz	r6, d6f66 <_strtol_r+0xe2>
   d6f64:	4240      	negs	r0, r0
   d6f66:	b172      	cbz	r2, d6f86 <_strtol_r+0x102>
   d6f68:	b107      	cbz	r7, d6f6c <_strtol_r+0xe8>
   d6f6a:	1e69      	subs	r1, r5, #1
   d6f6c:	6011      	str	r1, [r2, #0]
   d6f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f72:	2430      	movs	r4, #48	; 0x30
   d6f74:	2b00      	cmp	r3, #0
   d6f76:	d1b1      	bne.n	d6edc <_strtol_r+0x58>
   d6f78:	2308      	movs	r3, #8
   d6f7a:	e7af      	b.n	d6edc <_strtol_r+0x58>
   d6f7c:	230a      	movs	r3, #10
   d6f7e:	e7ad      	b.n	d6edc <_strtol_r+0x58>
   d6f80:	2c30      	cmp	r4, #48	; 0x30
   d6f82:	d0a3      	beq.n	d6ecc <_strtol_r+0x48>
   d6f84:	e7aa      	b.n	d6edc <_strtol_r+0x58>
   d6f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f8a:	bf00      	nop
   d6f8c:	2003e344 	.word	0x2003e344

000d6f90 <strtol>:
   d6f90:	4613      	mov	r3, r2
   d6f92:	460a      	mov	r2, r1
   d6f94:	4601      	mov	r1, r0
   d6f96:	4802      	ldr	r0, [pc, #8]	; (d6fa0 <strtol+0x10>)
   d6f98:	6800      	ldr	r0, [r0, #0]
   d6f9a:	f7ff bf73 	b.w	d6e84 <_strtol_r>
   d6f9e:	bf00      	nop
   d6fa0:	2003e3a8 	.word	0x2003e3a8

000d6fa4 <dynalib_user>:
   d6fa4:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d6fb4:	00000000 4f6c6c61 6c006666 46746665     ....allOff.leftF
   d6fc4:	67697200 00467468 7466656c 69720052     .rightF.leftR.ri
   d6fd4:	52746867 20732500 3a6c6176 00692520     ghtR.%s val: %i.
   d6fe4:	6f66002c 776f6c6c 69707300 6573006e     ,.follow.spin.se
   d6ff4:	7972746e 20435200 65646f4d 6d654400     ntry.RC Mode.Dem
   d7004:	6f4d206f 73006564 6d726177 61656c2d     o Mode.swarm-lea
   d7014:	2d726564 696c6e6f 7300656e 6d726177     der-online.swarm
   d7024:	646f6d2d 77660065 7265762d 6e6f6973     -mode.fw-version
   d7034:	69777300 4d686374 0065646f 72617773     .switchMode.swar
   d7044:	6d65446d 6372006f 6d656400 3176006f     mDemo.rc.demo.v1
   d7054:	0000322e                                .2..

000d7058 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7060:	000d4e11 000d4e17 000d4e3f 000d4e23     .N...N..?N..#N..
   d7070:	000d4e13                                .N..

000d7074 <_ZTVN5spark13EthernetClassE>:
	...
   d707c:	000d540f 000d5405 000d53fb 000d53f1     .T...T...S...S..
   d708c:	000d53e5 000d53d9 000d53cd 000d53c5     .S...S...S...S..
   d709c:	000d53bb 000d53b1 000d5935              .S...S..5Y..

000d70a8 <_ZTV7TwoWire>:
	...
   d70b0:	000d542d 000d5477 000d544f 000d542f     -T..wT..OT../T..
   d70c0:	000d5457 000d545f 000d5467 000d546f     WT.._T..gT..oT..

000d70d0 <_ZTV9IPAddress>:
	...
   d70d8:	000d54bf 000d54b1 000d54b3 66006e6c     .T...T...T..ln.f
   d70e8:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
   d70f8:	31302500 00207530 2c00205d 29280020     .%010u .] ., .()
   d7108:	2000203a 6f63005b 3d206564 65640020     : . [.code = .de
   d7118:	6c696174 203d2073 75616200 65530064     tails = .baud.Se
   d7128:	6c616972 72655300 316c6169 70797400     rial.Serial1.typ
   d7138:	61700065 006d6172 00646d63 68006469     e.param.cmd.id.h
   d7148:	7300646e 006d7274 746c6966 6c766c00     nd.strm.filt.lvl
   d7158:	64646100 646e6148 0072656c 6f6d6572     .addHandler.remo
   d7168:	61486576 656c646e 6e650072 61486d75     veHandler.enumHa
   d7178:	656c646e 4a007372 534e4f53 61657274     ndlers.JSONStrea
   d7188:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
   d7198:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
   d71a8:	6e726177 72726500 7000726f 63696e61     warn.error.panic
   d71b8:	6c6c6100 00000000                       .all....

000d71c0 <_ZTVN5spark9MeshClassE>:
	...
   d71c8:	000d562f 000d5625 000d561b 000d5611     /V..%V...V...V..
   d71d8:	000d5605 000d55f9 000d55ed 000d55e5     .V...U...U...U..
   d71e8:	000d55db 000d55d1 000d5935 33306666     .U...U..5Y..ff03
   d71f8:	3a313a3a 31303031 31687400 73656d00     ::1:1001.th1.mes
   d7208:	62757068 72697700 00676e69 73726170     hpub.wiring.pars
   d7218:	61702065 74656b63 00642520              e packet %d.

000d7224 <_ZTVN5spark12NetworkClassE>:
	...
   d722c:	000d58cd 000d58d7 000d58e1 000d58eb     .X...X...X...X..
   d723c:	000d58f5 000d5901 000d590d 000d5919     .X...Y...Y...Y..
   d724c:	000d5921 000d592b 000d5935              !Y..+Y..5Y..

000d7258 <_ZTV8SPIClass>:
	...
   d7260:	000d5b31 000d5b33                       1[..3[..

000d7268 <_ZTV21StringPrintableHelper>:
	...
   d7270:	000d5b6f 000d5b71 000d5d79 000d5d4b     o[..q[..y]..K]..
   d7280:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d7290:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d72a0:	63736100 656d6974 63657200 65766965     .asctime.receive
   d72b0:	64252064 74796220 66207365 206d6f72     d %d bytes from 
   d72c0:	25237325 65730064 6150646e 74656b63     %s#%d.sendPacket
   d72d0:	7a697320 64252065 7325202c 00642523      size %d, %s#%d.
   d72e0:	69676562 6170206e 74656b63 23732520     begin packet %s#
   d72f0:	00006425                                %d..

000d72f4 <_ZTV3UDP>:
	...
   d72fc:	000d6589 000d65ad 000d5eb9 000d5fe3     .e...e...^..._..
   d730c:	000d5eb1 000d5ecf 000d5eed 000d5f07     .^...^...^..._..
   d731c:	000d5f2b 000d5fc7 000d6305 000d6069     +_..._...c..i`..
   d732c:	000d61e9 000d5e99 000d6521 000d616d     .a...^..!e..ma..
   d733c:	000d60a1 000d64e7 000d600d 000d5ea7     .`...d...`...^..
   d734c:	000d6049 000d5ead 000d5f09 fffffff0     I`...^..._......
   d735c:	00000000 000d5f23                       ....#_..

000d7364 <_ZTV11USARTSerial>:
	...
   d736c:	000d65d7 000d65fb 000d6607 000d59cd     .e...e...f...Y..
   d737c:	000d65e3 000d65ef 000d65e9 000d65f5     .e...e...e...e..
   d738c:	000d65d9 000d65dd                       .e...e..

000d7394 <_ZTV9USBSerial>:
	...
   d739c:	000d66b1 000d66f5 000d66cf 000d59cd     .f...f...f...Y..
   d73ac:	000d66c9 000d66b3 000d66bb 000d66ef     .f...f...f...f..
   d73bc:	000d66c3 000d66ad                       .f...f..

000d73c4 <_ctype_>:
   d73c4:	20202000 20202020 28282020 20282828     .         ((((( 
   d73d4:	20202020 20202020 20202020 20202020                     
   d73e4:	10108820 10101010 10101010 10101010      ...............
   d73f4:	04040410 04040404 10040404 10101010     ................
   d7404:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7414:	01010101 01010101 01010101 10101010     ................
   d7424:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7434:	02020202 02020202 02020202 10101010     ................
   d7444:	00000020 00000000 00000000 00000000      ...............
	...

000d74c8 <__sf_fake_stdin>:
	...

000d74e8 <__sf_fake_stdout>:
	...

000d7508 <__sf_fake_stderr>:
	...
   d7528:	00000043                                         C.

000d752a <link_const_variable_data_end>:
	...

000d752c <link_constructors_location>:
   d752c:	000d4861 	.word	0x000d4861
   d7530:	000d4899 	.word	0x000d4899
   d7534:	000d5419 	.word	0x000d5419
   d7538:	000d55c1 	.word	0x000d55c1
   d753c:	000d5881 	.word	0x000d5881
   d7540:	000d59b9 	.word	0x000d59b9
   d7544:	000d5b15 	.word	0x000d5b15
   d7548:	000d5e69 	.word	0x000d5e69
   d754c:	000d5e85 	.word	0x000d5e85
   d7550:	000d6a8d 	.word	0x000d6a8d
   d7554:	000d6ae1 	.word	0x000d6ae1
   d7558:	000d6ba5 	.word	0x000d6ba5
   d755c:	000d6c29 	.word	0x000d6c29
   d7560:	000d6cad 	.word	0x000d6cad

000d7564 <link_constructors_end>:
	...
