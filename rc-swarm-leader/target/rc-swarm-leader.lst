
/Users/bsatrom/Development/particle/rc-mesh/rc-swarm-leader/target/rc-swarm-leader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016a78  2**0
                  CONTENTS
  3 .data         0000007c  2003e344  000d69d0  0000e344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000430  2003e3c0  2003e3c0  0001e3c0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6a4c  000d6a4c  00016a4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6a74  000d6a74  00016a74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a815e  00000000  00000000  00016a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f853  00000000  00000000  000bebd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014aa2  00000000  00000000  000ce429  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020d0  00000000  00000000  000e2ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003580  00000000  00000000  000e4f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000311f8  00000000  00000000  000e851b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000245e0  00000000  00000000  00119713  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d380a  00000000  00000000  0013dcf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bc44  00000000  00000000  00211500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	68 65 0d 00                                         he..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa5b 	bl	d64e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa60 	bl	d64fe <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e344 	.word	0x2003e344
   d4048:	000d69d0 	.word	0x000d69d0
   d404c:	2003e3c0 	.word	0x2003e3c0
   d4050:	2003e3c0 	.word	0x2003e3c0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f821 	bl	d60a0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d69d0 	.word	0x000d69d0
   d4080:	000d699c 	.word	0x000d699c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b81a 	b.w	d40bc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f91b 	bl	d42c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bfd3 	b.w	d603c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb9f 	b.w	d47d8 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bb9d 	b.w	d47d8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bba3 	b.w	d47e8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bba1 	b.w	d47e8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <setup>:
int speed = 85;
int lastLeftRVal = 0;
String version = "v0.8";

void setup()
{
   d40bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(leftReverse, OUTPUT);
   d40be:	4f2f      	ldr	r7, [pc, #188]	; (d417c <setup+0xc0>)
  pinMode(leftForward, OUTPUT);
   d40c0:	4e2f      	ldr	r6, [pc, #188]	; (d4180 <setup+0xc4>)
int lastLeftRVal = 0;
String version = "v0.8";

void setup()
{
  pinMode(leftReverse, OUTPUT);
   d40c2:	8838      	ldrh	r0, [r7, #0]
  pinMode(leftForward, OUTPUT);
  pinMode(rightForward, OUTPUT);
   d40c4:	4d2f      	ldr	r5, [pc, #188]	; (d4184 <setup+0xc8>)
  pinMode(rightReverse, OUTPUT);
   d40c6:	4c30      	ldr	r4, [pc, #192]	; (d4188 <setup+0xcc>)
int speed = 85;
int lastLeftRVal = 0;
String version = "v0.8";

void setup()
{
   d40c8:	b085      	sub	sp, #20
  pinMode(leftReverse, OUTPUT);
   d40ca:	2101      	movs	r1, #1
   d40cc:	f002 f81c 	bl	d6108 <pinMode>
  pinMode(leftForward, OUTPUT);
   d40d0:	2101      	movs	r1, #1
   d40d2:	8830      	ldrh	r0, [r6, #0]
   d40d4:	f002 f818 	bl	d6108 <pinMode>
  pinMode(rightForward, OUTPUT);
   d40d8:	2101      	movs	r1, #1
   d40da:	8828      	ldrh	r0, [r5, #0]
   d40dc:	f002 f814 	bl	d6108 <pinMode>
  pinMode(rightReverse, OUTPUT);
   d40e0:	8820      	ldrh	r0, [r4, #0]
   d40e2:	2101      	movs	r1, #1
   d40e4:	f002 f810 	bl	d6108 <pinMode>

  digitalWrite(leftReverse, LOW);
   d40e8:	2100      	movs	r1, #0
   d40ea:	8838      	ldrh	r0, [r7, #0]
   d40ec:	f002 f81d 	bl	d612a <digitalWrite>
  digitalWrite(leftForward, LOW);
   d40f0:	2100      	movs	r1, #0
   d40f2:	8830      	ldrh	r0, [r6, #0]
   d40f4:	f002 f819 	bl	d612a <digitalWrite>
  digitalWrite(rightForward, LOW);
   d40f8:	2100      	movs	r1, #0
   d40fa:	8828      	ldrh	r0, [r5, #0]
   d40fc:	f002 f815 	bl	d612a <digitalWrite>
  digitalWrite(rightReverse, LOW);
   d4100:	8820      	ldrh	r0, [r4, #0]
   d4102:	2100      	movs	r1, #0
   d4104:	f002 f811 	bl	d612a <digitalWrite>
   d4108:	4b20      	ldr	r3, [pc, #128]	; (d418c <setup+0xd0>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d410a:	4921      	ldr	r1, [pc, #132]	; (d4190 <setup+0xd4>)
   d410c:	681a      	ldr	r2, [r3, #0]
   d410e:	4b21      	ldr	r3, [pc, #132]	; (d4194 <setup+0xd8>)
   d4110:	781b      	ldrb	r3, [r3, #0]
   d4112:	f88d 3000 	strb.w	r3, [sp]
   d4116:	a802      	add	r0, sp, #8
   d4118:	233c      	movs	r3, #60	; 0x3c
   d411a:	f000 fd1d 	bl	d4b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d411e:	9c03      	ldr	r4, [sp, #12]
   d4120:	b17c      	cbz	r4, d4142 <setup+0x86>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4122:	6863      	ldr	r3, [r4, #4]
   d4124:	3b01      	subs	r3, #1
   d4126:	6063      	str	r3, [r4, #4]
   d4128:	b95b      	cbnz	r3, d4142 <setup+0x86>
        {
          _M_dispose();
   d412a:	6823      	ldr	r3, [r4, #0]
   d412c:	4620      	mov	r0, r4
   d412e:	689b      	ldr	r3, [r3, #8]
   d4130:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4132:	68a3      	ldr	r3, [r4, #8]
   d4134:	3b01      	subs	r3, #1
   d4136:	60a3      	str	r3, [r4, #8]
   d4138:	b91b      	cbnz	r3, d4142 <setup+0x86>
            _M_destroy();
   d413a:	6823      	ldr	r3, [r4, #0]
   d413c:	4620      	mov	r0, r4
   d413e:	68db      	ldr	r3, [r3, #12]
   d4140:	4798      	blx	r3

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d4142:	2308      	movs	r3, #8
   d4144:	f8ad 3008 	strh.w	r3, [sp, #8]
        extra.update = update_string_variable;
   d4148:	4b13      	ldr	r3, [pc, #76]	; (d4198 <setup+0xdc>)
   d414a:	9303      	str	r3, [sp, #12]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d414c:	2204      	movs	r2, #4
   d414e:	ab02      	add	r3, sp, #8
   d4150:	490e      	ldr	r1, [pc, #56]	; (d418c <setup+0xd0>)
   d4152:	4812      	ldr	r0, [pc, #72]	; (d419c <setup+0xe0>)
   d4154:	f000 fad0 	bl	d46f8 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4158:	4a11      	ldr	r2, [pc, #68]	; (d41a0 <setup+0xe4>)
   d415a:	4912      	ldr	r1, [pc, #72]	; (d41a4 <setup+0xe8>)
   d415c:	4812      	ldr	r0, [pc, #72]	; (d41a8 <setup+0xec>)
   d415e:	f000 fbc5 	bl	d48ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4162:	4a12      	ldr	r2, [pc, #72]	; (d41ac <setup+0xf0>)
   d4164:	4912      	ldr	r1, [pc, #72]	; (d41b0 <setup+0xf4>)
   d4166:	4810      	ldr	r0, [pc, #64]	; (d41a8 <setup+0xec>)
   d4168:	f000 fbc0 	bl	d48ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d416c:	4a11      	ldr	r2, [pc, #68]	; (d41b4 <setup+0xf8>)
   d416e:	4912      	ldr	r1, [pc, #72]	; (d41b8 <setup+0xfc>)
   d4170:	480d      	ldr	r0, [pc, #52]	; (d41a8 <setup+0xec>)
   d4172:	f000 fbbb 	bl	d48ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("fw-version", version);

  Particle.function("forward", goForward);
  Particle.function("back", goBack);
  Particle.function("stop", stop);
}
   d4176:	b005      	add	sp, #20
   d4178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d417a:	bf00      	nop
   d417c:	2003e350 	.word	0x2003e350
   d4180:	2003e34c 	.word	0x2003e34c
   d4184:	2003e344 	.word	0x2003e344
   d4188:	2003e348 	.word	0x2003e348
   d418c:	2003e3c8 	.word	0x2003e3c8
   d4190:	000d657c 	.word	0x000d657c
   d4194:	2003e3c4 	.word	0x2003e3c4
   d4198:	000d40b7 	.word	0x000d40b7
   d419c:	000d6590 	.word	0x000d6590
   d41a0:	000d659b 	.word	0x000d659b
   d41a4:	000d4251 	.word	0x000d4251
   d41a8:	000d48c1 	.word	0x000d48c1
   d41ac:	000d65a3 	.word	0x000d65a3
   d41b0:	000d42a5 	.word	0x000d42a5
   d41b4:	000d65a8 	.word	0x000d65a8
   d41b8:	000d41d1 	.word	0x000d41d1

000d41bc <_Z3offv>:
  return 1;
}

void off()
{
  Mesh.publish("allOff", NULL);
   d41bc:	2200      	movs	r2, #0
   d41be:	4902      	ldr	r1, [pc, #8]	; (d41c8 <_Z3offv+0xc>)
   d41c0:	4802      	ldr	r0, [pc, #8]	; (d41cc <_Z3offv+0x10>)
   d41c2:	f001 b81d 	b.w	d5200 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d41c6:	bf00      	nop
   d41c8:	000d65ad 	.word	0x000d65ad
   d41cc:	2003e3ec 	.word	0x2003e3ec

000d41d0 <_Z4stop6String>:
  Particle.function("back", goBack);
  Particle.function("stop", stop);
}

int stop(String args)
{
   d41d0:	b508      	push	{r3, lr}
  off();
   d41d2:	f7ff fff3 	bl	d41bc <_Z3offv>

  return 1;
}
   d41d6:	2001      	movs	r0, #1
   d41d8:	bd08      	pop	{r3, pc}
	...

000d41dc <_Z6allOffv>:
{
  Mesh.publish("allOff", NULL);
}

void allOff()
{
   d41dc:	b508      	push	{r3, lr}
  analogWrite(leftReverse, 0);
   d41de:	4b0b      	ldr	r3, [pc, #44]	; (d420c <_Z6allOffv+0x30>)
   d41e0:	2100      	movs	r1, #0
   d41e2:	8818      	ldrh	r0, [r3, #0]
   d41e4:	f001 ffba 	bl	d615c <_Z11analogWritetm>
  analogWrite(leftForward, 0);
   d41e8:	4b09      	ldr	r3, [pc, #36]	; (d4210 <_Z6allOffv+0x34>)
   d41ea:	2100      	movs	r1, #0
   d41ec:	8818      	ldrh	r0, [r3, #0]
   d41ee:	f001 ffb5 	bl	d615c <_Z11analogWritetm>
  analogWrite(rightForward, 0);
   d41f2:	4b08      	ldr	r3, [pc, #32]	; (d4214 <_Z6allOffv+0x38>)
   d41f4:	2100      	movs	r1, #0
   d41f6:	8818      	ldrh	r0, [r3, #0]
   d41f8:	f001 ffb0 	bl	d615c <_Z11analogWritetm>
  analogWrite(rightReverse, 0);
   d41fc:	4b06      	ldr	r3, [pc, #24]	; (d4218 <_Z6allOffv+0x3c>)
   d41fe:	2100      	movs	r1, #0
   d4200:	8818      	ldrh	r0, [r3, #0]
}
   d4202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void allOff()
{
  analogWrite(leftReverse, 0);
  analogWrite(leftForward, 0);
  analogWrite(rightForward, 0);
  analogWrite(rightReverse, 0);
   d4206:	f001 bfa9 	b.w	d615c <_Z11analogWritetm>
   d420a:	bf00      	nop
   d420c:	2003e350 	.word	0x2003e350
   d4210:	2003e34c 	.word	0x2003e34c
   d4214:	2003e344 	.word	0x2003e344
   d4218:	2003e348 	.word	0x2003e348

000d421c <_Z7forwardv>:

  return 1;
}

void forward()
{
   d421c:	b510      	push	{r4, lr}
  analogWrite(rightForward, speed);
   d421e:	4b09      	ldr	r3, [pc, #36]	; (d4244 <_Z7forwardv+0x28>)
   d4220:	4c09      	ldr	r4, [pc, #36]	; (d4248 <_Z7forwardv+0x2c>)
   d4222:	8818      	ldrh	r0, [r3, #0]
   d4224:	6821      	ldr	r1, [r4, #0]
   d4226:	f001 ff99 	bl	d615c <_Z11analogWritetm>
  analogWrite(leftForward, speed);
   d422a:	4b08      	ldr	r3, [pc, #32]	; (d424c <_Z7forwardv+0x30>)
   d422c:	6821      	ldr	r1, [r4, #0]
   d422e:	8818      	ldrh	r0, [r3, #0]
   d4230:	f001 ff94 	bl	d615c <_Z11analogWritetm>

  delay(1000);
   d4234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4238:	f000 faf6 	bl	d4828 <delay>

  allOff();
}
   d423c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(rightForward, speed);
  analogWrite(leftForward, speed);

  delay(1000);

  allOff();
   d4240:	f7ff bfcc 	b.w	d41dc <_Z6allOffv>
   d4244:	2003e344 	.word	0x2003e344
   d4248:	2003e354 	.word	0x2003e354
   d424c:	2003e34c 	.word	0x2003e34c

000d4250 <_Z9goForward6String>:
  analogWrite(rightForward, 0);
  analogWrite(rightReverse, 0);
}

int goForward(String args)
{
   d4250:	b508      	push	{r3, lr}
  off();
   d4252:	f7ff ffb3 	bl	d41bc <_Z3offv>

  Mesh.publish("goForward", NULL);
   d4256:	2200      	movs	r2, #0
   d4258:	4903      	ldr	r1, [pc, #12]	; (d4268 <_Z9goForward6String+0x18>)
   d425a:	4804      	ldr	r0, [pc, #16]	; (d426c <_Z9goForward6String+0x1c>)
   d425c:	f000 ffd0 	bl	d5200 <_ZN5spark11MeshPublish7publishEPKcS2_>
  forward();
   d4260:	f7ff ffdc 	bl	d421c <_Z7forwardv>

  return 1;
}
   d4264:	2001      	movs	r0, #1
   d4266:	bd08      	pop	{r3, pc}
   d4268:	000d65b4 	.word	0x000d65b4
   d426c:	2003e3ec 	.word	0x2003e3ec

000d4270 <_Z4backv>:

  return 1;
}

void back()
{
   d4270:	b510      	push	{r4, lr}
  analogWrite(rightReverse, speed);
   d4272:	4b09      	ldr	r3, [pc, #36]	; (d4298 <_Z4backv+0x28>)
   d4274:	4c09      	ldr	r4, [pc, #36]	; (d429c <_Z4backv+0x2c>)
   d4276:	8818      	ldrh	r0, [r3, #0]
   d4278:	6821      	ldr	r1, [r4, #0]
   d427a:	f001 ff6f 	bl	d615c <_Z11analogWritetm>
  analogWrite(leftReverse, speed);
   d427e:	4b08      	ldr	r3, [pc, #32]	; (d42a0 <_Z4backv+0x30>)
   d4280:	6821      	ldr	r1, [r4, #0]
   d4282:	8818      	ldrh	r0, [r3, #0]
   d4284:	f001 ff6a 	bl	d615c <_Z11analogWritetm>

  delay(1000);
   d4288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d428c:	f000 facc 	bl	d4828 <delay>

  allOff();
}
   d4290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  analogWrite(rightReverse, speed);
  analogWrite(leftReverse, speed);

  delay(1000);

  allOff();
   d4294:	f7ff bfa2 	b.w	d41dc <_Z6allOffv>
   d4298:	2003e348 	.word	0x2003e348
   d429c:	2003e354 	.word	0x2003e354
   d42a0:	2003e350 	.word	0x2003e350

000d42a4 <_Z6goBack6String>:

  allOff();
}

int goBack(String args)
{
   d42a4:	b508      	push	{r3, lr}
  off();
   d42a6:	f7ff ff89 	bl	d41bc <_Z3offv>

  Mesh.publish("goBack", NULL);
   d42aa:	2200      	movs	r2, #0
   d42ac:	4903      	ldr	r1, [pc, #12]	; (d42bc <_Z6goBack6String+0x18>)
   d42ae:	4804      	ldr	r0, [pc, #16]	; (d42c0 <_Z6goBack6String+0x1c>)
   d42b0:	f000 ffa6 	bl	d5200 <_ZN5spark11MeshPublish7publishEPKcS2_>
  back();
   d42b4:	f7ff ffdc 	bl	d4270 <_Z4backv>

  return 1;
}
   d42b8:	2001      	movs	r0, #1
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	000d65be 	.word	0x000d65be
   d42c0:	2003e3ec 	.word	0x2003e3ec

000d42c4 <loop>:

  allOff();
}

void loop()
{
   d42c4:	4770      	bx	lr
	...

000d42c8 <_GLOBAL__sub_I_leftReverse>:
    lastLeftRVal = leftRVal;

    Mesh.publish("leftR", String(leftRVal));
    Particle.publish("leftR", String(leftRVal));
  }*/
   d42c8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d42ca:	4b08      	ldr	r3, [pc, #32]	; (d42ec <_GLOBAL__sub_I_leftReverse+0x24>)
int rightForward = A2;
int rightReverse = A3;

int speed = 85;
int lastLeftRVal = 0;
String version = "v0.8";
   d42cc:	4c08      	ldr	r4, [pc, #32]	; (d42f0 <_GLOBAL__sub_I_leftReverse+0x28>)
   d42ce:	2200      	movs	r2, #0
   d42d0:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42d2:	f000 f855 	bl	d4380 <HAL_Pin_Map>
   d42d6:	4907      	ldr	r1, [pc, #28]	; (d42f4 <_GLOBAL__sub_I_leftReverse+0x2c>)
   d42d8:	4620      	mov	r0, r4
   d42da:	f001 f988 	bl	d55ee <_ZN6StringC1EPK19__FlashStringHelper>
   d42de:	4620      	mov	r0, r4
   d42e0:	4a05      	ldr	r2, [pc, #20]	; (d42f8 <_GLOBAL__sub_I_leftReverse+0x30>)
   d42e2:	4906      	ldr	r1, [pc, #24]	; (d42fc <_GLOBAL__sub_I_leftReverse+0x34>)
    lastLeftRVal = leftRVal;

    Mesh.publish("leftR", String(leftRVal));
    Particle.publish("leftR", String(leftRVal));
  }*/
   d42e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int rightForward = A2;
int rightReverse = A3;

int speed = 85;
int lastLeftRVal = 0;
String version = "v0.8";
   d42e8:	f001 bfa0 	b.w	d622c <__aeabi_atexit>
   d42ec:	2003e3c4 	.word	0x2003e3c4
   d42f0:	2003e3c8 	.word	0x2003e3c8
   d42f4:	000d65c5 	.word	0x000d65c5
   d42f8:	2003e3c0 	.word	0x2003e3c0
   d42fc:	000d5561 	.word	0x000d5561

000d4300 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <os_thread_is_current+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	689b      	ldr	r3, [r3, #8]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030248 	.word	0x00030248

000d4310 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <os_thread_join+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	691b      	ldr	r3, [r3, #16]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030248 	.word	0x00030248

000d4320 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <os_thread_cleanup+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	695b      	ldr	r3, [r3, #20]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030248 	.word	0x00030248

000d4330 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <os_mutex_create+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030248 	.word	0x00030248

000d4340 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <os_mutex_recursive_create+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030248 	.word	0x00030248

000d4350 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <os_mutex_recursive_lock+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030248 	.word	0x00030248

000d4360 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <os_mutex_recursive_unlock+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030248 	.word	0x00030248

000d4370 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	695b      	ldr	r3, [r3, #20]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030218 	.word	0x00030218

000d4380 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_Pin_Map+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	681b      	ldr	r3, [r3, #0]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003022c 	.word	0x0003022c

000d4390 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_Validate_Pin_Function+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	685b      	ldr	r3, [r3, #4]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003022c 	.word	0x0003022c

000d43a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_Pin_Mode+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	689b      	ldr	r3, [r3, #8]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003022c 	.word	0x0003022c

000d43b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_Get_Pin_Mode+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	68db      	ldr	r3, [r3, #12]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003022c 	.word	0x0003022c

000d43c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_GPIO_Write+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	691b      	ldr	r3, [r3, #16]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003022c 	.word	0x0003022c

000d43d0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_DAC_Write+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003022c 	.word	0x0003022c

000d43e0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_PWM_Write_Ext+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	0003022c 	.word	0x0003022c

000d43f0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_I2C_Write_Data+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6a1b      	ldr	r3, [r3, #32]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030228 	.word	0x00030228

000d4400 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_I2C_Available_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030228 	.word	0x00030228

000d4410 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_I2C_Read_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030228 	.word	0x00030228

000d4420 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_I2C_Peek_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030228 	.word	0x00030228

000d4430 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_I2C_Flush_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030228 	.word	0x00030228

000d4440 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_I2C_Is_Enabled+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030228 	.word	0x00030228

000d4450 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_I2C_Init+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030228 	.word	0x00030228

000d4460 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <if_name_to_index+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	691b      	ldr	r3, [r3, #16]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003026c 	.word	0x0003026c

000d4470 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <if_index_to_name+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	695b      	ldr	r3, [r3, #20]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003026c 	.word	0x0003026c

000d4480 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <if_get_by_index+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	699b      	ldr	r3, [r3, #24]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003026c 	.word	0x0003026c

000d4490 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <if_get_addrs+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003026c 	.word	0x0003026c

000d44a0 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <if_free_if_addrs+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003026c 	.word	0x0003026c

000d44b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <inet_inet_ntop+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	695b      	ldr	r3, [r3, #20]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030264 	.word	0x00030264

000d44c0 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <inet_inet_pton+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	699b      	ldr	r3, [r3, #24]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030264 	.word	0x00030264

000d44d0 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <inet_htonl+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	6a1b      	ldr	r3, [r3, #32]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030264 	.word	0x00030264

000d44e0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <inet_ntohs+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030264 	.word	0x00030264

000d44f0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <inet_htons+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030264 	.word	0x00030264

000d4500 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <netdb_freeaddrinfo+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	689b      	ldr	r3, [r3, #8]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030268 	.word	0x00030268

000d4510 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <netdb_getaddrinfo+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	68db      	ldr	r3, [r3, #12]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030268 	.word	0x00030268

000d4520 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <sock_bind+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	685b      	ldr	r3, [r3, #4]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030238 	.word	0x00030238

000d4530 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <sock_setsockopt+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	699b      	ldr	r3, [r3, #24]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030238 	.word	0x00030238

000d4540 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <sock_close+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	69db      	ldr	r3, [r3, #28]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030238 	.word	0x00030238

000d4550 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <sock_recvfrom+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030238 	.word	0x00030238

000d4560 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <sock_sendto+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030238 	.word	0x00030238

000d4570 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <sock_socket+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030238 	.word	0x00030238

000d4580 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_SPI_Init+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	69db      	ldr	r3, [r3, #28]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030230 	.word	0x00030230

000d4590 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_SPI_Is_Enabled+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6a1b      	ldr	r3, [r3, #32]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030230 	.word	0x00030230

000d45a0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_USART_Init+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	681b      	ldr	r3, [r3, #0]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003023c 	.word	0x0003023c

000d45b0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USART_Write_Data+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	68db      	ldr	r3, [r3, #12]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003023c 	.word	0x0003023c

000d45c0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_USART_Available_Data+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	691b      	ldr	r3, [r3, #16]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003023c 	.word	0x0003023c

000d45d0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_USART_Read_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	695b      	ldr	r3, [r3, #20]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003023c 	.word	0x0003023c

000d45e0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_USART_Peek_Data+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	699b      	ldr	r3, [r3, #24]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003023c 	.word	0x0003023c

000d45f0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_USART_Flush_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	69db      	ldr	r3, [r3, #28]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003023c 	.word	0x0003023c

000d4600 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_USART_Is_Enabled+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6a1b      	ldr	r3, [r3, #32]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003023c 	.word	0x0003023c

000d4610 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_USART_Available_Data_For_Write+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003023c 	.word	0x0003023c

000d4620 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_USB_USART_Init+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	681b      	ldr	r3, [r3, #0]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003024c 	.word	0x0003024c

000d4630 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_USB_USART_Available_Data+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	691b      	ldr	r3, [r3, #16]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003024c 	.word	0x0003024c

000d4640 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	695b      	ldr	r3, [r3, #20]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	0003024c 	.word	0x0003024c

000d4650 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_USB_USART_Receive_Data+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	699b      	ldr	r3, [r3, #24]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	0003024c 	.word	0x0003024c

000d4660 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_USB_USART_Send_Data+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	69db      	ldr	r3, [r3, #28]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003024c 	.word	0x0003024c

000d4670 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_USB_USART_Flush_Data+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6a1b      	ldr	r3, [r3, #32]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	0003024c 	.word	0x0003024c

000d4680 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <log_message+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030260 	.word	0x00030260

000d4690 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <set_system_mode+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	685b      	ldr	r3, [r3, #4]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030220 	.word	0x00030220

000d46a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <system_delay_ms+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030220 	.word	0x00030220

000d46b0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <application_thread_current+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030220 	.word	0x00030220

000d46c0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <application_thread_invoke+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030220 	.word	0x00030220

000d46d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b03      	ldr	r3, [pc, #12]	; (d46e0 <system_ctrl_set_app_request_handler+0x10>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46da:	9301      	str	r3, [sp, #4]
   d46dc:	bd08      	pop	{r3, pc}
   d46de:	0000      	.short	0x0000
   d46e0:	00030220 	.word	0x00030220

000d46e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b03      	ldr	r3, [pc, #12]	; (d46f4 <system_ctrl_set_result+0x10>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46ee:	9301      	str	r3, [sp, #4]
   d46f0:	bd08      	pop	{r3, pc}
   d46f2:	0000      	.short	0x0000
   d46f4:	00030220 	.word	0x00030220

000d46f8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <spark_variable+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	681b      	ldr	r3, [r3, #0]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030244 	.word	0x00030244

000d4708 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <spark_function+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	685b      	ldr	r3, [r3, #4]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030244 	.word	0x00030244

000d4718 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <spark_send_event+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6a1b      	ldr	r3, [r3, #32]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030244 	.word	0x00030244

000d4728 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <spark_set_random_seed_from_cloud_handler+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030244 	.word	0x00030244

000d4738 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <network_connect+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	685b      	ldr	r3, [r3, #4]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030240 	.word	0x00030240

000d4748 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <network_connecting+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	689b      	ldr	r3, [r3, #8]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030240 	.word	0x00030240

000d4758 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <network_disconnect+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	68db      	ldr	r3, [r3, #12]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030240 	.word	0x00030240

000d4768 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <network_ready+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	691b      	ldr	r3, [r3, #16]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030240 	.word	0x00030240

000d4778 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <network_on+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	695b      	ldr	r3, [r3, #20]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030240 	.word	0x00030240

000d4788 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <network_off+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	699b      	ldr	r3, [r3, #24]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030240 	.word	0x00030240

000d4798 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <network_listen+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	69db      	ldr	r3, [r3, #28]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030240 	.word	0x00030240

000d47a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <network_listening+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	6a1b      	ldr	r3, [r3, #32]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030240 	.word	0x00030240

000d47b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <network_set_listen_timeout+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030240 	.word	0x00030240

000d47c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <network_get_listen_timeout+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030240 	.word	0x00030240

000d47d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <malloc+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	681b      	ldr	r3, [r3, #0]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003021c 	.word	0x0003021c

000d47e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <free+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	685b      	ldr	r3, [r3, #4]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003021c 	.word	0x0003021c

000d47f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <realloc+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	689b      	ldr	r3, [r3, #8]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	0003021c 	.word	0x0003021c

000d4808 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <abort+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003021c 	.word	0x0003021c

000d4818 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <_malloc_r+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003021c 	.word	0x0003021c

000d4828 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4828:	2100      	movs	r1, #0
   d482a:	f7ff bf39 	b.w	d46a0 <system_delay_ms>

000d482e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d482e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4830:	6883      	ldr	r3, [r0, #8]
   d4832:	4604      	mov	r4, r0
   d4834:	b90b      	cbnz	r3, d483a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4836:	f001 fcfe 	bl	d6236 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d483a:	68c3      	ldr	r3, [r0, #12]
   d483c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d483e:	68a3      	ldr	r3, [r4, #8]
   d4840:	b11b      	cbz	r3, d484a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4842:	2203      	movs	r2, #3
   d4844:	4621      	mov	r1, r4
   d4846:	4620      	mov	r0, r4
   d4848:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d484a:	4620      	mov	r0, r4
}
   d484c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4850:	f7ff bc25 	b.w	d409e <_ZdlPv>

000d4854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4854:	4770      	bx	lr

000d4856 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4856:	2000      	movs	r0, #0
   d4858:	4770      	bx	lr

000d485a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d485a:	b510      	push	{r4, lr}
   d485c:	4604      	mov	r4, r0
   d485e:	f7ff fc1e 	bl	d409e <_ZdlPv>
   d4862:	4620      	mov	r0, r4
   d4864:	bd10      	pop	{r4, pc}

000d4866 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4866:	b508      	push	{r3, lr}
      { delete this; }
   d4868:	b108      	cbz	r0, d486e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d486a:	f7ff fff6 	bl	d485a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d486e:	bd08      	pop	{r3, pc}

000d4870 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4870:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4872:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4874:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4876:	b113      	cbz	r3, d487e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4878:	2203      	movs	r2, #3
   d487a:	4601      	mov	r1, r0
   d487c:	4798      	blx	r3
    }
   d487e:	4620      	mov	r0, r4
   d4880:	bd10      	pop	{r4, pc}

000d4882 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4882:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4884:	68c4      	ldr	r4, [r0, #12]
   d4886:	b1d4      	cbz	r4, d48be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4888:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d488a:	2b02      	cmp	r3, #2
   d488c:	d102      	bne.n	d4894 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d488e:	68e0      	ldr	r0, [r4, #12]
   d4890:	f7ff ffaa 	bl	d47e8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4894:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4896:	b12d      	cbz	r5, d48a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4898:	4628      	mov	r0, r5
   d489a:	f7ff ffe9 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
   d489e:	4628      	mov	r0, r5
   d48a0:	f7ff fbfd 	bl	d409e <_ZdlPv>
   d48a4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d48a6:	b12d      	cbz	r5, d48b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d48a8:	4628      	mov	r0, r5
   d48aa:	f7ff ffe1 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
   d48ae:	4628      	mov	r0, r5
   d48b0:	f7ff fbf5 	bl	d409e <_ZdlPv>
   d48b4:	4620      	mov	r0, r4
   d48b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d48ba:	f7ff bbf0 	b.w	d409e <_ZdlPv>
   d48be:	bd38      	pop	{r3, r4, r5, pc}

000d48c0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d48c0:	b510      	push	{r4, lr}
   d48c2:	b088      	sub	sp, #32
   d48c4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d48c6:	4668      	mov	r0, sp
   d48c8:	f000 fe91 	bl	d55ee <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d48cc:	4669      	mov	r1, sp
   d48ce:	a804      	add	r0, sp, #16
   d48d0:	f000 feaf 	bl	d5632 <_ZN6StringC1ERKS_>
   d48d4:	a804      	add	r0, sp, #16
   d48d6:	47a0      	blx	r4
   d48d8:	4604      	mov	r4, r0
   d48da:	a804      	add	r0, sp, #16
   d48dc:	f000 fe40 	bl	d5560 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d48e0:	4668      	mov	r0, sp
   d48e2:	f000 fe3d 	bl	d5560 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d48e6:	4620      	mov	r0, r4
   d48e8:	b008      	add	sp, #32
   d48ea:	bd10      	pop	{r4, pc}

000d48ec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d48ee:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d48f0:	b085      	sub	sp, #20
   d48f2:	4607      	mov	r7, r0
   d48f4:	460e      	mov	r6, r1
   d48f6:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d48f8:	2100      	movs	r1, #0
   d48fa:	4622      	mov	r2, r4
   d48fc:	4668      	mov	r0, sp
   d48fe:	f001 fdfe 	bl	d64fe <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4902:	2200      	movs	r2, #0
   d4904:	4669      	mov	r1, sp
   d4906:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d4908:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d490c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d490e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4910:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4912:	f7ff fef9 	bl	d4708 <spark_function>
}
   d4916:	b005      	add	sp, #20
   d4918:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d491a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d491c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d491e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4920:	b17c      	cbz	r4, d4942 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4922:	6863      	ldr	r3, [r4, #4]
   d4924:	3b01      	subs	r3, #1
   d4926:	6063      	str	r3, [r4, #4]
   d4928:	b95b      	cbnz	r3, d4942 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d492a:	6823      	ldr	r3, [r4, #0]
   d492c:	4620      	mov	r0, r4
   d492e:	689b      	ldr	r3, [r3, #8]
   d4930:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4932:	68a3      	ldr	r3, [r4, #8]
   d4934:	3b01      	subs	r3, #1
   d4936:	60a3      	str	r3, [r4, #8]
   d4938:	b91b      	cbnz	r3, d4942 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d493a:	6823      	ldr	r3, [r4, #0]
   d493c:	4620      	mov	r0, r4
   d493e:	68db      	ldr	r3, [r3, #12]
   d4940:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4942:	4628      	mov	r0, r5
   d4944:	bd38      	pop	{r3, r4, r5, pc}

000d4946 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4946:	b513      	push	{r0, r1, r4, lr}
   d4948:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d494a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d494e:	2300      	movs	r3, #0
   d4950:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4952:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4954:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4956:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4958:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d495a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d495c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d495e:	f7ff ffdc 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4962:	4620      	mov	r0, r4
   d4964:	b002      	add	sp, #8
   d4966:	bd10      	pop	{r4, pc}

000d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4968:	680b      	ldr	r3, [r1, #0]
   d496a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d496c:	b113      	cbz	r3, d4974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d496e:	685a      	ldr	r2, [r3, #4]
   d4970:	3201      	adds	r2, #1
   d4972:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4974:	4770      	bx	lr

000d4976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4978:	460c      	mov	r4, r1
   d497a:	ad02      	add	r5, sp, #8
   d497c:	f854 3b04 	ldr.w	r3, [r4], #4
   d4980:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4984:	4606      	mov	r6, r0
   d4986:	460f      	mov	r7, r1
   d4988:	a801      	add	r0, sp, #4
   d498a:	4621      	mov	r1, r4
   d498c:	f7ff ffec 	bl	d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4990:	4629      	mov	r1, r5
   d4992:	4630      	mov	r0, r6
   d4994:	f7ff ffd7 	bl	d4946 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4998:	a801      	add	r0, sp, #4
   d499a:	f7ff ffbe 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d499e:	4620      	mov	r0, r4
   d49a0:	f7ff ffbb 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d49a4:	4638      	mov	r0, r7
   d49a6:	f7ff fb7a 	bl	d409e <_ZdlPv>
        return p;
    }
   d49aa:	4630      	mov	r0, r6
   d49ac:	b003      	add	sp, #12
   d49ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d49b0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d49b0:	b513      	push	{r0, r1, r4, lr}
   d49b2:	460b      	mov	r3, r1
   d49b4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49b6:	c803      	ldmia	r0, {r0, r1}
   d49b8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d49bc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d49c0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d49c4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d49c8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d49cc:	b002      	add	sp, #8
   d49ce:	bd10      	pop	{r4, pc}

000d49d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49d0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d49d2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49d4:	b90a      	cbnz	r2, d49da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d49d6:	f001 fc2e 	bl	d6236 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d49da:	68c3      	ldr	r3, [r0, #12]
    }
   d49dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d49e0:	4718      	bx	r3

000d49e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d49e2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d49e4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d49e6:	f100 0110 	add.w	r1, r0, #16
   d49ea:	f7ff fff1 	bl	d49d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d49ee:	bd08      	pop	{r3, pc}

000d49f0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49f0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d49f2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49f4:	b90a      	cbnz	r2, d49fa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d49f6:	f001 fc1e 	bl	d6236 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d49fa:	68c3      	ldr	r3, [r0, #12]
    }
   d49fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a00:	4718      	bx	r3

000d4a02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a06:	f100 0110 	add.w	r1, r0, #16
   d4a0a:	f7ff fff1 	bl	d49f0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4a0e:	bd08      	pop	{r3, pc}

000d4a10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a10:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a12:	2300      	movs	r3, #0
   d4a14:	6083      	str	r3, [r0, #8]
   d4a16:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a18:	4604      	mov	r4, r0
   d4a1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4a1c:	b12b      	cbz	r3, d4a2a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4a1e:	2202      	movs	r2, #2
   d4a20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4a22:	68eb      	ldr	r3, [r5, #12]
   d4a24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4a26:	68ab      	ldr	r3, [r5, #8]
   d4a28:	60a3      	str	r3, [r4, #8]
	}
    }
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4a34:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4a38:	b086      	sub	sp, #24
   d4a3a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a3c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a40:	808b      	strh	r3, [r1, #4]
   d4a42:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a44:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4a46:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a4a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4a4c:	f04f 0002 	mov.w	r0, #2
   d4a50:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4a54:	4299      	cmp	r1, r3
   d4a56:	d103      	bne.n	d4a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4a58:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4a5c:	2d00      	cmp	r5, #0
   d4a5e:	d1f7      	bne.n	d4a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4a60:	d002      	beq.n	d4a68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4a62:	f88d 1000 	strb.w	r1, [sp]
   d4a66:	e06a      	b.n	d4b3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4a68:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4a6c:	bf1e      	ittt	ne
   d4a6e:	60e7      	strne	r7, [r4, #12]
   d4a70:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a72:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4a74:	2301      	movs	r3, #1
   d4a76:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4a7a:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4a7c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4a7e:	f104 0308 	add.w	r3, r4, #8
   d4a82:	f3bf 8f5f 	dmb	sy
   d4a86:	e853 6f00 	ldrex	r6, [r3]
   d4a8a:	e843 0200 	strex	r2, r0, [r3]
   d4a8e:	2a00      	cmp	r2, #0
   d4a90:	d1f9      	bne.n	d4a86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4a92:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4a96:	2e00      	cmp	r6, #0
   d4a98:	d051      	beq.n	d4b3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4a9a:	f7ff fe09 	bl	d46b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4a9e:	b120      	cbz	r0, d4aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4aa0:	4629      	mov	r1, r5
   d4aa2:	4630      	mov	r0, r6
   d4aa4:	f7ff ff94 	bl	d49d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4aa8:	e043      	b.n	d4b32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4aaa:	4631      	mov	r1, r6
   d4aac:	4668      	mov	r0, sp
   d4aae:	f7ff ffaf 	bl	d4a10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4ab2:	68e0      	ldr	r0, [r4, #12]
   d4ab4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4ab8:	b108      	cbz	r0, d4abe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4aba:	f001 fd31 	bl	d6520 <strdup>
   d4abe:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ac0:	2010      	movs	r0, #16
   d4ac2:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4ac6:	f7ff fae6 	bl	d4096 <_Znwj>
   d4aca:	4605      	mov	r5, r0
   d4acc:	b330      	cbz	r0, d4b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ace:	f04f 0800 	mov.w	r8, #0
   d4ad2:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ad6:	2018      	movs	r0, #24
   d4ad8:	f7ff fadd 	bl	d4096 <_Znwj>
   d4adc:	4604      	mov	r4, r0
   d4ade:	b1c0      	cbz	r0, d4b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ae0:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4ae4:	4601      	mov	r1, r0
   d4ae6:	4668      	mov	r0, sp
   d4ae8:	f7ff ff62 	bl	d49b0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4aec:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4aee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4af0:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4af2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4af4:	9202      	str	r2, [sp, #8]
   d4af6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4af8:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4afa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4afe:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b00:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4b04:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b08:	9b04      	ldr	r3, [sp, #16]
   d4b0a:	9203      	str	r2, [sp, #12]
   d4b0c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b0e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4b12:	4b0e      	ldr	r3, [pc, #56]	; (d4b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4b14:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4b16:	4b0e      	ldr	r3, [pc, #56]	; (d4b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b18:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4b1a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4b1c:	9804      	ldr	r0, [sp, #16]
   d4b1e:	f7ff fe63 	bl	d47e8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b22:	4668      	mov	r0, sp
   d4b24:	f7ff fea4 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4b28:	2200      	movs	r2, #0
   d4b2a:	4629      	mov	r1, r5
   d4b2c:	4809      	ldr	r0, [pc, #36]	; (d4b54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4b2e:	f7ff fdc7 	bl	d46c0 <application_thread_invoke>
   d4b32:	4630      	mov	r0, r6
   d4b34:	f7ff fe9c 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4b38:	4630      	mov	r0, r6
   d4b3a:	f7ff fab0 	bl	d409e <_ZdlPv>
   d4b3e:	4638      	mov	r0, r7
   d4b40:	f7ff fe52 	bl	d47e8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4b44:	b006      	add	sp, #24
   d4b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b4a:	bf00      	nop
   d4b4c:	000d49e3 	.word	0x000d49e3
   d4b50:	000d4c41 	.word	0x000d4c41
   d4b54:	000d482f 	.word	0x000d482f

000d4b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b5c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b5e:	ad07      	add	r5, sp, #28
   d4b60:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4b64:	4606      	mov	r6, r0
   d4b66:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4b68:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b6a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4b6c:	460f      	mov	r7, r1
   d4b6e:	4690      	mov	r8, r2
   d4b70:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b74:	f8c5 b004 	str.w	fp, [r5, #4]
   d4b78:	f8c5 b008 	str.w	fp, [r5, #8]
   d4b7c:	9307      	str	r3, [sp, #28]
   d4b7e:	f7ff fa8a 	bl	d4096 <_Znwj>
   d4b82:	4604      	mov	r4, r0
   d4b84:	b138      	cbz	r0, d4b96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4b86:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b8a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4b8e:	f8c0 b004 	str.w	fp, [r0, #4]
   d4b92:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b96:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b98:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4b9a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4b9c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4b9e:	f7ff fa7a 	bl	d4096 <_Znwj>
   d4ba2:	b128      	cbz	r0, d4bb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4ba4:	2301      	movs	r3, #1
   d4ba6:	6043      	str	r3, [r0, #4]
   d4ba8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4baa:	4b23      	ldr	r3, [pc, #140]	; (d4c38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4bac:	6003      	str	r3, [r0, #0]
   d4bae:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4bb0:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4bb2:	4b22      	ldr	r3, [pc, #136]	; (d4c3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4bb4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4bb6:	2008      	movs	r0, #8
   d4bb8:	f7ff fa6d 	bl	d4096 <_Znwj>
   d4bbc:	4604      	mov	r4, r0
   d4bbe:	b128      	cbz	r0, d4bcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bc0:	9b03      	ldr	r3, [sp, #12]
   d4bc2:	f840 3b04 	str.w	r3, [r0], #4
   d4bc6:	a904      	add	r1, sp, #16
   d4bc8:	f7ff fece 	bl	d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4bcc:	9500      	str	r5, [sp, #0]
   d4bce:	fa5f f38a 	uxtb.w	r3, sl
   d4bd2:	464a      	mov	r2, r9
   d4bd4:	4641      	mov	r1, r8
   d4bd6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4bd8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4bda:	f7ff fd9d 	bl	d4718 <spark_send_event>
   d4bde:	b9b8      	cbnz	r0, d4c10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4be0:	9b03      	ldr	r3, [sp, #12]
   d4be2:	785b      	ldrb	r3, [r3, #1]
   d4be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4be8:	b993      	cbnz	r3, d4c10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4bea:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4bee:	a905      	add	r1, sp, #20
   d4bf0:	a803      	add	r0, sp, #12
   d4bf2:	9205      	str	r2, [sp, #20]
   d4bf4:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4bf8:	f7ff ff1a 	bl	d4a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4bfc:	9805      	ldr	r0, [sp, #20]
   d4bfe:	f7ff fdf3 	bl	d47e8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4c02:	a805      	add	r0, sp, #20
   d4c04:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4c06:	f7ff feb6 	bl	d4976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c0a:	a806      	add	r0, sp, #24
   d4c0c:	f7ff fe85 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c10:	9b03      	ldr	r3, [sp, #12]
   d4c12:	9305      	str	r3, [sp, #20]
   d4c14:	a904      	add	r1, sp, #16
   d4c16:	a806      	add	r0, sp, #24
   d4c18:	f7ff fea6 	bl	d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4c1c:	a905      	add	r1, sp, #20
   d4c1e:	4630      	mov	r0, r6
   d4c20:	f7ff fe91 	bl	d4946 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c24:	a806      	add	r0, sp, #24
   d4c26:	f7ff fe78 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c2a:	a804      	add	r0, sp, #16
   d4c2c:	f7ff fe75 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4c30:	4630      	mov	r0, r6
   d4c32:	b00b      	add	sp, #44	; 0x2c
   d4c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c38:	000d65d4 	.word	0x000d65d4
   d4c3c:	000d4da9 	.word	0x000d4da9

000d4c40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c46:	d006      	beq.n	d4c56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4c48:	2a03      	cmp	r2, #3
   d4c4a:	d017      	beq.n	d4c7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4c4c:	2a01      	cmp	r2, #1
   d4c4e:	d120      	bne.n	d4c92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c52:	6003      	str	r3, [r0, #0]
	      break;
   d4c54:	e01d      	b.n	d4c92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c56:	2018      	movs	r0, #24
   d4c58:	680e      	ldr	r6, [r1, #0]
   d4c5a:	f7ff fa1c 	bl	d4096 <_Znwj>
   d4c5e:	4605      	mov	r5, r0
   d4c60:	b150      	cbz	r0, d4c78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4c62:	4631      	mov	r1, r6
   d4c64:	f7ff fed4 	bl	d4a10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4c68:	6930      	ldr	r0, [r6, #16]
   d4c6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4c6e:	b108      	cbz	r0, d4c74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4c70:	f001 fc56 	bl	d6520 <strdup>
   d4c74:	6128      	str	r0, [r5, #16]
   d4c76:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c78:	6025      	str	r5, [r4, #0]
   d4c7a:	e00a      	b.n	d4c92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c7c:	6804      	ldr	r4, [r0, #0]
   d4c7e:	b144      	cbz	r4, d4c92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4c80:	6920      	ldr	r0, [r4, #16]
   d4c82:	f7ff fdb1 	bl	d47e8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff fdf2 	bl	d4870 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4c8c:	4620      	mov	r0, r4
   d4c8e:	f7ff fa06 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4c92:	2000      	movs	r0, #0
   d4c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c96 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c96:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c98:	2300      	movs	r3, #0
   d4c9a:	6083      	str	r3, [r0, #8]
   d4c9c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4c9e:	4604      	mov	r4, r0
   d4ca0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4ca2:	b12b      	cbz	r3, d4cb0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ca4:	2202      	movs	r2, #2
   d4ca6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ca8:	68eb      	ldr	r3, [r5, #12]
   d4caa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4cac:	68ab      	ldr	r3, [r5, #8]
   d4cae:	60a3      	str	r3, [r4, #8]
	}
    }
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	bd38      	pop	{r3, r4, r5, pc}

000d4cb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cb4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4cb6:	b570      	push	{r4, r5, r6, lr}
   d4cb8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cba:	d006      	beq.n	d4cca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4cbc:	2a03      	cmp	r2, #3
   d4cbe:	d011      	beq.n	d4ce4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4cc0:	2a01      	cmp	r2, #1
   d4cc2:	d117      	bne.n	d4cf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cc4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4cc6:	6003      	str	r3, [r0, #0]
	      break;
   d4cc8:	e014      	b.n	d4cf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4cca:	2014      	movs	r0, #20
   d4ccc:	680e      	ldr	r6, [r1, #0]
   d4cce:	f7ff f9e2 	bl	d4096 <_Znwj>
   d4cd2:	4605      	mov	r5, r0
   d4cd4:	b120      	cbz	r0, d4ce0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4cd6:	4631      	mov	r1, r6
   d4cd8:	f7ff ffdd 	bl	d4c96 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4cdc:	7c33      	ldrb	r3, [r6, #16]
   d4cde:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4ce0:	6025      	str	r5, [r4, #0]
   d4ce2:	e007      	b.n	d4cf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ce4:	6804      	ldr	r4, [r0, #0]
   d4ce6:	b12c      	cbz	r4, d4cf4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ce8:	4620      	mov	r0, r4
   d4cea:	f7ff fdc1 	bl	d4870 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4cee:	4620      	mov	r0, r4
   d4cf0:	f7ff f9d5 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4cf4:	2000      	movs	r0, #0
   d4cf6:	bd70      	pop	{r4, r5, r6, pc}

000d4cf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4cf8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4cfa:	2300      	movs	r3, #0
   d4cfc:	b087      	sub	sp, #28
   d4cfe:	460c      	mov	r4, r1
   d4d00:	f3bf 8f5f 	dmb	sy
   d4d04:	e850 6f00 	ldrex	r6, [r0]
   d4d08:	e840 3200 	strex	r2, r3, [r0]
   d4d0c:	2a00      	cmp	r2, #0
   d4d0e:	d1f9      	bne.n	d4d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4d10:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4d14:	2e00      	cmp	r6, #0
   d4d16:	d03e      	beq.n	d4d96 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4d18:	4618      	mov	r0, r3
   d4d1a:	f7ff fcc9 	bl	d46b0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4d1e:	4607      	mov	r7, r0
   d4d20:	b120      	cbz	r0, d4d2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4d22:	4621      	mov	r1, r4
   d4d24:	4630      	mov	r0, r6
   d4d26:	f7ff fe63 	bl	d49f0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4d2a:	e02e      	b.n	d4d8a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d2c:	4631      	mov	r1, r6
   d4d2e:	a801      	add	r0, sp, #4
   d4d30:	f7ff ffb1 	bl	d4c96 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d34:	7823      	ldrb	r3, [r4, #0]
   d4d36:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d3a:	2010      	movs	r0, #16
   d4d3c:	f7ff f9ab 	bl	d4096 <_Znwj>
   d4d40:	4605      	mov	r5, r0
   d4d42:	b1d0      	cbz	r0, d4d7a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d44:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d46:	2014      	movs	r0, #20
   d4d48:	f7ff f9a5 	bl	d4096 <_Znwj>
   d4d4c:	4604      	mov	r4, r0
   d4d4e:	b178      	cbz	r0, d4d70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d50:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4d52:	4601      	mov	r1, r0
   d4d54:	a801      	add	r0, sp, #4
   d4d56:	f7ff fe2b 	bl	d49b0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d5a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4d5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d5e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d60:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4d62:	9203      	str	r2, [sp, #12]
   d4d64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d66:	60e3      	str	r3, [r4, #12]
   d4d68:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4d6c:	9204      	str	r2, [sp, #16]
   d4d6e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4d70:	4b0a      	ldr	r3, [pc, #40]	; (d4d9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4d72:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d74:	4b0a      	ldr	r3, [pc, #40]	; (d4da0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d76:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4d78:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d7a:	a801      	add	r0, sp, #4
   d4d7c:	f7ff fd78 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d80:	2200      	movs	r2, #0
   d4d82:	4629      	mov	r1, r5
   d4d84:	4807      	ldr	r0, [pc, #28]	; (d4da4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4d86:	f7ff fc9b 	bl	d46c0 <application_thread_invoke>
   d4d8a:	4630      	mov	r0, r6
   d4d8c:	f7ff fd70 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4d90:	4630      	mov	r0, r6
   d4d92:	f7ff f984 	bl	d409e <_ZdlPv>
        }
    }
   d4d96:	b007      	add	sp, #28
   d4d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d9a:	bf00      	nop
   d4d9c:	000d4a03 	.word	0x000d4a03
   d4da0:	000d4cb5 	.word	0x000d4cb5
   d4da4:	000d482f 	.word	0x000d482f

000d4da8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4da8:	b530      	push	{r4, r5, lr}
   d4daa:	b085      	sub	sp, #20
   d4dac:	4604      	mov	r4, r0
   d4dae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4db0:	4668      	mov	r0, sp
   d4db2:	4611      	mov	r1, r2
   d4db4:	f7ff fddf 	bl	d4976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4db8:	b17c      	cbz	r4, d4dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4dba:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4dbc:	4628      	mov	r0, r5
   d4dbe:	b10d      	cbz	r5, d4dc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4dc0:	f001 fbae 	bl	d6520 <strdup>
   d4dc4:	9002      	str	r0, [sp, #8]
   d4dc6:	a902      	add	r1, sp, #8
   d4dc8:	4668      	mov	r0, sp
   d4dca:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4dce:	f7ff fe2f 	bl	d4a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4dd2:	9802      	ldr	r0, [sp, #8]
   d4dd4:	f7ff fd08 	bl	d47e8 <free>
   d4dd8:	e01d      	b.n	d4e16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4dda:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ddc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4de0:	f04f 0201 	mov.w	r2, #1
   d4de4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4de8:	42a3      	cmp	r3, r4
   d4dea:	d103      	bne.n	d4df4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4dec:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4df0:	2900      	cmp	r1, #0
   d4df2:	d1f7      	bne.n	d4de4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4df4:	d002      	beq.n	d4dfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4df6:	f88d 3008 	strb.w	r3, [sp, #8]
   d4dfa:	e00c      	b.n	d4e16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4dfc:	f110 010c 	adds.w	r1, r0, #12
   d4e00:	f04f 0301 	mov.w	r3, #1
   d4e04:	bf18      	it	ne
   d4e06:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e08:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4e0c:	3004      	adds	r0, #4
   d4e0e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4e12:	f7ff ff71 	bl	d4cf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4e16:	a801      	add	r0, sp, #4
   d4e18:	f7ff fd7f 	bl	d491a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4e1c:	b005      	add	sp, #20
   d4e1e:	bd30      	pop	{r4, r5, pc}

000d4e20 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e20:	2200      	movs	r2, #0
   d4e22:	4611      	mov	r1, r2
   d4e24:	6840      	ldr	r0, [r0, #4]
   d4e26:	f7ff bcbf 	b.w	d47a8 <network_listening>

000d4e2a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e2a:	2200      	movs	r2, #0
   d4e2c:	4611      	mov	r1, r2
   d4e2e:	6840      	ldr	r0, [r0, #4]
   d4e30:	f7ff bcca 	b.w	d47c8 <network_get_listen_timeout>

000d4e34 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e34:	2200      	movs	r2, #0
   d4e36:	6840      	ldr	r0, [r0, #4]
   d4e38:	f7ff bcbe 	b.w	d47b8 <network_set_listen_timeout>

000d4e3c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	f081 0101 	eor.w	r1, r1, #1
   d4e42:	6840      	ldr	r0, [r0, #4]
   d4e44:	f7ff bca8 	b.w	d4798 <network_listen>

000d4e48 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4e48:	2300      	movs	r3, #0
   d4e4a:	461a      	mov	r2, r3
   d4e4c:	4619      	mov	r1, r3
   d4e4e:	6840      	ldr	r0, [r0, #4]
   d4e50:	f7ff bc9a 	b.w	d4788 <network_off>

000d4e54 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e54:	2300      	movs	r3, #0
   d4e56:	461a      	mov	r2, r3
   d4e58:	4619      	mov	r1, r3
   d4e5a:	6840      	ldr	r0, [r0, #4]
   d4e5c:	f7ff bc8c 	b.w	d4778 <network_on>

000d4e60 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e60:	2200      	movs	r2, #0
   d4e62:	4611      	mov	r1, r2
   d4e64:	6840      	ldr	r0, [r0, #4]
   d4e66:	f7ff bc7f 	b.w	d4768 <network_ready>

000d4e6a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e6a:	2200      	movs	r2, #0
   d4e6c:	4611      	mov	r1, r2
   d4e6e:	6840      	ldr	r0, [r0, #4]
   d4e70:	f7ff bc6a 	b.w	d4748 <network_connecting>

000d4e74 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e74:	2200      	movs	r2, #0
   d4e76:	2102      	movs	r1, #2
   d4e78:	6840      	ldr	r0, [r0, #4]
   d4e7a:	f7ff bc6d 	b.w	d4758 <network_disconnect>

000d4e7e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e7e:	2300      	movs	r3, #0
   d4e80:	461a      	mov	r2, r3
   d4e82:	6840      	ldr	r0, [r0, #4]
   d4e84:	f7ff bc58 	b.w	d4738 <network_connect>

000d4e88 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e88:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e8a:	2203      	movs	r2, #3
   d4e8c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e8e:	4a02      	ldr	r2, [pc, #8]	; (d4e98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e90:	601a      	str	r2, [r3, #0]
   d4e92:	4770      	bx	lr
   d4e94:	2003e3d8 	.word	0x2003e3d8
   d4e98:	000d65f0 	.word	0x000d65f0

000d4e9c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4e9c:	4770      	bx	lr

000d4e9e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ea0:	4606      	mov	r6, r0
   d4ea2:	4615      	mov	r5, r2
   d4ea4:	460c      	mov	r4, r1
   d4ea6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ea8:	42bc      	cmp	r4, r7
   d4eaa:	d006      	beq.n	d4eba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4eac:	6833      	ldr	r3, [r6, #0]
   d4eae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4eb2:	689b      	ldr	r3, [r3, #8]
   d4eb4:	4630      	mov	r0, r6
   d4eb6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4eb8:	e7f6      	b.n	d4ea8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4eba:	4628      	mov	r0, r5
   d4ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ebe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4ebe:	2200      	movs	r2, #0
   d4ec0:	7c00      	ldrb	r0, [r0, #16]
   d4ec2:	f7ff ba95 	b.w	d43f0 <HAL_I2C_Write_Data>

000d4ec6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4ec6:	2100      	movs	r1, #0
   d4ec8:	7c00      	ldrb	r0, [r0, #16]
   d4eca:	f7ff ba99 	b.w	d4400 <HAL_I2C_Available_Data>

000d4ece <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4ece:	2100      	movs	r1, #0
   d4ed0:	7c00      	ldrb	r0, [r0, #16]
   d4ed2:	f7ff ba9d 	b.w	d4410 <HAL_I2C_Read_Data>

000d4ed6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4ed6:	2100      	movs	r1, #0
   d4ed8:	7c00      	ldrb	r0, [r0, #16]
   d4eda:	f7ff baa1 	b.w	d4420 <HAL_I2C_Peek_Data>

000d4ede <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4ede:	2100      	movs	r1, #0
   d4ee0:	7c00      	ldrb	r0, [r0, #16]
   d4ee2:	f7ff baa5 	b.w	d4430 <HAL_I2C_Flush_Data>

000d4ee6 <_ZN7TwoWireD0Ev>:
   d4ee6:	b510      	push	{r4, lr}
   d4ee8:	4604      	mov	r4, r0
   d4eea:	f7ff f8d8 	bl	d409e <_ZdlPv>
   d4eee:	4620      	mov	r0, r4
   d4ef0:	bd10      	pop	{r4, pc}
	...

000d4ef4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ef4:	b510      	push	{r4, lr}
   d4ef6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4efc:	4608      	mov	r0, r1
   d4efe:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f00:	2100      	movs	r1, #0
   d4f02:	4b04      	ldr	r3, [pc, #16]	; (d4f14 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4f04:	7420      	strb	r0, [r4, #16]
   d4f06:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4f08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4f0a:	f7ff faa1 	bl	d4450 <HAL_I2C_Init>

}
   d4f0e:	4620      	mov	r0, r4
   d4f10:	bd10      	pop	{r4, pc}
   d4f12:	bf00      	nop
   d4f14:	000d6624 	.word	0x000d6624

000d4f18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4f18:	2100      	movs	r1, #0
   d4f1a:	7c00      	ldrb	r0, [r0, #16]
   d4f1c:	f7ff ba90 	b.w	d4440 <HAL_I2C_Is_Enabled>

000d4f20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f20:	4770      	bx	lr

000d4f22 <_ZN9IPAddressD0Ev>:
   d4f22:	b510      	push	{r4, lr}
   d4f24:	4604      	mov	r4, r0
   d4f26:	f7ff f8ba 	bl	d409e <_ZdlPv>
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	bd10      	pop	{r4, pc}

000d4f2e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4f30:	7d03      	ldrb	r3, [r0, #20]
   d4f32:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f34:	b08d      	sub	sp, #52	; 0x34
   d4f36:	460e      	mov	r6, r1
   d4f38:	f100 0704 	add.w	r7, r0, #4
   d4f3c:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4f40:	d002      	beq.n	d4f48 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4f42:	f100 0508 	add.w	r5, r0, #8
   d4f46:	e018      	b.n	d4f7a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f48:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f4a:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f4c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f50:	232f      	movs	r3, #47	; 0x2f
   d4f52:	462a      	mov	r2, r5
   d4f54:	200a      	movs	r0, #10
   d4f56:	f7ff faab 	bl	d44b0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f5a:	4628      	mov	r0, r5
   d4f5c:	f001 fafb 	bl	d6556 <strlen>
   d4f60:	6833      	ldr	r3, [r6, #0]
   d4f62:	4602      	mov	r2, r0
   d4f64:	68db      	ldr	r3, [r3, #12]
   d4f66:	4629      	mov	r1, r5
   d4f68:	4630      	mov	r0, r6
   d4f6a:	4798      	blx	r3
   d4f6c:	e00f      	b.n	d4f8e <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4f6e:	b124      	cbz	r4, d4f7a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4f70:	212e      	movs	r1, #46	; 0x2e
   d4f72:	4630      	mov	r0, r6
   d4f74:	f000 fa88 	bl	d5488 <_ZN5Print5printEc>
   d4f78:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4f7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4f7e:	220a      	movs	r2, #10
   d4f80:	4630      	mov	r0, r6
   d4f82:	f000 fab1 	bl	d54e8 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f86:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f88:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f8a:	d1f0      	bne.n	d4f6e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f8c:	4620      	mov	r0, r4
    }
    return n;
}
   d4f8e:	b00d      	add	sp, #52	; 0x34
   d4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4f94 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4f94:	b510      	push	{r4, lr}
   d4f96:	4b05      	ldr	r3, [pc, #20]	; (d4fac <_ZN9IPAddressC1Ev+0x18>)
   d4f98:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f9a:	2211      	movs	r2, #17
   d4f9c:	f840 3b04 	str.w	r3, [r0], #4
   d4fa0:	2100      	movs	r1, #0
   d4fa2:	f001 faac 	bl	d64fe <memset>
{
    clear();
}
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd10      	pop	{r4, pc}
   d4faa:	bf00      	nop
   d4fac:	000d664c 	.word	0x000d664c

000d4fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4fb0:	4603      	mov	r3, r0
   d4fb2:	4a07      	ldr	r2, [pc, #28]	; (d4fd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4fb4:	b510      	push	{r4, lr}
   d4fb6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4fba:	f101 0210 	add.w	r2, r1, #16
   d4fbe:	f851 4b04 	ldr.w	r4, [r1], #4
   d4fc2:	f843 4b04 	str.w	r4, [r3], #4
   d4fc6:	4291      	cmp	r1, r2
   d4fc8:	d1f9      	bne.n	d4fbe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4fca:	780a      	ldrb	r2, [r1, #0]
   d4fcc:	701a      	strb	r2, [r3, #0]
}
   d4fce:	bd10      	pop	{r4, pc}
   d4fd0:	000d664c 	.word	0x000d664c

000d4fd4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4fd4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4fd6:	2b04      	cmp	r3, #4
   d4fd8:	d101      	bne.n	d4fde <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4fda:	6840      	ldr	r0, [r0, #4]
   d4fdc:	e008      	b.n	d4ff0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4fde:	2b06      	cmp	r3, #6
   d4fe0:	d10a      	bne.n	d4ff8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d4fe2:	6843      	ldr	r3, [r0, #4]
   d4fe4:	b153      	cbz	r3, d4ffc <_ZNK9IPAddresscvbEv+0x28>
   d4fe6:	6883      	ldr	r3, [r0, #8]
   d4fe8:	b143      	cbz	r3, d4ffc <_ZNK9IPAddresscvbEv+0x28>
   d4fea:	68c3      	ldr	r3, [r0, #12]
   d4fec:	b133      	cbz	r3, d4ffc <_ZNK9IPAddresscvbEv+0x28>
   d4fee:	6900      	ldr	r0, [r0, #16]
   d4ff0:	3000      	adds	r0, #0
   d4ff2:	bf18      	it	ne
   d4ff4:	2001      	movne	r0, #1
   d4ff6:	4770      	bx	lr
   d4ff8:	2000      	movs	r0, #0
   d4ffa:	4770      	bx	lr
   d4ffc:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4ffe:	4770      	bx	lr

000d5000 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5000:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5002:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5006:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d500a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d500e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5012:	2304      	movs	r3, #4
   d5014:	6041      	str	r1, [r0, #4]
   d5016:	7503      	strb	r3, [r0, #20]
   d5018:	bd10      	pop	{r4, pc}

000d501a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d501a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d501c:	780d      	ldrb	r5, [r1, #0]
   d501e:	788b      	ldrb	r3, [r1, #2]
   d5020:	784a      	ldrb	r2, [r1, #1]
   d5022:	78c9      	ldrb	r1, [r1, #3]
   d5024:	9100      	str	r1, [sp, #0]
   d5026:	4629      	mov	r1, r5
   d5028:	f7ff ffea 	bl	d5000 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d502c:	b003      	add	sp, #12
   d502e:	bd30      	pop	{r4, r5, pc}

000d5030 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5030:	4b01      	ldr	r3, [pc, #4]	; (d5038 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5032:	4a02      	ldr	r2, [pc, #8]	; (d503c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5034:	601a      	str	r2, [r3, #0]
   d5036:	4770      	bx	lr
   d5038:	2003e3e0 	.word	0x2003e3e0
   d503c:	000d670b 	.word	0x000d670b

000d5040 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5040:	2200      	movs	r2, #0
   d5042:	4611      	mov	r1, r2
   d5044:	6840      	ldr	r0, [r0, #4]
   d5046:	f7ff bbaf 	b.w	d47a8 <network_listening>

000d504a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d504a:	2200      	movs	r2, #0
   d504c:	4611      	mov	r1, r2
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	f7ff bbba 	b.w	d47c8 <network_get_listen_timeout>

000d5054 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5054:	2200      	movs	r2, #0
   d5056:	6840      	ldr	r0, [r0, #4]
   d5058:	f7ff bbae 	b.w	d47b8 <network_set_listen_timeout>

000d505c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d505c:	2200      	movs	r2, #0
   d505e:	f081 0101 	eor.w	r1, r1, #1
   d5062:	6840      	ldr	r0, [r0, #4]
   d5064:	f7ff bb98 	b.w	d4798 <network_listen>

000d5068 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5068:	2300      	movs	r3, #0
   d506a:	461a      	mov	r2, r3
   d506c:	4619      	mov	r1, r3
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff bb8a 	b.w	d4788 <network_off>

000d5074 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5074:	2300      	movs	r3, #0
   d5076:	461a      	mov	r2, r3
   d5078:	4619      	mov	r1, r3
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	f7ff bb7c 	b.w	d4778 <network_on>

000d5080 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5080:	2200      	movs	r2, #0
   d5082:	4611      	mov	r1, r2
   d5084:	6840      	ldr	r0, [r0, #4]
   d5086:	f7ff bb6f 	b.w	d4768 <network_ready>

000d508a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d508a:	2200      	movs	r2, #0
   d508c:	4611      	mov	r1, r2
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	f7ff bb5a 	b.w	d4748 <network_connecting>

000d5094 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5094:	2200      	movs	r2, #0
   d5096:	2102      	movs	r1, #2
   d5098:	6840      	ldr	r0, [r0, #4]
   d509a:	f7ff bb5d 	b.w	d4758 <network_disconnect>

000d509e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d509e:	2300      	movs	r3, #0
   d50a0:	461a      	mov	r2, r3
   d50a2:	6840      	ldr	r0, [r0, #4]
   d50a4:	f7ff bb48 	b.w	d4738 <network_connect>

000d50a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50a8:	b110      	cbz	r0, d50b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d50aa:	6803      	ldr	r3, [r0, #0]
   d50ac:	685b      	ldr	r3, [r3, #4]
   d50ae:	4718      	bx	r3
   d50b0:	4770      	bx	lr

000d50b2 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d50b2:	b538      	push	{r3, r4, r5, lr}
   d50b4:	4604      	mov	r4, r0
   d50b6:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d50b8:	b1d0      	cbz	r0, d50f0 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d50ba:	f7ff f921 	bl	d4300 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d50be:	b9b8      	cbnz	r0, d50f0 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d50c0:	7c23      	ldrb	r3, [r4, #16]
   d50c2:	b91b      	cbnz	r3, d50cc <_ZN6Thread7disposeEv+0x1a>
   d50c4:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d50c6:	b108      	cbz	r0, d50cc <_ZN6Thread7disposeEv+0x1a>
   d50c8:	f7ff f922 	bl	d4310 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d50cc:	6865      	ldr	r5, [r4, #4]
   d50ce:	b155      	cbz	r5, d50e6 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d50d0:	68ab      	ldr	r3, [r5, #8]
   d50d2:	b11b      	cbz	r3, d50dc <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50d4:	2203      	movs	r2, #3
   d50d6:	4629      	mov	r1, r5
   d50d8:	4628      	mov	r0, r5
   d50da:	4798      	blx	r3
            delete wrapper;
   d50dc:	4628      	mov	r0, r5
   d50de:	f7fe ffde 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d50e2:	2300      	movs	r3, #0
   d50e4:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d50e6:	6820      	ldr	r0, [r4, #0]
   d50e8:	f7ff f91a 	bl	d4320 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d50ec:	2300      	movs	r3, #0
   d50ee:	6023      	str	r3, [r4, #0]
   d50f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50f4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d50f4:	b538      	push	{r3, r4, r5, lr}
   d50f6:	4b0b      	ldr	r3, [pc, #44]	; (d5124 <_ZN5spark9MeshClassD1Ev+0x30>)
   d50f8:	6003      	str	r3, [r0, #0]
   d50fa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50fc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5100:	b108      	cbz	r0, d5106 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5102:	f7fe ffce 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5106:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d510a:	b12d      	cbz	r5, d5118 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d510c:	4628      	mov	r0, r5
   d510e:	f7ff ffd0 	bl	d50b2 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5112:	4628      	mov	r0, r5
   d5114:	f7fe ffc3 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5118:	68a0      	ldr	r0, [r4, #8]
   d511a:	b108      	cbz	r0, d5120 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d511c:	f7ff ffc4 	bl	d50a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5120:	4620      	mov	r0, r4
   d5122:	bd38      	pop	{r3, r4, r5, pc}
   d5124:	000d673c 	.word	0x000d673c

000d5128 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5128:	6800      	ldr	r0, [r0, #0]
   d512a:	f7ff b911 	b.w	d4350 <os_mutex_recursive_lock>
	...

000d5130 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5130:	b530      	push	{r4, r5, lr}
   d5132:	b08d      	sub	sp, #52	; 0x34
   d5134:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5136:	2211      	movs	r2, #17
   d5138:	2100      	movs	r1, #0
   d513a:	a801      	add	r0, sp, #4
   d513c:	f001 f9df 	bl	d64fe <memset>
    addr.v = 6;
   d5140:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5142:	aa01      	add	r2, sp, #4
   d5144:	4909      	ldr	r1, [pc, #36]	; (d516c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5146:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d514a:	200a      	movs	r0, #10
   d514c:	f7ff f9b8 	bl	d44c0 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5150:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5152:	a901      	add	r1, sp, #4
   d5154:	a806      	add	r0, sp, #24
   d5156:	f7ff ff2b 	bl	d4fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d515a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d515c:	3404      	adds	r4, #4
   d515e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5160:	682b      	ldr	r3, [r5, #0]
   d5162:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5164:	2000      	movs	r0, #0
   d5166:	b00d      	add	sp, #52	; 0x34
   d5168:	bd30      	pop	{r4, r5, pc}
   d516a:	bf00      	nop
   d516c:	000d6768 	.word	0x000d6768

000d5170 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5170:	b530      	push	{r4, r5, lr}
   d5172:	4604      	mov	r4, r0
   d5174:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5176:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d517a:	f7ff ffd5 	bl	d5128 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d517e:	6823      	ldr	r3, [r4, #0]
   d5180:	bb83      	cbnz	r3, d51e4 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5182:	204c      	movs	r0, #76	; 0x4c
   d5184:	f7fe ff87 	bl	d4096 <_Znwj>
   d5188:	4605      	mov	r5, r0
   d518a:	b108      	cbz	r0, d5190 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d518c:	f000 fda0 	bl	d5cd0 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5190:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5192:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5194:	b108      	cbz	r0, d519a <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5196:	f7ff ff87 	bl	d50a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d519a:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d519c:	b320      	cbz	r0, d51e8 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d519e:	2200      	movs	r2, #0
   d51a0:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d51a4:	f000 fdc3 	bl	d5d2e <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d51a8:	a908      	add	r1, sp, #32
   d51aa:	2500      	movs	r5, #0
   d51ac:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d51b0:	4811      	ldr	r0, [pc, #68]	; (d51f8 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d51b2:	f7ff f955 	bl	d4460 <if_name_to_index>
   d51b6:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d51b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d51bc:	6803      	ldr	r3, [r0, #0]
   d51be:	f249 0169 	movw	r1, #36969	; 0x9069
   d51c2:	6a1b      	ldr	r3, [r3, #32]
   d51c4:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d51c6:	a802      	add	r0, sp, #8
   d51c8:	f7ff fee4 	bl	d4f94 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d51cc:	a802      	add	r0, sp, #8
   d51ce:	f7ff ffaf 	bl	d5130 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d51d2:	2800      	cmp	r0, #0
   d51d4:	db04      	blt.n	d51e0 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d51d6:	a902      	add	r1, sp, #8
   d51d8:	6820      	ldr	r0, [r4, #0]
   d51da:	f000 fe2e 	bl	d5e3a <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d51de:	e004      	b.n	d51ea <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d51e0:	4605      	mov	r5, r0
   d51e2:	e002      	b.n	d51ea <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d51e4:	2500      	movs	r5, #0
   d51e6:	e000      	b.n	d51ea <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d51e8:	4d04      	ldr	r5, [pc, #16]	; (d51fc <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d51ea:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d51ee:	f7ff f8b7 	bl	d4360 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d51f2:	4628      	mov	r0, r5
   d51f4:	b009      	add	sp, #36	; 0x24
   d51f6:	bd30      	pop	{r4, r5, pc}
   d51f8:	000d6775 	.word	0x000d6775
   d51fc:	fffffefc 	.word	0xfffffefc

000d5200 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d5200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5204:	4605      	mov	r5, r0
   d5206:	b08c      	sub	sp, #48	; 0x30
   d5208:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d520a:	460f      	mov	r7, r1
   d520c:	b109      	cbz	r1, d5212 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d520e:	780b      	ldrb	r3, [r1, #0]
   d5210:	b90b      	cbnz	r3, d5216 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d5212:	4c35      	ldr	r4, [pc, #212]	; (d52e8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d5214:	e064      	b.n	d52e0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d5216:	4608      	mov	r0, r1
   d5218:	f001 f99d 	bl	d6556 <strlen>
   d521c:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d521e:	2e00      	cmp	r6, #0
   d5220:	d05c      	beq.n	d52dc <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d5222:	4630      	mov	r0, r6
   d5224:	f001 f997 	bl	d6556 <strlen>
   d5228:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d522a:	f108 0302 	add.w	r3, r8, #2
   d522e:	4423      	add	r3, r4
   d5230:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d5234:	d84f      	bhi.n	d52d6 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d5236:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d523a:	f7ff ff75 	bl	d5128 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d523e:	4628      	mov	r0, r5
   d5240:	f7ff ff96 	bl	d5170 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5244:	2800      	cmp	r0, #0
   d5246:	db40      	blt.n	d52ca <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5248:	4668      	mov	r0, sp
   d524a:	f7ff fea3 	bl	d4f94 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d524e:	4668      	mov	r0, sp
   d5250:	f7ff ff6e 	bl	d5130 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5254:	2800      	cmp	r0, #0
   d5256:	db38      	blt.n	d52ca <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5258:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d525c:	f8da 3000 	ldr.w	r3, [sl]
   d5260:	f10d 0c04 	add.w	ip, sp, #4
   d5264:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5268:	4b20      	ldr	r3, [pc, #128]	; (d52ec <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d526a:	9306      	str	r3, [sp, #24]
   d526c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5270:	f10d 0e1c 	add.w	lr, sp, #28
   d5274:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5278:	f8dc 3000 	ldr.w	r3, [ip]
   d527c:	f88e 3000 	strb.w	r3, [lr]
   d5280:	f249 0269 	movw	r2, #36969	; 0x9069
   d5284:	a906      	add	r1, sp, #24
   d5286:	4650      	mov	r0, sl
   d5288:	47c8      	blx	r9
   d528a:	2800      	cmp	r0, #0
   d528c:	db1d      	blt.n	d52ca <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d528e:	2300      	movs	r3, #0
   d5290:	6828      	ldr	r0, [r5, #0]
   d5292:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5296:	6803      	ldr	r3, [r0, #0]
   d5298:	2201      	movs	r2, #1
   d529a:	68db      	ldr	r3, [r3, #12]
   d529c:	a906      	add	r1, sp, #24
   d529e:	4798      	blx	r3
   d52a0:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d52a2:	6803      	ldr	r3, [r0, #0]
   d52a4:	f108 0201 	add.w	r2, r8, #1
   d52a8:	68db      	ldr	r3, [r3, #12]
   d52aa:	4639      	mov	r1, r7
   d52ac:	4798      	blx	r3
    if (dataLen > 0) {
   d52ae:	b12c      	cbz	r4, d52bc <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d52b0:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d52b2:	6803      	ldr	r3, [r0, #0]
   d52b4:	4622      	mov	r2, r4
   d52b6:	68db      	ldr	r3, [r3, #12]
   d52b8:	4631      	mov	r1, r6
   d52ba:	4798      	blx	r3
   d52bc:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d52be:	6803      	ldr	r3, [r0, #0]
   d52c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d52c2:	4798      	blx	r3
   d52c4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d52c8:	e000      	b.n	d52cc <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d52ca:	4604      	mov	r4, r0
   d52cc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d52d0:	f7ff f846 	bl	d4360 <os_mutex_recursive_unlock>
   d52d4:	e004      	b.n	d52e0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d52d6:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d52da:	e001      	b.n	d52e0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d52dc:	4634      	mov	r4, r6
   d52de:	e7a4      	b.n	d522a <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d52e0:	4620      	mov	r0, r4
   d52e2:	b00c      	add	sp, #48	; 0x30
   d52e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d52e8:	fffffef2 	.word	0xfffffef2
   d52ec:	000d664c 	.word	0x000d664c

000d52f0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d52f0:	b538      	push	{r3, r4, r5, lr}
   d52f2:	4c0d      	ldr	r4, [pc, #52]	; (d5328 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d52f4:	4b0d      	ldr	r3, [pc, #52]	; (d532c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d52f6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d52f8:	2500      	movs	r5, #0
   d52fa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d52fc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5300:	6063      	str	r3, [r4, #4]
   d5302:	60a5      	str	r5, [r4, #8]
   d5304:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5308:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d530c:	f7ff f818 	bl	d4340 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5310:	4b07      	ldr	r3, [pc, #28]	; (d5330 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5312:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5316:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5318:	4620      	mov	r0, r4
   d531a:	4a06      	ldr	r2, [pc, #24]	; (d5334 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d531c:	4906      	ldr	r1, [pc, #24]	; (d5338 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d531e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5322:	f000 bf83 	b.w	d622c <__aeabi_atexit>
   d5326:	bf00      	nop
   d5328:	2003e3e4 	.word	0x2003e3e4
   d532c:	000d67a0 	.word	0x000d67a0
   d5330:	000d673c 	.word	0x000d673c
   d5334:	2003e3c0 	.word	0x2003e3c0
   d5338:	000d50f5 	.word	0x000d50f5

000d533c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d533c:	2300      	movs	r3, #0
   d533e:	461a      	mov	r2, r3
   d5340:	6840      	ldr	r0, [r0, #4]
   d5342:	f7ff b9f9 	b.w	d4738 <network_connect>

000d5346 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5346:	2200      	movs	r2, #0
   d5348:	2102      	movs	r1, #2
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	f7ff ba04 	b.w	d4758 <network_disconnect>

000d5350 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5350:	2200      	movs	r2, #0
   d5352:	4611      	mov	r1, r2
   d5354:	6840      	ldr	r0, [r0, #4]
   d5356:	f7ff b9f7 	b.w	d4748 <network_connecting>

000d535a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d535a:	2200      	movs	r2, #0
   d535c:	4611      	mov	r1, r2
   d535e:	6840      	ldr	r0, [r0, #4]
   d5360:	f7ff ba02 	b.w	d4768 <network_ready>

000d5364 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5364:	2300      	movs	r3, #0
   d5366:	461a      	mov	r2, r3
   d5368:	4619      	mov	r1, r3
   d536a:	6840      	ldr	r0, [r0, #4]
   d536c:	f7ff ba04 	b.w	d4778 <network_on>

000d5370 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5370:	2300      	movs	r3, #0
   d5372:	461a      	mov	r2, r3
   d5374:	4619      	mov	r1, r3
   d5376:	6840      	ldr	r0, [r0, #4]
   d5378:	f7ff ba06 	b.w	d4788 <network_off>

000d537c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d537c:	2200      	movs	r2, #0
   d537e:	f081 0101 	eor.w	r1, r1, #1
   d5382:	6840      	ldr	r0, [r0, #4]
   d5384:	f7ff ba08 	b.w	d4798 <network_listen>

000d5388 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5388:	2200      	movs	r2, #0
   d538a:	6840      	ldr	r0, [r0, #4]
   d538c:	f7ff ba14 	b.w	d47b8 <network_set_listen_timeout>

000d5390 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5390:	2200      	movs	r2, #0
   d5392:	4611      	mov	r1, r2
   d5394:	6840      	ldr	r0, [r0, #4]
   d5396:	f7ff ba17 	b.w	d47c8 <network_get_listen_timeout>

000d539a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d539a:	2200      	movs	r2, #0
   d539c:	4611      	mov	r1, r2
   d539e:	6840      	ldr	r0, [r0, #4]
   d53a0:	f7ff ba02 	b.w	d47a8 <network_listening>

000d53a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d53a4:	b570      	push	{r4, r5, r6, lr}
   d53a6:	b08c      	sub	sp, #48	; 0x30
   d53a8:	4614      	mov	r4, r2
   d53aa:	4606      	mov	r6, r0
    IPAddress addr;
   d53ac:	f7ff fdf2 	bl	d4f94 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53b0:	ab0c      	add	r3, sp, #48	; 0x30
   d53b2:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d53b4:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53b6:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d53ba:	4620      	mov	r0, r4
   d53bc:	f7ff f8a8 	bl	d4510 <netdb_getaddrinfo>
    if (!r && ai) {
   d53c0:	4601      	mov	r1, r0
   d53c2:	bb58      	cbnz	r0, d541c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d53c4:	9b00      	ldr	r3, [sp, #0]
   d53c6:	b34b      	cbz	r3, d541c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d53c8:	685a      	ldr	r2, [r3, #4]
   d53ca:	2a02      	cmp	r2, #2
   d53cc:	d00e      	beq.n	d53ec <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d53ce:	2a0a      	cmp	r2, #10
   d53d0:	d124      	bne.n	d541c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d53d2:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d53d4:	2211      	movs	r2, #17
   d53d6:	a801      	add	r0, sp, #4
   d53d8:	f001 f891 	bl	d64fe <memset>
                a.v = 6;
   d53dc:	2306      	movs	r3, #6
   d53de:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d53e2:	ad01      	add	r5, sp, #4
   d53e4:	f104 0308 	add.w	r3, r4, #8
   d53e8:	3418      	adds	r4, #24
   d53ea:	e005      	b.n	d53f8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d53ec:	6959      	ldr	r1, [r3, #20]
   d53ee:	4630      	mov	r0, r6
   d53f0:	3104      	adds	r1, #4
   d53f2:	f7ff fe12 	bl	d501a <_ZN9IPAddressaSEPKh>
                break;
   d53f6:	e011      	b.n	d541c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d53f8:	6818      	ldr	r0, [r3, #0]
   d53fa:	6859      	ldr	r1, [r3, #4]
   d53fc:	462a      	mov	r2, r5
   d53fe:	c203      	stmia	r2!, {r0, r1}
   d5400:	3308      	adds	r3, #8
   d5402:	42a3      	cmp	r3, r4
   d5404:	4615      	mov	r5, r2
   d5406:	d1f7      	bne.n	d53f8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5408:	a901      	add	r1, sp, #4
   d540a:	a806      	add	r0, sp, #24
   d540c:	ad07      	add	r5, sp, #28
   d540e:	f7ff fdcf 	bl	d4fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5414:	1d34      	adds	r4, r6, #4
   d5416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5418:	682b      	ldr	r3, [r5, #0]
   d541a:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d541c:	9800      	ldr	r0, [sp, #0]
   d541e:	f7ff f86f 	bl	d4500 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5422:	4630      	mov	r0, r6
   d5424:	b00c      	add	sp, #48	; 0x30
   d5426:	bd70      	pop	{r4, r5, r6, pc}

000d5428 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5428:	4b02      	ldr	r3, [pc, #8]	; (d5434 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d542a:	4a03      	ldr	r2, [pc, #12]	; (d5438 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d542c:	601a      	str	r2, [r3, #0]
   d542e:	2200      	movs	r2, #0
   d5430:	605a      	str	r2, [r3, #4]
   d5432:	4770      	bx	lr
   d5434:	2003e5b4 	.word	0x2003e5b4
   d5438:	000d67a0 	.word	0x000d67a0

000d543c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d543e:	4606      	mov	r6, r0
   d5440:	460d      	mov	r5, r1
   d5442:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5444:	2400      	movs	r4, #0
  while (size--) {
   d5446:	42bd      	cmp	r5, r7
   d5448:	d00c      	beq.n	d5464 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d544a:	6833      	ldr	r3, [r6, #0]
   d544c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5450:	689b      	ldr	r3, [r3, #8]
   d5452:	4630      	mov	r0, r6
   d5454:	4798      	blx	r3
     if (chunk>=0)
   d5456:	2800      	cmp	r0, #0
   d5458:	db01      	blt.n	d545e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d545a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d545c:	e7f3      	b.n	d5446 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d545e:	2c00      	cmp	r4, #0
   d5460:	bf08      	it	eq
   d5462:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5464:	4620      	mov	r0, r4
   d5466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5468 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5468:	b570      	push	{r4, r5, r6, lr}
   d546a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d546c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d546e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5470:	b149      	cbz	r1, d5486 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5472:	f001 f870 	bl	d6556 <strlen>
   d5476:	682b      	ldr	r3, [r5, #0]
   d5478:	4602      	mov	r2, r0
   d547a:	4621      	mov	r1, r4
   d547c:	4628      	mov	r0, r5
   d547e:	68db      	ldr	r3, [r3, #12]
    }
   d5480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5484:	4718      	bx	r3
    }
   d5486:	bd70      	pop	{r4, r5, r6, pc}

000d5488 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5488:	6803      	ldr	r3, [r0, #0]
   d548a:	689b      	ldr	r3, [r3, #8]
   d548c:	4718      	bx	r3

000d548e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d548e:	b530      	push	{r4, r5, lr}
   d5490:	b08b      	sub	sp, #44	; 0x2c
   d5492:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5494:	2100      	movs	r1, #0
   d5496:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d549a:	2a01      	cmp	r2, #1
   d549c:	bf98      	it	ls
   d549e:	220a      	movls	r2, #10
   d54a0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d54a4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d54a8:	fb05 3312 	mls	r3, r5, r2, r3
   d54ac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d54b0:	2b09      	cmp	r3, #9
   d54b2:	bf94      	ite	ls
   d54b4:	3330      	addls	r3, #48	; 0x30
   d54b6:	3337      	addhi	r3, #55	; 0x37
   d54b8:	b2db      	uxtb	r3, r3
   d54ba:	4621      	mov	r1, r4
   d54bc:	f804 3901 	strb.w	r3, [r4], #-1
   d54c0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d54c2:	2d00      	cmp	r5, #0
   d54c4:	d1ee      	bne.n	d54a4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d54c6:	f7ff ffcf 	bl	d5468 <_ZN5Print5writeEPKc>
}
   d54ca:	b00b      	add	sp, #44	; 0x2c
   d54cc:	bd30      	pop	{r4, r5, pc}

000d54ce <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d54ce:	b410      	push	{r4}
  if (base == 0) return write(n);
   d54d0:	b92a      	cbnz	r2, d54de <_ZN5Print5printEmi+0x10>
   d54d2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d54d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d54d8:	689b      	ldr	r3, [r3, #8]
   d54da:	b2c9      	uxtb	r1, r1
   d54dc:	4718      	bx	r3
  else return printNumber(n, base);
   d54de:	b2d2      	uxtb	r2, r2
}
   d54e0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d54e4:	f7ff bfd3 	b.w	d548e <_ZN5Print11printNumberEmh>

000d54e8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d54e8:	f7ff bff1 	b.w	d54ce <_ZN5Print5printEmi>

000d54ec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d54ec:	b510      	push	{r4, lr}
   d54ee:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54f0:	f7ff f9be 	bl	d4870 <_ZNSt14_Function_baseD1Ev>
   d54f4:	4620      	mov	r0, r4
   d54f6:	bd10      	pop	{r4, pc}

000d54f8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54f8:	4803      	ldr	r0, [pc, #12]	; (d5508 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d54fa:	4a04      	ldr	r2, [pc, #16]	; (d550c <_GLOBAL__sub_I_RGB+0x14>)
   d54fc:	4904      	ldr	r1, [pc, #16]	; (d5510 <_GLOBAL__sub_I_RGB+0x18>)
   d54fe:	2300      	movs	r3, #0
   d5500:	6083      	str	r3, [r0, #8]
   d5502:	f000 be93 	b.w	d622c <__aeabi_atexit>
   d5506:	bf00      	nop
   d5508:	2003e5bc 	.word	0x2003e5bc
   d550c:	2003e3c0 	.word	0x2003e3c0
   d5510:	000d54ed 	.word	0x000d54ed

000d5514 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5514:	4770      	bx	lr

000d5516 <_ZN8SPIClassD0Ev>:
   d5516:	b510      	push	{r4, lr}
   d5518:	4604      	mov	r4, r0
   d551a:	f7fe fdc0 	bl	d409e <_ZdlPv>
   d551e:	4620      	mov	r0, r4
   d5520:	bd10      	pop	{r4, pc}
	...

000d5524 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5524:	b570      	push	{r4, r5, r6, lr}
   d5526:	4b08      	ldr	r3, [pc, #32]	; (d5548 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5528:	6003      	str	r3, [r0, #0]
   d552a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d552c:	2500      	movs	r5, #0
   d552e:	460e      	mov	r6, r1
   d5530:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5534:	f7fe fefc 	bl	d4330 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5538:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d553a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d553c:	f7ff f820 	bl	d4580 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5540:	60a5      	str	r5, [r4, #8]
}
   d5542:	4620      	mov	r0, r4
   d5544:	bd70      	pop	{r4, r5, r6, pc}
   d5546:	bf00      	nop
   d5548:	000d67d4 	.word	0x000d67d4

000d554c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d554c:	7900      	ldrb	r0, [r0, #4]
   d554e:	f7ff b81f 	b.w	d4590 <HAL_SPI_Is_Enabled>

000d5552 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d5552:	4770      	bx	lr

000d5554 <_ZN21StringPrintableHelperD0Ev>:
   d5554:	b510      	push	{r4, lr}
   d5556:	4604      	mov	r4, r0
   d5558:	f7fe fda1 	bl	d409e <_ZdlPv>
   d555c:	4620      	mov	r0, r4
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5560:	b510      	push	{r4, lr}
   d5562:	4604      	mov	r4, r0
{
	free(buffer);
   d5564:	6800      	ldr	r0, [r0, #0]
   d5566:	f7ff f93f 	bl	d47e8 <free>
}
   d556a:	4620      	mov	r0, r4
   d556c:	bd10      	pop	{r4, pc}

000d556e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d556e:	b510      	push	{r4, lr}
   d5570:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5572:	6800      	ldr	r0, [r0, #0]
   d5574:	b108      	cbz	r0, d557a <_ZN6String10invalidateEv+0xc>
   d5576:	f7ff f937 	bl	d47e8 <free>
	buffer = NULL;
   d557a:	2300      	movs	r3, #0
   d557c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d557e:	60a3      	str	r3, [r4, #8]
   d5580:	6063      	str	r3, [r4, #4]
   d5582:	bd10      	pop	{r4, pc}

000d5584 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5584:	b538      	push	{r3, r4, r5, lr}
   d5586:	4604      	mov	r4, r0
   d5588:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d558a:	6800      	ldr	r0, [r0, #0]
   d558c:	3101      	adds	r1, #1
   d558e:	f7ff f933 	bl	d47f8 <realloc>
	if (newbuffer) {
   d5592:	b110      	cbz	r0, d559a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5594:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5598:	2001      	movs	r0, #1
	}
	return 0;
}
   d559a:	bd38      	pop	{r3, r4, r5, pc}

000d559c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d559c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d559e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55a2:	b113      	cbz	r3, d55aa <_ZN6String7reserveEj+0xe>
   d55a4:	6843      	ldr	r3, [r0, #4]
   d55a6:	428b      	cmp	r3, r1
   d55a8:	d207      	bcs.n	d55ba <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff ffea 	bl	d5584 <_ZN6String12changeBufferEj>
   d55b0:	b120      	cbz	r0, d55bc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55b2:	68a3      	ldr	r3, [r4, #8]
   d55b4:	b90b      	cbnz	r3, d55ba <_ZN6String7reserveEj+0x1e>
   d55b6:	6822      	ldr	r2, [r4, #0]
   d55b8:	7013      	strb	r3, [r2, #0]
   d55ba:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55bc:	bd10      	pop	{r4, pc}

000d55be <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55be:	b570      	push	{r4, r5, r6, lr}
   d55c0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55c2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55c4:	4604      	mov	r4, r0
   d55c6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d55c8:	f7ff ffe8 	bl	d559c <_ZN6String7reserveEj>
   d55cc:	b918      	cbnz	r0, d55d6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d55ce:	4620      	mov	r0, r4
   d55d0:	f7ff ffcd 	bl	d556e <_ZN6String10invalidateEv>
		return *this;
   d55d4:	e009      	b.n	d55ea <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d55d6:	462a      	mov	r2, r5
   d55d8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d55da:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d55dc:	6820      	ldr	r0, [r4, #0]
   d55de:	f000 ff83 	bl	d64e8 <memcpy>
	buffer[len] = 0;
   d55e2:	6822      	ldr	r2, [r4, #0]
   d55e4:	68a3      	ldr	r3, [r4, #8]
   d55e6:	2100      	movs	r1, #0
   d55e8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d55ea:	4620      	mov	r0, r4
   d55ec:	bd70      	pop	{r4, r5, r6, pc}

000d55ee <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d55ee:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55f0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d55f2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55f4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d55f6:	6043      	str	r3, [r0, #4]
	len = 0;
   d55f8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d55fa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d55fc:	460d      	mov	r5, r1
   d55fe:	b139      	cbz	r1, d5610 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5600:	4608      	mov	r0, r1
   d5602:	f000 ffa8 	bl	d6556 <strlen>
   d5606:	4629      	mov	r1, r5
   d5608:	4602      	mov	r2, r0
   d560a:	4620      	mov	r0, r4
   d560c:	f7ff ffd7 	bl	d55be <_ZN6String4copyEPKcj>
}
   d5610:	4620      	mov	r0, r4
   d5612:	bd38      	pop	{r3, r4, r5, pc}

000d5614 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5614:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5616:	b510      	push	{r4, lr}
   d5618:	460b      	mov	r3, r1
   d561a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d561c:	d007      	beq.n	d562e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d561e:	6809      	ldr	r1, [r1, #0]
   d5620:	b119      	cbz	r1, d562a <_ZN6StringaSERKS_+0x16>
   d5622:	689a      	ldr	r2, [r3, #8]
   d5624:	f7ff ffcb 	bl	d55be <_ZN6String4copyEPKcj>
   d5628:	e001      	b.n	d562e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d562a:	f7ff ffa0 	bl	d556e <_ZN6String10invalidateEv>

	return *this;
}
   d562e:	4620      	mov	r0, r4
   d5630:	bd10      	pop	{r4, pc}

000d5632 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5632:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5634:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5636:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5638:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d563a:	6043      	str	r3, [r0, #4]
	len = 0;
   d563c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d563e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5640:	f7ff ffe8 	bl	d5614 <_ZN6StringaSERKS_>
}
   d5644:	4620      	mov	r0, r4
   d5646:	bd10      	pop	{r4, pc}

000d5648 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5648:	b570      	push	{r4, r5, r6, lr}
   d564a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d564c:	460e      	mov	r6, r1
   d564e:	b909      	cbnz	r1, d5654 <_ZN6String6concatEPKcj+0xc>
   d5650:	2000      	movs	r0, #0
   d5652:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5654:	b16a      	cbz	r2, d5672 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5656:	6883      	ldr	r3, [r0, #8]
   d5658:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d565a:	4629      	mov	r1, r5
   d565c:	f7ff ff9e 	bl	d559c <_ZN6String7reserveEj>
   d5660:	2800      	cmp	r0, #0
   d5662:	d0f5      	beq.n	d5650 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5664:	6820      	ldr	r0, [r4, #0]
   d5666:	68a3      	ldr	r3, [r4, #8]
   d5668:	4631      	mov	r1, r6
   d566a:	4418      	add	r0, r3
   d566c:	f000 ff4f 	bl	d650e <strcpy>
	len = newlen;
   d5670:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5672:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5674:	bd70      	pop	{r4, r5, r6, pc}

000d5676 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d5676:	b538      	push	{r3, r4, r5, lr}
   d5678:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d567a:	6880      	ldr	r0, [r0, #8]
   d567c:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d567e:	f7ff ffe3 	bl	d5648 <_ZN6String6concatEPKcj>
   d5682:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d5684:	6898      	ldr	r0, [r3, #8]
    }
   d5686:	1b40      	subs	r0, r0, r5
   d5688:	bd38      	pop	{r3, r4, r5, pc}

000d568a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d568a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d568c:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d568e:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5692:	2201      	movs	r2, #1
   d5694:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5696:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d569a:	f7ff ffd5 	bl	d5648 <_ZN6String6concatEPKcj>
}
   d569e:	b003      	add	sp, #12
   d56a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d56a4 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d56a4:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d56a6:	6880      	ldr	r0, [r0, #8]
   d56a8:	f7ff ffef 	bl	d568a <_ZN6String6concatEc>
    }
   d56ac:	bd08      	pop	{r3, pc}
	...

000d56b0 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   d56b0:	b530      	push	{r4, r5, lr}
   d56b2:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d56b4:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d56b6:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d56b8:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d56ba:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d56bc:	6043      	str	r3, [r0, #4]
	len = 0;
   d56be:	6083      	str	r3, [r0, #8]
	flags = 0;
   d56c0:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d56c2:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d56c4:	4b06      	ldr	r3, [pc, #24]	; (d56e0 <_ZN6StringC1ERK9Printable+0x30>)
   d56c6:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d56c8:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d56ca:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d56cc:	f7ff ff66 	bl	d559c <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d56d0:	682b      	ldr	r3, [r5, #0]
   d56d2:	a901      	add	r1, sp, #4
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	4628      	mov	r0, r5
   d56d8:	4798      	blx	r3
}
   d56da:	4620      	mov	r0, r4
   d56dc:	b005      	add	sp, #20
   d56de:	bd30      	pop	{r4, r5, pc}
   d56e0:	000d67e4 	.word	0x000d67e4

000d56e4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d56e4:	4b05      	ldr	r3, [pc, #20]	; (d56fc <_GLOBAL__sub_I_System+0x18>)
   d56e6:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d56ea:	2000      	movs	r0, #0
   d56ec:	805a      	strh	r2, [r3, #2]
   d56ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d56f2:	7018      	strb	r0, [r3, #0]
   d56f4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d56f6:	f7fe bfcb 	b.w	d4690 <set_system_mode>
   d56fa:	bf00      	nop
   d56fc:	2003e5cc 	.word	0x2003e5cc

000d5700 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5700:	4b02      	ldr	r3, [pc, #8]	; (d570c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	4b02      	ldr	r3, [pc, #8]	; (d5710 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5706:	601a      	str	r2, [r3, #0]
   d5708:	4770      	bx	lr
   d570a:	bf00      	nop
   d570c:	2003e358 	.word	0x2003e358
   d5710:	2003e5d4 	.word	0x2003e5d4

000d5714 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5714:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5716:	6804      	ldr	r4, [r0, #0]
   d5718:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d571a:	46a4      	mov	ip, r4
    }
   d571c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5720:	4760      	bx	ip

000d5722 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5722:	6803      	ldr	r3, [r0, #0]
   d5724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5726:	4718      	bx	r3

000d5728 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5728:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d572a:	4770      	bx	lr

000d572c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d572c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d572e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5730:	1a10      	subs	r0, r2, r0
   d5732:	4770      	bx	lr

000d5734 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5734:	b513      	push	{r0, r1, r4, lr}
   d5736:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5738:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d573a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d573e:	68d4      	ldr	r4, [r2, #12]
   d5740:	4619      	mov	r1, r3
   d5742:	2201      	movs	r2, #1
   d5744:	47a0      	blx	r4
}
   d5746:	b002      	add	sp, #8
   d5748:	bd10      	pop	{r4, pc}

000d574a <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d574a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d574c:	6803      	ldr	r3, [r0, #0]
   d574e:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5750:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5752:	4798      	blx	r3
   d5754:	b128      	cbz	r0, d5762 <_ZN3UDP4readEv+0x18>
   d5756:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5758:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d575a:	1c59      	adds	r1, r3, #1
   d575c:	86e1      	strh	r1, [r4, #54]	; 0x36
   d575e:	5cd0      	ldrb	r0, [r2, r3]
   d5760:	bd10      	pop	{r4, pc}
   d5762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5766:	bd10      	pop	{r4, pc}

000d5768 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5768:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d576a:	6803      	ldr	r3, [r0, #0]
   d576c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d576e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5770:	4798      	blx	r3
   d5772:	b118      	cbz	r0, d577c <_ZN3UDP4peekEv+0x14>
   d5774:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5776:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5778:	5cd0      	ldrb	r0, [r2, r3]
   d577a:	bd10      	pop	{r4, pc}
   d577c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5780:	bd10      	pop	{r4, pc}

000d5782 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5782:	4770      	bx	lr

000d5784 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5784:	b410      	push	{r4}
   d5786:	4603      	mov	r3, r0
   d5788:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d578a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d578c:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d578e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5790:	6803      	ldr	r3, [r0, #0]
   d5792:	1a52      	subs	r2, r2, r1
   d5794:	68db      	ldr	r3, [r3, #12]
   d5796:	4421      	add	r1, r4
}
   d5798:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d579c:	4718      	bx	r3

000d579e <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d579e:	f1a0 0010 	sub.w	r0, r0, #16
   d57a2:	f7ff bfef 	b.w	d5784 <_ZNK3UDP7printToER5Print>

000d57a6 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d57a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d57a8:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d57aa:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d57ac:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d57ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d57b0:	4604      	mov	r4, r0
   d57b2:	460f      	mov	r7, r1
   d57b4:	4615      	mov	r5, r2
    stop();
   d57b6:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d57b8:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d57ba:	4632      	mov	r2, r6
   d57bc:	2100      	movs	r1, #0
   d57be:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d57c0:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d57c2:	f000 fe9c 	bl	d64fe <memset>
    saddr.sin6_len = sizeof(saddr);
   d57c6:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d57ca:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d57cc:	260a      	movs	r6, #10
   d57ce:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d57d2:	f7fe fe8d 	bl	d44f0 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d57d6:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d57d8:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d57dc:	2102      	movs	r1, #2
   d57de:	4630      	mov	r0, r6
   d57e0:	f7fe fec6 	bl	d4570 <sock_socket>

    if (_sock < 0) {
   d57e4:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d57e6:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d57e8:	db24      	blt.n	d5834 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d57ea:	2204      	movs	r2, #4
   d57ec:	9200      	str	r2, [sp, #0]
   d57ee:	ab02      	add	r3, sp, #8
   d57f0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d57f4:	f7fe fe9c 	bl	d4530 <sock_setsockopt>
   d57f8:	b9e0      	cbnz	r0, d5834 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d57fa:	b195      	cbz	r5, d5822 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d57fc:	9003      	str	r0, [sp, #12]
   d57fe:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5802:	a903      	add	r1, sp, #12
   d5804:	b2e8      	uxtb	r0, r5
   d5806:	f7fe fe33 	bl	d4470 <if_index_to_name>
   d580a:	b998      	cbnz	r0, d5834 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d580c:	2306      	movs	r3, #6
   d580e:	9300      	str	r3, [sp, #0]
   d5810:	f241 020b 	movw	r2, #4107	; 0x100b
   d5814:	ab03      	add	r3, sp, #12
   d5816:	f640 71ff 	movw	r1, #4095	; 0xfff
   d581a:	6960      	ldr	r0, [r4, #20]
   d581c:	f7fe fe88 	bl	d4530 <sock_setsockopt>
   d5820:	b940      	cbnz	r0, d5834 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5822:	221c      	movs	r2, #28
   d5824:	a905      	add	r1, sp, #20
   d5826:	6960      	ldr	r0, [r4, #20]
   d5828:	f7fe fe7a 	bl	d4520 <sock_bind>
   d582c:	b910      	cbnz	r0, d5834 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d582e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5830:	2001      	movs	r0, #1
   d5832:	e004      	b.n	d583e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5834:	6823      	ldr	r3, [r4, #0]
   d5836:	4620      	mov	r0, r4
   d5838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d583a:	4798      	blx	r3
   d583c:	2000      	movs	r0, #0
    }
    return bound;
}
   d583e:	b00d      	add	sp, #52	; 0x34
   d5840:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5842 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5842:	b510      	push	{r4, lr}
   d5844:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5846:	6940      	ldr	r0, [r0, #20]
   d5848:	2800      	cmp	r0, #0
   d584a:	db01      	blt.n	d5850 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d584c:	f7fe fe78 	bl	d4540 <sock_close>
    }

    _sock = -1;
   d5850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5854:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5856:	2300      	movs	r3, #0
   d5858:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d585a:	8723      	strh	r3, [r4, #56]	; 0x38
   d585c:	bd10      	pop	{r4, pc}

000d585e <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d585e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5860:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5862:	4605      	mov	r5, r0
   d5864:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5866:	b113      	cbz	r3, d586e <_ZN3UDP5writeEPKhj+0x10>
   d5868:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d586a:	1a24      	subs	r4, r4, r0
   d586c:	e000      	b.n	d5870 <_ZN3UDP5writeEPKhj+0x12>
   d586e:	461c      	mov	r4, r3
   d5870:	4294      	cmp	r4, r2
   d5872:	bf28      	it	cs
   d5874:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d5876:	4622      	mov	r2, r4
   d5878:	4418      	add	r0, r3
   d587a:	f000 fe35 	bl	d64e8 <memcpy>
    _offset += size;
   d587e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5880:	4423      	add	r3, r4
   d5882:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d5884:	4620      	mov	r0, r4
   d5886:	bd38      	pop	{r3, r4, r5, pc}

000d5888 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5888:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d588a:	6803      	ldr	r3, [r0, #0]
   d588c:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d588e:	4604      	mov	r4, r0
   d5890:	460e      	mov	r6, r1
   d5892:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d5894:	4798      	blx	r3
   d5896:	b188      	cbz	r0, d58bc <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d5898:	6823      	ldr	r3, [r4, #0]
   d589a:	4620      	mov	r0, r4
   d589c:	691b      	ldr	r3, [r3, #16]
   d589e:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d58a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d58a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d58a4:	4285      	cmp	r5, r0
   d58a6:	bfa8      	it	ge
   d58a8:	4605      	movge	r5, r0
   d58aa:	4419      	add	r1, r3
   d58ac:	462a      	mov	r2, r5
   d58ae:	4630      	mov	r0, r6
   d58b0:	f000 fe1a 	bl	d64e8 <memcpy>
        _offset += read;
   d58b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d58b6:	442b      	add	r3, r5
   d58b8:	86e3      	strh	r3, [r4, #54]	; 0x36
   d58ba:	e001      	b.n	d58c0 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d58bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d58c0:	4628      	mov	r0, r5
   d58c2:	bd70      	pop	{r4, r5, r6, pc}

000d58c4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d58c4:	b570      	push	{r4, r5, r6, lr}
   d58c6:	4604      	mov	r4, r0
   d58c8:	4b05      	ldr	r3, [pc, #20]	; (d58e0 <_ZN3UDP8remoteIPEv+0x1c>)
   d58ca:	f844 3b04 	str.w	r3, [r4], #4
   d58ce:	f101 0520 	add.w	r5, r1, #32
   d58d2:	4606      	mov	r6, r0
   d58d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58d8:	682b      	ldr	r3, [r5, #0]
   d58da:	7023      	strb	r3, [r4, #0]
   d58dc:	4630      	mov	r0, r6
   d58de:	bd70      	pop	{r4, r5, r6, pc}
   d58e0:	000d664c 	.word	0x000d664c

000d58e4 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d58e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d58e6:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d58e8:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d58ea:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d58ec:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d58ee:	4a0a      	ldr	r2, [pc, #40]	; (d5918 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d58f0:	9202      	str	r2, [sp, #8]
   d58f2:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d58f4:	468e      	mov	lr, r1
   d58f6:	4606      	mov	r6, r0
   d58f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58fa:	ac03      	add	r4, sp, #12
   d58fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58fe:	682b      	ldr	r3, [r5, #0]
   d5900:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5902:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5906:	9300      	str	r3, [sp, #0]
   d5908:	4662      	mov	r2, ip
   d590a:	ab02      	add	r3, sp, #8
   d590c:	4671      	mov	r1, lr
   d590e:	4630      	mov	r0, r6
   d5910:	47b8      	blx	r7
    }
   d5912:	b009      	add	sp, #36	; 0x24
   d5914:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5916:	bf00      	nop
   d5918:	000d664c 	.word	0x000d664c

000d591c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d591c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d591e:	6803      	ldr	r3, [r0, #0]
   d5920:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5924:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5926:	4b0d      	ldr	r3, [pc, #52]	; (d595c <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5928:	b089      	sub	sp, #36	; 0x24
   d592a:	f100 0620 	add.w	r6, r0, #32
   d592e:	4604      	mov	r4, r0
   d5930:	9302      	str	r3, [sp, #8]
   d5932:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5934:	ad03      	add	r5, sp, #12
   d5936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5938:	6833      	ldr	r3, [r6, #0]
   d593a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d593c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d593e:	9300      	str	r3, [sp, #0]
   d5940:	4672      	mov	r2, lr
   d5942:	ab02      	add	r3, sp, #8
   d5944:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5946:	4620      	mov	r0, r4
   d5948:	47b8      	blx	r7
    flush(); // wait for send to complete
   d594a:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d594c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d594e:	69db      	ldr	r3, [r3, #28]
   d5950:	4620      	mov	r0, r4
   d5952:	4798      	blx	r3
    return result;
}
   d5954:	4628      	mov	r0, r5
   d5956:	b009      	add	sp, #36	; 0x24
   d5958:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d595a:	bf00      	nop
   d595c:	000d664c 	.word	0x000d664c

000d5960 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5960:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5962:	7843      	ldrb	r3, [r0, #1]
   d5964:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5966:	b08d      	sub	sp, #52	; 0x34
   d5968:	4605      	mov	r5, r0
   d596a:	460c      	mov	r4, r1
   d596c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d596e:	d101      	bne.n	d5974 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5970:	1d01      	adds	r1, r0, #4
   d5972:	e033      	b.n	d59dc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5974:	2b0a      	cmp	r3, #10
   d5976:	d135      	bne.n	d59e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5978:	2211      	movs	r2, #17
   d597a:	2100      	movs	r1, #0
   d597c:	a801      	add	r0, sp, #4
   d597e:	f000 fdbe 	bl	d64fe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5982:	68ab      	ldr	r3, [r5, #8]
   d5984:	b943      	cbnz	r3, d5998 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5986:	68eb      	ldr	r3, [r5, #12]
   d5988:	b933      	cbnz	r3, d5998 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d598a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d598e:	692e      	ldr	r6, [r5, #16]
   d5990:	f7fe fd9e 	bl	d44d0 <inet_htonl>
   d5994:	4286      	cmp	r6, r0
   d5996:	d01f      	beq.n	d59d8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5998:	f105 0308 	add.w	r3, r5, #8
   d599c:	ae01      	add	r6, sp, #4
   d599e:	f105 0e18 	add.w	lr, r5, #24
   d59a2:	6818      	ldr	r0, [r3, #0]
   d59a4:	6859      	ldr	r1, [r3, #4]
   d59a6:	4632      	mov	r2, r6
   d59a8:	c203      	stmia	r2!, {r0, r1}
   d59aa:	3308      	adds	r3, #8
   d59ac:	4573      	cmp	r3, lr
   d59ae:	4616      	mov	r6, r2
   d59b0:	d1f7      	bne.n	d59a2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d59b2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d59b4:	a901      	add	r1, sp, #4
   d59b6:	a806      	add	r0, sp, #24
   d59b8:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d59ba:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d59be:	f7ff faf7 	bl	d4fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d59c4:	3404      	adds	r4, #4
   d59c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59c8:	6833      	ldr	r3, [r6, #0]
   d59ca:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d59cc:	b157      	cbz	r7, d59e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d59ce:	8868      	ldrh	r0, [r5, #2]
   d59d0:	f7fe fd86 	bl	d44e0 <inet_ntohs>
   d59d4:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d59d6:	e005      	b.n	d59e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d59d8:	f105 0114 	add.w	r1, r5, #20
   d59dc:	4620      	mov	r0, r4
   d59de:	f7ff fb1c 	bl	d501a <_ZN9IPAddressaSEPKh>
   d59e2:	e7f3      	b.n	d59cc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d59e4:	b00d      	add	sp, #52	; 0x34
   d59e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59e8 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d59e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59ec:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d59ee:	ab0e      	add	r3, sp, #56	; 0x38
   d59f0:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d59f2:	4606      	mov	r6, r0
   d59f4:	4617      	mov	r7, r2
   d59f6:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d59f8:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d59fc:	462a      	mov	r2, r5
   d59fe:	4629      	mov	r1, r5
   d5a00:	f7fe fd86 	bl	d4510 <netdb_getaddrinfo>
   d5a04:	2800      	cmp	r0, #0
   d5a06:	db1f      	blt.n	d5a48 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5a08:	9b01      	ldr	r3, [sp, #4]
   d5a0a:	b1fb      	cbz	r3, d5a4c <_ZN3UDP11beginPacketEPKct+0x64>
   d5a0c:	695b      	ldr	r3, [r3, #20]
   d5a0e:	b1eb      	cbz	r3, d5a4c <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5a10:	a802      	add	r0, sp, #8
   d5a12:	f7ff fabf 	bl	d4f94 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5a16:	9b01      	ldr	r3, [sp, #4]
   d5a18:	462a      	mov	r2, r5
   d5a1a:	6958      	ldr	r0, [r3, #20]
   d5a1c:	a902      	add	r1, sp, #8
   d5a1e:	f7ff ff9f 	bl	d5960 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5a22:	a802      	add	r0, sp, #8
   d5a24:	f7ff fad6 	bl	d4fd4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5a28:	b180      	cbz	r0, d5a4c <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5a2a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5a2c:	ad03      	add	r5, sp, #12
   d5a2e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5a32:	4b0b      	ldr	r3, [pc, #44]	; (d5a60 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5a34:	9308      	str	r3, [sp, #32]
   d5a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a38:	ac09      	add	r4, sp, #36	; 0x24
   d5a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a3c:	682b      	ldr	r3, [r5, #0]
   d5a3e:	7023      	strb	r3, [r4, #0]
   d5a40:	463a      	mov	r2, r7
   d5a42:	a908      	add	r1, sp, #32
   d5a44:	4630      	mov	r0, r6
   d5a46:	47c0      	blx	r8
   d5a48:	4604      	mov	r4, r0
   d5a4a:	e001      	b.n	d5a50 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5a4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5a50:	9801      	ldr	r0, [sp, #4]
   d5a52:	f7fe fd55 	bl	d4500 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d5a56:	4620      	mov	r0, r4
   d5a58:	b00e      	add	sp, #56	; 0x38
   d5a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a5e:	bf00      	nop
   d5a60:	000d664c 	.word	0x000d664c

000d5a64 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5a68:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5a6c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5a70:	b098      	sub	sp, #96	; 0x60
   d5a72:	4605      	mov	r5, r0
   d5a74:	460c      	mov	r4, r1
   d5a76:	4617      	mov	r7, r2
   d5a78:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5a7a:	db00      	blt.n	d5a7e <_ZN3UDP13receivePacketEPhjm+0x1a>
   d5a7c:	b911      	cbnz	r1, d5a84 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d5a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5a82:	e04e      	b.n	d5b22 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5a84:	f04f 0a1c 	mov.w	sl, #28
   d5a88:	ae09      	add	r6, sp, #36	; 0x24
   d5a8a:	4652      	mov	r2, sl
   d5a8c:	2100      	movs	r1, #0
   d5a8e:	4630      	mov	r0, r6
   d5a90:	f000 fd35 	bl	d64fe <memset>
        socklen_t slen = sizeof(saddr);
   d5a94:	f8cd a010 	str.w	sl, [sp, #16]
        int flags = 0;
        if (timeout == 0) {
   d5a98:	f1b9 0f00 	cmp.w	r9, #0
   d5a9c:	d014      	beq.n	d5ac8 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5aa2:	fbb9 f1f2 	udiv	r1, r9, r2
   d5aa6:	9110      	str	r1, [sp, #64]	; 0x40
            tv.tv_usec = (timeout % 1000) * 1000;
   d5aa8:	fb02 9111 	mls	r1, r2, r1, r9
   d5aac:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5aae:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5ab0:	9211      	str	r2, [sp, #68]	; 0x44
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5ab2:	9300      	str	r3, [sp, #0]
   d5ab4:	f241 0206 	movw	r2, #4102	; 0x1006
   d5ab8:	ab10      	add	r3, sp, #64	; 0x40
   d5aba:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5abe:	4640      	mov	r0, r8
   d5ac0:	f7fe fd36 	bl	d4530 <sock_setsockopt>
            if (ret) {
   d5ac4:	b108      	cbz	r0, d5aca <_ZN3UDP13receivePacketEPhjm+0x66>
   d5ac6:	e02c      	b.n	d5b22 <_ZN3UDP13receivePacketEPhjm+0xbe>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5ac8:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5aca:	ab04      	add	r3, sp, #16
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	4621      	mov	r1, r4
   d5ad0:	4603      	mov	r3, r0
   d5ad2:	9600      	str	r6, [sp, #0]
   d5ad4:	463a      	mov	r2, r7
   d5ad6:	6968      	ldr	r0, [r5, #20]
   d5ad8:	f7fe fd3a 	bl	d4550 <sock_recvfrom>
        if (ret >= 0) {
   d5adc:	1e04      	subs	r4, r0, #0
   d5ade:	db1f      	blt.n	d5b20 <_ZN3UDP13receivePacketEPhjm+0xbc>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5ae0:	f105 071c 	add.w	r7, r5, #28
   d5ae4:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5ae8:	4630      	mov	r0, r6
   d5aea:	4639      	mov	r1, r7
   d5aec:	f7ff ff38 	bl	d5960 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5af0:	2600      	movs	r6, #0
   d5af2:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d5af4:	4639      	mov	r1, r7
   d5af6:	a805      	add	r0, sp, #20
   d5af8:	9310      	str	r3, [sp, #64]	; 0x40
   d5afa:	9611      	str	r6, [sp, #68]	; 0x44
   d5afc:	f7ff fdd8 	bl	d56b0 <_ZN6StringC1ERK9Printable>
   d5b00:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   d5b02:	9303      	str	r3, [sp, #12]
   d5b04:	9b05      	ldr	r3, [sp, #20]
   d5b06:	9302      	str	r3, [sp, #8]
   d5b08:	4b07      	ldr	r3, [pc, #28]	; (d5b28 <_ZN3UDP13receivePacketEPhjm+0xc4>)
   d5b0a:	9300      	str	r3, [sp, #0]
   d5b0c:	2001      	movs	r0, #1
   d5b0e:	9401      	str	r4, [sp, #4]
   d5b10:	4633      	mov	r3, r6
   d5b12:	aa10      	add	r2, sp, #64	; 0x40
   d5b14:	4905      	ldr	r1, [pc, #20]	; (d5b2c <_ZN3UDP13receivePacketEPhjm+0xc8>)
   d5b16:	f7fe fdb3 	bl	d4680 <log_message>
   d5b1a:	a805      	add	r0, sp, #20
   d5b1c:	f7ff fd20 	bl	d5560 <_ZN6StringD1Ev>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5b20:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5b22:	b018      	add	sp, #96	; 0x60
   d5b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5b28:	000d681d 	.word	0x000d681d
   d5b2c:	000d6781 	.word	0x000d6781

000d5b30 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5b30:	b538      	push	{r3, r4, r5, lr}
   d5b32:	4605      	mov	r5, r0
   d5b34:	4614      	mov	r4, r2
   d5b36:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5b38:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5b3a:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5b3c:	d111      	bne.n	d5b62 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5b3e:	231c      	movs	r3, #28
   d5b40:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5b42:	230a      	movs	r3, #10
   d5b44:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5b46:	f7fe fcd3 	bl	d44f0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5b4a:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5b4c:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5b50:	1d2b      	adds	r3, r5, #4
   d5b52:	3514      	adds	r5, #20
   d5b54:	f853 2b04 	ldr.w	r2, [r3], #4
   d5b58:	f844 2b04 	str.w	r2, [r4], #4
   d5b5c:	42ab      	cmp	r3, r5
   d5b5e:	d1f9      	bne.n	d5b54 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5b60:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5b62:	2b04      	cmp	r3, #4
   d5b64:	d10a      	bne.n	d5b7c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5b66:	2310      	movs	r3, #16
   d5b68:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5b6a:	2302      	movs	r3, #2
   d5b6c:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5b6e:	f7fe fcbf 	bl	d44f0 <inet_htons>
   d5b72:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5b74:	6868      	ldr	r0, [r5, #4]
   d5b76:	f7fe fcab 	bl	d44d0 <inet_htonl>
   d5b7a:	6060      	str	r0, [r4, #4]
   d5b7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b80 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b84:	4698      	mov	r8, r3
   d5b86:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5b88:	2320      	movs	r3, #32
   d5b8a:	2400      	movs	r4, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5b8c:	4682      	mov	sl, r0
   d5b8e:	468b      	mov	fp, r1
   d5b90:	a804      	add	r0, sp, #16
   d5b92:	4641      	mov	r1, r8
   d5b94:	4616      	mov	r6, r2
   d5b96:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5b9a:	9308      	str	r3, [sp, #32]
   d5b9c:	9409      	str	r4, [sp, #36]	; 0x24
   d5b9e:	f7ff fd87 	bl	d56b0 <_ZN6StringC1ERK9Printable>
   d5ba2:	9b04      	ldr	r3, [sp, #16]
   d5ba4:	9302      	str	r3, [sp, #8]
   d5ba6:	ad08      	add	r5, sp, #32
   d5ba8:	4b15      	ldr	r3, [pc, #84]	; (d5c00 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x80>)
   d5baa:	4916      	ldr	r1, [pc, #88]	; (d5c04 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x84>)
   d5bac:	9300      	str	r3, [sp, #0]
   d5bae:	462a      	mov	r2, r5
   d5bb0:	4623      	mov	r3, r4
   d5bb2:	2001      	movs	r0, #1
   d5bb4:	f8cd 900c 	str.w	r9, [sp, #12]
   d5bb8:	9601      	str	r6, [sp, #4]
   d5bba:	f7fe fd61 	bl	d4680 <log_message>
	sockaddr_storage s = {};
   d5bbe:	271c      	movs	r7, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   d5bc0:	a804      	add	r0, sp, #16
   d5bc2:	f7ff fccd 	bl	d5560 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   d5bc6:	463a      	mov	r2, r7
   d5bc8:	4621      	mov	r1, r4
   d5bca:	4628      	mov	r0, r5
   d5bcc:	f000 fc97 	bl	d64fe <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5bd0:	462a      	mov	r2, r5
   d5bd2:	4649      	mov	r1, r9
   d5bd4:	4640      	mov	r0, r8
   d5bd6:	f7ff ffab 	bl	d5b30 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5bda:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d5bde:	b14b      	cbz	r3, d5bf4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5be0:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d5be4:	4623      	mov	r3, r4
   d5be6:	4632      	mov	r2, r6
   d5be8:	4659      	mov	r1, fp
   d5bea:	f8da 0014 	ldr.w	r0, [sl, #20]
   d5bee:	f7fe fcb7 	bl	d4560 <sock_sendto>
   d5bf2:	e001      	b.n	d5bf8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x78>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5bf8:	b011      	add	sp, #68	; 0x44
   d5bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bfe:	bf00      	nop
   d5c00:	000d683a 	.word	0x000d683a
   d5c04:	000d6781 	.word	0x000d6781

000d5c08 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c0a:	b091      	sub	sp, #68	; 0x44
   d5c0c:	460c      	mov	r4, r1
   d5c0e:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5c10:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5c12:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5c14:	a809      	add	r0, sp, #36	; 0x24
   d5c16:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5c18:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5c1a:	f000 fc70 	bl	d64fe <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5c1e:	aa09      	add	r2, sp, #36	; 0x24
   d5c20:	2100      	movs	r1, #0
   d5c22:	4620      	mov	r0, r4
   d5c24:	f7ff ff84 	bl	d5b30 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5c28:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5c2c:	2b02      	cmp	r3, #2
   d5c2e:	d12e      	bne.n	d5c8e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x86>
        struct ip_mreq mreq = {};
   d5c30:	2300      	movs	r3, #0
   d5c32:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5c36:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5c38:	b1dd      	cbz	r5, d5c72 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5c3a:	a902      	add	r1, sp, #8
   d5c3c:	4628      	mov	r0, r5
   d5c3e:	f7fe fc1f 	bl	d4480 <if_get_by_index>
   d5c42:	b9b0      	cbnz	r0, d5c72 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6a>
                struct if_addrs* addrs = nullptr;
   d5c44:	a910      	add	r1, sp, #64	; 0x40
   d5c46:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5c4a:	9802      	ldr	r0, [sp, #8]
   d5c4c:	f7fe fc20 	bl	d4490 <if_get_addrs>
   d5c50:	b960      	cbnz	r0, d5c6c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5c52:	9b03      	ldr	r3, [sp, #12]
   d5c54:	b153      	cbz	r3, d5c6c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5c56:	68da      	ldr	r2, [r3, #12]
   d5c58:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5c5a:	7851      	ldrb	r1, [r2, #1]
   d5c5c:	2902      	cmp	r1, #2
   d5c5e:	d103      	bne.n	d5c68 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5c60:	6852      	ldr	r2, [r2, #4]
   d5c62:	b10a      	cbz	r2, d5c68 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5c64:	9205      	str	r2, [sp, #20]
   d5c66:	e001      	b.n	d5c6c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	e7f3      	b.n	d5c54 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5c6c:	9803      	ldr	r0, [sp, #12]
   d5c6e:	f7fe fc17 	bl	d44a0 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5c72:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5c74:	f04f 0308 	mov.w	r3, #8
   d5c78:	9300      	str	r3, [sp, #0]
   d5c7a:	bf18      	it	ne
   d5c7c:	2203      	movne	r2, #3
   d5c7e:	ab04      	add	r3, sp, #16
   d5c80:	bf08      	it	eq
   d5c82:	2204      	moveq	r2, #4
   d5c84:	2100      	movs	r1, #0
   d5c86:	4630      	mov	r0, r6
   d5c88:	f7fe fc52 	bl	d4530 <sock_setsockopt>
   d5c8c:	e01e      	b.n	d5ccc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5c8e:	2b0a      	cmp	r3, #10
   d5c90:	d11a      	bne.n	d5cc8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc0>
        struct ipv6_mreq mreq = {};
   d5c92:	ac04      	add	r4, sp, #16
   d5c94:	2214      	movs	r2, #20
   d5c96:	2100      	movs	r1, #0
   d5c98:	4620      	mov	r0, r4
   d5c9a:	f000 fc30 	bl	d64fe <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5c9e:	ab0b      	add	r3, sp, #44	; 0x2c
   d5ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5ca2:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5ca8:	f04f 0314 	mov.w	r3, #20
   d5cac:	9300      	str	r3, [sp, #0]
   d5cae:	bf18      	it	ne
   d5cb0:	220c      	movne	r2, #12
   d5cb2:	4623      	mov	r3, r4
   d5cb4:	bf08      	it	eq
   d5cb6:	220d      	moveq	r2, #13
   d5cb8:	2129      	movs	r1, #41	; 0x29
   d5cba:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5cbc:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5cbe:	f7fe fc37 	bl	d4530 <sock_setsockopt>
   d5cc2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5cc6:	e001      	b.n	d5ccc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5ccc:	b011      	add	sp, #68	; 0x44
   d5cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cd0 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5cd0:	b538      	push	{r3, r4, r5, lr}
   d5cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5cd6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5cd8:	4b0b      	ldr	r3, [pc, #44]	; (d5d08 <_ZN3UDPC1Ev+0x38>)
   d5cda:	f103 0208 	add.w	r2, r3, #8
   d5cde:	336c      	adds	r3, #108	; 0x6c
   d5ce0:	2500      	movs	r5, #0
   d5ce2:	6103      	str	r3, [r0, #16]
   d5ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d5ce8:	4604      	mov	r4, r0
   d5cea:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5cec:	6002      	str	r2, [r0, #0]
   d5cee:	6143      	str	r3, [r0, #20]
   d5cf0:	301c      	adds	r0, #28
   d5cf2:	f7ff f94f 	bl	d4f94 <_ZN9IPAddressC1Ev>
   d5cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5cfa:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5cfc:	8725      	strh	r5, [r4, #56]	; 0x38
   d5cfe:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5d00:	6423      	str	r3, [r4, #64]	; 0x40
   d5d02:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5d04:	4620      	mov	r0, r4
   d5d06:	bd38      	pop	{r3, r4, r5, pc}
   d5d08:	000d6868 	.word	0x000d6868

000d5d0c <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5d0c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5d0e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5d12:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5d14:	b11b      	cbz	r3, d5d1e <_ZN3UDP13releaseBufferEv+0x12>
   d5d16:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5d18:	b108      	cbz	r0, d5d1e <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5d1a:	f7fe f9c0 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5d1e:	2300      	movs	r3, #0
   d5d20:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5d22:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5d26:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5d28:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5d2a:	8723      	strh	r3, [r4, #56]	; 0x38
   d5d2c:	bd10      	pop	{r4, pc}

000d5d2e <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5d2e:	b570      	push	{r4, r5, r6, lr}
   d5d30:	4604      	mov	r4, r0
   d5d32:	4616      	mov	r6, r2
   d5d34:	460d      	mov	r5, r1
    releaseBuffer();
   d5d36:	f7ff ffe9 	bl	d5d0c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5d3a:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5d3c:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5d3e:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5d40:	b93e      	cbnz	r6, d5d52 <_ZN3UDP9setBufferEjPh+0x24>
   d5d42:	b135      	cbz	r5, d5d52 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5d44:	4628      	mov	r0, r5
   d5d46:	f7fe f9a8 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5d4a:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5d4c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5d4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5d54:	b103      	cbz	r3, d5d58 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5d56:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5d58:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5d5a:	3000      	adds	r0, #0
   d5d5c:	bf18      	it	ne
   d5d5e:	2001      	movne	r0, #1
   d5d60:	bd70      	pop	{r4, r5, r6, pc}

000d5d62 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5d62:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d5d64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5d66:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d5d68:	b91a      	cbnz	r2, d5d72 <_ZN3UDP11parsePacketEm+0x10>
   d5d6a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5d6c:	b109      	cbz	r1, d5d72 <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d5d6e:	f7ff ffde 	bl	d5d2e <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5d72:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5d74:	2300      	movs	r3, #0
   d5d76:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5d78:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5d7a:	b141      	cbz	r1, d5d8e <_ZN3UDP11parsePacketEm+0x2c>
   d5d7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5d7e:	b132      	cbz	r2, d5d8e <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d5d80:	6820      	ldr	r0, [r4, #0]
   d5d82:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d5d84:	4620      	mov	r0, r4
   d5d86:	47a8      	blx	r5
        if (result > 0) {
   d5d88:	2800      	cmp	r0, #0
            _total = result;
   d5d8a:	bfc8      	it	gt
   d5d8c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5d8e:	6823      	ldr	r3, [r4, #0]
   d5d90:	4620      	mov	r0, r4
   d5d92:	691b      	ldr	r3, [r3, #16]
}
   d5d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5d98:	4718      	bx	r3
	...

000d5d9c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5d9e:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5da0:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5da2:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5da4:	2600      	movs	r6, #0
   d5da6:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5da8:	4617      	mov	r7, r2
   d5daa:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   d5dac:	9308      	str	r3, [sp, #32]
   d5dae:	9609      	str	r6, [sp, #36]	; 0x24
   d5db0:	f7ff fc7e 	bl	d56b0 <_ZN6StringC1ERK9Printable>
   d5db4:	9b04      	ldr	r3, [sp, #16]
   d5db6:	9301      	str	r3, [sp, #4]
   d5db8:	4b10      	ldr	r3, [pc, #64]	; (d5dfc <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   d5dba:	9300      	str	r3, [sp, #0]
   d5dbc:	aa08      	add	r2, sp, #32
   d5dbe:	4633      	mov	r3, r6
   d5dc0:	490f      	ldr	r1, [pc, #60]	; (d5e00 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   d5dc2:	9702      	str	r7, [sp, #8]
   d5dc4:	2001      	movs	r0, #1
   d5dc6:	f7fe fc5b 	bl	d4680 <log_message>
   d5dca:	a804      	add	r0, sp, #16
   d5dcc:	f7ff fbc8 	bl	d5560 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5dd0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   d5dd2:	b922      	cbnz	r2, d5dde <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   d5dd4:	6c29      	ldr	r1, [r5, #64]	; 0x40
   d5dd6:	b111      	cbz	r1, d5dde <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   d5dd8:	4628      	mov	r0, r5
   d5dda:	f7ff ffa8 	bl	d5d2e <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5dde:	3404      	adds	r4, #4
   d5de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5de2:	f105 0620 	add.w	r6, r5, #32
   d5de6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5de8:	6823      	ldr	r3, [r4, #0]
   d5dea:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5dec:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5dee:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5df0:	2300      	movs	r3, #0
   d5df2:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5df4:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5df6:	b011      	add	sp, #68	; 0x44
   d5df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5dfa:	bf00      	nop
   d5dfc:	000d6854 	.word	0x000d6854
   d5e00:	000d6781 	.word	0x000d6781

000d5e04 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5e04:	b510      	push	{r4, lr}
   d5e06:	4b07      	ldr	r3, [pc, #28]	; (d5e24 <_ZN3UDPD1Ev+0x20>)
   d5e08:	f103 0208 	add.w	r2, r3, #8
   d5e0c:	336c      	adds	r3, #108	; 0x6c
   d5e0e:	4604      	mov	r4, r0
   d5e10:	6002      	str	r2, [r0, #0]
   d5e12:	6103      	str	r3, [r0, #16]
   d5e14:	f7ff fd15 	bl	d5842 <_ZN3UDP4stopEv>
   d5e18:	4620      	mov	r0, r4
   d5e1a:	f7ff ff77 	bl	d5d0c <_ZN3UDP13releaseBufferEv>
   d5e1e:	4620      	mov	r0, r4
   d5e20:	bd10      	pop	{r4, pc}
   d5e22:	bf00      	nop
   d5e24:	000d6868 	.word	0x000d6868

000d5e28 <_ZN3UDPD0Ev>:
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	4604      	mov	r4, r0
   d5e2c:	f7ff ffea 	bl	d5e04 <_ZN3UDPD1Ev>
   d5e30:	4620      	mov	r0, r4
   d5e32:	f7fe f934 	bl	d409e <_ZdlPv>
   d5e36:	4620      	mov	r0, r4
   d5e38:	bd10      	pop	{r4, pc}

000d5e3a <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5e3a:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5e3c:	6940      	ldr	r0, [r0, #20]
   d5e3e:	2800      	cmp	r0, #0
   d5e40:	db04      	blt.n	d5e4c <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5e42:	2301      	movs	r3, #1
   d5e44:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5e48:	f7ff bede 	b.w	d5c08 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   d5e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5e50:	4770      	bx	lr

000d5e52 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5e52:	4770      	bx	lr

000d5e54 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e54:	7441      	strb	r1, [r0, #17]
   d5e56:	4770      	bx	lr

000d5e58 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5e58:	7c00      	ldrb	r0, [r0, #16]
   d5e5a:	f7fe bbd9 	b.w	d4610 <HAL_USART_Available_Data_For_Write>

000d5e5e <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5e5e:	7c00      	ldrb	r0, [r0, #16]
   d5e60:	f7fe bbae 	b.w	d45c0 <HAL_USART_Available_Data>

000d5e64 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5e64:	7c00      	ldrb	r0, [r0, #16]
   d5e66:	f7fe bbbb 	b.w	d45e0 <HAL_USART_Peek_Data>

000d5e6a <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5e6a:	7c00      	ldrb	r0, [r0, #16]
   d5e6c:	f7fe bbb0 	b.w	d45d0 <HAL_USART_Read_Data>

000d5e70 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5e70:	7c00      	ldrb	r0, [r0, #16]
   d5e72:	f7fe bbbd 	b.w	d45f0 <HAL_USART_Flush_Data>

000d5e76 <_ZN11USARTSerialD0Ev>:
   d5e76:	b510      	push	{r4, lr}
   d5e78:	4604      	mov	r4, r0
   d5e7a:	f7fe f910 	bl	d409e <_ZdlPv>
   d5e7e:	4620      	mov	r0, r4
   d5e80:	bd10      	pop	{r4, pc}

000d5e82 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5e82:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5e84:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5e86:	4604      	mov	r4, r0
   d5e88:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5e8a:	b925      	cbnz	r5, d5e96 <_ZN11USARTSerial5writeEh+0x14>
   d5e8c:	7c00      	ldrb	r0, [r0, #16]
   d5e8e:	f7fe fbbf 	bl	d4610 <HAL_USART_Available_Data_For_Write>
   d5e92:	2800      	cmp	r0, #0
   d5e94:	dd05      	ble.n	d5ea2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e96:	4631      	mov	r1, r6
   d5e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e9e:	f7fe bb87 	b.w	d45b0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5ea2:	4628      	mov	r0, r5
   d5ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ea8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5ea8:	b510      	push	{r4, lr}
   d5eaa:	4604      	mov	r4, r0
   d5eac:	4608      	mov	r0, r1
   d5eae:	4611      	mov	r1, r2
   d5eb0:	2200      	movs	r2, #0
   d5eb2:	6062      	str	r2, [r4, #4]
   d5eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5eb8:	60a2      	str	r2, [r4, #8]
   d5eba:	4a05      	ldr	r2, [pc, #20]	; (d5ed0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5ebc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5ebe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ec0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5ec2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5ec4:	461a      	mov	r2, r3
   d5ec6:	f7fe fb6b 	bl	d45a0 <HAL_USART_Init>
}
   d5eca:	4620      	mov	r0, r4
   d5ecc:	bd10      	pop	{r4, pc}
   d5ece:	bf00      	nop
   d5ed0:	000d68e0 	.word	0x000d68e0

000d5ed4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5ed4:	7c00      	ldrb	r0, [r0, #16]
   d5ed6:	f7fe bb93 	b.w	d4600 <HAL_USART_Is_Enabled>
	...

000d5edc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5edc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ede:	4d0c      	ldr	r5, [pc, #48]	; (d5f10 <_Z22__fetch_global_Serial1v+0x34>)
   d5ee0:	6829      	ldr	r1, [r5, #0]
   d5ee2:	f011 0401 	ands.w	r4, r1, #1
   d5ee6:	d111      	bne.n	d5f0c <_Z22__fetch_global_Serial1v+0x30>
   d5ee8:	4628      	mov	r0, r5
   d5eea:	f7fe f8dc 	bl	d40a6 <__cxa_guard_acquire>
   d5eee:	b168      	cbz	r0, d5f0c <_Z22__fetch_global_Serial1v+0x30>
   d5ef0:	4a08      	ldr	r2, [pc, #32]	; (d5f14 <_Z22__fetch_global_Serial1v+0x38>)
   d5ef2:	4b09      	ldr	r3, [pc, #36]	; (d5f18 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ef4:	4809      	ldr	r0, [pc, #36]	; (d5f1c <_Z22__fetch_global_Serial1v+0x40>)
   d5ef6:	4621      	mov	r1, r4
   d5ef8:	f7ff ffd6 	bl	d5ea8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5efc:	4628      	mov	r0, r5
   d5efe:	f7fe f8d7 	bl	d40b0 <__cxa_guard_release>
   d5f02:	4a07      	ldr	r2, [pc, #28]	; (d5f20 <_Z22__fetch_global_Serial1v+0x44>)
   d5f04:	4907      	ldr	r1, [pc, #28]	; (d5f24 <_Z22__fetch_global_Serial1v+0x48>)
   d5f06:	4805      	ldr	r0, [pc, #20]	; (d5f1c <_Z22__fetch_global_Serial1v+0x40>)
   d5f08:	f000 f990 	bl	d622c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5f0c:	4803      	ldr	r0, [pc, #12]	; (d5f1c <_Z22__fetch_global_Serial1v+0x40>)
   d5f0e:	bd38      	pop	{r3, r4, r5, pc}
   d5f10:	2003e670 	.word	0x2003e670
   d5f14:	2003e674 	.word	0x2003e674
   d5f18:	2003e5ec 	.word	0x2003e5ec
   d5f1c:	2003e5d8 	.word	0x2003e5d8
   d5f20:	2003e3c0 	.word	0x2003e3c0
   d5f24:	000d5e53 	.word	0x000d5e53

000d5f28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f28:	7441      	strb	r1, [r0, #17]
   d5f2a:	4770      	bx	lr

000d5f2c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f2c:	4770      	bx	lr

000d5f2e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5f2e:	2100      	movs	r1, #0
   d5f30:	7c00      	ldrb	r0, [r0, #16]
   d5f32:	f7fe bb8d 	b.w	d4650 <HAL_USB_USART_Receive_Data>

000d5f36 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5f36:	2101      	movs	r1, #1
   d5f38:	7c00      	ldrb	r0, [r0, #16]
   d5f3a:	f7fe bb89 	b.w	d4650 <HAL_USB_USART_Receive_Data>

000d5f3e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5f3e:	7c00      	ldrb	r0, [r0, #16]
   d5f40:	f7fe bb7e 	b.w	d4640 <HAL_USB_USART_Available_Data_For_Write>

000d5f44 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5f44:	7c00      	ldrb	r0, [r0, #16]
   d5f46:	f7fe bb73 	b.w	d4630 <HAL_USB_USART_Available_Data>

000d5f4a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5f4a:	b538      	push	{r3, r4, r5, lr}
   d5f4c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f4e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5f50:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f52:	f7fe fb75 	bl	d4640 <HAL_USB_USART_Available_Data_For_Write>
   d5f56:	2800      	cmp	r0, #0
   d5f58:	dc01      	bgt.n	d5f5e <_ZN9USBSerial5writeEh+0x14>
   d5f5a:	7c60      	ldrb	r0, [r4, #17]
   d5f5c:	b120      	cbz	r0, d5f68 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5f5e:	4629      	mov	r1, r5
   d5f60:	7c20      	ldrb	r0, [r4, #16]
   d5f62:	f7fe fb7d 	bl	d4660 <HAL_USB_USART_Send_Data>
    return 1;
   d5f66:	2001      	movs	r0, #1
  }
  return 0;
}
   d5f68:	bd38      	pop	{r3, r4, r5, pc}

000d5f6a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5f6a:	7c00      	ldrb	r0, [r0, #16]
   d5f6c:	f7fe bb80 	b.w	d4670 <HAL_USB_USART_Flush_Data>

000d5f70 <_ZN9USBSerialD0Ev>:
   d5f70:	b510      	push	{r4, lr}
   d5f72:	4604      	mov	r4, r0
   d5f74:	f7fe f893 	bl	d409e <_ZdlPv>
   d5f78:	4620      	mov	r0, r4
   d5f7a:	bd10      	pop	{r4, pc}

000d5f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f7c:	b510      	push	{r4, lr}
   d5f7e:	4604      	mov	r4, r0
   d5f80:	2300      	movs	r3, #0
   d5f82:	6063      	str	r3, [r4, #4]
   d5f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f88:	60a3      	str	r3, [r4, #8]
   d5f8a:	4b05      	ldr	r3, [pc, #20]	; (d5fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f8c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5f8e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f90:	4608      	mov	r0, r1
{
  _serial = serial;
   d5f92:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5f94:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5f96:	4611      	mov	r1, r2
   d5f98:	f7fe fb42 	bl	d4620 <HAL_USB_USART_Init>
}
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	bd10      	pop	{r4, pc}
   d5fa0:	000d6910 	.word	0x000d6910

000d5fa4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5fa4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5fa6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5fa8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5faa:	2100      	movs	r1, #0
   d5fac:	f000 faa7 	bl	d64fe <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	bd10      	pop	{r4, pc}

000d5fb4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5fb4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fb6:	4d0e      	ldr	r5, [pc, #56]	; (d5ff0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5fb8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5fba:	a801      	add	r0, sp, #4
   d5fbc:	f7ff fff2 	bl	d5fa4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5fc0:	6829      	ldr	r1, [r5, #0]
   d5fc2:	f011 0401 	ands.w	r4, r1, #1
   d5fc6:	d110      	bne.n	d5fea <_Z16_fetch_usbserialv+0x36>
   d5fc8:	4628      	mov	r0, r5
   d5fca:	f7fe f86c 	bl	d40a6 <__cxa_guard_acquire>
   d5fce:	b160      	cbz	r0, d5fea <_Z16_fetch_usbserialv+0x36>
   d5fd0:	aa01      	add	r2, sp, #4
   d5fd2:	4621      	mov	r1, r4
   d5fd4:	4807      	ldr	r0, [pc, #28]	; (d5ff4 <_Z16_fetch_usbserialv+0x40>)
   d5fd6:	f7ff ffd1 	bl	d5f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5fda:	4628      	mov	r0, r5
   d5fdc:	f7fe f868 	bl	d40b0 <__cxa_guard_release>
   d5fe0:	4a05      	ldr	r2, [pc, #20]	; (d5ff8 <_Z16_fetch_usbserialv+0x44>)
   d5fe2:	4906      	ldr	r1, [pc, #24]	; (d5ffc <_Z16_fetch_usbserialv+0x48>)
   d5fe4:	4803      	ldr	r0, [pc, #12]	; (d5ff4 <_Z16_fetch_usbserialv+0x40>)
   d5fe6:	f000 f921 	bl	d622c <__aeabi_atexit>
	return _usbserial;
}
   d5fea:	4802      	ldr	r0, [pc, #8]	; (d5ff4 <_Z16_fetch_usbserialv+0x40>)
   d5fec:	b007      	add	sp, #28
   d5fee:	bd30      	pop	{r4, r5, pc}
   d5ff0:	2003e6f8 	.word	0x2003e6f8
   d5ff4:	2003e6fc 	.word	0x2003e6fc
   d5ff8:	2003e3c0 	.word	0x2003e3c0
   d5ffc:	000d5f2d 	.word	0x000d5f2d

000d6000 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6000:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6002:	4b0c      	ldr	r3, [pc, #48]	; (d6034 <serialEventRun+0x34>)
   d6004:	b133      	cbz	r3, d6014 <serialEventRun+0x14>
   d6006:	f7ff ffd5 	bl	d5fb4 <_Z16_fetch_usbserialv>
   d600a:	6803      	ldr	r3, [r0, #0]
   d600c:	691b      	ldr	r3, [r3, #16]
   d600e:	4798      	blx	r3
   d6010:	2800      	cmp	r0, #0
   d6012:	dc09      	bgt.n	d6028 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6014:	4b08      	ldr	r3, [pc, #32]	; (d6038 <serialEventRun+0x38>)
   d6016:	b163      	cbz	r3, d6032 <serialEventRun+0x32>
   d6018:	f7ff ff60 	bl	d5edc <_Z22__fetch_global_Serial1v>
   d601c:	6803      	ldr	r3, [r0, #0]
   d601e:	691b      	ldr	r3, [r3, #16]
   d6020:	4798      	blx	r3
   d6022:	2800      	cmp	r0, #0
   d6024:	dc03      	bgt.n	d602e <serialEventRun+0x2e>
   d6026:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6028:	f3af 8000 	nop.w
   d602c:	e7f2      	b.n	d6014 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d602e:	f3af 8000 	nop.w
   d6032:	bd08      	pop	{r3, pc}
	...

000d603c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d603c:	b508      	push	{r3, lr}
	serialEventRun();
   d603e:	f7ff ffdf 	bl	d6000 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6042:	f7fe f995 	bl	d4370 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6046:	4b01      	ldr	r3, [pc, #4]	; (d604c <_post_loop+0x10>)
   d6048:	6018      	str	r0, [r3, #0]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	2003e714 	.word	0x2003e714

000d6050 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6050:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6052:	2300      	movs	r3, #0
   d6054:	9300      	str	r3, [sp, #0]
   d6056:	461a      	mov	r2, r3
   d6058:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d605c:	f7fe fb42 	bl	d46e4 <system_ctrl_set_result>
}
   d6060:	b003      	add	sp, #12
   d6062:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6068 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6068:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d606a:	8843      	ldrh	r3, [r0, #2]
   d606c:	2b0a      	cmp	r3, #10
   d606e:	d008      	beq.n	d6082 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6070:	2b50      	cmp	r3, #80	; 0x50
   d6072:	d109      	bne.n	d6088 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6074:	4b09      	ldr	r3, [pc, #36]	; (d609c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6076:	681b      	ldr	r3, [r3, #0]
   d6078:	b13b      	cbz	r3, d608a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d607a:	b003      	add	sp, #12
   d607c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6080:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6082:	f7ff ffe5 	bl	d6050 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6086:	e006      	b.n	d6096 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6088:	2300      	movs	r3, #0
   d608a:	9300      	str	r3, [sp, #0]
   d608c:	461a      	mov	r2, r3
   d608e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6092:	f7fe fb27 	bl	d46e4 <system_ctrl_set_result>
        break;
    }
}
   d6096:	b003      	add	sp, #12
   d6098:	f85d fb04 	ldr.w	pc, [sp], #4
   d609c:	2003e710 	.word	0x2003e710

000d60a0 <module_user_init_hook>:

void module_user_init_hook()
{
   d60a0:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d60a2:	2100      	movs	r1, #0
   d60a4:	4804      	ldr	r0, [pc, #16]	; (d60b8 <module_user_init_hook+0x18>)
   d60a6:	f7fe fb3f 	bl	d4728 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60aa:	2100      	movs	r1, #0
   d60ac:	4803      	ldr	r0, [pc, #12]	; (d60bc <module_user_init_hook+0x1c>)
}
   d60ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60b2:	f7fe bb0d 	b.w	d46d0 <system_ctrl_set_app_request_handler>
   d60b6:	bf00      	nop
   d60b8:	00000000 	.word	0x00000000
   d60bc:	000d6069 	.word	0x000d6069

000d60c0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d60c0:	b510      	push	{r4, lr}
   d60c2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d60c4:	480f      	ldr	r0, [pc, #60]	; (d6104 <pinAvailable+0x44>)
   d60c6:	f7ff fa41 	bl	d554c <_ZN8SPIClass9isEnabledEv>
   d60ca:	b128      	cbz	r0, d60d8 <pinAvailable+0x18>
   d60cc:	f1a4 030b 	sub.w	r3, r4, #11
   d60d0:	2b02      	cmp	r3, #2
   d60d2:	d801      	bhi.n	d60d8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d60d4:	2000      	movs	r0, #0
   d60d6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d60d8:	f000 f866 	bl	d61a8 <_Z19__fetch_global_Wirev>
   d60dc:	f7fe ff1c 	bl	d4f18 <_ZN7TwoWire9isEnabledEv>
   d60e0:	b108      	cbz	r0, d60e6 <pinAvailable+0x26>
   d60e2:	2c01      	cmp	r4, #1
   d60e4:	d9f6      	bls.n	d60d4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d60e6:	f7ff fef9 	bl	d5edc <_Z22__fetch_global_Serial1v>
   d60ea:	f7ff fef3 	bl	d5ed4 <_ZN11USARTSerial9isEnabledEv>
   d60ee:	b118      	cbz	r0, d60f8 <pinAvailable+0x38>
   d60f0:	f1a4 0309 	sub.w	r3, r4, #9
   d60f4:	2b01      	cmp	r3, #1
   d60f6:	d9ed      	bls.n	d60d4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d60f8:	2c1e      	cmp	r4, #30
   d60fa:	bf8c      	ite	hi
   d60fc:	2000      	movhi	r0, #0
   d60fe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6100:	bd10      	pop	{r4, pc}
   d6102:	bf00      	nop
   d6104:	2003e730 	.word	0x2003e730

000d6108 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6108:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d610a:	b538      	push	{r3, r4, r5, lr}
   d610c:	4604      	mov	r4, r0
   d610e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6110:	d80a      	bhi.n	d6128 <pinMode+0x20>
   d6112:	29ff      	cmp	r1, #255	; 0xff
   d6114:	d008      	beq.n	d6128 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6116:	f7ff ffd3 	bl	d60c0 <pinAvailable>
   d611a:	b128      	cbz	r0, d6128 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d611c:	4629      	mov	r1, r5
   d611e:	4620      	mov	r0, r4
}
   d6120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6124:	f7fe b93c 	b.w	d43a0 <HAL_Pin_Mode>
   d6128:	bd38      	pop	{r3, r4, r5, pc}

000d612a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d612a:	b538      	push	{r3, r4, r5, lr}
   d612c:	4604      	mov	r4, r0
   d612e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6130:	f7fe f93e 	bl	d43b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6134:	28ff      	cmp	r0, #255	; 0xff
   d6136:	d010      	beq.n	d615a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6138:	2806      	cmp	r0, #6
   d613a:	d804      	bhi.n	d6146 <digitalWrite+0x1c>
   d613c:	234d      	movs	r3, #77	; 0x4d
   d613e:	fa23 f000 	lsr.w	r0, r3, r0
   d6142:	07c3      	lsls	r3, r0, #31
   d6144:	d409      	bmi.n	d615a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6146:	4620      	mov	r0, r4
   d6148:	f7ff ffba 	bl	d60c0 <pinAvailable>
   d614c:	b128      	cbz	r0, d615a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d614e:	4629      	mov	r1, r5
   d6150:	4620      	mov	r0, r4
}
   d6152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6156:	f7fe b933 	b.w	d43c0 <HAL_GPIO_Write>
   d615a:	bd38      	pop	{r3, r4, r5, pc}

000d615c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d615c:	b538      	push	{r3, r4, r5, lr}
   d615e:	4604      	mov	r4, r0
   d6160:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6162:	f7ff ffad 	bl	d60c0 <pinAvailable>
   d6166:	b1f0      	cbz	r0, d61a6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6168:	2104      	movs	r1, #4
   d616a:	4620      	mov	r0, r4
   d616c:	f7fe f910 	bl	d4390 <HAL_Validate_Pin_Function>
   d6170:	2804      	cmp	r0, #4
   d6172:	d105      	bne.n	d6180 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6174:	b2a9      	uxth	r1, r5
   d6176:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d617c:	f7fe b928 	b.w	d43d0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6180:	2102      	movs	r1, #2
   d6182:	4620      	mov	r0, r4
   d6184:	f7fe f904 	bl	d4390 <HAL_Validate_Pin_Function>
   d6188:	2802      	cmp	r0, #2
   d618a:	d10c      	bne.n	d61a6 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d618c:	4620      	mov	r0, r4
   d618e:	f7fe f90f 	bl	d43b0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6192:	2801      	cmp	r0, #1
   d6194:	d001      	beq.n	d619a <_Z11analogWritetm+0x3e>
   d6196:	2804      	cmp	r0, #4
   d6198:	d105      	bne.n	d61a6 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d619a:	4629      	mov	r1, r5
   d619c:	4620      	mov	r0, r4
    }
}
   d619e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d61a2:	f7fe b91d 	b.w	d43e0 <HAL_PWM_Write_Ext>
   d61a6:	bd38      	pop	{r3, r4, r5, pc}

000d61a8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d61a8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d61aa:	4d0b      	ldr	r5, [pc, #44]	; (d61d8 <_Z19__fetch_global_Wirev+0x30>)
   d61ac:	6829      	ldr	r1, [r5, #0]
   d61ae:	f011 0401 	ands.w	r4, r1, #1
   d61b2:	d10f      	bne.n	d61d4 <_Z19__fetch_global_Wirev+0x2c>
   d61b4:	4628      	mov	r0, r5
   d61b6:	f7fd ff76 	bl	d40a6 <__cxa_guard_acquire>
   d61ba:	b158      	cbz	r0, d61d4 <_Z19__fetch_global_Wirev+0x2c>
   d61bc:	4621      	mov	r1, r4
   d61be:	4807      	ldr	r0, [pc, #28]	; (d61dc <_Z19__fetch_global_Wirev+0x34>)
   d61c0:	f7fe fe98 	bl	d4ef4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d61c4:	4628      	mov	r0, r5
   d61c6:	f7fd ff73 	bl	d40b0 <__cxa_guard_release>
   d61ca:	4a05      	ldr	r2, [pc, #20]	; (d61e0 <_Z19__fetch_global_Wirev+0x38>)
   d61cc:	4905      	ldr	r1, [pc, #20]	; (d61e4 <_Z19__fetch_global_Wirev+0x3c>)
   d61ce:	4803      	ldr	r0, [pc, #12]	; (d61dc <_Z19__fetch_global_Wirev+0x34>)
   d61d0:	f000 f82c 	bl	d622c <__aeabi_atexit>
	return wire;
}
   d61d4:	4801      	ldr	r0, [pc, #4]	; (d61dc <_Z19__fetch_global_Wirev+0x34>)
   d61d6:	bd38      	pop	{r3, r4, r5, pc}
   d61d8:	2003e718 	.word	0x2003e718
   d61dc:	2003e71c 	.word	0x2003e71c
   d61e0:	2003e3c0 	.word	0x2003e3c0
   d61e4:	000d4e9d 	.word	0x000d4e9d

000d61e8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61e8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d61ea:	4c0c      	ldr	r4, [pc, #48]	; (d621c <_GLOBAL__sub_I_SPI+0x34>)
   d61ec:	4e0c      	ldr	r6, [pc, #48]	; (d6220 <_GLOBAL__sub_I_SPI+0x38>)
   d61ee:	4d0d      	ldr	r5, [pc, #52]	; (d6224 <_GLOBAL__sub_I_SPI+0x3c>)
   d61f0:	2100      	movs	r1, #0
   d61f2:	4620      	mov	r0, r4
   d61f4:	f7ff f996 	bl	d5524 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61f8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61fa:	4c0b      	ldr	r4, [pc, #44]	; (d6228 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d61fc:	4632      	mov	r2, r6
   d61fe:	4629      	mov	r1, r5
   d6200:	f000 f814 	bl	d622c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6204:	2101      	movs	r1, #1
   d6206:	4620      	mov	r0, r4
   d6208:	f7ff f98c 	bl	d5524 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d620c:	4632      	mov	r2, r6
   d620e:	4629      	mov	r1, r5
   d6210:	4620      	mov	r0, r4
   d6212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6216:	f000 b809 	b.w	d622c <__aeabi_atexit>
   d621a:	bf00      	nop
   d621c:	2003e730 	.word	0x2003e730
   d6220:	2003e3c0 	.word	0x2003e3c0
   d6224:	000d5515 	.word	0x000d5515
   d6228:	2003e740 	.word	0x2003e740

000d622c <__aeabi_atexit>:
   d622c:	460b      	mov	r3, r1
   d622e:	4601      	mov	r1, r0
   d6230:	4618      	mov	r0, r3
   d6232:	f000 b94b 	b.w	d64cc <__cxa_atexit>

000d6236 <_ZSt25__throw_bad_function_callv>:
   d6236:	b508      	push	{r3, lr}
   d6238:	f7fe fae6 	bl	d4808 <abort>

000d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d623c:	4b24      	ldr	r3, [pc, #144]	; (d62d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d623e:	681a      	ldr	r2, [r3, #0]
   d6240:	07d0      	lsls	r0, r2, #31
   d6242:	bf5c      	itt	pl
   d6244:	2201      	movpl	r2, #1
   d6246:	601a      	strpl	r2, [r3, #0]
   d6248:	4b22      	ldr	r3, [pc, #136]	; (d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d624a:	681a      	ldr	r2, [r3, #0]
   d624c:	07d1      	lsls	r1, r2, #31
   d624e:	bf5c      	itt	pl
   d6250:	2201      	movpl	r2, #1
   d6252:	601a      	strpl	r2, [r3, #0]
   d6254:	4b20      	ldr	r3, [pc, #128]	; (d62d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6256:	681a      	ldr	r2, [r3, #0]
   d6258:	07d2      	lsls	r2, r2, #31
   d625a:	bf5c      	itt	pl
   d625c:	2201      	movpl	r2, #1
   d625e:	601a      	strpl	r2, [r3, #0]
   d6260:	4b1e      	ldr	r3, [pc, #120]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6262:	681a      	ldr	r2, [r3, #0]
   d6264:	07d0      	lsls	r0, r2, #31
   d6266:	bf5c      	itt	pl
   d6268:	2201      	movpl	r2, #1
   d626a:	601a      	strpl	r2, [r3, #0]
   d626c:	4b1c      	ldr	r3, [pc, #112]	; (d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d626e:	681a      	ldr	r2, [r3, #0]
   d6270:	07d1      	lsls	r1, r2, #31
   d6272:	bf5c      	itt	pl
   d6274:	2201      	movpl	r2, #1
   d6276:	601a      	strpl	r2, [r3, #0]
   d6278:	4b1a      	ldr	r3, [pc, #104]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d627a:	681a      	ldr	r2, [r3, #0]
   d627c:	07d2      	lsls	r2, r2, #31
   d627e:	bf5c      	itt	pl
   d6280:	2201      	movpl	r2, #1
   d6282:	601a      	strpl	r2, [r3, #0]
   d6284:	4b18      	ldr	r3, [pc, #96]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6286:	681a      	ldr	r2, [r3, #0]
   d6288:	07d0      	lsls	r0, r2, #31
   d628a:	bf5c      	itt	pl
   d628c:	2201      	movpl	r2, #1
   d628e:	601a      	strpl	r2, [r3, #0]
   d6290:	4b16      	ldr	r3, [pc, #88]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6292:	681a      	ldr	r2, [r3, #0]
   d6294:	07d1      	lsls	r1, r2, #31
   d6296:	bf5c      	itt	pl
   d6298:	2201      	movpl	r2, #1
   d629a:	601a      	strpl	r2, [r3, #0]
   d629c:	4b14      	ldr	r3, [pc, #80]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d629e:	681a      	ldr	r2, [r3, #0]
   d62a0:	07d2      	lsls	r2, r2, #31
   d62a2:	bf5c      	itt	pl
   d62a4:	2201      	movpl	r2, #1
   d62a6:	601a      	strpl	r2, [r3, #0]
   d62a8:	4b12      	ldr	r3, [pc, #72]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d62aa:	681a      	ldr	r2, [r3, #0]
   d62ac:	07d0      	lsls	r0, r2, #31
   d62ae:	bf5c      	itt	pl
   d62b0:	2201      	movpl	r2, #1
   d62b2:	601a      	strpl	r2, [r3, #0]
   d62b4:	4b10      	ldr	r3, [pc, #64]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d62b6:	681a      	ldr	r2, [r3, #0]
   d62b8:	07d1      	lsls	r1, r2, #31
   d62ba:	bf5c      	itt	pl
   d62bc:	2201      	movpl	r2, #1
   d62be:	601a      	strpl	r2, [r3, #0]
   d62c0:	4b0e      	ldr	r3, [pc, #56]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62c2:	681a      	ldr	r2, [r3, #0]
   d62c4:	07d2      	lsls	r2, r2, #31
   d62c6:	bf5c      	itt	pl
   d62c8:	2201      	movpl	r2, #1
   d62ca:	601a      	strpl	r2, [r3, #0]
   d62cc:	4770      	bx	lr
   d62ce:	bf00      	nop
   d62d0:	2003e77c 	.word	0x2003e77c
   d62d4:	2003e778 	.word	0x2003e778
   d62d8:	2003e774 	.word	0x2003e774
   d62dc:	2003e770 	.word	0x2003e770
   d62e0:	2003e76c 	.word	0x2003e76c
   d62e4:	2003e768 	.word	0x2003e768
   d62e8:	2003e764 	.word	0x2003e764
   d62ec:	2003e760 	.word	0x2003e760
   d62f0:	2003e75c 	.word	0x2003e75c
   d62f4:	2003e758 	.word	0x2003e758
   d62f8:	2003e754 	.word	0x2003e754
   d62fc:	2003e750 	.word	0x2003e750

000d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6300:	4b18      	ldr	r3, [pc, #96]	; (d6364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6302:	681a      	ldr	r2, [r3, #0]
   d6304:	07d1      	lsls	r1, r2, #31
   d6306:	bf5c      	itt	pl
   d6308:	2201      	movpl	r2, #1
   d630a:	601a      	strpl	r2, [r3, #0]
   d630c:	4b16      	ldr	r3, [pc, #88]	; (d6368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d630e:	681a      	ldr	r2, [r3, #0]
   d6310:	07d2      	lsls	r2, r2, #31
   d6312:	bf5c      	itt	pl
   d6314:	2201      	movpl	r2, #1
   d6316:	601a      	strpl	r2, [r3, #0]
   d6318:	4b14      	ldr	r3, [pc, #80]	; (d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d0      	lsls	r0, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b12      	ldr	r3, [pc, #72]	; (d6370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d1      	lsls	r1, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4b10      	ldr	r3, [pc, #64]	; (d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6332:	681a      	ldr	r2, [r3, #0]
   d6334:	07d2      	lsls	r2, r2, #31
   d6336:	bf5c      	itt	pl
   d6338:	2201      	movpl	r2, #1
   d633a:	601a      	strpl	r2, [r3, #0]
   d633c:	4b0e      	ldr	r3, [pc, #56]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	07d0      	lsls	r0, r2, #31
   d6342:	bf5c      	itt	pl
   d6344:	2201      	movpl	r2, #1
   d6346:	601a      	strpl	r2, [r3, #0]
   d6348:	4b0c      	ldr	r3, [pc, #48]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d634a:	681a      	ldr	r2, [r3, #0]
   d634c:	07d1      	lsls	r1, r2, #31
   d634e:	bf5c      	itt	pl
   d6350:	2201      	movpl	r2, #1
   d6352:	601a      	strpl	r2, [r3, #0]
   d6354:	4b0a      	ldr	r3, [pc, #40]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6356:	681a      	ldr	r2, [r3, #0]
   d6358:	07d2      	lsls	r2, r2, #31
   d635a:	bf5c      	itt	pl
   d635c:	2201      	movpl	r2, #1
   d635e:	601a      	strpl	r2, [r3, #0]
   d6360:	4770      	bx	lr
   d6362:	bf00      	nop
   d6364:	2003e79c 	.word	0x2003e79c
   d6368:	2003e798 	.word	0x2003e798
   d636c:	2003e794 	.word	0x2003e794
   d6370:	2003e790 	.word	0x2003e790
   d6374:	2003e78c 	.word	0x2003e78c
   d6378:	2003e788 	.word	0x2003e788
   d637c:	2003e784 	.word	0x2003e784
   d6380:	2003e780 	.word	0x2003e780

000d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6384:	4b18      	ldr	r3, [pc, #96]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6386:	681a      	ldr	r2, [r3, #0]
   d6388:	07d1      	lsls	r1, r2, #31
   d638a:	bf5c      	itt	pl
   d638c:	2201      	movpl	r2, #1
   d638e:	601a      	strpl	r2, [r3, #0]
   d6390:	4b16      	ldr	r3, [pc, #88]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6392:	681a      	ldr	r2, [r3, #0]
   d6394:	07d2      	lsls	r2, r2, #31
   d6396:	bf5c      	itt	pl
   d6398:	2201      	movpl	r2, #1
   d639a:	601a      	strpl	r2, [r3, #0]
   d639c:	4b14      	ldr	r3, [pc, #80]	; (d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d639e:	681a      	ldr	r2, [r3, #0]
   d63a0:	07d0      	lsls	r0, r2, #31
   d63a2:	bf5c      	itt	pl
   d63a4:	2201      	movpl	r2, #1
   d63a6:	601a      	strpl	r2, [r3, #0]
   d63a8:	4b12      	ldr	r3, [pc, #72]	; (d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	07d1      	lsls	r1, r2, #31
   d63ae:	bf5c      	itt	pl
   d63b0:	2201      	movpl	r2, #1
   d63b2:	601a      	strpl	r2, [r3, #0]
   d63b4:	4b10      	ldr	r3, [pc, #64]	; (d63f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63b6:	681a      	ldr	r2, [r3, #0]
   d63b8:	07d2      	lsls	r2, r2, #31
   d63ba:	bf5c      	itt	pl
   d63bc:	2201      	movpl	r2, #1
   d63be:	601a      	strpl	r2, [r3, #0]
   d63c0:	4b0e      	ldr	r3, [pc, #56]	; (d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	07d0      	lsls	r0, r2, #31
   d63c6:	bf5c      	itt	pl
   d63c8:	2201      	movpl	r2, #1
   d63ca:	601a      	strpl	r2, [r3, #0]
   d63cc:	4b0c      	ldr	r3, [pc, #48]	; (d6400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	07d1      	lsls	r1, r2, #31
   d63d2:	bf5c      	itt	pl
   d63d4:	2201      	movpl	r2, #1
   d63d6:	601a      	strpl	r2, [r3, #0]
   d63d8:	4b0a      	ldr	r3, [pc, #40]	; (d6404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63da:	681a      	ldr	r2, [r3, #0]
   d63dc:	07d2      	lsls	r2, r2, #31
   d63de:	bf5c      	itt	pl
   d63e0:	2201      	movpl	r2, #1
   d63e2:	601a      	strpl	r2, [r3, #0]
   d63e4:	4770      	bx	lr
   d63e6:	bf00      	nop
   d63e8:	2003e7bc 	.word	0x2003e7bc
   d63ec:	2003e7b8 	.word	0x2003e7b8
   d63f0:	2003e7b4 	.word	0x2003e7b4
   d63f4:	2003e7b0 	.word	0x2003e7b0
   d63f8:	2003e7ac 	.word	0x2003e7ac
   d63fc:	2003e7a8 	.word	0x2003e7a8
   d6400:	2003e7a4 	.word	0x2003e7a4
   d6404:	2003e7a0 	.word	0x2003e7a0

000d6408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6408:	4b24      	ldr	r3, [pc, #144]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d640a:	681a      	ldr	r2, [r3, #0]
   d640c:	07d0      	lsls	r0, r2, #31
   d640e:	bf5c      	itt	pl
   d6410:	2201      	movpl	r2, #1
   d6412:	601a      	strpl	r2, [r3, #0]
   d6414:	4b22      	ldr	r3, [pc, #136]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d1      	lsls	r1, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b20      	ldr	r3, [pc, #128]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d2      	lsls	r2, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b1e      	ldr	r3, [pc, #120]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d0      	lsls	r0, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b1c      	ldr	r3, [pc, #112]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d1      	lsls	r1, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b1a      	ldr	r3, [pc, #104]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d2      	lsls	r2, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b18      	ldr	r3, [pc, #96]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d0      	lsls	r0, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b16      	ldr	r3, [pc, #88]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d1      	lsls	r1, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b14      	ldr	r3, [pc, #80]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d2      	lsls	r2, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b12      	ldr	r3, [pc, #72]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d0      	lsls	r0, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4b10      	ldr	r3, [pc, #64]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6482:	681a      	ldr	r2, [r3, #0]
   d6484:	07d1      	lsls	r1, r2, #31
   d6486:	bf5c      	itt	pl
   d6488:	2201      	movpl	r2, #1
   d648a:	601a      	strpl	r2, [r3, #0]
   d648c:	4b0e      	ldr	r3, [pc, #56]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d648e:	681a      	ldr	r2, [r3, #0]
   d6490:	07d2      	lsls	r2, r2, #31
   d6492:	bf5c      	itt	pl
   d6494:	2201      	movpl	r2, #1
   d6496:	601a      	strpl	r2, [r3, #0]
   d6498:	4770      	bx	lr
   d649a:	bf00      	nop
   d649c:	2003e7ec 	.word	0x2003e7ec
   d64a0:	2003e7e8 	.word	0x2003e7e8
   d64a4:	2003e7e4 	.word	0x2003e7e4
   d64a8:	2003e7e0 	.word	0x2003e7e0
   d64ac:	2003e7dc 	.word	0x2003e7dc
   d64b0:	2003e7d8 	.word	0x2003e7d8
   d64b4:	2003e7d4 	.word	0x2003e7d4
   d64b8:	2003e7d0 	.word	0x2003e7d0
   d64bc:	2003e7cc 	.word	0x2003e7cc
   d64c0:	2003e7c8 	.word	0x2003e7c8
   d64c4:	2003e7c4 	.word	0x2003e7c4
   d64c8:	2003e7c0 	.word	0x2003e7c0

000d64cc <__cxa_atexit>:
   d64cc:	b510      	push	{r4, lr}
   d64ce:	4c05      	ldr	r4, [pc, #20]	; (d64e4 <__cxa_atexit+0x18>)
   d64d0:	4613      	mov	r3, r2
   d64d2:	b12c      	cbz	r4, d64e0 <__cxa_atexit+0x14>
   d64d4:	460a      	mov	r2, r1
   d64d6:	4601      	mov	r1, r0
   d64d8:	2002      	movs	r0, #2
   d64da:	f3af 8000 	nop.w
   d64de:	bd10      	pop	{r4, pc}
   d64e0:	4620      	mov	r0, r4
   d64e2:	bd10      	pop	{r4, pc}
   d64e4:	00000000 	.word	0x00000000

000d64e8 <memcpy>:
   d64e8:	b510      	push	{r4, lr}
   d64ea:	1e43      	subs	r3, r0, #1
   d64ec:	440a      	add	r2, r1
   d64ee:	4291      	cmp	r1, r2
   d64f0:	d004      	beq.n	d64fc <memcpy+0x14>
   d64f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d64f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d64fa:	e7f8      	b.n	d64ee <memcpy+0x6>
   d64fc:	bd10      	pop	{r4, pc}

000d64fe <memset>:
   d64fe:	4402      	add	r2, r0
   d6500:	4603      	mov	r3, r0
   d6502:	4293      	cmp	r3, r2
   d6504:	d002      	beq.n	d650c <memset+0xe>
   d6506:	f803 1b01 	strb.w	r1, [r3], #1
   d650a:	e7fa      	b.n	d6502 <memset+0x4>
   d650c:	4770      	bx	lr

000d650e <strcpy>:
   d650e:	4603      	mov	r3, r0
   d6510:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6514:	f803 2b01 	strb.w	r2, [r3], #1
   d6518:	2a00      	cmp	r2, #0
   d651a:	d1f9      	bne.n	d6510 <strcpy+0x2>
   d651c:	4770      	bx	lr
	...

000d6520 <strdup>:
   d6520:	4b02      	ldr	r3, [pc, #8]	; (d652c <strdup+0xc>)
   d6522:	4601      	mov	r1, r0
   d6524:	6818      	ldr	r0, [r3, #0]
   d6526:	f000 b803 	b.w	d6530 <_strdup_r>
   d652a:	bf00      	nop
   d652c:	2003e3bc 	.word	0x2003e3bc

000d6530 <_strdup_r>:
   d6530:	b570      	push	{r4, r5, r6, lr}
   d6532:	4606      	mov	r6, r0
   d6534:	4608      	mov	r0, r1
   d6536:	460c      	mov	r4, r1
   d6538:	f000 f80d 	bl	d6556 <strlen>
   d653c:	1c45      	adds	r5, r0, #1
   d653e:	4629      	mov	r1, r5
   d6540:	4630      	mov	r0, r6
   d6542:	f7fe f969 	bl	d4818 <_malloc_r>
   d6546:	4606      	mov	r6, r0
   d6548:	b118      	cbz	r0, d6552 <_strdup_r+0x22>
   d654a:	462a      	mov	r2, r5
   d654c:	4621      	mov	r1, r4
   d654e:	f7ff ffcb 	bl	d64e8 <memcpy>
   d6552:	4630      	mov	r0, r6
   d6554:	bd70      	pop	{r4, r5, r6, pc}

000d6556 <strlen>:
   d6556:	4603      	mov	r3, r0
   d6558:	f813 2b01 	ldrb.w	r2, [r3], #1
   d655c:	2a00      	cmp	r2, #0
   d655e:	d1fb      	bne.n	d6558 <strlen+0x2>
   d6560:	1a18      	subs	r0, r3, r0
   d6562:	3801      	subs	r0, #1
   d6564:	4770      	bx	lr

000d6566 <link_code_end>:
	...

000d6568 <dynalib_user>:
   d6568:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6578:	0000 0000 7773 7261 2d6d 656c 6461 7265     ....swarm-leader
   d6588:	6f2d 6c6e 6e69 0065 7766 762d 7265 6973     -online.fw-versi
   d6598:	6e6f 6600 726f 6177 6472 6200 6361 006b     on.forward.back.
   d65a8:	7473 706f 6100 6c6c 664f 0066 6f67 6f46     stop.allOff.goFo
   d65b8:	7772 7261 0064 6f67 6142 6b63 7600 2e30     rward.goBack.v0.
   d65c8:	0038 0000                                   8...

000d65cc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d65d4:	4855 000d 485b 000d 4883 000d 4867 000d     UH..[H...H..gH..
   d65e4:	4857 000d                                   WH..

000d65e8 <_ZTVN5spark13EthernetClassE>:
	...
   d65f0:	4e7f 000d 4e75 000d 4e6b 000d 4e61 000d     .N..uN..kN..aN..
   d6600:	4e55 000d 4e49 000d 4e3d 000d 4e35 000d     UN..IN..=N..5N..
   d6610:	4e2b 000d 4e21 000d 53a5 000d               +N..!N...S..

000d661c <_ZTV7TwoWire>:
	...
   d6624:	4e9d 000d 4ee7 000d 4ebf 000d 4e9f 000d     .N...N...N...N..
   d6634:	4ec7 000d 4ecf 000d 4ed7 000d 4edf 000d     .N...N...N...N..

000d6644 <_ZTV9IPAddress>:
	...
   d664c:	4f2f 000d 4f21 000d 4f23 000d 6e6c 6600     /O..!O..#O..ln.f
   d665c:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d666c:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   d667c:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   d668c:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   d669c:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d66ac:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d66bc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d66cc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d66dc:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d66ec:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d66fc:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d670c:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   d671c:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d672c:	696e 0063 6c61 006c                         nic.all.

000d6734 <_ZTVN5spark9MeshClassE>:
	...
   d673c:	509f 000d 5095 000d 508b 000d 5081 000d     .P...P...P...P..
   d674c:	5075 000d 5069 000d 505d 000d 5055 000d     uP..iP..]P..UP..
   d675c:	504b 000d 5041 000d 53a5 000d 6666 3330     KP..AP...S..ff03
   d676c:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d677c:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d678c:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d6798 <_ZTVN5spark12NetworkClassE>:
	...
   d67a0:	533d 000d 5347 000d 5351 000d 535b 000d     =S..GS..QS..[S..
   d67b0:	5365 000d 5371 000d 537d 000d 5389 000d     eS..qS..}S...S..
   d67c0:	5391 000d 539b 000d 53a5 000d               .S...S...S..

000d67cc <_ZTV8SPIClass>:
	...
   d67d4:	5515 000d 5517 000d                         .U...U..

000d67dc <_ZTV21StringPrintableHelper>:
	...
   d67e4:	5553 000d 5555 000d 56a5 000d 5677 000d     SU..UU...V..wV..
   d67f4:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   d6804:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   d6814:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   d6824:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   d6834:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   d6844:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   d6854:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   d6864:	6425 0000                                   %d..

000d6868 <_ZTV3UDP>:
	...
   d6870:	5e05 000d 5e29 000d 5735 000d 585f 000d     .^..)^..5W.._X..
   d6880:	572d 000d 574b 000d 5769 000d 5783 000d     -W..KW..iW...W..
   d6890:	57a7 000d 5843 000d 5b81 000d 58e5 000d     .W..CX...[...X..
   d68a0:	5a65 000d 5715 000d 5d9d 000d 59e9 000d     eZ...W...]...Y..
   d68b0:	591d 000d 5d63 000d 5889 000d 5723 000d     .Y..c]...X..#W..
   d68c0:	58c5 000d 5729 000d 5785 000d fff0 ffff     .X..)W...W......
   d68d0:	0000 0000 579f 000d                         .....W..

000d68d8 <_ZTV11USARTSerial>:
	...
   d68e0:	5e53 000d 5e77 000d 5e83 000d 543d 000d     S^..w^...^..=T..
   d68f0:	5e5f 000d 5e6b 000d 5e65 000d 5e71 000d     _^..k^..e^..q^..
   d6900:	5e55 000d 5e59 000d                         U^..Y^..

000d6908 <_ZTV9USBSerial>:
	...
   d6910:	5f2d 000d 5f71 000d 5f4b 000d 543d 000d     -_..q_..K_..=T..
   d6920:	5f45 000d 5f2f 000d 5f37 000d 5f6b 000d     E_../_..7_..k_..
   d6930:	5f3f 000d 5f29 000d                         ?_..)_..

000d6938 <__sf_fake_stdin>:
	...

000d6958 <__sf_fake_stdout>:
	...

000d6978 <__sf_fake_stderr>:
	...
   d6998:	0043                                        C.

000d699a <link_const_variable_data_end>:
	...

000d699c <link_constructors_location>:
   d699c:	000d42c9 	.word	0x000d42c9
   d69a0:	000d4e89 	.word	0x000d4e89
   d69a4:	000d5031 	.word	0x000d5031
   d69a8:	000d52f1 	.word	0x000d52f1
   d69ac:	000d5429 	.word	0x000d5429
   d69b0:	000d54f9 	.word	0x000d54f9
   d69b4:	000d56e5 	.word	0x000d56e5
   d69b8:	000d5701 	.word	0x000d5701
   d69bc:	000d61e9 	.word	0x000d61e9
   d69c0:	000d623d 	.word	0x000d623d
   d69c4:	000d6301 	.word	0x000d6301
   d69c8:	000d6385 	.word	0x000d6385
   d69cc:	000d6409 	.word	0x000d6409
